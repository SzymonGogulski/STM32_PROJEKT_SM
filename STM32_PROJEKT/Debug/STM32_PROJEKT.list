
STM32_PROJEKT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e810  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  0800e9e0  0800e9e0  0001e9e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee94  0800ee94  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ee94  0800ee94  0001ee94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ee9c  0800ee9c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee9c  0800ee9c  0001ee9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eea0  0800eea0  0001eea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800eea4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000564  200001d4  0800f078  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000738  0800f078  00020738  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      000000bc  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a091  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d9a  00000000  00000000  0003a351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001470  00000000  00000000  0003e0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fb6  00000000  00000000  0003f560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a169  00000000  00000000  00040516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d6d5  00000000  00000000  0006a67f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc976  00000000  00000000  00087d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006b00  00000000  00000000  001846cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0018b1cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00000010  00000000  00000000  0018b22f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e9c8 	.word	0x0800e9c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	0800e9c8 	.word	0x0800e9c8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9f1 	b.w	80010cc <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9a6 	b.w	80010cc <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9e08      	ldr	r6, [sp, #32]
 8000e0a:	460d      	mov	r5, r1
 8000e0c:	4604      	mov	r4, r0
 8000e0e:	460f      	mov	r7, r1
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d14a      	bne.n	8000eaa <__udivmoddi4+0xa6>
 8000e14:	428a      	cmp	r2, r1
 8000e16:	4694      	mov	ip, r2
 8000e18:	d965      	bls.n	8000ee6 <__udivmoddi4+0xe2>
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	b143      	cbz	r3, 8000e32 <__udivmoddi4+0x2e>
 8000e20:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e24:	f1c3 0220 	rsb	r2, r3, #32
 8000e28:	409f      	lsls	r7, r3
 8000e2a:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2e:	4317      	orrs	r7, r2
 8000e30:	409c      	lsls	r4, r3
 8000e32:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e36:	fa1f f58c 	uxth.w	r5, ip
 8000e3a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e3e:	0c22      	lsrs	r2, r4, #16
 8000e40:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e44:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e48:	fb01 f005 	mul.w	r0, r1, r5
 8000e4c:	4290      	cmp	r0, r2
 8000e4e:	d90a      	bls.n	8000e66 <__udivmoddi4+0x62>
 8000e50:	eb1c 0202 	adds.w	r2, ip, r2
 8000e54:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e58:	f080 811c 	bcs.w	8001094 <__udivmoddi4+0x290>
 8000e5c:	4290      	cmp	r0, r2
 8000e5e:	f240 8119 	bls.w	8001094 <__udivmoddi4+0x290>
 8000e62:	3902      	subs	r1, #2
 8000e64:	4462      	add	r2, ip
 8000e66:	1a12      	subs	r2, r2, r0
 8000e68:	b2a4      	uxth	r4, r4
 8000e6a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e6e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e72:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e76:	fb00 f505 	mul.w	r5, r0, r5
 8000e7a:	42a5      	cmp	r5, r4
 8000e7c:	d90a      	bls.n	8000e94 <__udivmoddi4+0x90>
 8000e7e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e82:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e86:	f080 8107 	bcs.w	8001098 <__udivmoddi4+0x294>
 8000e8a:	42a5      	cmp	r5, r4
 8000e8c:	f240 8104 	bls.w	8001098 <__udivmoddi4+0x294>
 8000e90:	4464      	add	r4, ip
 8000e92:	3802      	subs	r0, #2
 8000e94:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e98:	1b64      	subs	r4, r4, r5
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	b11e      	cbz	r6, 8000ea6 <__udivmoddi4+0xa2>
 8000e9e:	40dc      	lsrs	r4, r3
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0xbc>
 8000eae:	2e00      	cmp	r6, #0
 8000eb0:	f000 80ed 	beq.w	800108e <__udivmoddi4+0x28a>
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	e9c6 0500 	strd	r0, r5, [r6]
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec0:	fab3 f183 	clz	r1, r3
 8000ec4:	2900      	cmp	r1, #0
 8000ec6:	d149      	bne.n	8000f5c <__udivmoddi4+0x158>
 8000ec8:	42ab      	cmp	r3, r5
 8000eca:	d302      	bcc.n	8000ed2 <__udivmoddi4+0xce>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	f200 80f8 	bhi.w	80010c2 <__udivmoddi4+0x2be>
 8000ed2:	1a84      	subs	r4, r0, r2
 8000ed4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ed8:	2001      	movs	r0, #1
 8000eda:	4617      	mov	r7, r2
 8000edc:	2e00      	cmp	r6, #0
 8000ede:	d0e2      	beq.n	8000ea6 <__udivmoddi4+0xa2>
 8000ee0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ee4:	e7df      	b.n	8000ea6 <__udivmoddi4+0xa2>
 8000ee6:	b902      	cbnz	r2, 8000eea <__udivmoddi4+0xe6>
 8000ee8:	deff      	udf	#255	; 0xff
 8000eea:	fab2 f382 	clz	r3, r2
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f040 8090 	bne.w	8001014 <__udivmoddi4+0x210>
 8000ef4:	1a8a      	subs	r2, r1, r2
 8000ef6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000efa:	fa1f fe8c 	uxth.w	lr, ip
 8000efe:	2101      	movs	r1, #1
 8000f00:	fbb2 f5f7 	udiv	r5, r2, r7
 8000f04:	fb07 2015 	mls	r0, r7, r5, r2
 8000f08:	0c22      	lsrs	r2, r4, #16
 8000f0a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f0e:	fb0e f005 	mul.w	r0, lr, r5
 8000f12:	4290      	cmp	r0, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x124>
 8000f16:	eb1c 0202 	adds.w	r2, ip, r2
 8000f1a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f1e:	d202      	bcs.n	8000f26 <__udivmoddi4+0x122>
 8000f20:	4290      	cmp	r0, r2
 8000f22:	f200 80cb 	bhi.w	80010bc <__udivmoddi4+0x2b8>
 8000f26:	4645      	mov	r5, r8
 8000f28:	1a12      	subs	r2, r2, r0
 8000f2a:	b2a4      	uxth	r4, r4
 8000f2c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f30:	fb07 2210 	mls	r2, r7, r0, r2
 8000f34:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f38:	fb0e fe00 	mul.w	lr, lr, r0
 8000f3c:	45a6      	cmp	lr, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x14e>
 8000f40:	eb1c 0404 	adds.w	r4, ip, r4
 8000f44:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f48:	d202      	bcs.n	8000f50 <__udivmoddi4+0x14c>
 8000f4a:	45a6      	cmp	lr, r4
 8000f4c:	f200 80bb 	bhi.w	80010c6 <__udivmoddi4+0x2c2>
 8000f50:	4610      	mov	r0, r2
 8000f52:	eba4 040e 	sub.w	r4, r4, lr
 8000f56:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f5a:	e79f      	b.n	8000e9c <__udivmoddi4+0x98>
 8000f5c:	f1c1 0720 	rsb	r7, r1, #32
 8000f60:	408b      	lsls	r3, r1
 8000f62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f6a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f6e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f72:	40fd      	lsrs	r5, r7
 8000f74:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f78:	4323      	orrs	r3, r4
 8000f7a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f7e:	fa1f fe8c 	uxth.w	lr, ip
 8000f82:	fb09 5518 	mls	r5, r9, r8, r5
 8000f86:	0c1c      	lsrs	r4, r3, #16
 8000f88:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f8c:	fb08 f50e 	mul.w	r5, r8, lr
 8000f90:	42a5      	cmp	r5, r4
 8000f92:	fa02 f201 	lsl.w	r2, r2, r1
 8000f96:	fa00 f001 	lsl.w	r0, r0, r1
 8000f9a:	d90b      	bls.n	8000fb4 <__udivmoddi4+0x1b0>
 8000f9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000fa0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fa4:	f080 8088 	bcs.w	80010b8 <__udivmoddi4+0x2b4>
 8000fa8:	42a5      	cmp	r5, r4
 8000faa:	f240 8085 	bls.w	80010b8 <__udivmoddi4+0x2b4>
 8000fae:	f1a8 0802 	sub.w	r8, r8, #2
 8000fb2:	4464      	add	r4, ip
 8000fb4:	1b64      	subs	r4, r4, r5
 8000fb6:	b29d      	uxth	r5, r3
 8000fb8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fbc:	fb09 4413 	mls	r4, r9, r3, r4
 8000fc0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000fc4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000fc8:	45a6      	cmp	lr, r4
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x1da>
 8000fcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fd0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000fd4:	d26c      	bcs.n	80010b0 <__udivmoddi4+0x2ac>
 8000fd6:	45a6      	cmp	lr, r4
 8000fd8:	d96a      	bls.n	80010b0 <__udivmoddi4+0x2ac>
 8000fda:	3b02      	subs	r3, #2
 8000fdc:	4464      	add	r4, ip
 8000fde:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fe2:	fba3 9502 	umull	r9, r5, r3, r2
 8000fe6:	eba4 040e 	sub.w	r4, r4, lr
 8000fea:	42ac      	cmp	r4, r5
 8000fec:	46c8      	mov	r8, r9
 8000fee:	46ae      	mov	lr, r5
 8000ff0:	d356      	bcc.n	80010a0 <__udivmoddi4+0x29c>
 8000ff2:	d053      	beq.n	800109c <__udivmoddi4+0x298>
 8000ff4:	b156      	cbz	r6, 800100c <__udivmoddi4+0x208>
 8000ff6:	ebb0 0208 	subs.w	r2, r0, r8
 8000ffa:	eb64 040e 	sbc.w	r4, r4, lr
 8000ffe:	fa04 f707 	lsl.w	r7, r4, r7
 8001002:	40ca      	lsrs	r2, r1
 8001004:	40cc      	lsrs	r4, r1
 8001006:	4317      	orrs	r7, r2
 8001008:	e9c6 7400 	strd	r7, r4, [r6]
 800100c:	4618      	mov	r0, r3
 800100e:	2100      	movs	r1, #0
 8001010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001014:	f1c3 0120 	rsb	r1, r3, #32
 8001018:	fa02 fc03 	lsl.w	ip, r2, r3
 800101c:	fa20 f201 	lsr.w	r2, r0, r1
 8001020:	fa25 f101 	lsr.w	r1, r5, r1
 8001024:	409d      	lsls	r5, r3
 8001026:	432a      	orrs	r2, r5
 8001028:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800102c:	fa1f fe8c 	uxth.w	lr, ip
 8001030:	fbb1 f0f7 	udiv	r0, r1, r7
 8001034:	fb07 1510 	mls	r5, r7, r0, r1
 8001038:	0c11      	lsrs	r1, r2, #16
 800103a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800103e:	fb00 f50e 	mul.w	r5, r0, lr
 8001042:	428d      	cmp	r5, r1
 8001044:	fa04 f403 	lsl.w	r4, r4, r3
 8001048:	d908      	bls.n	800105c <__udivmoddi4+0x258>
 800104a:	eb1c 0101 	adds.w	r1, ip, r1
 800104e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001052:	d22f      	bcs.n	80010b4 <__udivmoddi4+0x2b0>
 8001054:	428d      	cmp	r5, r1
 8001056:	d92d      	bls.n	80010b4 <__udivmoddi4+0x2b0>
 8001058:	3802      	subs	r0, #2
 800105a:	4461      	add	r1, ip
 800105c:	1b49      	subs	r1, r1, r5
 800105e:	b292      	uxth	r2, r2
 8001060:	fbb1 f5f7 	udiv	r5, r1, r7
 8001064:	fb07 1115 	mls	r1, r7, r5, r1
 8001068:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800106c:	fb05 f10e 	mul.w	r1, r5, lr
 8001070:	4291      	cmp	r1, r2
 8001072:	d908      	bls.n	8001086 <__udivmoddi4+0x282>
 8001074:	eb1c 0202 	adds.w	r2, ip, r2
 8001078:	f105 38ff 	add.w	r8, r5, #4294967295
 800107c:	d216      	bcs.n	80010ac <__udivmoddi4+0x2a8>
 800107e:	4291      	cmp	r1, r2
 8001080:	d914      	bls.n	80010ac <__udivmoddi4+0x2a8>
 8001082:	3d02      	subs	r5, #2
 8001084:	4462      	add	r2, ip
 8001086:	1a52      	subs	r2, r2, r1
 8001088:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800108c:	e738      	b.n	8000f00 <__udivmoddi4+0xfc>
 800108e:	4631      	mov	r1, r6
 8001090:	4630      	mov	r0, r6
 8001092:	e708      	b.n	8000ea6 <__udivmoddi4+0xa2>
 8001094:	4639      	mov	r1, r7
 8001096:	e6e6      	b.n	8000e66 <__udivmoddi4+0x62>
 8001098:	4610      	mov	r0, r2
 800109a:	e6fb      	b.n	8000e94 <__udivmoddi4+0x90>
 800109c:	4548      	cmp	r0, r9
 800109e:	d2a9      	bcs.n	8000ff4 <__udivmoddi4+0x1f0>
 80010a0:	ebb9 0802 	subs.w	r8, r9, r2
 80010a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80010a8:	3b01      	subs	r3, #1
 80010aa:	e7a3      	b.n	8000ff4 <__udivmoddi4+0x1f0>
 80010ac:	4645      	mov	r5, r8
 80010ae:	e7ea      	b.n	8001086 <__udivmoddi4+0x282>
 80010b0:	462b      	mov	r3, r5
 80010b2:	e794      	b.n	8000fde <__udivmoddi4+0x1da>
 80010b4:	4640      	mov	r0, r8
 80010b6:	e7d1      	b.n	800105c <__udivmoddi4+0x258>
 80010b8:	46d0      	mov	r8, sl
 80010ba:	e77b      	b.n	8000fb4 <__udivmoddi4+0x1b0>
 80010bc:	3d02      	subs	r5, #2
 80010be:	4462      	add	r2, ip
 80010c0:	e732      	b.n	8000f28 <__udivmoddi4+0x124>
 80010c2:	4608      	mov	r0, r1
 80010c4:	e70a      	b.n	8000edc <__udivmoddi4+0xd8>
 80010c6:	4464      	add	r4, ip
 80010c8:	3802      	subs	r0, #2
 80010ca:	e742      	b.n	8000f52 <__udivmoddi4+0x14e>

080010cc <__aeabi_idiv0>:
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop

080010d0 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08c      	sub	sp, #48	; 0x30
 80010d4:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
 80010da:	9302      	str	r3, [sp, #8]
 80010dc:	2319      	movs	r3, #25
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	463b      	mov	r3, r7
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2301      	movs	r3, #1
 80010e6:	2288      	movs	r2, #136	; 0x88
 80010e8:	21ec      	movs	r1, #236	; 0xec
 80010ea:	4857      	ldr	r0, [pc, #348]	; (8001248 <TrimRead+0x178>)
 80010ec:	f003 f9ee 	bl	80044cc <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 80010f0:	463b      	mov	r3, r7
 80010f2:	3319      	adds	r3, #25
 80010f4:	f04f 32ff 	mov.w	r2, #4294967295
 80010f8:	9202      	str	r2, [sp, #8]
 80010fa:	2207      	movs	r2, #7
 80010fc:	9201      	str	r2, [sp, #4]
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	2301      	movs	r3, #1
 8001102:	22e1      	movs	r2, #225	; 0xe1
 8001104:	21ec      	movs	r1, #236	; 0xec
 8001106:	4850      	ldr	r0, [pc, #320]	; (8001248 <TrimRead+0x178>)
 8001108:	f003 f9e0 	bl	80044cc <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 800110c:	787b      	ldrb	r3, [r7, #1]
 800110e:	021b      	lsls	r3, r3, #8
 8001110:	b21a      	sxth	r2, r3
 8001112:	783b      	ldrb	r3, [r7, #0]
 8001114:	b21b      	sxth	r3, r3
 8001116:	4313      	orrs	r3, r2
 8001118:	b21b      	sxth	r3, r3
 800111a:	b29a      	uxth	r2, r3
 800111c:	4b4b      	ldr	r3, [pc, #300]	; (800124c <TrimRead+0x17c>)
 800111e:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8001120:	78fb      	ldrb	r3, [r7, #3]
 8001122:	021b      	lsls	r3, r3, #8
 8001124:	b21a      	sxth	r2, r3
 8001126:	78bb      	ldrb	r3, [r7, #2]
 8001128:	b21b      	sxth	r3, r3
 800112a:	4313      	orrs	r3, r2
 800112c:	b21a      	sxth	r2, r3
 800112e:	4b48      	ldr	r3, [pc, #288]	; (8001250 <TrimRead+0x180>)
 8001130:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8001132:	797b      	ldrb	r3, [r7, #5]
 8001134:	021b      	lsls	r3, r3, #8
 8001136:	b21a      	sxth	r2, r3
 8001138:	793b      	ldrb	r3, [r7, #4]
 800113a:	b21b      	sxth	r3, r3
 800113c:	4313      	orrs	r3, r2
 800113e:	b21a      	sxth	r2, r3
 8001140:	4b44      	ldr	r3, [pc, #272]	; (8001254 <TrimRead+0x184>)
 8001142:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	021b      	lsls	r3, r3, #8
 8001148:	b21a      	sxth	r2, r3
 800114a:	797b      	ldrb	r3, [r7, #5]
 800114c:	b21b      	sxth	r3, r3
 800114e:	4313      	orrs	r3, r2
 8001150:	b21b      	sxth	r3, r3
 8001152:	b29a      	uxth	r2, r3
 8001154:	4b40      	ldr	r3, [pc, #256]	; (8001258 <TrimRead+0x188>)
 8001156:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001158:	7a7b      	ldrb	r3, [r7, #9]
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	b21a      	sxth	r2, r3
 800115e:	79bb      	ldrb	r3, [r7, #6]
 8001160:	b21b      	sxth	r3, r3
 8001162:	4313      	orrs	r3, r2
 8001164:	b21a      	sxth	r2, r3
 8001166:	4b3d      	ldr	r3, [pc, #244]	; (800125c <TrimRead+0x18c>)
 8001168:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 800116a:	7afb      	ldrb	r3, [r7, #11]
 800116c:	021b      	lsls	r3, r3, #8
 800116e:	b21a      	sxth	r2, r3
 8001170:	7abb      	ldrb	r3, [r7, #10]
 8001172:	b21b      	sxth	r3, r3
 8001174:	4313      	orrs	r3, r2
 8001176:	b21a      	sxth	r2, r3
 8001178:	4b39      	ldr	r3, [pc, #228]	; (8001260 <TrimRead+0x190>)
 800117a:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 800117c:	7b7b      	ldrb	r3, [r7, #13]
 800117e:	021b      	lsls	r3, r3, #8
 8001180:	b21a      	sxth	r2, r3
 8001182:	7b3b      	ldrb	r3, [r7, #12]
 8001184:	b21b      	sxth	r3, r3
 8001186:	4313      	orrs	r3, r2
 8001188:	b21a      	sxth	r2, r3
 800118a:	4b36      	ldr	r3, [pc, #216]	; (8001264 <TrimRead+0x194>)
 800118c:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	021b      	lsls	r3, r3, #8
 8001192:	b21a      	sxth	r2, r3
 8001194:	7bbb      	ldrb	r3, [r7, #14]
 8001196:	b21b      	sxth	r3, r3
 8001198:	4313      	orrs	r3, r2
 800119a:	b21a      	sxth	r2, r3
 800119c:	4b32      	ldr	r3, [pc, #200]	; (8001268 <TrimRead+0x198>)
 800119e:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 80011a0:	7c7b      	ldrb	r3, [r7, #17]
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	b21a      	sxth	r2, r3
 80011a6:	7c3b      	ldrb	r3, [r7, #16]
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b21a      	sxth	r2, r3
 80011ae:	4b2f      	ldr	r3, [pc, #188]	; (800126c <TrimRead+0x19c>)
 80011b0:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80011b2:	7cfb      	ldrb	r3, [r7, #19]
 80011b4:	021b      	lsls	r3, r3, #8
 80011b6:	b21a      	sxth	r2, r3
 80011b8:	7cbb      	ldrb	r3, [r7, #18]
 80011ba:	b21b      	sxth	r3, r3
 80011bc:	4313      	orrs	r3, r2
 80011be:	b21a      	sxth	r2, r3
 80011c0:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <TrimRead+0x1a0>)
 80011c2:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 80011c4:	7d7b      	ldrb	r3, [r7, #21]
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	b21a      	sxth	r2, r3
 80011ca:	7d3b      	ldrb	r3, [r7, #20]
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	4313      	orrs	r3, r2
 80011d0:	b21a      	sxth	r2, r3
 80011d2:	4b28      	ldr	r3, [pc, #160]	; (8001274 <TrimRead+0x1a4>)
 80011d4:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80011d6:	7dfb      	ldrb	r3, [r7, #23]
 80011d8:	021b      	lsls	r3, r3, #8
 80011da:	b21a      	sxth	r2, r3
 80011dc:	7dbb      	ldrb	r3, [r7, #22]
 80011de:	b21b      	sxth	r3, r3
 80011e0:	4313      	orrs	r3, r2
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	4b24      	ldr	r3, [pc, #144]	; (8001278 <TrimRead+0x1a8>)
 80011e6:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 80011e8:	7e3b      	ldrb	r3, [r7, #24]
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	4b23      	ldr	r3, [pc, #140]	; (800127c <TrimRead+0x1ac>)
 80011ee:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 80011f0:	7ebb      	ldrb	r3, [r7, #26]
 80011f2:	021b      	lsls	r3, r3, #8
 80011f4:	b21a      	sxth	r2, r3
 80011f6:	7e7b      	ldrb	r3, [r7, #25]
 80011f8:	b21b      	sxth	r3, r3
 80011fa:	4313      	orrs	r3, r2
 80011fc:	b21a      	sxth	r2, r3
 80011fe:	4b20      	ldr	r3, [pc, #128]	; (8001280 <TrimRead+0x1b0>)
 8001200:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 8001202:	7efb      	ldrb	r3, [r7, #27]
 8001204:	b29a      	uxth	r2, r3
 8001206:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <TrimRead+0x1b4>)
 8001208:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 800120a:	7f3b      	ldrb	r3, [r7, #28]
 800120c:	011b      	lsls	r3, r3, #4
 800120e:	b21a      	sxth	r2, r3
 8001210:	7f7b      	ldrb	r3, [r7, #29]
 8001212:	b21b      	sxth	r3, r3
 8001214:	f003 030f 	and.w	r3, r3, #15
 8001218:	b21b      	sxth	r3, r3
 800121a:	4313      	orrs	r3, r2
 800121c:	b21a      	sxth	r2, r3
 800121e:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <TrimRead+0x1b8>)
 8001220:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 8001222:	7fbb      	ldrb	r3, [r7, #30]
 8001224:	011b      	lsls	r3, r3, #4
 8001226:	b21a      	sxth	r2, r3
 8001228:	7f7b      	ldrb	r3, [r7, #29]
 800122a:	091b      	lsrs	r3, r3, #4
 800122c:	b2db      	uxtb	r3, r3
 800122e:	b21b      	sxth	r3, r3
 8001230:	4313      	orrs	r3, r2
 8001232:	b21a      	sxth	r2, r3
 8001234:	4b15      	ldr	r3, [pc, #84]	; (800128c <TrimRead+0x1bc>)
 8001236:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8001238:	7ffb      	ldrb	r3, [r7, #31]
 800123a:	b21a      	sxth	r2, r3
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <TrimRead+0x1c0>)
 800123e:	801a      	strh	r2, [r3, #0]
}
 8001240:	bf00      	nop
 8001242:	3720      	adds	r7, #32
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	2000024c 	.word	0x2000024c
 800124c:	20000200 	.word	0x20000200
 8001250:	20000208 	.word	0x20000208
 8001254:	2000020a 	.word	0x2000020a
 8001258:	20000202 	.word	0x20000202
 800125c:	2000020c 	.word	0x2000020c
 8001260:	2000020e 	.word	0x2000020e
 8001264:	20000210 	.word	0x20000210
 8001268:	20000212 	.word	0x20000212
 800126c:	20000214 	.word	0x20000214
 8001270:	20000216 	.word	0x20000216
 8001274:	20000218 	.word	0x20000218
 8001278:	2000021a 	.word	0x2000021a
 800127c:	20000204 	.word	0x20000204
 8001280:	2000021c 	.word	0x2000021c
 8001284:	20000206 	.word	0x20000206
 8001288:	2000021e 	.word	0x2000021e
 800128c:	20000220 	.word	0x20000220
 8001290:	20000222 	.word	0x20000222

08001294 <BMP280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BMP280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8001294:	b590      	push	{r4, r7, lr}
 8001296:	b089      	sub	sp, #36	; 0x24
 8001298:	af04      	add	r7, sp, #16
 800129a:	4604      	mov	r4, r0
 800129c:	4608      	mov	r0, r1
 800129e:	4611      	mov	r1, r2
 80012a0:	461a      	mov	r2, r3
 80012a2:	4623      	mov	r3, r4
 80012a4:	71fb      	strb	r3, [r7, #7]
 80012a6:	4603      	mov	r3, r0
 80012a8:	71bb      	strb	r3, [r7, #6]
 80012aa:	460b      	mov	r3, r1
 80012ac:	717b      	strb	r3, [r7, #5]
 80012ae:	4613      	mov	r3, r2
 80012b0:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 80012b2:	f7ff ff0d 	bl	80010d0 <TrimRead>

	uint8_t datatowrite = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 80012be:	23b6      	movs	r3, #182	; 0xb6
 80012c0:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80012c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c6:	9302      	str	r3, [sp, #8]
 80012c8:	2301      	movs	r3, #1
 80012ca:	9301      	str	r3, [sp, #4]
 80012cc:	f107 030f 	add.w	r3, r7, #15
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2301      	movs	r3, #1
 80012d4:	22e0      	movs	r2, #224	; 0xe0
 80012d6:	21ec      	movs	r1, #236	; 0xec
 80012d8:	4858      	ldr	r0, [pc, #352]	; (800143c <BMP280_Config+0x1a8>)
 80012da:	f002 ffe3 	bl	80042a4 <HAL_I2C_Mem_Write>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d002      	beq.n	80012ea <BMP280_Config+0x56>
	{
		return -1;
 80012e4:	f04f 33ff 	mov.w	r3, #4294967295
 80012e8:	e0a3      	b.n	8001432 <BMP280_Config+0x19e>
	}

	HAL_Delay (100);
 80012ea:	2064      	movs	r0, #100	; 0x64
 80012ec:	f001 fe1e 	bl	8002f2c <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 80012f0:	797b      	ldrb	r3, [r7, #5]
 80012f2:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80012f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f8:	9302      	str	r3, [sp, #8]
 80012fa:	2301      	movs	r3, #1
 80012fc:	9301      	str	r3, [sp, #4]
 80012fe:	f107 030f 	add.w	r3, r7, #15
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	2301      	movs	r3, #1
 8001306:	22f2      	movs	r2, #242	; 0xf2
 8001308:	21ec      	movs	r1, #236	; 0xec
 800130a:	484c      	ldr	r0, [pc, #304]	; (800143c <BMP280_Config+0x1a8>)
 800130c:	f002 ffca 	bl	80042a4 <HAL_I2C_Mem_Write>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d002      	beq.n	800131c <BMP280_Config+0x88>
	{
		return -2;
 8001316:	f06f 0301 	mvn.w	r3, #1
 800131a:	e08a      	b.n	8001432 <BMP280_Config+0x19e>
	}
	HAL_Delay (100);
 800131c:	2064      	movs	r0, #100	; 0x64
 800131e:	f001 fe05 	bl	8002f2c <HAL_Delay>
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 8001322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001326:	9302      	str	r3, [sp, #8]
 8001328:	2301      	movs	r3, #1
 800132a:	9301      	str	r3, [sp, #4]
 800132c:	f107 030e 	add.w	r3, r7, #14
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	2301      	movs	r3, #1
 8001334:	22f2      	movs	r2, #242	; 0xf2
 8001336:	21ec      	movs	r1, #236	; 0xec
 8001338:	4840      	ldr	r0, [pc, #256]	; (800143c <BMP280_Config+0x1a8>)
 800133a:	f003 f8c7 	bl	80044cc <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800133e:	7bba      	ldrb	r2, [r7, #14]
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	429a      	cmp	r2, r3
 8001344:	d002      	beq.n	800134c <BMP280_Config+0xb8>
	{
		return -3;
 8001346:	f06f 0302 	mvn.w	r3, #2
 800134a:	e072      	b.n	8001432 <BMP280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 800134c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001350:	015b      	lsls	r3, r3, #5
 8001352:	b25a      	sxtb	r2, r3
 8001354:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	b25b      	sxtb	r3, r3
 800135c:	4313      	orrs	r3, r2
 800135e:	b25b      	sxtb	r3, r3
 8001360:	b2db      	uxtb	r3, r3
 8001362:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001364:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001368:	9302      	str	r3, [sp, #8]
 800136a:	2301      	movs	r3, #1
 800136c:	9301      	str	r3, [sp, #4]
 800136e:	f107 030f 	add.w	r3, r7, #15
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	2301      	movs	r3, #1
 8001376:	22f5      	movs	r2, #245	; 0xf5
 8001378:	21ec      	movs	r1, #236	; 0xec
 800137a:	4830      	ldr	r0, [pc, #192]	; (800143c <BMP280_Config+0x1a8>)
 800137c:	f002 ff92 	bl	80042a4 <HAL_I2C_Mem_Write>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d002      	beq.n	800138c <BMP280_Config+0xf8>
	{
		return -4;
 8001386:	f06f 0303 	mvn.w	r3, #3
 800138a:	e052      	b.n	8001432 <BMP280_Config+0x19e>
	}
	HAL_Delay (100);
 800138c:	2064      	movs	r0, #100	; 0x64
 800138e:	f001 fdcd 	bl	8002f2c <HAL_Delay>
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 8001392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001396:	9302      	str	r3, [sp, #8]
 8001398:	2301      	movs	r3, #1
 800139a:	9301      	str	r3, [sp, #4]
 800139c:	f107 030e 	add.w	r3, r7, #14
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	2301      	movs	r3, #1
 80013a4:	22f5      	movs	r2, #245	; 0xf5
 80013a6:	21ec      	movs	r1, #236	; 0xec
 80013a8:	4824      	ldr	r0, [pc, #144]	; (800143c <BMP280_Config+0x1a8>)
 80013aa:	f003 f88f 	bl	80044cc <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80013ae:	7bba      	ldrb	r2, [r7, #14]
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d002      	beq.n	80013bc <BMP280_Config+0x128>
	{
		return -5;
 80013b6:	f06f 0304 	mvn.w	r3, #4
 80013ba:	e03a      	b.n	8001432 <BMP280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	015b      	lsls	r3, r3, #5
 80013c0:	b25a      	sxtb	r2, r3
 80013c2:	79bb      	ldrb	r3, [r7, #6]
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	b25b      	sxtb	r3, r3
 80013c8:	4313      	orrs	r3, r2
 80013ca:	b25a      	sxtb	r2, r3
 80013cc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	b25b      	sxtb	r3, r3
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80013d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013dc:	9302      	str	r3, [sp, #8]
 80013de:	2301      	movs	r3, #1
 80013e0:	9301      	str	r3, [sp, #4]
 80013e2:	f107 030f 	add.w	r3, r7, #15
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	2301      	movs	r3, #1
 80013ea:	22f4      	movs	r2, #244	; 0xf4
 80013ec:	21ec      	movs	r1, #236	; 0xec
 80013ee:	4813      	ldr	r0, [pc, #76]	; (800143c <BMP280_Config+0x1a8>)
 80013f0:	f002 ff58 	bl	80042a4 <HAL_I2C_Mem_Write>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d002      	beq.n	8001400 <BMP280_Config+0x16c>
	{
		return -6;
 80013fa:	f06f 0305 	mvn.w	r3, #5
 80013fe:	e018      	b.n	8001432 <BMP280_Config+0x19e>
	}
	HAL_Delay (100);
 8001400:	2064      	movs	r0, #100	; 0x64
 8001402:	f001 fd93 	bl	8002f2c <HAL_Delay>
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 8001406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140a:	9302      	str	r3, [sp, #8]
 800140c:	2301      	movs	r3, #1
 800140e:	9301      	str	r3, [sp, #4]
 8001410:	f107 030e 	add.w	r3, r7, #14
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	2301      	movs	r3, #1
 8001418:	22f4      	movs	r2, #244	; 0xf4
 800141a:	21ec      	movs	r1, #236	; 0xec
 800141c:	4807      	ldr	r0, [pc, #28]	; (800143c <BMP280_Config+0x1a8>)
 800141e:	f003 f855 	bl	80044cc <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001422:	7bba      	ldrb	r2, [r7, #14]
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	429a      	cmp	r2, r3
 8001428:	d002      	beq.n	8001430 <BMP280_Config+0x19c>
	{
		return -7;
 800142a:	f06f 0306 	mvn.w	r3, #6
 800142e:	e000      	b.n	8001432 <BMP280_Config+0x19e>
	}

	return 0;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	bd90      	pop	{r4, r7, pc}
 800143a:	bf00      	nop
 800143c:	2000024c 	.word	0x2000024c

08001440 <BMPReadRaw>:


int BMPReadRaw(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af04      	add	r7, sp, #16
	uint8_t RawData[6];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BMP280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 8001446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144a:	9302      	str	r3, [sp, #8]
 800144c:	2301      	movs	r3, #1
 800144e:	9301      	str	r3, [sp, #4]
 8001450:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <BMPReadRaw+0x84>)
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	2301      	movs	r3, #1
 8001456:	22d0      	movs	r2, #208	; 0xd0
 8001458:	21ec      	movs	r1, #236	; 0xec
 800145a:	481b      	ldr	r0, [pc, #108]	; (80014c8 <BMPReadRaw+0x88>)
 800145c:	f003 f836 	bl	80044cc <HAL_I2C_Mem_Read>

	if (chipID == 0x58)
 8001460:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <BMPReadRaw+0x84>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b58      	cmp	r3, #88	; 0x58
 8001466:	d127      	bne.n	80014b8 <BMPReadRaw+0x78>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, PRESS_MSB_REG, 1, RawData, 6, HAL_MAX_DELAY);
 8001468:	f04f 33ff 	mov.w	r3, #4294967295
 800146c:	9302      	str	r3, [sp, #8]
 800146e:	2306      	movs	r3, #6
 8001470:	9301      	str	r3, [sp, #4]
 8001472:	463b      	mov	r3, r7
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	2301      	movs	r3, #1
 8001478:	22f7      	movs	r2, #247	; 0xf7
 800147a:	21ec      	movs	r1, #236	; 0xec
 800147c:	4812      	ldr	r0, [pc, #72]	; (80014c8 <BMPReadRaw+0x88>)
 800147e:	f003 f825 	bl	80044cc <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 8001482:	783b      	ldrb	r3, [r7, #0]
 8001484:	031a      	lsls	r2, r3, #12
 8001486:	787b      	ldrb	r3, [r7, #1]
 8001488:	011b      	lsls	r3, r3, #4
 800148a:	4313      	orrs	r3, r2
 800148c:	78ba      	ldrb	r2, [r7, #2]
 800148e:	0912      	lsrs	r2, r2, #4
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	4313      	orrs	r3, r2
 8001494:	4a0d      	ldr	r2, [pc, #52]	; (80014cc <BMPReadRaw+0x8c>)
 8001496:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8001498:	78fb      	ldrb	r3, [r7, #3]
 800149a:	031a      	lsls	r2, r3, #12
 800149c:	793b      	ldrb	r3, [r7, #4]
 800149e:	011b      	lsls	r3, r3, #4
 80014a0:	4313      	orrs	r3, r2
 80014a2:	797a      	ldrb	r2, [r7, #5]
 80014a4:	0912      	lsrs	r2, r2, #4
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	4313      	orrs	r3, r2
 80014aa:	4a09      	ldr	r2, [pc, #36]	; (80014d0 <BMPReadRaw+0x90>)
 80014ac:	6013      	str	r3, [r2, #0]
		hRaw = 0;
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <BMPReadRaw+0x94>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]

		return 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	e001      	b.n	80014bc <BMPReadRaw+0x7c>
	}

	else return -1;
 80014b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	200001f0 	.word	0x200001f0
 80014c8:	2000024c 	.word	0x2000024c
 80014cc:	200001f8 	.word	0x200001f8
 80014d0:	200001f4 	.word	0x200001f4
 80014d4:	200001fc 	.word	0x200001fc

080014d8 <BMP280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BMP280_compensate_T_int32(int32_t adc_T)
{
 80014d8:	b480      	push	{r7}
 80014da:	b087      	sub	sp, #28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	10da      	asrs	r2, r3, #3
 80014e4:	4b19      	ldr	r3, [pc, #100]	; (800154c <BMP280_compensate_T_int32+0x74>)
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	4a18      	ldr	r2, [pc, #96]	; (8001550 <BMP280_compensate_T_int32+0x78>)
 80014ee:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014f2:	fb02 f303 	mul.w	r3, r2, r3
 80014f6:	12db      	asrs	r3, r3, #11
 80014f8:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	111b      	asrs	r3, r3, #4
 80014fe:	4a13      	ldr	r2, [pc, #76]	; (800154c <BMP280_compensate_T_int32+0x74>)
 8001500:	8812      	ldrh	r2, [r2, #0]
 8001502:	1a9b      	subs	r3, r3, r2
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	1112      	asrs	r2, r2, #4
 8001508:	4910      	ldr	r1, [pc, #64]	; (800154c <BMP280_compensate_T_int32+0x74>)
 800150a:	8809      	ldrh	r1, [r1, #0]
 800150c:	1a52      	subs	r2, r2, r1
 800150e:	fb02 f303 	mul.w	r3, r2, r3
 8001512:	131b      	asrs	r3, r3, #12
 8001514:	4a0f      	ldr	r2, [pc, #60]	; (8001554 <BMP280_compensate_T_int32+0x7c>)
 8001516:	f9b2 2000 	ldrsh.w	r2, [r2]
 800151a:	fb02 f303 	mul.w	r3, r2, r3
 800151e:	139b      	asrs	r3, r3, #14
 8001520:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	4413      	add	r3, r2
 8001528:	4a0b      	ldr	r2, [pc, #44]	; (8001558 <BMP280_compensate_T_int32+0x80>)
 800152a:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800152c:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <BMP280_compensate_T_int32+0x80>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4613      	mov	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	3380      	adds	r3, #128	; 0x80
 8001538:	121b      	asrs	r3, r3, #8
 800153a:	60fb      	str	r3, [r7, #12]
	return T;
 800153c:	68fb      	ldr	r3, [r7, #12]
}
 800153e:	4618      	mov	r0, r3
 8001540:	371c      	adds	r7, #28
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	20000200 	.word	0x20000200
 8001550:	20000208 	.word	0x20000208
 8001554:	2000020a 	.word	0x2000020a
 8001558:	20000224 	.word	0x20000224

0800155c <BMP280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BMP280_compensate_P_int64(int32_t adc_P)
{
 800155c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001560:	b0ca      	sub	sp, #296	; 0x128
 8001562:	af00      	add	r7, sp, #0
 8001564:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001568:	4baf      	ldr	r3, [pc, #700]	; (8001828 <BMP280_compensate_P_int64+0x2cc>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	17da      	asrs	r2, r3, #31
 800156e:	461c      	mov	r4, r3
 8001570:	4615      	mov	r5, r2
 8001572:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8001576:	f145 3bff 	adc.w	fp, r5, #4294967295
 800157a:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 800157e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001582:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001586:	fb03 f102 	mul.w	r1, r3, r2
 800158a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800158e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001592:	fb02 f303 	mul.w	r3, r2, r3
 8001596:	18ca      	adds	r2, r1, r3
 8001598:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800159c:	fba3 8903 	umull	r8, r9, r3, r3
 80015a0:	eb02 0309 	add.w	r3, r2, r9
 80015a4:	4699      	mov	r9, r3
 80015a6:	4ba1      	ldr	r3, [pc, #644]	; (800182c <BMP280_compensate_P_int64+0x2d0>)
 80015a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	17da      	asrs	r2, r3, #31
 80015b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80015b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80015b8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80015bc:	4603      	mov	r3, r0
 80015be:	fb03 f209 	mul.w	r2, r3, r9
 80015c2:	460b      	mov	r3, r1
 80015c4:	fb08 f303 	mul.w	r3, r8, r3
 80015c8:	4413      	add	r3, r2
 80015ca:	4602      	mov	r2, r0
 80015cc:	fba8 1202 	umull	r1, r2, r8, r2
 80015d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80015d4:	460a      	mov	r2, r1
 80015d6:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80015da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80015de:	4413      	add	r3, r2
 80015e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80015e4:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80015e8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80015ec:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80015f0:	4b8f      	ldr	r3, [pc, #572]	; (8001830 <BMP280_compensate_P_int64+0x2d4>)
 80015f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f6:	b21b      	sxth	r3, r3
 80015f8:	17da      	asrs	r2, r3, #31
 80015fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80015fe:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001602:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001606:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800160a:	462a      	mov	r2, r5
 800160c:	fb02 f203 	mul.w	r2, r2, r3
 8001610:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001614:	4621      	mov	r1, r4
 8001616:	fb01 f303 	mul.w	r3, r1, r3
 800161a:	441a      	add	r2, r3
 800161c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001620:	4621      	mov	r1, r4
 8001622:	fba3 1301 	umull	r1, r3, r3, r1
 8001626:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800162a:	460b      	mov	r3, r1
 800162c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001630:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001634:	18d3      	adds	r3, r2, r3
 8001636:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800163a:	f04f 0000 	mov.w	r0, #0
 800163e:	f04f 0100 	mov.w	r1, #0
 8001642:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001646:	462b      	mov	r3, r5
 8001648:	0459      	lsls	r1, r3, #17
 800164a:	4623      	mov	r3, r4
 800164c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001650:	4623      	mov	r3, r4
 8001652:	0458      	lsls	r0, r3, #17
 8001654:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001658:	1814      	adds	r4, r2, r0
 800165a:	643c      	str	r4, [r7, #64]	; 0x40
 800165c:	414b      	adcs	r3, r1
 800165e:	647b      	str	r3, [r7, #68]	; 0x44
 8001660:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001664:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001668:	4b72      	ldr	r3, [pc, #456]	; (8001834 <BMP280_compensate_P_int64+0x2d8>)
 800166a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800166e:	b21b      	sxth	r3, r3
 8001670:	17da      	asrs	r2, r3, #31
 8001672:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001676:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800167a:	f04f 0000 	mov.w	r0, #0
 800167e:	f04f 0100 	mov.w	r1, #0
 8001682:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001686:	00d9      	lsls	r1, r3, #3
 8001688:	2000      	movs	r0, #0
 800168a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800168e:	1814      	adds	r4, r2, r0
 8001690:	63bc      	str	r4, [r7, #56]	; 0x38
 8001692:	414b      	adcs	r3, r1
 8001694:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001696:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800169a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 800169e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80016a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016a6:	fb03 f102 	mul.w	r1, r3, r2
 80016aa:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80016ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016b2:	fb02 f303 	mul.w	r3, r2, r3
 80016b6:	18ca      	adds	r2, r1, r3
 80016b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016bc:	fba3 1303 	umull	r1, r3, r3, r3
 80016c0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80016c4:	460b      	mov	r3, r1
 80016c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80016ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80016ce:	18d3      	adds	r3, r2, r3
 80016d0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80016d4:	4b58      	ldr	r3, [pc, #352]	; (8001838 <BMP280_compensate_P_int64+0x2dc>)
 80016d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016da:	b21b      	sxth	r3, r3
 80016dc:	17da      	asrs	r2, r3, #31
 80016de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80016e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80016e6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80016ea:	462b      	mov	r3, r5
 80016ec:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80016f0:	4642      	mov	r2, r8
 80016f2:	fb02 f203 	mul.w	r2, r2, r3
 80016f6:	464b      	mov	r3, r9
 80016f8:	4621      	mov	r1, r4
 80016fa:	fb01 f303 	mul.w	r3, r1, r3
 80016fe:	4413      	add	r3, r2
 8001700:	4622      	mov	r2, r4
 8001702:	4641      	mov	r1, r8
 8001704:	fba2 1201 	umull	r1, r2, r2, r1
 8001708:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800170c:	460a      	mov	r2, r1
 800170e:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001712:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001716:	4413      	add	r3, r2
 8001718:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800171c:	f04f 0000 	mov.w	r0, #0
 8001720:	f04f 0100 	mov.w	r1, #0
 8001724:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001728:	4623      	mov	r3, r4
 800172a:	0a18      	lsrs	r0, r3, #8
 800172c:	462b      	mov	r3, r5
 800172e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001732:	462b      	mov	r3, r5
 8001734:	1219      	asrs	r1, r3, #8
 8001736:	4b41      	ldr	r3, [pc, #260]	; (800183c <BMP280_compensate_P_int64+0x2e0>)
 8001738:	f9b3 3000 	ldrsh.w	r3, [r3]
 800173c:	b21b      	sxth	r3, r3
 800173e:	17da      	asrs	r2, r3, #31
 8001740:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001744:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001748:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800174c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001750:	464a      	mov	r2, r9
 8001752:	fb02 f203 	mul.w	r2, r2, r3
 8001756:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800175a:	4644      	mov	r4, r8
 800175c:	fb04 f303 	mul.w	r3, r4, r3
 8001760:	441a      	add	r2, r3
 8001762:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001766:	4644      	mov	r4, r8
 8001768:	fba3 4304 	umull	r4, r3, r3, r4
 800176c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001770:	4623      	mov	r3, r4
 8001772:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001776:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800177a:	18d3      	adds	r3, r2, r3
 800177c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	f04f 0300 	mov.w	r3, #0
 8001788:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800178c:	464c      	mov	r4, r9
 800178e:	0323      	lsls	r3, r4, #12
 8001790:	4644      	mov	r4, r8
 8001792:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001796:	4644      	mov	r4, r8
 8001798:	0322      	lsls	r2, r4, #12
 800179a:	1884      	adds	r4, r0, r2
 800179c:	633c      	str	r4, [r7, #48]	; 0x30
 800179e:	eb41 0303 	adc.w	r3, r1, r3
 80017a2:	637b      	str	r3, [r7, #52]	; 0x34
 80017a4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80017a8:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80017ac:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80017b0:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80017b4:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80017b8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80017bc:	4b20      	ldr	r3, [pc, #128]	; (8001840 <BMP280_compensate_P_int64+0x2e4>)
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	2200      	movs	r2, #0
 80017c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80017c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80017cc:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80017d0:	462b      	mov	r3, r5
 80017d2:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80017d6:	4642      	mov	r2, r8
 80017d8:	fb02 f203 	mul.w	r2, r2, r3
 80017dc:	464b      	mov	r3, r9
 80017de:	4621      	mov	r1, r4
 80017e0:	fb01 f303 	mul.w	r3, r1, r3
 80017e4:	4413      	add	r3, r2
 80017e6:	4622      	mov	r2, r4
 80017e8:	4641      	mov	r1, r8
 80017ea:	fba2 1201 	umull	r1, r2, r2, r1
 80017ee:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80017f2:	460a      	mov	r2, r1
 80017f4:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80017f8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80017fc:	4413      	add	r3, r2
 80017fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	f04f 0300 	mov.w	r3, #0
 800180a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800180e:	4629      	mov	r1, r5
 8001810:	104a      	asrs	r2, r1, #1
 8001812:	4629      	mov	r1, r5
 8001814:	17cb      	asrs	r3, r1, #31
 8001816:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 800181a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800181e:	4313      	orrs	r3, r2
 8001820:	d110      	bne.n	8001844 <BMP280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 8001822:	2300      	movs	r3, #0
 8001824:	e154      	b.n	8001ad0 <BMP280_compensate_P_int64+0x574>
 8001826:	bf00      	nop
 8001828:	20000224 	.word	0x20000224
 800182c:	20000214 	.word	0x20000214
 8001830:	20000212 	.word	0x20000212
 8001834:	20000210 	.word	0x20000210
 8001838:	2000020e 	.word	0x2000020e
 800183c:	2000020c 	.word	0x2000020c
 8001840:	20000202 	.word	0x20000202
	}
	p = 1048576-adc_P;
 8001844:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001848:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800184c:	17da      	asrs	r2, r3, #31
 800184e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001850:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001852:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001856:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800185a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800185e:	105b      	asrs	r3, r3, #1
 8001860:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001864:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001868:	07db      	lsls	r3, r3, #31
 800186a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800186e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001872:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001876:	4621      	mov	r1, r4
 8001878:	1a89      	subs	r1, r1, r2
 800187a:	67b9      	str	r1, [r7, #120]	; 0x78
 800187c:	4629      	mov	r1, r5
 800187e:	eb61 0303 	sbc.w	r3, r1, r3
 8001882:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001884:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001888:	4622      	mov	r2, r4
 800188a:	462b      	mov	r3, r5
 800188c:	1891      	adds	r1, r2, r2
 800188e:	6239      	str	r1, [r7, #32]
 8001890:	415b      	adcs	r3, r3
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
 8001894:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001898:	4621      	mov	r1, r4
 800189a:	1851      	adds	r1, r2, r1
 800189c:	61b9      	str	r1, [r7, #24]
 800189e:	4629      	mov	r1, r5
 80018a0:	414b      	adcs	r3, r1
 80018a2:	61fb      	str	r3, [r7, #28]
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80018b0:	4649      	mov	r1, r9
 80018b2:	018b      	lsls	r3, r1, #6
 80018b4:	4641      	mov	r1, r8
 80018b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018ba:	4641      	mov	r1, r8
 80018bc:	018a      	lsls	r2, r1, #6
 80018be:	4641      	mov	r1, r8
 80018c0:	1889      	adds	r1, r1, r2
 80018c2:	6139      	str	r1, [r7, #16]
 80018c4:	4649      	mov	r1, r9
 80018c6:	eb43 0101 	adc.w	r1, r3, r1
 80018ca:	6179      	str	r1, [r7, #20]
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	f04f 0300 	mov.w	r3, #0
 80018d4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80018d8:	4649      	mov	r1, r9
 80018da:	008b      	lsls	r3, r1, #2
 80018dc:	4641      	mov	r1, r8
 80018de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018e2:	4641      	mov	r1, r8
 80018e4:	008a      	lsls	r2, r1, #2
 80018e6:	4610      	mov	r0, r2
 80018e8:	4619      	mov	r1, r3
 80018ea:	4603      	mov	r3, r0
 80018ec:	4622      	mov	r2, r4
 80018ee:	189b      	adds	r3, r3, r2
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	460b      	mov	r3, r1
 80018f4:	462a      	mov	r2, r5
 80018f6:	eb42 0303 	adc.w	r3, r2, r3
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	f04f 0200 	mov.w	r2, #0
 8001900:	f04f 0300 	mov.w	r3, #0
 8001904:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001908:	4649      	mov	r1, r9
 800190a:	008b      	lsls	r3, r1, #2
 800190c:	4641      	mov	r1, r8
 800190e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001912:	4641      	mov	r1, r8
 8001914:	008a      	lsls	r2, r1, #2
 8001916:	4610      	mov	r0, r2
 8001918:	4619      	mov	r1, r3
 800191a:	4603      	mov	r3, r0
 800191c:	4622      	mov	r2, r4
 800191e:	189b      	adds	r3, r3, r2
 8001920:	673b      	str	r3, [r7, #112]	; 0x70
 8001922:	462b      	mov	r3, r5
 8001924:	460a      	mov	r2, r1
 8001926:	eb42 0303 	adc.w	r3, r2, r3
 800192a:	677b      	str	r3, [r7, #116]	; 0x74
 800192c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001930:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001934:	f7ff f9c8 	bl	8000cc8 <__aeabi_ldivmod>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001940:	4b66      	ldr	r3, [pc, #408]	; (8001adc <BMP280_compensate_P_int64+0x580>)
 8001942:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001946:	b21b      	sxth	r3, r3
 8001948:	17da      	asrs	r2, r3, #31
 800194a:	66bb      	str	r3, [r7, #104]	; 0x68
 800194c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800194e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001952:	f04f 0000 	mov.w	r0, #0
 8001956:	f04f 0100 	mov.w	r1, #0
 800195a:	0b50      	lsrs	r0, r2, #13
 800195c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001960:	1359      	asrs	r1, r3, #13
 8001962:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001966:	462b      	mov	r3, r5
 8001968:	fb00 f203 	mul.w	r2, r0, r3
 800196c:	4623      	mov	r3, r4
 800196e:	fb03 f301 	mul.w	r3, r3, r1
 8001972:	4413      	add	r3, r2
 8001974:	4622      	mov	r2, r4
 8001976:	fba2 1200 	umull	r1, r2, r2, r0
 800197a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800197e:	460a      	mov	r2, r1
 8001980:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001984:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001988:	4413      	add	r3, r2
 800198a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800198e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001992:	f04f 0000 	mov.w	r0, #0
 8001996:	f04f 0100 	mov.w	r1, #0
 800199a:	0b50      	lsrs	r0, r2, #13
 800199c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80019a0:	1359      	asrs	r1, r3, #13
 80019a2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80019a6:	462b      	mov	r3, r5
 80019a8:	fb00 f203 	mul.w	r2, r0, r3
 80019ac:	4623      	mov	r3, r4
 80019ae:	fb03 f301 	mul.w	r3, r3, r1
 80019b2:	4413      	add	r3, r2
 80019b4:	4622      	mov	r2, r4
 80019b6:	fba2 1200 	umull	r1, r2, r2, r0
 80019ba:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80019be:	460a      	mov	r2, r1
 80019c0:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80019c4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80019c8:	4413      	add	r3, r2
 80019ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	f04f 0300 	mov.w	r3, #0
 80019d6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80019da:	4621      	mov	r1, r4
 80019dc:	0e4a      	lsrs	r2, r1, #25
 80019de:	4629      	mov	r1, r5
 80019e0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80019e4:	4629      	mov	r1, r5
 80019e6:	164b      	asrs	r3, r1, #25
 80019e8:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80019ec:	4b3c      	ldr	r3, [pc, #240]	; (8001ae0 <BMP280_compensate_P_int64+0x584>)
 80019ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019f2:	b21b      	sxth	r3, r3
 80019f4:	17da      	asrs	r2, r3, #31
 80019f6:	663b      	str	r3, [r7, #96]	; 0x60
 80019f8:	667a      	str	r2, [r7, #100]	; 0x64
 80019fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80019fe:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001a02:	462a      	mov	r2, r5
 8001a04:	fb02 f203 	mul.w	r2, r2, r3
 8001a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a0c:	4621      	mov	r1, r4
 8001a0e:	fb01 f303 	mul.w	r3, r1, r3
 8001a12:	4413      	add	r3, r2
 8001a14:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001a18:	4621      	mov	r1, r4
 8001a1a:	fba2 1201 	umull	r1, r2, r2, r1
 8001a1e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001a22:	460a      	mov	r2, r1
 8001a24:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001a28:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001a2c:	4413      	add	r3, r2
 8001a2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	f04f 0300 	mov.w	r3, #0
 8001a3a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001a3e:	4621      	mov	r1, r4
 8001a40:	0cca      	lsrs	r2, r1, #19
 8001a42:	4629      	mov	r1, r5
 8001a44:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001a48:	4629      	mov	r1, r5
 8001a4a:	14cb      	asrs	r3, r1, #19
 8001a4c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001a50:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001a54:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001a58:	1884      	adds	r4, r0, r2
 8001a5a:	65bc      	str	r4, [r7, #88]	; 0x58
 8001a5c:	eb41 0303 	adc.w	r3, r1, r3
 8001a60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a62:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001a66:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001a6a:	4621      	mov	r1, r4
 8001a6c:	1889      	adds	r1, r1, r2
 8001a6e:	6539      	str	r1, [r7, #80]	; 0x50
 8001a70:	4629      	mov	r1, r5
 8001a72:	eb43 0101 	adc.w	r1, r3, r1
 8001a76:	6579      	str	r1, [r7, #84]	; 0x54
 8001a78:	f04f 0000 	mov.w	r0, #0
 8001a7c:	f04f 0100 	mov.w	r1, #0
 8001a80:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001a84:	4623      	mov	r3, r4
 8001a86:	0a18      	lsrs	r0, r3, #8
 8001a88:	462b      	mov	r3, r5
 8001a8a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a8e:	462b      	mov	r3, r5
 8001a90:	1219      	asrs	r1, r3, #8
 8001a92:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <BMP280_compensate_P_int64+0x588>)
 8001a94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a98:	b21b      	sxth	r3, r3
 8001a9a:	17da      	asrs	r2, r3, #31
 8001a9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a9e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001aac:	464c      	mov	r4, r9
 8001aae:	0123      	lsls	r3, r4, #4
 8001ab0:	4644      	mov	r4, r8
 8001ab2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001ab6:	4644      	mov	r4, r8
 8001ab8:	0122      	lsls	r2, r4, #4
 8001aba:	1884      	adds	r4, r0, r2
 8001abc:	603c      	str	r4, [r7, #0]
 8001abe:	eb41 0303 	adc.w	r3, r1, r3
 8001ac2:	607b      	str	r3, [r7, #4]
 8001ac4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001ac8:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 8001acc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001adc:	2000021a 	.word	0x2000021a
 8001ae0:	20000218 	.word	0x20000218
 8001ae4:	20000216 	.word	0x20000216

08001ae8 <BMP280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t BMP280_compensate_H_int32(int32_t adc_H)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001af0:	4b2c      	ldr	r3, [pc, #176]	; (8001ba4 <BMP280_compensate_H_int32+0xbc>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001af8:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	039a      	lsls	r2, r3, #14
 8001afe:	4b2a      	ldr	r3, [pc, #168]	; (8001ba8 <BMP280_compensate_H_int32+0xc0>)
 8001b00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b04:	051b      	lsls	r3, r3, #20
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	4b28      	ldr	r3, [pc, #160]	; (8001bac <BMP280_compensate_H_int32+0xc4>)
 8001b0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	fb01 f303 	mul.w	r3, r1, r3
 8001b16:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001b18:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001b1c:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001b1e:	4a24      	ldr	r2, [pc, #144]	; (8001bb0 <BMP280_compensate_H_int32+0xc8>)
 8001b20:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001b24:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001b2c:	1292      	asrs	r2, r2, #10
 8001b2e:	4921      	ldr	r1, [pc, #132]	; (8001bb4 <BMP280_compensate_H_int32+0xcc>)
 8001b30:	8809      	ldrh	r1, [r1, #0]
 8001b32:	4608      	mov	r0, r1
 8001b34:	68f9      	ldr	r1, [r7, #12]
 8001b36:	fb00 f101 	mul.w	r1, r0, r1
 8001b3a:	12c9      	asrs	r1, r1, #11
 8001b3c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001b40:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001b44:	1292      	asrs	r2, r2, #10
 8001b46:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8001b4a:	491b      	ldr	r1, [pc, #108]	; (8001bb8 <BMP280_compensate_H_int32+0xd0>)
 8001b4c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001b50:	fb01 f202 	mul.w	r2, r1, r2
 8001b54:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 8001b58:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001b5a:	fb02 f303 	mul.w	r3, r2, r3
 8001b5e:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	13db      	asrs	r3, r3, #15
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	13d2      	asrs	r2, r2, #15
 8001b68:	fb02 f303 	mul.w	r3, r2, r3
 8001b6c:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001b6e:	4a13      	ldr	r2, [pc, #76]	; (8001bbc <BMP280_compensate_H_int32+0xd4>)
 8001b70:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b72:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001b76:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001b84:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001b8c:	bfa8      	it	ge
 8001b8e:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001b92:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	131b      	asrs	r3, r3, #12
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	20000224 	.word	0x20000224
 8001ba8:	2000021e 	.word	0x2000021e
 8001bac:	20000220 	.word	0x20000220
 8001bb0:	20000222 	.word	0x20000222
 8001bb4:	20000206 	.word	0x20000206
 8001bb8:	2000021c 	.word	0x2000021c
 8001bbc:	20000204 	.word	0x20000204

08001bc0 <BMP280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BMP280_Measure (void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
	if (BMPReadRaw() == 0)
 8001bc4:	f7ff fc3c 	bl	8001440 <BMPReadRaw>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d163      	bne.n	8001c96 <BMP280_Measure+0xd6>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 8001bce:	4b39      	ldr	r3, [pc, #228]	; (8001cb4 <BMP280_Measure+0xf4>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001bd6:	d104      	bne.n	8001be2 <BMP280_Measure+0x22>
 8001bd8:	4b37      	ldr	r3, [pc, #220]	; (8001cb8 <BMP280_Measure+0xf8>)
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	e016      	b.n	8001c10 <BMP280_Measure+0x50>
		  else
		  {
			  Temperature = (BMP280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001be2:	4b34      	ldr	r3, [pc, #208]	; (8001cb4 <BMP280_Measure+0xf4>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff fc76 	bl	80014d8 <BMP280_compensate_T_int32>
 8001bec:	4603      	mov	r3, r0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fcb8 	bl	8000564 <__aeabi_i2d>
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	4b30      	ldr	r3, [pc, #192]	; (8001cbc <BMP280_Measure+0xfc>)
 8001bfa:	f7fe fe47 	bl	800088c <__aeabi_ddiv>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	4610      	mov	r0, r2
 8001c04:	4619      	mov	r1, r3
 8001c06:	f7ff f80f 	bl	8000c28 <__aeabi_d2f>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	4a2a      	ldr	r2, [pc, #168]	; (8001cb8 <BMP280_Measure+0xf8>)
 8001c0e:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 8001c10:	4b2b      	ldr	r3, [pc, #172]	; (8001cc0 <BMP280_Measure+0x100>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001c18:	d104      	bne.n	8001c24 <BMP280_Measure+0x64>
 8001c1a:	4b2a      	ldr	r3, [pc, #168]	; (8001cc4 <BMP280_Measure+0x104>)
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	e016      	b.n	8001c52 <BMP280_Measure+0x92>
		  else
		  {
#if SUPPORT_64BIT
			  Pressure = (BMP280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001c24:	4b26      	ldr	r3, [pc, #152]	; (8001cc0 <BMP280_Measure+0x100>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff fc97 	bl	800155c <BMP280_compensate_P_int64>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7fe fc87 	bl	8000544 <__aeabi_ui2d>
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	4b23      	ldr	r3, [pc, #140]	; (8001cc8 <BMP280_Measure+0x108>)
 8001c3c:	f7fe fe26 	bl	800088c <__aeabi_ddiv>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4610      	mov	r0, r2
 8001c46:	4619      	mov	r1, r3
 8001c48:	f7fe ffee 	bl	8000c28 <__aeabi_d2f>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	4a1d      	ldr	r2, [pc, #116]	; (8001cc4 <BMP280_Measure+0x104>)
 8001c50:	6013      	str	r3, [r2, #0]
			  Pressure = (BMP280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 8001c52:	4b1e      	ldr	r3, [pc, #120]	; (8001ccc <BMP280_Measure+0x10c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c5a:	d104      	bne.n	8001c66 <BMP280_Measure+0xa6>
 8001c5c:	4b1c      	ldr	r3, [pc, #112]	; (8001cd0 <BMP280_Measure+0x110>)
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
	}
}
 8001c64:	e023      	b.n	8001cae <BMP280_Measure+0xee>
			  Humidity = (BMP280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001c66:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <BMP280_Measure+0x10c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff ff3c 	bl	8001ae8 <BMP280_compensate_H_int32>
 8001c70:	4603      	mov	r3, r0
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe fc66 	bl	8000544 <__aeabi_ui2d>
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <BMP280_Measure+0x114>)
 8001c7e:	f7fe fe05 	bl	800088c <__aeabi_ddiv>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4610      	mov	r0, r2
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f7fe ffcd 	bl	8000c28 <__aeabi_d2f>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	4a0f      	ldr	r2, [pc, #60]	; (8001cd0 <BMP280_Measure+0x110>)
 8001c92:	6013      	str	r3, [r2, #0]
}
 8001c94:	e00b      	b.n	8001cae <BMP280_Measure+0xee>
		Temperature = Pressure = Humidity = 0;
 8001c96:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <BMP280_Measure+0x110>)
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <BMP280_Measure+0x110>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a08      	ldr	r2, [pc, #32]	; (8001cc4 <BMP280_Measure+0x104>)
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <BMP280_Measure+0x104>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a03      	ldr	r2, [pc, #12]	; (8001cb8 <BMP280_Measure+0xf8>)
 8001cac:	6013      	str	r3, [r2, #0]
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	200001f4 	.word	0x200001f4
 8001cb8:	20000468 	.word	0x20000468
 8001cbc:	40590000 	.word	0x40590000
 8001cc0:	200001f8 	.word	0x200001f8
 8001cc4:	2000046c 	.word	0x2000046c
 8001cc8:	40700000 	.word	0x40700000
 8001ccc:	200001fc 	.word	0x200001fc
 8001cd0:	20000470 	.word	0x20000470
 8001cd4:	40900000 	.word	0x40900000

08001cd8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001cdc:	4b0d      	ldr	r3, [pc, #52]	; (8001d14 <MX_CRC_Init+0x3c>)
 8001cde:	4a0e      	ldr	r2, [pc, #56]	; (8001d18 <MX_CRC_Init+0x40>)
 8001ce0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001ce2:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <MX_CRC_Init+0x3c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001ce8:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <MX_CRC_Init+0x3c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001cee:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <MX_CRC_Init+0x3c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001cf4:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <MX_CRC_Init+0x3c>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001cfa:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <MX_CRC_Init+0x3c>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001d00:	4804      	ldr	r0, [pc, #16]	; (8001d14 <MX_CRC_Init+0x3c>)
 8001d02:	f001 fa49 	bl	8003198 <HAL_CRC_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001d0c:	f000 fd7a 	bl	8002804 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001d10:	bf00      	nop
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20000228 	.word	0x20000228
 8001d18:	40023000 	.word	0x40023000

08001d1c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a0a      	ldr	r2, [pc, #40]	; (8001d54 <HAL_CRC_MspInit+0x38>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d10b      	bne.n	8001d46 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001d2e:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <HAL_CRC_MspInit+0x3c>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	4a09      	ldr	r2, [pc, #36]	; (8001d58 <HAL_CRC_MspInit+0x3c>)
 8001d34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d38:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3a:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <HAL_CRC_MspInit+0x3c>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001d46:	bf00      	nop
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	40023000 	.word	0x40023000
 8001d58:	40023800 	.word	0x40023800

08001d5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d62:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <MX_DMA_Init+0x38>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4a0b      	ldr	r2, [pc, #44]	; (8001d94 <MX_DMA_Init+0x38>)
 8001d68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6e:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <MX_DMA_Init+0x38>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d76:	607b      	str	r3, [r7, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	200c      	movs	r0, #12
 8001d80:	f001 f9d3 	bl	800312a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001d84:	200c      	movs	r0, #12
 8001d86:	f001 f9ec 	bl	8003162 <HAL_NVIC_EnableIRQ>

}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40023800 	.word	0x40023800

08001d98 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08c      	sub	sp, #48	; 0x30
 8001d9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9e:	f107 031c 	add.w	r3, r7, #28
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	605a      	str	r2, [r3, #4]
 8001da8:	609a      	str	r2, [r3, #8]
 8001daa:	60da      	str	r2, [r3, #12]
 8001dac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dae:	4b77      	ldr	r3, [pc, #476]	; (8001f8c <MX_GPIO_Init+0x1f4>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	4a76      	ldr	r2, [pc, #472]	; (8001f8c <MX_GPIO_Init+0x1f4>)
 8001db4:	f043 0304 	orr.w	r3, r3, #4
 8001db8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dba:	4b74      	ldr	r3, [pc, #464]	; (8001f8c <MX_GPIO_Init+0x1f4>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	61bb      	str	r3, [r7, #24]
 8001dc4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dc6:	4b71      	ldr	r3, [pc, #452]	; (8001f8c <MX_GPIO_Init+0x1f4>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	4a70      	ldr	r2, [pc, #448]	; (8001f8c <MX_GPIO_Init+0x1f4>)
 8001dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd2:	4b6e      	ldr	r3, [pc, #440]	; (8001f8c <MX_GPIO_Init+0x1f4>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dde:	4b6b      	ldr	r3, [pc, #428]	; (8001f8c <MX_GPIO_Init+0x1f4>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	4a6a      	ldr	r2, [pc, #424]	; (8001f8c <MX_GPIO_Init+0x1f4>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dea:	4b68      	ldr	r3, [pc, #416]	; (8001f8c <MX_GPIO_Init+0x1f4>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df6:	4b65      	ldr	r3, [pc, #404]	; (8001f8c <MX_GPIO_Init+0x1f4>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	4a64      	ldr	r2, [pc, #400]	; (8001f8c <MX_GPIO_Init+0x1f4>)
 8001dfc:	f043 0302 	orr.w	r3, r3, #2
 8001e00:	6313      	str	r3, [r2, #48]	; 0x30
 8001e02:	4b62      	ldr	r3, [pc, #392]	; (8001f8c <MX_GPIO_Init+0x1f4>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e0e:	4b5f      	ldr	r3, [pc, #380]	; (8001f8c <MX_GPIO_Init+0x1f4>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	4a5e      	ldr	r2, [pc, #376]	; (8001f8c <MX_GPIO_Init+0x1f4>)
 8001e14:	f043 0308 	orr.w	r3, r3, #8
 8001e18:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1a:	4b5c      	ldr	r3, [pc, #368]	; (8001f8c <MX_GPIO_Init+0x1f4>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	f003 0308 	and.w	r3, r3, #8
 8001e22:	60bb      	str	r3, [r7, #8]
 8001e24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e26:	4b59      	ldr	r3, [pc, #356]	; (8001f8c <MX_GPIO_Init+0x1f4>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	4a58      	ldr	r2, [pc, #352]	; (8001f8c <MX_GPIO_Init+0x1f4>)
 8001e2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e30:	6313      	str	r3, [r2, #48]	; 0x30
 8001e32:	4b56      	ldr	r3, [pc, #344]	; (8001f8c <MX_GPIO_Init+0x1f4>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e3a:	607b      	str	r3, [r7, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f244 0181 	movw	r1, #16513	; 0x4081
 8001e44:	4852      	ldr	r0, [pc, #328]	; (8001f90 <MX_GPIO_Init+0x1f8>)
 8001e46:	f002 f969 	bl	800411c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2140      	movs	r1, #64	; 0x40
 8001e4e:	4851      	ldr	r0, [pc, #324]	; (8001f94 <MX_GPIO_Init+0x1fc>)
 8001e50:	f002 f964 	bl	800411c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001e54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e5a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001e64:	f107 031c 	add.w	r3, r7, #28
 8001e68:	4619      	mov	r1, r3
 8001e6a:	484b      	ldr	r0, [pc, #300]	; (8001f98 <MX_GPIO_Init+0x200>)
 8001e6c:	f001 ffaa 	bl	8003dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001e70:	2332      	movs	r3, #50	; 0x32
 8001e72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e74:	2302      	movs	r3, #2
 8001e76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e80:	230b      	movs	r3, #11
 8001e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e84:	f107 031c 	add.w	r3, r7, #28
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4843      	ldr	r0, [pc, #268]	; (8001f98 <MX_GPIO_Init+0x200>)
 8001e8c:	f001 ff9a 	bl	8003dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001e90:	2386      	movs	r3, #134	; 0x86
 8001e92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e94:	2302      	movs	r3, #2
 8001e96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ea0:	230b      	movs	r3, #11
 8001ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea4:	f107 031c 	add.w	r3, r7, #28
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	483c      	ldr	r0, [pc, #240]	; (8001f9c <MX_GPIO_Init+0x204>)
 8001eac:	f001 ff8a 	bl	8003dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001eb0:	f244 0381 	movw	r3, #16513	; 0x4081
 8001eb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec2:	f107 031c 	add.w	r3, r7, #28
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4831      	ldr	r0, [pc, #196]	; (8001f90 <MX_GPIO_Init+0x1f8>)
 8001eca:	f001 ff7b 	bl	8003dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001ece:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ed2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001edc:	2303      	movs	r3, #3
 8001ede:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ee0:	230b      	movs	r3, #11
 8001ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001ee4:	f107 031c 	add.w	r3, r7, #28
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4829      	ldr	r0, [pc, #164]	; (8001f90 <MX_GPIO_Init+0x1f8>)
 8001eec:	f001 ff6a 	bl	8003dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efc:	2300      	movs	r3, #0
 8001efe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001f00:	f107 031c 	add.w	r3, r7, #28
 8001f04:	4619      	mov	r1, r3
 8001f06:	4823      	ldr	r0, [pc, #140]	; (8001f94 <MX_GPIO_Init+0x1fc>)
 8001f08:	f001 ff5c 	bl	8003dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001f0c:	2380      	movs	r3, #128	; 0x80
 8001f0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f10:	2300      	movs	r3, #0
 8001f12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001f18:	f107 031c 	add.w	r3, r7, #28
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	481d      	ldr	r0, [pc, #116]	; (8001f94 <MX_GPIO_Init+0x1fc>)
 8001f20:	f001 ff50 	bl	8003dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001f24:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001f28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f32:	2303      	movs	r3, #3
 8001f34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001f36:	230a      	movs	r3, #10
 8001f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f3a:	f107 031c 	add.w	r3, r7, #28
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4816      	ldr	r0, [pc, #88]	; (8001f9c <MX_GPIO_Init+0x204>)
 8001f42:	f001 ff3f 	bl	8003dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001f46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001f54:	f107 031c 	add.w	r3, r7, #28
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4810      	ldr	r0, [pc, #64]	; (8001f9c <MX_GPIO_Init+0x204>)
 8001f5c:	f001 ff32 	bl	8003dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001f60:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001f64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f66:	2302      	movs	r3, #2
 8001f68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f72:	230b      	movs	r3, #11
 8001f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f76:	f107 031c 	add.w	r3, r7, #28
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4805      	ldr	r0, [pc, #20]	; (8001f94 <MX_GPIO_Init+0x1fc>)
 8001f7e:	f001 ff21 	bl	8003dc4 <HAL_GPIO_Init>

}
 8001f82:	bf00      	nop
 8001f84:	3730      	adds	r7, #48	; 0x30
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40020400 	.word	0x40020400
 8001f94:	40021800 	.word	0x40021800
 8001f98:	40020800 	.word	0x40020800
 8001f9c:	40020000 	.word	0x40020000

08001fa0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fa4:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <MX_I2C1_Init+0x74>)
 8001fa6:	4a1c      	ldr	r2, [pc, #112]	; (8002018 <MX_I2C1_Init+0x78>)
 8001fa8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8001faa:	4b1a      	ldr	r3, [pc, #104]	; (8002014 <MX_I2C1_Init+0x74>)
 8001fac:	4a1b      	ldr	r2, [pc, #108]	; (800201c <MX_I2C1_Init+0x7c>)
 8001fae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001fb0:	4b18      	ldr	r3, [pc, #96]	; (8002014 <MX_I2C1_Init+0x74>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fb6:	4b17      	ldr	r3, [pc, #92]	; (8002014 <MX_I2C1_Init+0x74>)
 8001fb8:	2201      	movs	r2, #1
 8001fba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fbc:	4b15      	ldr	r3, [pc, #84]	; (8002014 <MX_I2C1_Init+0x74>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001fc2:	4b14      	ldr	r3, [pc, #80]	; (8002014 <MX_I2C1_Init+0x74>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001fc8:	4b12      	ldr	r3, [pc, #72]	; (8002014 <MX_I2C1_Init+0x74>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fce:	4b11      	ldr	r3, [pc, #68]	; (8002014 <MX_I2C1_Init+0x74>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <MX_I2C1_Init+0x74>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fda:	480e      	ldr	r0, [pc, #56]	; (8002014 <MX_I2C1_Init+0x74>)
 8001fdc:	f002 f8d2 	bl	8004184 <HAL_I2C_Init>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001fe6:	f000 fc0d 	bl	8002804 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001fea:	2100      	movs	r1, #0
 8001fec:	4809      	ldr	r0, [pc, #36]	; (8002014 <MX_I2C1_Init+0x74>)
 8001fee:	f003 fb7d 	bl	80056ec <HAL_I2CEx_ConfigAnalogFilter>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001ff8:	f000 fc04 	bl	8002804 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	4805      	ldr	r0, [pc, #20]	; (8002014 <MX_I2C1_Init+0x74>)
 8002000:	f003 fbbf 	bl	8005782 <HAL_I2CEx_ConfigDigitalFilter>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800200a:	f000 fbfb 	bl	8002804 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	2000024c 	.word	0x2000024c
 8002018:	40005400 	.word	0x40005400
 800201c:	00808cd2 	.word	0x00808cd2

08002020 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b0aa      	sub	sp, #168	; 0xa8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002028:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	60da      	str	r2, [r3, #12]
 8002036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002038:	f107 0310 	add.w	r3, r7, #16
 800203c:	2284      	movs	r2, #132	; 0x84
 800203e:	2100      	movs	r1, #0
 8002040:	4618      	mov	r0, r3
 8002042:	f008 fc7e 	bl	800a942 <memset>
  if(i2cHandle->Instance==I2C1)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a2a      	ldr	r2, [pc, #168]	; (80020f4 <HAL_I2C_MspInit+0xd4>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d14c      	bne.n	80020ea <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002050:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002054:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002056:	2300      	movs	r3, #0
 8002058:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800205a:	f107 0310 	add.w	r3, r7, #16
 800205e:	4618      	mov	r0, r3
 8002060:	f004 f8b6 	bl	80061d0 <HAL_RCCEx_PeriphCLKConfig>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800206a:	f000 fbcb 	bl	8002804 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800206e:	4b22      	ldr	r3, [pc, #136]	; (80020f8 <HAL_I2C_MspInit+0xd8>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4a21      	ldr	r2, [pc, #132]	; (80020f8 <HAL_I2C_MspInit+0xd8>)
 8002074:	f043 0302 	orr.w	r3, r3, #2
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4b1f      	ldr	r3, [pc, #124]	; (80020f8 <HAL_I2C_MspInit+0xd8>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002086:	f44f 7340 	mov.w	r3, #768	; 0x300
 800208a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800208e:	2312      	movs	r3, #18
 8002090:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209a:	2303      	movs	r3, #3
 800209c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020a0:	2304      	movs	r3, #4
 80020a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80020aa:	4619      	mov	r1, r3
 80020ac:	4813      	ldr	r0, [pc, #76]	; (80020fc <HAL_I2C_MspInit+0xdc>)
 80020ae:	f001 fe89 	bl	8003dc4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020b2:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <HAL_I2C_MspInit+0xd8>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	4a10      	ldr	r2, [pc, #64]	; (80020f8 <HAL_I2C_MspInit+0xd8>)
 80020b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020bc:	6413      	str	r3, [r2, #64]	; 0x40
 80020be:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <HAL_I2C_MspInit+0xd8>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020c6:	60bb      	str	r3, [r7, #8]
 80020c8:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80020ca:	2200      	movs	r2, #0
 80020cc:	2100      	movs	r1, #0
 80020ce:	201f      	movs	r0, #31
 80020d0:	f001 f82b 	bl	800312a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80020d4:	201f      	movs	r0, #31
 80020d6:	f001 f844 	bl	8003162 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80020da:	2200      	movs	r2, #0
 80020dc:	2100      	movs	r1, #0
 80020de:	2020      	movs	r0, #32
 80020e0:	f001 f823 	bl	800312a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80020e4:	2020      	movs	r0, #32
 80020e6:	f001 f83c 	bl	8003162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80020ea:	bf00      	nop
 80020ec:	37a8      	adds	r7, #168	; 0xa8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40005400 	.word	0x40005400
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40020400 	.word	0x40020400

08002100 <main>:
const int D_PWM = 1250;
uint32_t calculateCRCValue;
uint32_t receivedCRCValue;


int main(void){
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
	// Inicjalizacja peryferiów
	HAL_Init();
 8002104:	f000 feb5 	bl	8002e72 <HAL_Init>
	SystemClock_Config();
 8002108:	f000 fb14 	bl	8002734 <SystemClock_Config>
	MX_GPIO_Init();
 800210c:	f7ff fe44 	bl	8001d98 <MX_GPIO_Init>
	MX_DMA_Init();
 8002110:	f7ff fe24 	bl	8001d5c <MX_DMA_Init>
	MX_USART3_UART_Init();
 8002114:	f000 fdba 	bl	8002c8c <MX_USART3_UART_Init>
	MX_I2C1_Init();
 8002118:	f7ff ff42 	bl	8001fa0 <MX_I2C1_Init>

	// Konfiguracja czujnika
	SensorConfiguration();
 800211c:	f000 fae8 	bl	80026f0 <SensorConfiguration>

	// Inicjalizacja tim4
	MX_TIM_Init();
 8002120:	f000 fa6c 	bl	80025fc <MX_TIM_Init>
	HAL_TIM_Base_Start_IT(&htim4);
 8002124:	4818      	ldr	r0, [pc, #96]	; (8002188 <main+0x88>)
 8002126:	f004 ffab 	bl	8007080 <HAL_TIM_Base_Start_IT>

	// Inicjalizacja PWM
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800212a:	2100      	movs	r1, #0
 800212c:	4816      	ldr	r0, [pc, #88]	; (8002188 <main+0x88>)
 800212e:	f005 f881 	bl	8007234 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8002132:	4b15      	ldr	r3, [pc, #84]	; (8002188 <main+0x88>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2200      	movs	r2, #0
 8002138:	635a      	str	r2, [r3, #52]	; 0x34

	// Inicjalizacja regulatora PID i zmiennych
	InitializeSettings(&data);
 800213a:	4814      	ldr	r0, [pc, #80]	; (800218c <main+0x8c>)
 800213c:	f000 f9da 	bl	80024f4 <InitializeSettings>
	Tref = data.Tref;
 8002140:	4b12      	ldr	r3, [pc, #72]	; (800218c <main+0x8c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a12      	ldr	r2, [pc, #72]	; (8002190 <main+0x90>)
 8002146:	6013      	str	r3, [r2, #0]
	PID.Kp = data.Kp;
 8002148:	4b10      	ldr	r3, [pc, #64]	; (800218c <main+0x8c>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	4a11      	ldr	r2, [pc, #68]	; (8002194 <main+0x94>)
 800214e:	6193      	str	r3, [r2, #24]
	PID.Ki = data.Ki;
 8002150:	4b0e      	ldr	r3, [pc, #56]	; (800218c <main+0x8c>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	4a0f      	ldr	r2, [pc, #60]	; (8002194 <main+0x94>)
 8002156:	61d3      	str	r3, [r2, #28]
	PID.Kd = data.Kd;
 8002158:	4b0c      	ldr	r3, [pc, #48]	; (800218c <main+0x8c>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	4a0d      	ldr	r2, [pc, #52]	; (8002194 <main+0x94>)
 800215e:	6213      	str	r3, [r2, #32]
	arm_pid_init_f32(&PID, 1);
 8002160:	2101      	movs	r1, #1
 8002162:	480c      	ldr	r0, [pc, #48]	; (8002194 <main+0x94>)
 8002164:	f007 fc06 	bl	8009974 <arm_pid_init_f32>

	// Odbieranie nastaw z GUI
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, ReceiveBuffer, ReceiveBuffer_SIZE);
 8002168:	2278      	movs	r2, #120	; 0x78
 800216a:	490b      	ldr	r1, [pc, #44]	; (8002198 <main+0x98>)
 800216c:	480b      	ldr	r0, [pc, #44]	; (800219c <main+0x9c>)
 800216e:	f007 fbac 	bl	80098ca <HAL_UARTEx_ReceiveToIdle_DMA>
	// Inicjalizacja CRC
    HAL_CRC_Init(&hcrc);
 8002172:	480b      	ldr	r0, [pc, #44]	; (80021a0 <main+0xa0>)
 8002174:	f001 f810 	bl	8003198 <HAL_CRC_Init>
	MX_CRC_Init();
 8002178:	f7ff fdae 	bl	8001cd8 <MX_CRC_Init>
	// Inicjalizacja RTC
	MX_RTC_Init();
 800217c:	f000 fb48 	bl	8002810 <MX_RTC_Init>
    HAL_RTC_Init(&hrtc);
 8002180:	4808      	ldr	r0, [pc, #32]	; (80021a4 <main+0xa4>)
 8002182:	f004 fc15 	bl	80069b0 <HAL_RTC_Init>


	while(1){
 8002186:	e7fe      	b.n	8002186 <main+0x86>
 8002188:	200004b4 	.word	0x200004b4
 800218c:	20000424 	.word	0x20000424
 8002190:	20000474 	.word	0x20000474
 8002194:	20000444 	.word	0x20000444
 8002198:	20000318 	.word	0x20000318
 800219c:	20000500 	.word	0x20000500
 80021a0:	20000228 	.word	0x20000228
 80021a4:	20000490 	.word	0x20000490

080021a8 <HAL_TIM_PeriodElapsedCallback>:
	}
}

// FUNKCJE UZYTKOWNIKA -----------------------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80021a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80021ac:	b08d      	sub	sp, #52	; 0x34
 80021ae:	af06      	add	r7, sp, #24
 80021b0:	6078      	str	r0, [r7, #4]
	// 2) POMIAR
	// 3) WYSLANIE POMIARU
	// 4) ALGORYM REGULACJI PID
	// Dodaj 4.2) FILTR CYFROWY

	if(htim->Instance == TIM4){
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4aa3      	ldr	r2, [pc, #652]	; (8002444 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	f040 818d 	bne.w	80024d8 <HAL_TIM_PeriodElapsedCallback+0x330>
		HAL_RTC_GetTime(&hrtc,  &time,  RTC_FORMAT_BIN);
 80021be:	2200      	movs	r2, #0
 80021c0:	49a1      	ldr	r1, [pc, #644]	; (8002448 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80021c2:	48a2      	ldr	r0, [pc, #648]	; (800244c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80021c4:	f004 fd12 	bl	8006bec <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc,  &date,  RTC_FORMAT_BIN);
 80021c8:	2200      	movs	r2, #0
 80021ca:	49a1      	ldr	r1, [pc, #644]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80021cc:	489f      	ldr	r0, [pc, #636]	; (800244c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80021ce:	f004 fdef 	bl	8006db0 <HAL_RTC_GetDate>

		//Processing danych
		if(ProcessDataFlag == 1){
 80021d2:	4ba0      	ldr	r3, [pc, #640]	; (8002454 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	f040 808b 	bne.w	80022f2 <HAL_TIM_PeriodElapsedCallback+0x14a>
			calculateCRCValue = calculateCRC((char*) MainBuffer, sizeof(MainBuffer));
 80021dc:	2178      	movs	r1, #120	; 0x78
 80021de:	489e      	ldr	r0, [pc, #632]	; (8002458 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80021e0:	f000 f9fa 	bl	80025d8 <calculateCRC>
 80021e4:	4603      	mov	r3, r0
 80021e6:	4a9d      	ldr	r2, [pc, #628]	; (800245c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80021e8:	6013      	str	r3, [r2, #0]

			// tfloat;
			if (MainBuffer[0] == 't') {
 80021ea:	4b9b      	ldr	r3, [pc, #620]	; (8002458 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b74      	cmp	r3, #116	; 0x74
 80021f0:	d114      	bne.n	800221c <HAL_TIM_PeriodElapsedCallback+0x74>
				// aktualną Tref zapisujemy do zmiennej
				temp.Tref = Tref;
 80021f2:	4b9b      	ldr	r3, [pc, #620]	; (8002460 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a9b      	ldr	r2, [pc, #620]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80021f8:	6013      	str	r3, [r2, #0]
				sscanf((char*)&MainBuffer[1], "%f;CRC:%lu;", &Tref, &receivedCRCValue);
 80021fa:	4b9b      	ldr	r3, [pc, #620]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80021fc:	4a98      	ldr	r2, [pc, #608]	; (8002460 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80021fe:	499b      	ldr	r1, [pc, #620]	; (800246c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002200:	489b      	ldr	r0, [pc, #620]	; (8002470 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002202:	f008 fb2d 	bl	800a860 <siscanf>

				// jeśli CRC nie są identyczne to przypisujemy poprzednią Tref zamiast odebranej z GUI
				if(calculateCRCValue != receivedCRCValue) {
 8002206:	4b95      	ldr	r3, [pc, #596]	; (800245c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	4b97      	ldr	r3, [pc, #604]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d06c      	beq.n	80022ec <HAL_TIM_PeriodElapsedCallback+0x144>
					Tref = temp.Tref;
 8002212:	4b94      	ldr	r3, [pc, #592]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a92      	ldr	r2, [pc, #584]	; (8002460 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	e067      	b.n	80022ec <HAL_TIM_PeriodElapsedCallback+0x144>
				}
			}
			// pfloat,float,float;
			else if (MainBuffer[0] == 'p') {
 800221c:	4b8e      	ldr	r3, [pc, #568]	; (8002458 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b70      	cmp	r3, #112	; 0x70
 8002222:	d163      	bne.n	80022ec <HAL_TIM_PeriodElapsedCallback+0x144>
				// aktualne nastawy zapisujemy do zmiennych
				temp.Kp = PID.Kp;
 8002224:	4b93      	ldr	r3, [pc, #588]	; (8002474 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	4a8e      	ldr	r2, [pc, #568]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800222a:	6053      	str	r3, [r2, #4]
				temp.Ki = PID.Ki;
 800222c:	4b91      	ldr	r3, [pc, #580]	; (8002474 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800222e:	69db      	ldr	r3, [r3, #28]
 8002230:	4a8c      	ldr	r2, [pc, #560]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002232:	6093      	str	r3, [r2, #8]
				temp.Kd = PID.Kd;
 8002234:	4b8f      	ldr	r3, [pc, #572]	; (8002474 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	4a8a      	ldr	r2, [pc, #552]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800223a:	60d3      	str	r3, [r2, #12]
				sscanf((char*)&MainBuffer[1], "%f,%f,%f;CRC:%lu;", &PID.Kp, &PID.Ki, &PID.Kd, &receivedCRCValue);
 800223c:	4b8a      	ldr	r3, [pc, #552]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800223e:	9301      	str	r3, [sp, #4]
 8002240:	4b8d      	ldr	r3, [pc, #564]	; (8002478 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	4b8d      	ldr	r3, [pc, #564]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002246:	4a8e      	ldr	r2, [pc, #568]	; (8002480 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002248:	498e      	ldr	r1, [pc, #568]	; (8002484 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800224a:	4889      	ldr	r0, [pc, #548]	; (8002470 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800224c:	f008 fb08 	bl	800a860 <siscanf>

				// jeśli CRC nie są identyczne to przypisujemy poprzednie nastawy PID, zamiast odebranych z GUI
				if(calculateCRCValue != receivedCRCValue) {
 8002250:	4b82      	ldr	r3, [pc, #520]	; (800245c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4b84      	ldr	r3, [pc, #528]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	d00b      	beq.n	8002274 <HAL_TIM_PeriodElapsedCallback+0xcc>
					PID.Kp = temp.Kp;
 800225c:	4b81      	ldr	r3, [pc, #516]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	4a84      	ldr	r2, [pc, #528]	; (8002474 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002262:	6193      	str	r3, [r2, #24]
					PID.Ki = temp.Ki;
 8002264:	4b7f      	ldr	r3, [pc, #508]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	4a82      	ldr	r2, [pc, #520]	; (8002474 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800226a:	61d3      	str	r3, [r2, #28]
					PID.Kd = temp.Kd;
 800226c:	4b7d      	ldr	r3, [pc, #500]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	4a80      	ldr	r2, [pc, #512]	; (8002474 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002272:	6213      	str	r3, [r2, #32]
				}

				PID.A0 = PID.Kp + PID.Ki + PID.Kd;
 8002274:	4b7f      	ldr	r3, [pc, #508]	; (8002474 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002276:	ed93 7a06 	vldr	s14, [r3, #24]
 800227a:	4b7e      	ldr	r3, [pc, #504]	; (8002474 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800227c:	edd3 7a07 	vldr	s15, [r3, #28]
 8002280:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002284:	4b7b      	ldr	r3, [pc, #492]	; (8002474 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002286:	edd3 7a08 	vldr	s15, [r3, #32]
 800228a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800228e:	4b79      	ldr	r3, [pc, #484]	; (8002474 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002290:	edc3 7a00 	vstr	s15, [r3]
				PID.A1 = -PID.Kp - 2.0*PID.Kd;
 8002294:	4b77      	ldr	r3, [pc, #476]	; (8002474 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002296:	edd3 7a06 	vldr	s15, [r3, #24]
 800229a:	eef1 7a67 	vneg.f32	s15, s15
 800229e:	ee17 3a90 	vmov	r3, s15
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe f970 	bl	8000588 <__aeabi_f2d>
 80022a8:	4604      	mov	r4, r0
 80022aa:	460d      	mov	r5, r1
 80022ac:	4b71      	ldr	r3, [pc, #452]	; (8002474 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe f969 	bl	8000588 <__aeabi_f2d>
 80022b6:	4602      	mov	r2, r0
 80022b8:	460b      	mov	r3, r1
 80022ba:	f7fe f807 	bl	80002cc <__adddf3>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	4620      	mov	r0, r4
 80022c4:	4629      	mov	r1, r5
 80022c6:	f7fd ffff 	bl	80002c8 <__aeabi_dsub>
 80022ca:	4602      	mov	r2, r0
 80022cc:	460b      	mov	r3, r1
 80022ce:	4610      	mov	r0, r2
 80022d0:	4619      	mov	r1, r3
 80022d2:	f7fe fca9 	bl	8000c28 <__aeabi_d2f>
 80022d6:	4603      	mov	r3, r0
 80022d8:	4a66      	ldr	r2, [pc, #408]	; (8002474 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80022da:	6053      	str	r3, [r2, #4]
				PID.A2 = PID.Kd;
 80022dc:	4b65      	ldr	r3, [pc, #404]	; (8002474 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	4a64      	ldr	r2, [pc, #400]	; (8002474 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80022e2:	6093      	str	r3, [r2, #8]
				arm_pid_init_f32(&PID, 0);
 80022e4:	2100      	movs	r1, #0
 80022e6:	4863      	ldr	r0, [pc, #396]	; (8002474 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80022e8:	f007 fb44 	bl	8009974 <arm_pid_init_f32>
			}
			ProcessDataFlag = 0;
 80022ec:	4b59      	ldr	r3, [pc, #356]	; (8002454 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
		}

		// Pomiar
		BMP280_Measure();
 80022f2:	f7ff fc65 	bl	8001bc0 <BMP280_Measure>

		// Obliczanie CRC oraz wysyłanie pomiaru do terminala
		sprintf(SendBuffer, "[%d] %2.2f, %2.2f, %d;", time.Hours , Temperature, Tref, (int)(U*100.0));
 80022f6:	4b54      	ldr	r3, [pc, #336]	; (8002448 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	461e      	mov	r6, r3
 80022fc:	4b62      	ldr	r3, [pc, #392]	; (8002488 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4618      	mov	r0, r3
 8002302:	f7fe f941 	bl	8000588 <__aeabi_f2d>
 8002306:	4604      	mov	r4, r0
 8002308:	460d      	mov	r5, r1
 800230a:	4b55      	ldr	r3, [pc, #340]	; (8002460 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe f93a 	bl	8000588 <__aeabi_f2d>
 8002314:	4680      	mov	r8, r0
 8002316:	4689      	mov	r9, r1
 8002318:	4b5c      	ldr	r3, [pc, #368]	; (800248c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f7fe f933 	bl	8000588 <__aeabi_f2d>
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	4b5a      	ldr	r3, [pc, #360]	; (8002490 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002328:	f7fe f986 	bl	8000638 <__aeabi_dmul>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	4610      	mov	r0, r2
 8002332:	4619      	mov	r1, r3
 8002334:	f7fe fc30 	bl	8000b98 <__aeabi_d2iz>
 8002338:	4603      	mov	r3, r0
 800233a:	9304      	str	r3, [sp, #16]
 800233c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002340:	e9cd 4500 	strd	r4, r5, [sp]
 8002344:	4632      	mov	r2, r6
 8002346:	4953      	ldr	r1, [pc, #332]	; (8002494 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002348:	4853      	ldr	r0, [pc, #332]	; (8002498 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800234a:	f008 fa69 	bl	800a820 <siprintf>
		// obliczenie CRC
		calculateCRCValue = calculateCRC(SendBuffer, sizeof(SendBuffer));
 800234e:	2178      	movs	r1, #120	; 0x78
 8002350:	4851      	ldr	r0, [pc, #324]	; (8002498 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002352:	f000 f941 	bl	80025d8 <calculateCRC>
 8002356:	4603      	mov	r3, r0
 8002358:	4a40      	ldr	r2, [pc, #256]	; (800245c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800235a:	6013      	str	r3, [r2, #0]
		sprintf(SendBuffer + strlen(SendBuffer), "CRC:%lu;\r\n", calculateCRCValue);
 800235c:	484e      	ldr	r0, [pc, #312]	; (8002498 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800235e:	f7fd ffa7 	bl	80002b0 <strlen>
 8002362:	4603      	mov	r3, r0
 8002364:	4a4c      	ldr	r2, [pc, #304]	; (8002498 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002366:	4413      	add	r3, r2
 8002368:	4a3c      	ldr	r2, [pc, #240]	; (800245c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800236a:	6812      	ldr	r2, [r2, #0]
 800236c:	494b      	ldr	r1, [pc, #300]	; (800249c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800236e:	4618      	mov	r0, r3
 8002370:	f008 fa56 	bl	800a820 <siprintf>
		SendMessage(SendBuffer);
 8002374:	4848      	ldr	r0, [pc, #288]	; (8002498 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002376:	f000 f915 	bl	80025a4 <SendMessage>

		// Zamkniety uklad regulacji z regulatorem PID
		//Uchyb regulacji
		error = Tref - Temperature;
 800237a:	4b39      	ldr	r3, [pc, #228]	; (8002460 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800237c:	ed93 7a00 	vldr	s14, [r3]
 8002380:	4b41      	ldr	r3, [pc, #260]	; (8002488 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002382:	edd3 7a00 	vldr	s15, [r3]
 8002386:	ee77 7a67 	vsub.f32	s15, s14, s15
 800238a:	4b45      	ldr	r3, [pc, #276]	; (80024a0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800238c:	edc3 7a00 	vstr	s15, [r3]
		// sygnal sterujacy z regulatora
		R = arm_pid_f32(&PID, error);
 8002390:	4b43      	ldr	r3, [pc, #268]	; (80024a0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a37      	ldr	r2, [pc, #220]	; (8002474 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002396:	617a      	str	r2, [r7, #20]
 8002398:	613b      	str	r3, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	ed93 7a00 	vldr	s14, [r3]
 80023a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80023a4:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	edd3 6a01 	vldr	s13, [r3, #4]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	edd3 7a03 	vldr	s15, [r3, #12]
 80023b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80023b8:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	edd3 6a02 	vldr	s13, [r3, #8]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	edd3 7a04 	vldr	s15, [r3, #16]
 80023c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80023d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023da:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	68da      	ldr	r2, [r3, #12]
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	4a2b      	ldr	r2, [pc, #172]	; (80024a4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80023f6:	6013      	str	r3, [r2, #0]
		U = R/10.0;
 80023f8:	4b2a      	ldr	r3, [pc, #168]	; (80024a4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80023fa:	ed93 7a00 	vldr	s14, [r3]
 80023fe:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002402:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002406:	4b21      	ldr	r3, [pc, #132]	; (800248c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002408:	edc3 7a00 	vstr	s15, [r3]
		// Saturacja sygnalu U
		U = (U <= 1.0) ? U : 1.0;
 800240c:	4b1f      	ldr	r3, [pc, #124]	; (800248c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800240e:	edd3 7a00 	vldr	s15, [r3]
 8002412:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002416:	eef4 7ac7 	vcmpe.f32	s15, s14
 800241a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800241e:	d802      	bhi.n	8002426 <HAL_TIM_PeriodElapsedCallback+0x27e>
 8002420:	4b1a      	ldr	r3, [pc, #104]	; (800248c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	e001      	b.n	800242a <HAL_TIM_PeriodElapsedCallback+0x282>
 8002426:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800242a:	4a18      	ldr	r2, [pc, #96]	; (800248c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800242c:	6013      	str	r3, [r2, #0]
		U = (U >= 0.0) ? U : 0.0;
 800242e:	4b17      	ldr	r3, [pc, #92]	; (800248c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002430:	edd3 7a00 	vldr	s15, [r3]
 8002434:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800243c:	db34      	blt.n	80024a8 <HAL_TIM_PeriodElapsedCallback+0x300>
 800243e:	4b13      	ldr	r3, [pc, #76]	; (800248c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	e033      	b.n	80024ac <HAL_TIM_PeriodElapsedCallback+0x304>
 8002444:	40000800 	.word	0x40000800
 8002448:	2000040c 	.word	0x2000040c
 800244c:	20000490 	.word	0x20000490
 8002450:	20000420 	.word	0x20000420
 8002454:	20000408 	.word	0x20000408
 8002458:	20000390 	.word	0x20000390
 800245c:	20000488 	.word	0x20000488
 8002460:	20000474 	.word	0x20000474
 8002464:	20000434 	.word	0x20000434
 8002468:	2000048c 	.word	0x2000048c
 800246c:	0800e9e0 	.word	0x0800e9e0
 8002470:	20000391 	.word	0x20000391
 8002474:	20000444 	.word	0x20000444
 8002478:	20000464 	.word	0x20000464
 800247c:	20000460 	.word	0x20000460
 8002480:	2000045c 	.word	0x2000045c
 8002484:	0800e9ec 	.word	0x0800e9ec
 8002488:	20000468 	.word	0x20000468
 800248c:	20000480 	.word	0x20000480
 8002490:	40590000 	.word	0x40590000
 8002494:	0800ea00 	.word	0x0800ea00
 8002498:	200002a0 	.word	0x200002a0
 800249c:	0800ea18 	.word	0x0800ea18
 80024a0:	20000478 	.word	0x20000478
 80024a4:	2000047c 	.word	0x2000047c
 80024a8:	f04f 0300 	mov.w	r3, #0
 80024ac:	4a0d      	ldr	r2, [pc, #52]	; (80024e4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80024ae:	6013      	str	r3, [r2, #0]
		// Przeliczenie U na set_compare
		set_comp = U * D_PWM;
 80024b0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80024e8 <HAL_TIM_PeriodElapsedCallback+0x340>
 80024b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024b8:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80024ba:	edd3 7a00 	vldr	s15, [r3]
 80024be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024c6:	ee17 2a90 	vmov	r2, s15
 80024ca:	4b08      	ldr	r3, [pc, #32]	; (80024ec <HAL_TIM_PeriodElapsedCallback+0x344>)
 80024cc:	601a      	str	r2, [r3, #0]
		// Zadanie wypelnienia PWM
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, set_comp);
 80024ce:	4b07      	ldr	r3, [pc, #28]	; (80024ec <HAL_TIM_PeriodElapsedCallback+0x344>)
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 80024d8:	bf00      	nop
 80024da:	371c      	adds	r7, #28
 80024dc:	46bd      	mov	sp, r7
 80024de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80024e2:	bf00      	nop
 80024e4:	20000480 	.word	0x20000480
 80024e8:	000004e2 	.word	0x000004e2
 80024ec:	20000484 	.word	0x20000484
 80024f0:	200004b4 	.word	0x200004b4

080024f4 <InitializeSettings>:

void InitializeSettings(Settings *data) {
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]

	// Wczytanie ustawien zapisanych w EEPROM

	// Inicjalizacja ustawien domyslnych
    data->Tref = 25.0;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a0a      	ldr	r2, [pc, #40]	; (8002528 <InitializeSettings+0x34>)
 8002500:	601a      	str	r2, [r3, #0]
    data->Kp = 1.0;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002508:	605a      	str	r2, [r3, #4]
    data->Ki = 0.0;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	609a      	str	r2, [r3, #8]
    data->Kd = 0.0;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f04f 0200 	mov.w	r2, #0
 8002518:	60da      	str	r2, [r3, #12]
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	41c80000 	.word	0x41c80000

0800252c <HAL_UARTEx_RxEventCallback>:
void SaveSettings(Settings *data){

	// Zapisywanie danych do EEPROM
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	807b      	strh	r3, [r7, #2]

	// Funkcja do odbierania paczek danych z UART
    if(huart->Instance == USART3)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a14      	ldr	r2, [pc, #80]	; (8002590 <HAL_UARTEx_RxEventCallback+0x64>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d122      	bne.n	8002588 <HAL_UARTEx_RxEventCallback+0x5c>
    {
    	if(ProcessDataFlag == 0){
 8002542:	4b14      	ldr	r3, [pc, #80]	; (8002594 <HAL_UARTEx_RxEventCallback+0x68>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d119      	bne.n	800257e <HAL_UARTEx_RxEventCallback+0x52>
    		memset(MainBuffer, '\000', MainBuffer_SIZE);
 800254a:	2278      	movs	r2, #120	; 0x78
 800254c:	2100      	movs	r1, #0
 800254e:	4812      	ldr	r0, [pc, #72]	; (8002598 <HAL_UARTEx_RxEventCallback+0x6c>)
 8002550:	f008 f9f7 	bl	800a942 <memset>
    		memcpy(MainBuffer, ReceiveBuffer, ReceiveBuffer_SIZE);
 8002554:	4a10      	ldr	r2, [pc, #64]	; (8002598 <HAL_UARTEx_RxEventCallback+0x6c>)
 8002556:	4b11      	ldr	r3, [pc, #68]	; (800259c <HAL_UARTEx_RxEventCallback+0x70>)
 8002558:	4610      	mov	r0, r2
 800255a:	4619      	mov	r1, r3
 800255c:	2378      	movs	r3, #120	; 0x78
 800255e:	461a      	mov	r2, r3
 8002560:	f008 fa6f 	bl	800aa42 <memcpy>
    		memset(ReceiveBuffer, '\000', ReceiveBuffer_SIZE);
 8002564:	2278      	movs	r2, #120	; 0x78
 8002566:	2100      	movs	r1, #0
 8002568:	480c      	ldr	r0, [pc, #48]	; (800259c <HAL_UARTEx_RxEventCallback+0x70>)
 800256a:	f008 f9ea 	bl	800a942 <memset>
    		ProcessDataFlag = 1;
 800256e:	4b09      	ldr	r3, [pc, #36]	; (8002594 <HAL_UARTEx_RxEventCallback+0x68>)
 8002570:	2201      	movs	r2, #1
 8002572:	601a      	str	r2, [r3, #0]

    		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, ReceiveBuffer, ReceiveBuffer_SIZE);
 8002574:	2278      	movs	r2, #120	; 0x78
 8002576:	4909      	ldr	r1, [pc, #36]	; (800259c <HAL_UARTEx_RxEventCallback+0x70>)
 8002578:	4809      	ldr	r0, [pc, #36]	; (80025a0 <HAL_UARTEx_RxEventCallback+0x74>)
 800257a:	f007 f9a6 	bl	80098ca <HAL_UARTEx_ReceiveToIdle_DMA>
    	}

    	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, ReceiveBuffer, ReceiveBuffer_SIZE);
 800257e:	2278      	movs	r2, #120	; 0x78
 8002580:	4906      	ldr	r1, [pc, #24]	; (800259c <HAL_UARTEx_RxEventCallback+0x70>)
 8002582:	4807      	ldr	r0, [pc, #28]	; (80025a0 <HAL_UARTEx_RxEventCallback+0x74>)
 8002584:	f007 f9a1 	bl	80098ca <HAL_UARTEx_ReceiveToIdle_DMA>
    }
}
 8002588:	bf00      	nop
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40004800 	.word	0x40004800
 8002594:	20000408 	.word	0x20000408
 8002598:	20000390 	.word	0x20000390
 800259c:	20000318 	.word	0x20000318
 80025a0:	20000500 	.word	0x20000500

080025a4 <SendMessage>:

void SendMessage(const char *message){
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
//	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
//	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
	// Wysylanie wiadomosci do UART
	if (HAL_UART_Transmit_IT(&huart3, (uint8_t*)message, strlen(message)) != HAL_OK) {
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f7fd fe7f 	bl	80002b0 <strlen>
 80025b2:	4603      	mov	r3, r0
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	461a      	mov	r2, r3
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4806      	ldr	r0, [pc, #24]	; (80025d4 <SendMessage+0x30>)
 80025bc:	f005 ff12 	bl	80083e4 <HAL_UART_Transmit_IT>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <SendMessage+0x26>
		Error_Handler();
 80025c6:	f000 f91d 	bl	8002804 <Error_Handler>
	}
}
 80025ca:	bf00      	nop
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	20000500 	.word	0x20000500

080025d8 <calculateCRC>:

unsigned int calculateCRC(char* data, uint32_t dataSize)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
    return HAL_CRC_Calculate(&hcrc, (uint32_t*)data, dataSize);
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	4804      	ldr	r0, [pc, #16]	; (80025f8 <calculateCRC+0x20>)
 80025e8:	f000 fe3a 	bl	8003260 <HAL_CRC_Calculate>
 80025ec:	4603      	mov	r3, r0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	20000228 	.word	0x20000228

080025fc <MX_TIM_Init>:

void MX_TIM_Init(void){
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08e      	sub	sp, #56	; 0x38
 8002600:	af00      	add	r7, sp, #0

	// Redefinicja funkcji bibliotecznej MX_TIM4_Init(); Okres PWM = 500ms
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002602:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	605a      	str	r2, [r3, #4]
 800260c:	609a      	str	r2, [r3, #8]
 800260e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002610:	f107 031c 	add.w	r3, r7, #28
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	605a      	str	r2, [r3, #4]
 800261a:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 800261c:	463b      	mov	r3, r7
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	605a      	str	r2, [r3, #4]
 8002624:	609a      	str	r2, [r3, #8]
 8002626:	60da      	str	r2, [r3, #12]
 8002628:	611a      	str	r2, [r3, #16]
 800262a:	615a      	str	r2, [r3, #20]
 800262c:	619a      	str	r2, [r3, #24]

	htim4.Instance = TIM4;
 800262e:	4b2e      	ldr	r3, [pc, #184]	; (80026e8 <MX_TIM_Init+0xec>)
 8002630:	4a2e      	ldr	r2, [pc, #184]	; (80026ec <MX_TIM_Init+0xf0>)
 8002632:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 3599;
 8002634:	4b2c      	ldr	r3, [pc, #176]	; (80026e8 <MX_TIM_Init+0xec>)
 8002636:	f640 620f 	movw	r2, #3599	; 0xe0f
 800263a:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800263c:	4b2a      	ldr	r3, [pc, #168]	; (80026e8 <MX_TIM_Init+0xec>)
 800263e:	2200      	movs	r2, #0
 8002640:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 9999;
 8002642:	4b29      	ldr	r3, [pc, #164]	; (80026e8 <MX_TIM_Init+0xec>)
 8002644:	f242 720f 	movw	r2, #9999	; 0x270f
 8002648:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800264a:	4b27      	ldr	r3, [pc, #156]	; (80026e8 <MX_TIM_Init+0xec>)
 800264c:	2200      	movs	r2, #0
 800264e:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002650:	4b25      	ldr	r3, [pc, #148]	; (80026e8 <MX_TIM_Init+0xec>)
 8002652:	2200      	movs	r2, #0
 8002654:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002656:	4824      	ldr	r0, [pc, #144]	; (80026e8 <MX_TIM_Init+0xec>)
 8002658:	f004 fcba 	bl	8006fd0 <HAL_TIM_Base_Init>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <MX_TIM_Init+0x6a>
	{
		Error_Handler();
 8002662:	f000 f8cf 	bl	8002804 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002666:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800266a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800266c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002670:	4619      	mov	r1, r3
 8002672:	481d      	ldr	r0, [pc, #116]	; (80026e8 <MX_TIM_Init+0xec>)
 8002674:	f005 f90c 	bl	8007890 <HAL_TIM_ConfigClockSource>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_TIM_Init+0x86>
	{
		Error_Handler();
 800267e:	f000 f8c1 	bl	8002804 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002682:	4819      	ldr	r0, [pc, #100]	; (80026e8 <MX_TIM_Init+0xec>)
 8002684:	f004 fd74 	bl	8007170 <HAL_TIM_PWM_Init>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <MX_TIM_Init+0x96>
	{
		Error_Handler();
 800268e:	f000 f8b9 	bl	8002804 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002692:	2300      	movs	r3, #0
 8002694:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002696:	2300      	movs	r3, #0
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800269a:	f107 031c 	add.w	r3, r7, #28
 800269e:	4619      	mov	r1, r3
 80026a0:	4811      	ldr	r0, [pc, #68]	; (80026e8 <MX_TIM_Init+0xec>)
 80026a2:	f005 fda5 	bl	80081f0 <HAL_TIMEx_MasterConfigSynchronization>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <MX_TIM_Init+0xb4>
	{
		Error_Handler();
 80026ac:	f000 f8aa 	bl	8002804 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026b0:	2360      	movs	r3, #96	; 0x60
 80026b2:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 500;
 80026b4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80026b8:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026ba:	2300      	movs	r3, #0
 80026bc:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026be:	2300      	movs	r3, #0
 80026c0:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026c2:	463b      	mov	r3, r7
 80026c4:	2200      	movs	r2, #0
 80026c6:	4619      	mov	r1, r3
 80026c8:	4807      	ldr	r0, [pc, #28]	; (80026e8 <MX_TIM_Init+0xec>)
 80026ca:	f004 ffcd 	bl	8007668 <HAL_TIM_PWM_ConfigChannel>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <MX_TIM_Init+0xdc>
	{
		Error_Handler();
 80026d4:	f000 f896 	bl	8002804 <Error_Handler>
	}

	HAL_TIM_MspPostInit(&htim4);
 80026d8:	4803      	ldr	r0, [pc, #12]	; (80026e8 <MX_TIM_Init+0xec>)
 80026da:	f000 fa9f 	bl	8002c1c <HAL_TIM_MspPostInit>
}
 80026de:	bf00      	nop
 80026e0:	3738      	adds	r7, #56	; 0x38
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	200004b4 	.word	0x200004b4
 80026ec:	40000800 	.word	0x40000800

080026f0 <SensorConfiguration>:

void SensorConfiguration(void){
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af02      	add	r7, sp, #8

	// Konfiguracja czujnika
	int ret = BMP280_Config(OSRS_16, OSRS_16, OSRS_OFF, MODE_NORMAL, T_SB_1000, IIR_16);
 80026f6:	2304      	movs	r3, #4
 80026f8:	9301      	str	r3, [sp, #4]
 80026fa:	2305      	movs	r3, #5
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	2303      	movs	r3, #3
 8002700:	2200      	movs	r2, #0
 8002702:	2105      	movs	r1, #5
 8002704:	2005      	movs	r0, #5
 8002706:	f7fe fdc5 	bl	8001294 <BMP280_Config>
 800270a:	6078      	str	r0, [r7, #4]

	if (ret>=0){
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	db04      	blt.n	800271c <SensorConfiguration+0x2c>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8002712:	2101      	movs	r1, #1
 8002714:	4806      	ldr	r0, [pc, #24]	; (8002730 <SensorConfiguration+0x40>)
 8002716:	f001 fd1a 	bl	800414e <HAL_GPIO_TogglePin>
	}else{
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
	}
}
 800271a:	e004      	b.n	8002726 <SensorConfiguration+0x36>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800271c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002720:	4803      	ldr	r0, [pc, #12]	; (8002730 <SensorConfiguration+0x40>)
 8002722:	f001 fd14 	bl	800414e <HAL_GPIO_TogglePin>
}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40020400 	.word	0x40020400

08002734 <SystemClock_Config>:

// FUNKCJE SYSTEMOWE -----------------------------------------
void SystemClock_Config(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b094      	sub	sp, #80	; 0x50
 8002738:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800273a:	f107 0320 	add.w	r3, r7, #32
 800273e:	2230      	movs	r2, #48	; 0x30
 8002740:	2100      	movs	r1, #0
 8002742:	4618      	mov	r0, r3
 8002744:	f008 f8fd 	bl	800a942 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002748:	f107 030c 	add.w	r3, r7, #12
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	60da      	str	r2, [r3, #12]
 8002756:	611a      	str	r2, [r3, #16]

	HAL_PWR_EnableBkUpAccess();
 8002758:	f003 f860 	bl	800581c <HAL_PWR_EnableBkUpAccess>

	__HAL_RCC_PWR_CLK_ENABLE();
 800275c:	4b27      	ldr	r3, [pc, #156]	; (80027fc <SystemClock_Config+0xc8>)
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	4a26      	ldr	r2, [pc, #152]	; (80027fc <SystemClock_Config+0xc8>)
 8002762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002766:	6413      	str	r3, [r2, #64]	; 0x40
 8002768:	4b24      	ldr	r3, [pc, #144]	; (80027fc <SystemClock_Config+0xc8>)
 800276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002770:	60bb      	str	r3, [r7, #8]
 8002772:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002774:	4b22      	ldr	r3, [pc, #136]	; (8002800 <SystemClock_Config+0xcc>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800277c:	4a20      	ldr	r2, [pc, #128]	; (8002800 <SystemClock_Config+0xcc>)
 800277e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002782:	6013      	str	r3, [r2, #0]
 8002784:	4b1e      	ldr	r3, [pc, #120]	; (8002800 <SystemClock_Config+0xcc>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800278c:	607b      	str	r3, [r7, #4]
 800278e:	687b      	ldr	r3, [r7, #4]

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002790:	2301      	movs	r3, #1
 8002792:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002794:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002798:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800279a:	2302      	movs	r3, #2
 800279c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800279e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80027a4:	2304      	movs	r3, #4
 80027a6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 80027a8:	2348      	movs	r3, #72	; 0x48
 80027aa:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027ac:	2302      	movs	r3, #2
 80027ae:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 3;
 80027b0:	2303      	movs	r3, #3
 80027b2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027b4:	f107 0320 	add.w	r3, r7, #32
 80027b8:	4618      	mov	r0, r3
 80027ba:	f003 f83f 	bl	800583c <HAL_RCC_OscConfig>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <SystemClock_Config+0x94>
	{
		Error_Handler();
 80027c4:	f000 f81e 	bl	8002804 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027c8:	230f      	movs	r3, #15
 80027ca:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027cc:	2302      	movs	r3, #2
 80027ce:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027d0:	2300      	movs	r3, #0
 80027d2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027d8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027da:	2300      	movs	r3, #0
 80027dc:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80027de:	f107 030c 	add.w	r3, r7, #12
 80027e2:	2102      	movs	r1, #2
 80027e4:	4618      	mov	r0, r3
 80027e6:	f003 facd 	bl	8005d84 <HAL_RCC_ClockConfig>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 80027f0:	f000 f808 	bl	8002804 <Error_Handler>
	}
}
 80027f4:	bf00      	nop
 80027f6:	3750      	adds	r7, #80	; 0x50
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40023800 	.word	0x40023800
 8002800:	40007000 	.word	0x40007000

08002804 <Error_Handler>:

void Error_Handler(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002808:	b672      	cpsid	i
}
 800280a:	bf00      	nop
	__disable_irq();
	while(1){}
 800280c:	e7fe      	b.n	800280c <Error_Handler+0x8>
	...

08002810 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002816:	1d3b      	adds	r3, r7, #4
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	609a      	str	r2, [r3, #8]
 8002820:	60da      	str	r2, [r3, #12]
 8002822:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002824:	2300      	movs	r3, #0
 8002826:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002828:	4b24      	ldr	r3, [pc, #144]	; (80028bc <MX_RTC_Init+0xac>)
 800282a:	4a25      	ldr	r2, [pc, #148]	; (80028c0 <MX_RTC_Init+0xb0>)
 800282c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800282e:	4b23      	ldr	r3, [pc, #140]	; (80028bc <MX_RTC_Init+0xac>)
 8002830:	2200      	movs	r2, #0
 8002832:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002834:	4b21      	ldr	r3, [pc, #132]	; (80028bc <MX_RTC_Init+0xac>)
 8002836:	227f      	movs	r2, #127	; 0x7f
 8002838:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800283a:	4b20      	ldr	r3, [pc, #128]	; (80028bc <MX_RTC_Init+0xac>)
 800283c:	22ff      	movs	r2, #255	; 0xff
 800283e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002840:	4b1e      	ldr	r3, [pc, #120]	; (80028bc <MX_RTC_Init+0xac>)
 8002842:	2200      	movs	r2, #0
 8002844:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002846:	4b1d      	ldr	r3, [pc, #116]	; (80028bc <MX_RTC_Init+0xac>)
 8002848:	2200      	movs	r2, #0
 800284a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800284c:	4b1b      	ldr	r3, [pc, #108]	; (80028bc <MX_RTC_Init+0xac>)
 800284e:	2200      	movs	r2, #0
 8002850:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002852:	481a      	ldr	r0, [pc, #104]	; (80028bc <MX_RTC_Init+0xac>)
 8002854:	f004 f8ac 	bl	80069b0 <HAL_RTC_Init>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800285e:	f7ff ffd1 	bl	8002804 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 12;
 8002862:	230c      	movs	r3, #12
 8002864:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 30;
 8002866:	231e      	movs	r3, #30
 8002868:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 45;
 800286a:	232d      	movs	r3, #45	; 0x2d
 800286c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800286e:	2300      	movs	r3, #0
 8002870:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002872:	2300      	movs	r3, #0
 8002874:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002876:	1d3b      	adds	r3, r7, #4
 8002878:	2200      	movs	r2, #0
 800287a:	4619      	mov	r1, r3
 800287c:	480f      	ldr	r0, [pc, #60]	; (80028bc <MX_RTC_Init+0xac>)
 800287e:	f004 f91b 	bl	8006ab8 <HAL_RTC_SetTime>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002888:	f7ff ffbc 	bl	8002804 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800288c:	2301      	movs	r3, #1
 800288e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002890:	2301      	movs	r3, #1
 8002892:	707b      	strb	r3, [r7, #1]
  sDate.Date = 16;
 8002894:	2310      	movs	r3, #16
 8002896:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 24;
 8002898:	2318      	movs	r3, #24
 800289a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800289c:	463b      	mov	r3, r7
 800289e:	2200      	movs	r2, #0
 80028a0:	4619      	mov	r1, r3
 80028a2:	4806      	ldr	r0, [pc, #24]	; (80028bc <MX_RTC_Init+0xac>)
 80028a4:	f004 fa00 	bl	8006ca8 <HAL_RTC_SetDate>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80028ae:	f7ff ffa9 	bl	8002804 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80028b2:	bf00      	nop
 80028b4:	3718      	adds	r7, #24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	20000490 	.word	0x20000490
 80028c0:	40002800 	.word	0x40002800

080028c4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b0a4      	sub	sp, #144	; 0x90
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028cc:	f107 030c 	add.w	r3, r7, #12
 80028d0:	2284      	movs	r2, #132	; 0x84
 80028d2:	2100      	movs	r1, #0
 80028d4:	4618      	mov	r0, r3
 80028d6:	f008 f834 	bl	800a942 <memset>
  if(rtcHandle->Instance==RTC)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a0e      	ldr	r2, [pc, #56]	; (8002918 <HAL_RTC_MspInit+0x54>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d114      	bne.n	800290e <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80028e4:	2320      	movs	r3, #32
 80028e6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80028e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028ee:	f107 030c 	add.w	r3, r7, #12
 80028f2:	4618      	mov	r0, r3
 80028f4:	f003 fc6c 	bl	80061d0 <HAL_RCCEx_PeriphCLKConfig>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80028fe:	f7ff ff81 	bl	8002804 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002902:	4b06      	ldr	r3, [pc, #24]	; (800291c <HAL_RTC_MspInit+0x58>)
 8002904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002906:	4a05      	ldr	r2, [pc, #20]	; (800291c <HAL_RTC_MspInit+0x58>)
 8002908:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800290c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800290e:	bf00      	nop
 8002910:	3790      	adds	r7, #144	; 0x90
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40002800 	.word	0x40002800
 800291c:	40023800 	.word	0x40023800

08002920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002926:	4b0f      	ldr	r3, [pc, #60]	; (8002964 <HAL_MspInit+0x44>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	4a0e      	ldr	r2, [pc, #56]	; (8002964 <HAL_MspInit+0x44>)
 800292c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002930:	6413      	str	r3, [r2, #64]	; 0x40
 8002932:	4b0c      	ldr	r3, [pc, #48]	; (8002964 <HAL_MspInit+0x44>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293a:	607b      	str	r3, [r7, #4]
 800293c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800293e:	4b09      	ldr	r3, [pc, #36]	; (8002964 <HAL_MspInit+0x44>)
 8002940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002942:	4a08      	ldr	r2, [pc, #32]	; (8002964 <HAL_MspInit+0x44>)
 8002944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002948:	6453      	str	r3, [r2, #68]	; 0x44
 800294a:	4b06      	ldr	r3, [pc, #24]	; (8002964 <HAL_MspInit+0x44>)
 800294c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002952:	603b      	str	r3, [r7, #0]
 8002954:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40023800 	.word	0x40023800

08002968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800296c:	e7fe      	b.n	800296c <NMI_Handler+0x4>

0800296e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800296e:	b480      	push	{r7}
 8002970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002972:	e7fe      	b.n	8002972 <HardFault_Handler+0x4>

08002974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002978:	e7fe      	b.n	8002978 <MemManage_Handler+0x4>

0800297a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800297a:	b480      	push	{r7}
 800297c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800297e:	e7fe      	b.n	800297e <BusFault_Handler+0x4>

08002980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002984:	e7fe      	b.n	8002984 <UsageFault_Handler+0x4>

08002986 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002986:	b480      	push	{r7}
 8002988:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800298a:	bf00      	nop
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029a2:	b480      	push	{r7}
 80029a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029a6:	bf00      	nop
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029b4:	f000 fa9a 	bl	8002eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029b8:	bf00      	nop
 80029ba:	bd80      	pop	{r7, pc}

080029bc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80029c0:	4802      	ldr	r0, [pc, #8]	; (80029cc <DMA1_Stream1_IRQHandler+0x10>)
 80029c2:	f000 ff87 	bl	80038d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20000588 	.word	0x20000588

080029d0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80029d4:	4802      	ldr	r0, [pc, #8]	; (80029e0 <TIM4_IRQHandler+0x10>)
 80029d6:	f004 fd27 	bl	8007428 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	200004b4 	.word	0x200004b4

080029e4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80029e8:	4802      	ldr	r0, [pc, #8]	; (80029f4 <I2C1_EV_IRQHandler+0x10>)
 80029ea:	f001 fe89 	bl	8004700 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80029ee:	bf00      	nop
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	2000024c 	.word	0x2000024c

080029f8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80029fc:	4802      	ldr	r0, [pc, #8]	; (8002a08 <I2C1_ER_IRQHandler+0x10>)
 80029fe:	f001 fe99 	bl	8004734 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002a02:	bf00      	nop
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	2000024c 	.word	0x2000024c

08002a0c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002a10:	4802      	ldr	r0, [pc, #8]	; (8002a1c <USART3_IRQHandler+0x10>)
 8002a12:	f005 fd45 	bl	80084a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002a16:	bf00      	nop
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	20000500 	.word	0x20000500

08002a20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  return 1;
 8002a24:	2301      	movs	r3, #1
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <_kill>:

int _kill(int pid, int sig)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a3a:	f007 ffd5 	bl	800a9e8 <__errno>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2216      	movs	r2, #22
 8002a42:	601a      	str	r2, [r3, #0]
  return -1;
 8002a44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <_exit>:

void _exit (int status)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a58:	f04f 31ff 	mov.w	r1, #4294967295
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7ff ffe7 	bl	8002a30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a62:	e7fe      	b.n	8002a62 <_exit+0x12>

08002a64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a70:	2300      	movs	r3, #0
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	e00a      	b.n	8002a8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a76:	f3af 8000 	nop.w
 8002a7a:	4601      	mov	r1, r0
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	1c5a      	adds	r2, r3, #1
 8002a80:	60ba      	str	r2, [r7, #8]
 8002a82:	b2ca      	uxtb	r2, r1
 8002a84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	dbf0      	blt.n	8002a76 <_read+0x12>
  }

  return len;
 8002a94:	687b      	ldr	r3, [r7, #4]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b086      	sub	sp, #24
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	60f8      	str	r0, [r7, #12]
 8002aa6:	60b9      	str	r1, [r7, #8]
 8002aa8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aaa:	2300      	movs	r3, #0
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	e009      	b.n	8002ac4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	1c5a      	adds	r2, r3, #1
 8002ab4:	60ba      	str	r2, [r7, #8]
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	dbf1      	blt.n	8002ab0 <_write+0x12>
  }
  return len;
 8002acc:	687b      	ldr	r3, [r7, #4]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3718      	adds	r7, #24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <_close>:

int _close(int file)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ade:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
 8002af6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002afe:	605a      	str	r2, [r3, #4]
  return 0;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <_isatty>:

int _isatty(int file)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b16:	2301      	movs	r3, #1
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
	...

08002b40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b48:	4a14      	ldr	r2, [pc, #80]	; (8002b9c <_sbrk+0x5c>)
 8002b4a:	4b15      	ldr	r3, [pc, #84]	; (8002ba0 <_sbrk+0x60>)
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b54:	4b13      	ldr	r3, [pc, #76]	; (8002ba4 <_sbrk+0x64>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d102      	bne.n	8002b62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b5c:	4b11      	ldr	r3, [pc, #68]	; (8002ba4 <_sbrk+0x64>)
 8002b5e:	4a12      	ldr	r2, [pc, #72]	; (8002ba8 <_sbrk+0x68>)
 8002b60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b62:	4b10      	ldr	r3, [pc, #64]	; (8002ba4 <_sbrk+0x64>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4413      	add	r3, r2
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d207      	bcs.n	8002b80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b70:	f007 ff3a 	bl	800a9e8 <__errno>
 8002b74:	4603      	mov	r3, r0
 8002b76:	220c      	movs	r2, #12
 8002b78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b7e:	e009      	b.n	8002b94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b80:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <_sbrk+0x64>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b86:	4b07      	ldr	r3, [pc, #28]	; (8002ba4 <_sbrk+0x64>)
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	4a05      	ldr	r2, [pc, #20]	; (8002ba4 <_sbrk+0x64>)
 8002b90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b92:	68fb      	ldr	r3, [r7, #12]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	20050000 	.word	0x20050000
 8002ba0:	00000400 	.word	0x00000400
 8002ba4:	200004b0 	.word	0x200004b0
 8002ba8:	20000738 	.word	0x20000738

08002bac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bb0:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <SystemInit+0x20>)
 8002bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb6:	4a05      	ldr	r2, [pc, #20]	; (8002bcc <SystemInit+0x20>)
 8002bb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bc0:	bf00      	nop
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	e000ed00 	.word	0xe000ed00

08002bd0 <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim4);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a0d      	ldr	r2, [pc, #52]	; (8002c14 <HAL_TIM_Base_MspInit+0x44>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d113      	bne.n	8002c0a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002be2:	4b0d      	ldr	r3, [pc, #52]	; (8002c18 <HAL_TIM_Base_MspInit+0x48>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	4a0c      	ldr	r2, [pc, #48]	; (8002c18 <HAL_TIM_Base_MspInit+0x48>)
 8002be8:	f043 0304 	orr.w	r3, r3, #4
 8002bec:	6413      	str	r3, [r2, #64]	; 0x40
 8002bee:	4b0a      	ldr	r3, [pc, #40]	; (8002c18 <HAL_TIM_Base_MspInit+0x48>)
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	f003 0304 	and.w	r3, r3, #4
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	201e      	movs	r0, #30
 8002c00:	f000 fa93 	bl	800312a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002c04:	201e      	movs	r0, #30
 8002c06:	f000 faac 	bl	8003162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002c0a:	bf00      	nop
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	40000800 	.word	0x40000800
 8002c18:	40023800 	.word	0x40023800

08002c1c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b088      	sub	sp, #32
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c24:	f107 030c 	add.w	r3, r7, #12
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	605a      	str	r2, [r3, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	60da      	str	r2, [r3, #12]
 8002c32:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a11      	ldr	r2, [pc, #68]	; (8002c80 <HAL_TIM_MspPostInit+0x64>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d11c      	bne.n	8002c78 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c3e:	4b11      	ldr	r3, [pc, #68]	; (8002c84 <HAL_TIM_MspPostInit+0x68>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	4a10      	ldr	r2, [pc, #64]	; (8002c84 <HAL_TIM_MspPostInit+0x68>)
 8002c44:	f043 0308 	orr.w	r3, r3, #8
 8002c48:	6313      	str	r3, [r2, #48]	; 0x30
 8002c4a:	4b0e      	ldr	r3, [pc, #56]	; (8002c84 <HAL_TIM_MspPostInit+0x68>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	60bb      	str	r3, [r7, #8]
 8002c54:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c5a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c60:	2300      	movs	r3, #0
 8002c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c64:	2300      	movs	r3, #0
 8002c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c6c:	f107 030c 	add.w	r3, r7, #12
 8002c70:	4619      	mov	r1, r3
 8002c72:	4805      	ldr	r0, [pc, #20]	; (8002c88 <HAL_TIM_MspPostInit+0x6c>)
 8002c74:	f001 f8a6 	bl	8003dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002c78:	bf00      	nop
 8002c7a:	3720      	adds	r7, #32
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40000800 	.word	0x40000800
 8002c84:	40023800 	.word	0x40023800
 8002c88:	40020c00 	.word	0x40020c00

08002c8c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002c90:	4b14      	ldr	r3, [pc, #80]	; (8002ce4 <MX_USART3_UART_Init+0x58>)
 8002c92:	4a15      	ldr	r2, [pc, #84]	; (8002ce8 <MX_USART3_UART_Init+0x5c>)
 8002c94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002c96:	4b13      	ldr	r3, [pc, #76]	; (8002ce4 <MX_USART3_UART_Init+0x58>)
 8002c98:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002c9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002c9e:	4b11      	ldr	r3, [pc, #68]	; (8002ce4 <MX_USART3_UART_Init+0x58>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002ca4:	4b0f      	ldr	r3, [pc, #60]	; (8002ce4 <MX_USART3_UART_Init+0x58>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002caa:	4b0e      	ldr	r3, [pc, #56]	; (8002ce4 <MX_USART3_UART_Init+0x58>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002cb0:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <MX_USART3_UART_Init+0x58>)
 8002cb2:	220c      	movs	r2, #12
 8002cb4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cb6:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <MX_USART3_UART_Init+0x58>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cbc:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <MX_USART3_UART_Init+0x58>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cc2:	4b08      	ldr	r3, [pc, #32]	; (8002ce4 <MX_USART3_UART_Init+0x58>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cc8:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <MX_USART3_UART_Init+0x58>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002cce:	4805      	ldr	r0, [pc, #20]	; (8002ce4 <MX_USART3_UART_Init+0x58>)
 8002cd0:	f005 fb3a 	bl	8008348 <HAL_UART_Init>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002cda:	f7ff fd93 	bl	8002804 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002cde:	bf00      	nop
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	20000500 	.word	0x20000500
 8002ce8:	40004800 	.word	0x40004800

08002cec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b0aa      	sub	sp, #168	; 0xa8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	605a      	str	r2, [r3, #4]
 8002cfe:	609a      	str	r2, [r3, #8]
 8002d00:	60da      	str	r2, [r3, #12]
 8002d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d04:	f107 0310 	add.w	r3, r7, #16
 8002d08:	2284      	movs	r2, #132	; 0x84
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f007 fe18 	bl	800a942 <memset>
  if(uartHandle->Instance==USART3)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a3d      	ldr	r2, [pc, #244]	; (8002e0c <HAL_UART_MspInit+0x120>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d172      	bne.n	8002e02 <HAL_UART_MspInit+0x116>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002d1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d20:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002d22:	2300      	movs	r3, #0
 8002d24:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d26:	f107 0310 	add.w	r3, r7, #16
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f003 fa50 	bl	80061d0 <HAL_RCCEx_PeriphCLKConfig>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002d36:	f7ff fd65 	bl	8002804 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d3a:	4b35      	ldr	r3, [pc, #212]	; (8002e10 <HAL_UART_MspInit+0x124>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	4a34      	ldr	r2, [pc, #208]	; (8002e10 <HAL_UART_MspInit+0x124>)
 8002d40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d44:	6413      	str	r3, [r2, #64]	; 0x40
 8002d46:	4b32      	ldr	r3, [pc, #200]	; (8002e10 <HAL_UART_MspInit+0x124>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d52:	4b2f      	ldr	r3, [pc, #188]	; (8002e10 <HAL_UART_MspInit+0x124>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	4a2e      	ldr	r2, [pc, #184]	; (8002e10 <HAL_UART_MspInit+0x124>)
 8002d58:	f043 0308 	orr.w	r3, r3, #8
 8002d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5e:	4b2c      	ldr	r3, [pc, #176]	; (8002e10 <HAL_UART_MspInit+0x124>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	60bb      	str	r3, [r7, #8]
 8002d68:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002d6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d72:	2302      	movs	r3, #2
 8002d74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d84:	2307      	movs	r3, #7
 8002d86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d8a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4820      	ldr	r0, [pc, #128]	; (8002e14 <HAL_UART_MspInit+0x128>)
 8002d92:	f001 f817 	bl	8003dc4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002d96:	4b20      	ldr	r3, [pc, #128]	; (8002e18 <HAL_UART_MspInit+0x12c>)
 8002d98:	4a20      	ldr	r2, [pc, #128]	; (8002e1c <HAL_UART_MspInit+0x130>)
 8002d9a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002d9c:	4b1e      	ldr	r3, [pc, #120]	; (8002e18 <HAL_UART_MspInit+0x12c>)
 8002d9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002da2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002da4:	4b1c      	ldr	r3, [pc, #112]	; (8002e18 <HAL_UART_MspInit+0x12c>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002daa:	4b1b      	ldr	r3, [pc, #108]	; (8002e18 <HAL_UART_MspInit+0x12c>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002db0:	4b19      	ldr	r3, [pc, #100]	; (8002e18 <HAL_UART_MspInit+0x12c>)
 8002db2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002db6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002db8:	4b17      	ldr	r3, [pc, #92]	; (8002e18 <HAL_UART_MspInit+0x12c>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dbe:	4b16      	ldr	r3, [pc, #88]	; (8002e18 <HAL_UART_MspInit+0x12c>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002dc4:	4b14      	ldr	r3, [pc, #80]	; (8002e18 <HAL_UART_MspInit+0x12c>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002dca:	4b13      	ldr	r3, [pc, #76]	; (8002e18 <HAL_UART_MspInit+0x12c>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dd0:	4b11      	ldr	r3, [pc, #68]	; (8002e18 <HAL_UART_MspInit+0x12c>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002dd6:	4810      	ldr	r0, [pc, #64]	; (8002e18 <HAL_UART_MspInit+0x12c>)
 8002dd8:	f000 fbdc 	bl	8003594 <HAL_DMA_Init>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8002de2:	f7ff fd0f 	bl	8002804 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a0b      	ldr	r2, [pc, #44]	; (8002e18 <HAL_UART_MspInit+0x12c>)
 8002dea:	675a      	str	r2, [r3, #116]	; 0x74
 8002dec:	4a0a      	ldr	r2, [pc, #40]	; (8002e18 <HAL_UART_MspInit+0x12c>)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002df2:	2200      	movs	r2, #0
 8002df4:	2100      	movs	r1, #0
 8002df6:	2027      	movs	r0, #39	; 0x27
 8002df8:	f000 f997 	bl	800312a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002dfc:	2027      	movs	r0, #39	; 0x27
 8002dfe:	f000 f9b0 	bl	8003162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002e02:	bf00      	nop
 8002e04:	37a8      	adds	r7, #168	; 0xa8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40004800 	.word	0x40004800
 8002e10:	40023800 	.word	0x40023800
 8002e14:	40020c00 	.word	0x40020c00
 8002e18:	20000588 	.word	0x20000588
 8002e1c:	40026028 	.word	0x40026028

08002e20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e24:	480d      	ldr	r0, [pc, #52]	; (8002e5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e26:	490e      	ldr	r1, [pc, #56]	; (8002e60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e28:	4a0e      	ldr	r2, [pc, #56]	; (8002e64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e2c:	e002      	b.n	8002e34 <LoopCopyDataInit>

08002e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e32:	3304      	adds	r3, #4

08002e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e38:	d3f9      	bcc.n	8002e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e3a:	4a0b      	ldr	r2, [pc, #44]	; (8002e68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e3c:	4c0b      	ldr	r4, [pc, #44]	; (8002e6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e40:	e001      	b.n	8002e46 <LoopFillZerobss>

08002e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e44:	3204      	adds	r2, #4

08002e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e48:	d3fb      	bcc.n	8002e42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e4a:	f7ff feaf 	bl	8002bac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e4e:	f007 fdd1 	bl	800a9f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e52:	f7ff f955 	bl	8002100 <main>
  bx  lr    
 8002e56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e58:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e60:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002e64:	0800eea4 	.word	0x0800eea4
  ldr r2, =_sbss
 8002e68:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002e6c:	20000738 	.word	0x20000738

08002e70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e70:	e7fe      	b.n	8002e70 <ADC_IRQHandler>

08002e72 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e76:	2003      	movs	r0, #3
 8002e78:	f000 f94c 	bl	8003114 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e7c:	2000      	movs	r0, #0
 8002e7e:	f000 f805 	bl	8002e8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e82:	f7ff fd4d 	bl	8002920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e94:	4b12      	ldr	r3, [pc, #72]	; (8002ee0 <HAL_InitTick+0x54>)
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	4b12      	ldr	r3, [pc, #72]	; (8002ee4 <HAL_InitTick+0x58>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 f967 	bl	800317e <HAL_SYSTICK_Config>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e00e      	b.n	8002ed8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b0f      	cmp	r3, #15
 8002ebe:	d80a      	bhi.n	8002ed6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec8:	f000 f92f 	bl	800312a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ecc:	4a06      	ldr	r2, [pc, #24]	; (8002ee8 <HAL_InitTick+0x5c>)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	e000      	b.n	8002ed8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	20000000 	.word	0x20000000
 8002ee4:	20000008 	.word	0x20000008
 8002ee8:	20000004 	.word	0x20000004

08002eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ef0:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <HAL_IncTick+0x20>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <HAL_IncTick+0x24>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4413      	add	r3, r2
 8002efc:	4a04      	ldr	r2, [pc, #16]	; (8002f10 <HAL_IncTick+0x24>)
 8002efe:	6013      	str	r3, [r2, #0]
}
 8002f00:	bf00      	nop
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	20000008 	.word	0x20000008
 8002f10:	200005e8 	.word	0x200005e8

08002f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  return uwTick;
 8002f18:	4b03      	ldr	r3, [pc, #12]	; (8002f28 <HAL_GetTick+0x14>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	200005e8 	.word	0x200005e8

08002f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f34:	f7ff ffee 	bl	8002f14 <HAL_GetTick>
 8002f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f44:	d005      	beq.n	8002f52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f46:	4b0a      	ldr	r3, [pc, #40]	; (8002f70 <HAL_Delay+0x44>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4413      	add	r3, r2
 8002f50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f52:	bf00      	nop
 8002f54:	f7ff ffde 	bl	8002f14 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d8f7      	bhi.n	8002f54 <HAL_Delay+0x28>
  {
  }
}
 8002f64:	bf00      	nop
 8002f66:	bf00      	nop
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	20000008 	.word	0x20000008

08002f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <__NVIC_SetPriorityGrouping+0x40>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f90:	4013      	ands	r3, r2
 8002f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f9c:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fa2:	4a04      	ldr	r2, [pc, #16]	; (8002fb4 <__NVIC_SetPriorityGrouping+0x40>)
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	60d3      	str	r3, [r2, #12]
}
 8002fa8:	bf00      	nop
 8002faa:	3714      	adds	r7, #20
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	e000ed00 	.word	0xe000ed00
 8002fb8:	05fa0000 	.word	0x05fa0000

08002fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fc0:	4b04      	ldr	r3, [pc, #16]	; (8002fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	0a1b      	lsrs	r3, r3, #8
 8002fc6:	f003 0307 	and.w	r3, r3, #7
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	e000ed00 	.word	0xe000ed00

08002fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	db0b      	blt.n	8003002 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fea:	79fb      	ldrb	r3, [r7, #7]
 8002fec:	f003 021f 	and.w	r2, r3, #31
 8002ff0:	4907      	ldr	r1, [pc, #28]	; (8003010 <__NVIC_EnableIRQ+0x38>)
 8002ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	2001      	movs	r0, #1
 8002ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8002ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	e000e100 	.word	0xe000e100

08003014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	4603      	mov	r3, r0
 800301c:	6039      	str	r1, [r7, #0]
 800301e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003024:	2b00      	cmp	r3, #0
 8003026:	db0a      	blt.n	800303e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	b2da      	uxtb	r2, r3
 800302c:	490c      	ldr	r1, [pc, #48]	; (8003060 <__NVIC_SetPriority+0x4c>)
 800302e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003032:	0112      	lsls	r2, r2, #4
 8003034:	b2d2      	uxtb	r2, r2
 8003036:	440b      	add	r3, r1
 8003038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800303c:	e00a      	b.n	8003054 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	b2da      	uxtb	r2, r3
 8003042:	4908      	ldr	r1, [pc, #32]	; (8003064 <__NVIC_SetPriority+0x50>)
 8003044:	79fb      	ldrb	r3, [r7, #7]
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	3b04      	subs	r3, #4
 800304c:	0112      	lsls	r2, r2, #4
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	440b      	add	r3, r1
 8003052:	761a      	strb	r2, [r3, #24]
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	e000e100 	.word	0xe000e100
 8003064:	e000ed00 	.word	0xe000ed00

08003068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003068:	b480      	push	{r7}
 800306a:	b089      	sub	sp, #36	; 0x24
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f1c3 0307 	rsb	r3, r3, #7
 8003082:	2b04      	cmp	r3, #4
 8003084:	bf28      	it	cs
 8003086:	2304      	movcs	r3, #4
 8003088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	3304      	adds	r3, #4
 800308e:	2b06      	cmp	r3, #6
 8003090:	d902      	bls.n	8003098 <NVIC_EncodePriority+0x30>
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	3b03      	subs	r3, #3
 8003096:	e000      	b.n	800309a <NVIC_EncodePriority+0x32>
 8003098:	2300      	movs	r3, #0
 800309a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800309c:	f04f 32ff 	mov.w	r2, #4294967295
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	43da      	mvns	r2, r3
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	401a      	ands	r2, r3
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030b0:	f04f 31ff 	mov.w	r1, #4294967295
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ba:	43d9      	mvns	r1, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c0:	4313      	orrs	r3, r2
         );
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3724      	adds	r7, #36	; 0x24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
	...

080030d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3b01      	subs	r3, #1
 80030dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030e0:	d301      	bcc.n	80030e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030e2:	2301      	movs	r3, #1
 80030e4:	e00f      	b.n	8003106 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030e6:	4a0a      	ldr	r2, [pc, #40]	; (8003110 <SysTick_Config+0x40>)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030ee:	210f      	movs	r1, #15
 80030f0:	f04f 30ff 	mov.w	r0, #4294967295
 80030f4:	f7ff ff8e 	bl	8003014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030f8:	4b05      	ldr	r3, [pc, #20]	; (8003110 <SysTick_Config+0x40>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030fe:	4b04      	ldr	r3, [pc, #16]	; (8003110 <SysTick_Config+0x40>)
 8003100:	2207      	movs	r2, #7
 8003102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	e000e010 	.word	0xe000e010

08003114 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7ff ff29 	bl	8002f74 <__NVIC_SetPriorityGrouping>
}
 8003122:	bf00      	nop
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800312a:	b580      	push	{r7, lr}
 800312c:	b086      	sub	sp, #24
 800312e:	af00      	add	r7, sp, #0
 8003130:	4603      	mov	r3, r0
 8003132:	60b9      	str	r1, [r7, #8]
 8003134:	607a      	str	r2, [r7, #4]
 8003136:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003138:	2300      	movs	r3, #0
 800313a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800313c:	f7ff ff3e 	bl	8002fbc <__NVIC_GetPriorityGrouping>
 8003140:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	68b9      	ldr	r1, [r7, #8]
 8003146:	6978      	ldr	r0, [r7, #20]
 8003148:	f7ff ff8e 	bl	8003068 <NVIC_EncodePriority>
 800314c:	4602      	mov	r2, r0
 800314e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003152:	4611      	mov	r1, r2
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff ff5d 	bl	8003014 <__NVIC_SetPriority>
}
 800315a:	bf00      	nop
 800315c:	3718      	adds	r7, #24
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b082      	sub	sp, #8
 8003166:	af00      	add	r7, sp, #0
 8003168:	4603      	mov	r3, r0
 800316a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800316c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff ff31 	bl	8002fd8 <__NVIC_EnableIRQ>
}
 8003176:	bf00      	nop
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b082      	sub	sp, #8
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7ff ffa2 	bl	80030d0 <SysTick_Config>
 800318c:	4603      	mov	r3, r0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e054      	b.n	8003254 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	7f5b      	ldrb	r3, [r3, #29]
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d105      	bne.n	80031c0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7fe fdae 	bl	8001d1c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2202      	movs	r2, #2
 80031c4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	791b      	ldrb	r3, [r3, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10c      	bne.n	80031e8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a22      	ldr	r2, [pc, #136]	; (800325c <HAL_CRC_Init+0xc4>)
 80031d4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 0218 	bic.w	r2, r2, #24
 80031e4:	609a      	str	r2, [r3, #8]
 80031e6:	e00c      	b.n	8003202 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6899      	ldr	r1, [r3, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	461a      	mov	r2, r3
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f948 	bl	8003488 <HAL_CRCEx_Polynomial_Set>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e028      	b.n	8003254 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	795b      	ldrb	r3, [r3, #5]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d105      	bne.n	8003216 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f04f 32ff 	mov.w	r2, #4294967295
 8003212:	611a      	str	r2, [r3, #16]
 8003214:	e004      	b.n	8003220 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6912      	ldr	r2, [r2, #16]
 800321e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695a      	ldr	r2, [r3, #20]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	699a      	ldr	r2, [r3, #24]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	04c11db7 	.word	0x04c11db7

08003260 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800326c:	2300      	movs	r3, #0
 800326e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2202      	movs	r2, #2
 8003274:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f042 0201 	orr.w	r2, r2, #1
 8003284:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	2b03      	cmp	r3, #3
 800328c:	d006      	beq.n	800329c <HAL_CRC_Calculate+0x3c>
 800328e:	2b03      	cmp	r3, #3
 8003290:	d829      	bhi.n	80032e6 <HAL_CRC_Calculate+0x86>
 8003292:	2b01      	cmp	r3, #1
 8003294:	d019      	beq.n	80032ca <HAL_CRC_Calculate+0x6a>
 8003296:	2b02      	cmp	r3, #2
 8003298:	d01e      	beq.n	80032d8 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800329a:	e024      	b.n	80032e6 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 800329c:	2300      	movs	r3, #0
 800329e:	617b      	str	r3, [r7, #20]
 80032a0:	e00a      	b.n	80032b8 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	441a      	add	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6812      	ldr	r2, [r2, #0]
 80032b0:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	3301      	adds	r3, #1
 80032b6:	617b      	str	r3, [r7, #20]
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d3f0      	bcc.n	80032a2 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	613b      	str	r3, [r7, #16]
      break;
 80032c8:	e00e      	b.n	80032e8 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	68b9      	ldr	r1, [r7, #8]
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 f812 	bl	80032f8 <CRC_Handle_8>
 80032d4:	6138      	str	r0, [r7, #16]
      break;
 80032d6:	e007      	b.n	80032e8 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	68b9      	ldr	r1, [r7, #8]
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f000 f899 	bl	8003414 <CRC_Handle_16>
 80032e2:	6138      	str	r0, [r7, #16]
      break;
 80032e4:	e000      	b.n	80032e8 <HAL_CRC_Calculate+0x88>
      break;
 80032e6:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2201      	movs	r2, #1
 80032ec:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80032ee:	693b      	ldr	r3, [r7, #16]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3718      	adds	r7, #24
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b089      	sub	sp, #36	; 0x24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003304:	2300      	movs	r3, #0
 8003306:	61fb      	str	r3, [r7, #28]
 8003308:	e023      	b.n	8003352 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	4413      	add	r3, r2
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	3301      	adds	r3, #1
 800331c:	68b9      	ldr	r1, [r7, #8]
 800331e:	440b      	add	r3, r1
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003324:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	3302      	adds	r3, #2
 800332c:	68b9      	ldr	r1, [r7, #8]
 800332e:	440b      	add	r3, r1
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003334:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	3303      	adds	r3, #3
 800333c:	68b9      	ldr	r1, [r7, #8]
 800333e:	440b      	add	r3, r1
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003348:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800334a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	3301      	adds	r3, #1
 8003350:	61fb      	str	r3, [r7, #28]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	089b      	lsrs	r3, r3, #2
 8003356:	69fa      	ldr	r2, [r7, #28]
 8003358:	429a      	cmp	r2, r3
 800335a:	d3d6      	bcc.n	800330a <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d04d      	beq.n	8003402 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f003 0303 	and.w	r3, r3, #3
 800336c:	2b01      	cmp	r3, #1
 800336e:	d107      	bne.n	8003380 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	4413      	add	r3, r2
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	6812      	ldr	r2, [r2, #0]
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d116      	bne.n	80033b8 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	4413      	add	r3, r2
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	021b      	lsls	r3, r3, #8
 8003396:	b21a      	sxth	r2, r3
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	3301      	adds	r3, #1
 800339e:	68b9      	ldr	r1, [r7, #8]
 80033a0:	440b      	add	r3, r1
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	b21b      	sxth	r3, r3
 80033a6:	4313      	orrs	r3, r2
 80033a8:	b21b      	sxth	r3, r3
 80033aa:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	8b7a      	ldrh	r2, [r7, #26]
 80033b6:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f003 0303 	and.w	r3, r3, #3
 80033be:	2b03      	cmp	r3, #3
 80033c0:	d11f      	bne.n	8003402 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	4413      	add	r3, r2
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	021b      	lsls	r3, r3, #8
 80033ce:	b21a      	sxth	r2, r3
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	3301      	adds	r3, #1
 80033d6:	68b9      	ldr	r1, [r7, #8]
 80033d8:	440b      	add	r3, r1
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	b21b      	sxth	r3, r3
 80033de:	4313      	orrs	r3, r2
 80033e0:	b21b      	sxth	r3, r3
 80033e2:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	8b7a      	ldrh	r2, [r7, #26]
 80033ee:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	3302      	adds	r3, #2
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	4413      	add	r3, r2
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	6812      	ldr	r2, [r2, #0]
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3724      	adds	r7, #36	; 0x24
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8003414:	b480      	push	{r7}
 8003416:	b087      	sub	sp, #28
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003420:	2300      	movs	r3, #0
 8003422:	617b      	str	r3, [r7, #20]
 8003424:	e013      	b.n	800344e <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	4413      	add	r3, r2
 800342e:	881b      	ldrh	r3, [r3, #0]
 8003430:	041a      	lsls	r2, r3, #16
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	3302      	adds	r3, #2
 8003438:	68b9      	ldr	r1, [r7, #8]
 800343a:	440b      	add	r3, r1
 800343c:	881b      	ldrh	r3, [r3, #0]
 800343e:	4619      	mov	r1, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	3301      	adds	r3, #1
 800344c:	617b      	str	r3, [r7, #20]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	085b      	lsrs	r3, r3, #1
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	429a      	cmp	r2, r3
 8003456:	d3e6      	bcc.n	8003426 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d009      	beq.n	8003476 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	4413      	add	r3, r2
 8003470:	881a      	ldrh	r2, [r3, #0]
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
}
 800347c:	4618      	mov	r0, r3
 800347e:	371c      	adds	r7, #28
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003488:	b480      	push	{r7}
 800348a:	b087      	sub	sp, #28
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003494:	2300      	movs	r3, #0
 8003496:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003498:	231f      	movs	r3, #31
 800349a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800349c:	bf00      	nop
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1e5a      	subs	r2, r3, #1
 80034a2:	613a      	str	r2, [r7, #16]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d009      	beq.n	80034bc <HAL_CRCEx_Polynomial_Set+0x34>
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	f003 031f 	and.w	r3, r3, #31
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	fa22 f303 	lsr.w	r3, r2, r3
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0f0      	beq.n	800349e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b18      	cmp	r3, #24
 80034c0:	d846      	bhi.n	8003550 <HAL_CRCEx_Polynomial_Set+0xc8>
 80034c2:	a201      	add	r2, pc, #4	; (adr r2, 80034c8 <HAL_CRCEx_Polynomial_Set+0x40>)
 80034c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c8:	08003557 	.word	0x08003557
 80034cc:	08003551 	.word	0x08003551
 80034d0:	08003551 	.word	0x08003551
 80034d4:	08003551 	.word	0x08003551
 80034d8:	08003551 	.word	0x08003551
 80034dc:	08003551 	.word	0x08003551
 80034e0:	08003551 	.word	0x08003551
 80034e4:	08003551 	.word	0x08003551
 80034e8:	08003545 	.word	0x08003545
 80034ec:	08003551 	.word	0x08003551
 80034f0:	08003551 	.word	0x08003551
 80034f4:	08003551 	.word	0x08003551
 80034f8:	08003551 	.word	0x08003551
 80034fc:	08003551 	.word	0x08003551
 8003500:	08003551 	.word	0x08003551
 8003504:	08003551 	.word	0x08003551
 8003508:	08003539 	.word	0x08003539
 800350c:	08003551 	.word	0x08003551
 8003510:	08003551 	.word	0x08003551
 8003514:	08003551 	.word	0x08003551
 8003518:	08003551 	.word	0x08003551
 800351c:	08003551 	.word	0x08003551
 8003520:	08003551 	.word	0x08003551
 8003524:	08003551 	.word	0x08003551
 8003528:	0800352d 	.word	0x0800352d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	2b06      	cmp	r3, #6
 8003530:	d913      	bls.n	800355a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003536:	e010      	b.n	800355a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	2b07      	cmp	r3, #7
 800353c:	d90f      	bls.n	800355e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003542:	e00c      	b.n	800355e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	2b0f      	cmp	r3, #15
 8003548:	d90b      	bls.n	8003562 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800354e:	e008      	b.n	8003562 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	75fb      	strb	r3, [r7, #23]
      break;
 8003554:	e006      	b.n	8003564 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003556:	bf00      	nop
 8003558:	e004      	b.n	8003564 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800355a:	bf00      	nop
 800355c:	e002      	b.n	8003564 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800355e:	bf00      	nop
 8003560:	e000      	b.n	8003564 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003562:	bf00      	nop
  }
  if (status == HAL_OK)
 8003564:	7dfb      	ldrb	r3, [r7, #23]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10d      	bne.n	8003586 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f023 0118 	bic.w	r1, r3, #24
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	430a      	orrs	r2, r1
 8003584:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003586:	7dfb      	ldrb	r3, [r7, #23]
}
 8003588:	4618      	mov	r0, r3
 800358a:	371c      	adds	r7, #28
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800359c:	2300      	movs	r3, #0
 800359e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80035a0:	f7ff fcb8 	bl	8002f14 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e099      	b.n	80036e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0201 	bic.w	r2, r2, #1
 80035ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035d0:	e00f      	b.n	80035f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035d2:	f7ff fc9f 	bl	8002f14 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b05      	cmp	r3, #5
 80035de:	d908      	bls.n	80035f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2220      	movs	r2, #32
 80035e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2203      	movs	r2, #3
 80035ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e078      	b.n	80036e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1e8      	bne.n	80035d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	4b38      	ldr	r3, [pc, #224]	; (80036ec <HAL_DMA_Init+0x158>)
 800360c:	4013      	ands	r3, r2
 800360e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800361e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800362a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003636:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	4313      	orrs	r3, r2
 8003642:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	2b04      	cmp	r3, #4
 800364a:	d107      	bne.n	800365c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003654:	4313      	orrs	r3, r2
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	4313      	orrs	r3, r2
 800365a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f023 0307 	bic.w	r3, r3, #7
 8003672:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	4313      	orrs	r3, r2
 800367c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	2b04      	cmp	r3, #4
 8003684:	d117      	bne.n	80036b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	4313      	orrs	r3, r2
 800368e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00e      	beq.n	80036b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 fb17 	bl	8003ccc <DMA_CheckFifoParam>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d008      	beq.n	80036b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2240      	movs	r2, #64	; 0x40
 80036a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80036b2:	2301      	movs	r3, #1
 80036b4:	e016      	b.n	80036e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 face 	bl	8003c60 <DMA_CalcBaseAndBitshift>
 80036c4:	4603      	mov	r3, r0
 80036c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036cc:	223f      	movs	r2, #63	; 0x3f
 80036ce:	409a      	lsls	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3718      	adds	r7, #24
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	f010803f 	.word	0xf010803f

080036f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
 80036fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036fe:	2300      	movs	r3, #0
 8003700:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003706:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800370e:	2b01      	cmp	r3, #1
 8003710:	d101      	bne.n	8003716 <HAL_DMA_Start_IT+0x26>
 8003712:	2302      	movs	r3, #2
 8003714:	e048      	b.n	80037a8 <HAL_DMA_Start_IT+0xb8>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b01      	cmp	r3, #1
 8003728:	d137      	bne.n	800379a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2202      	movs	r2, #2
 800372e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	68b9      	ldr	r1, [r7, #8]
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 fa60 	bl	8003c04 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003748:	223f      	movs	r2, #63	; 0x3f
 800374a:	409a      	lsls	r2, r3
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 0216 	orr.w	r2, r2, #22
 800375e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	695a      	ldr	r2, [r3, #20]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800376e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	2b00      	cmp	r3, #0
 8003776:	d007      	beq.n	8003788 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0208 	orr.w	r2, r2, #8
 8003786:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0201 	orr.w	r2, r2, #1
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	e005      	b.n	80037a6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80037a2:	2302      	movs	r3, #2
 80037a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80037a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3718      	adds	r7, #24
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80037be:	f7ff fba9 	bl	8002f14 <HAL_GetTick>
 80037c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d008      	beq.n	80037e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2280      	movs	r2, #128	; 0x80
 80037d4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e052      	b.n	8003888 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0216 	bic.w	r2, r2, #22
 80037f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	695a      	ldr	r2, [r3, #20]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003800:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	2b00      	cmp	r3, #0
 8003808:	d103      	bne.n	8003812 <HAL_DMA_Abort+0x62>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800380e:	2b00      	cmp	r3, #0
 8003810:	d007      	beq.n	8003822 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0208 	bic.w	r2, r2, #8
 8003820:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0201 	bic.w	r2, r2, #1
 8003830:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003832:	e013      	b.n	800385c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003834:	f7ff fb6e 	bl	8002f14 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b05      	cmp	r3, #5
 8003840:	d90c      	bls.n	800385c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2220      	movs	r2, #32
 8003846:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2203      	movs	r2, #3
 800384c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e015      	b.n	8003888 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1e4      	bne.n	8003834 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386e:	223f      	movs	r2, #63	; 0x3f
 8003870:	409a      	lsls	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d004      	beq.n	80038ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2280      	movs	r2, #128	; 0x80
 80038a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e00c      	b.n	80038c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2205      	movs	r2, #5
 80038b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0201 	bic.w	r2, r2, #1
 80038c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80038dc:	2300      	movs	r3, #0
 80038de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80038e0:	4b8e      	ldr	r3, [pc, #568]	; (8003b1c <HAL_DMA_IRQHandler+0x248>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a8e      	ldr	r2, [pc, #568]	; (8003b20 <HAL_DMA_IRQHandler+0x24c>)
 80038e6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ea:	0a9b      	lsrs	r3, r3, #10
 80038ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fe:	2208      	movs	r2, #8
 8003900:	409a      	lsls	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	4013      	ands	r3, r2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d01a      	beq.n	8003940 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b00      	cmp	r3, #0
 8003916:	d013      	beq.n	8003940 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0204 	bic.w	r2, r2, #4
 8003926:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392c:	2208      	movs	r2, #8
 800392e:	409a      	lsls	r2, r3
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003938:	f043 0201 	orr.w	r2, r3, #1
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003944:	2201      	movs	r2, #1
 8003946:	409a      	lsls	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4013      	ands	r3, r2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d012      	beq.n	8003976 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00b      	beq.n	8003976 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003962:	2201      	movs	r2, #1
 8003964:	409a      	lsls	r2, r3
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396e:	f043 0202 	orr.w	r2, r3, #2
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397a:	2204      	movs	r2, #4
 800397c:	409a      	lsls	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4013      	ands	r3, r2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d012      	beq.n	80039ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00b      	beq.n	80039ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003998:	2204      	movs	r2, #4
 800399a:	409a      	lsls	r2, r3
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a4:	f043 0204 	orr.w	r2, r3, #4
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b0:	2210      	movs	r2, #16
 80039b2:	409a      	lsls	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4013      	ands	r3, r2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d043      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0308 	and.w	r3, r3, #8
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d03c      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ce:	2210      	movs	r2, #16
 80039d0:	409a      	lsls	r2, r3
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d018      	beq.n	8003a16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d108      	bne.n	8003a04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d024      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	4798      	blx	r3
 8003a02:	e01f      	b.n	8003a44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d01b      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	4798      	blx	r3
 8003a14:	e016      	b.n	8003a44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d107      	bne.n	8003a34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 0208 	bic.w	r2, r2, #8
 8003a32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a48:	2220      	movs	r2, #32
 8003a4a:	409a      	lsls	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 808f 	beq.w	8003b74 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0310 	and.w	r3, r3, #16
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 8087 	beq.w	8003b74 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	409a      	lsls	r2, r3
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b05      	cmp	r3, #5
 8003a7c:	d136      	bne.n	8003aec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 0216 	bic.w	r2, r2, #22
 8003a8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	695a      	ldr	r2, [r3, #20]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d103      	bne.n	8003aae <HAL_DMA_IRQHandler+0x1da>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d007      	beq.n	8003abe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0208 	bic.w	r2, r2, #8
 8003abc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac2:	223f      	movs	r2, #63	; 0x3f
 8003ac4:	409a      	lsls	r2, r3
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d07e      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	4798      	blx	r3
        }
        return;
 8003aea:	e079      	b.n	8003be0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d01d      	beq.n	8003b36 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10d      	bne.n	8003b24 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d031      	beq.n	8003b74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	4798      	blx	r3
 8003b18:	e02c      	b.n	8003b74 <HAL_DMA_IRQHandler+0x2a0>
 8003b1a:	bf00      	nop
 8003b1c:	20000000 	.word	0x20000000
 8003b20:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d023      	beq.n	8003b74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	4798      	blx	r3
 8003b34:	e01e      	b.n	8003b74 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10f      	bne.n	8003b64 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 0210 	bic.w	r2, r2, #16
 8003b52:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d003      	beq.n	8003b74 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d032      	beq.n	8003be2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d022      	beq.n	8003bce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2205      	movs	r2, #5
 8003b8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0201 	bic.w	r2, r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	60bb      	str	r3, [r7, #8]
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d307      	bcc.n	8003bbc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1f2      	bne.n	8003ba0 <HAL_DMA_IRQHandler+0x2cc>
 8003bba:	e000      	b.n	8003bbe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003bbc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d005      	beq.n	8003be2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	4798      	blx	r3
 8003bde:	e000      	b.n	8003be2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003be0:	bf00      	nop
    }
  }
}
 8003be2:	3718      	adds	r7, #24
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bf6:	b2db      	uxtb	r3, r3
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
 8003c10:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c20:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	2b40      	cmp	r3, #64	; 0x40
 8003c30:	d108      	bne.n	8003c44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c42:	e007      	b.n	8003c54 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68ba      	ldr	r2, [r7, #8]
 8003c4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	60da      	str	r2, [r3, #12]
}
 8003c54:	bf00      	nop
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	3b10      	subs	r3, #16
 8003c70:	4a13      	ldr	r2, [pc, #76]	; (8003cc0 <DMA_CalcBaseAndBitshift+0x60>)
 8003c72:	fba2 2303 	umull	r2, r3, r2, r3
 8003c76:	091b      	lsrs	r3, r3, #4
 8003c78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c7a:	4a12      	ldr	r2, [pc, #72]	; (8003cc4 <DMA_CalcBaseAndBitshift+0x64>)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	4413      	add	r3, r2
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	461a      	mov	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2b03      	cmp	r3, #3
 8003c8c:	d908      	bls.n	8003ca0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	461a      	mov	r2, r3
 8003c94:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <DMA_CalcBaseAndBitshift+0x68>)
 8003c96:	4013      	ands	r3, r2
 8003c98:	1d1a      	adds	r2, r3, #4
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	659a      	str	r2, [r3, #88]	; 0x58
 8003c9e:	e006      	b.n	8003cae <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4b08      	ldr	r3, [pc, #32]	; (8003cc8 <DMA_CalcBaseAndBitshift+0x68>)
 8003ca8:	4013      	ands	r3, r2
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3714      	adds	r7, #20
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	aaaaaaab 	.word	0xaaaaaaab
 8003cc4:	0800ea48 	.word	0x0800ea48
 8003cc8:	fffffc00 	.word	0xfffffc00

08003ccc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cdc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d11f      	bne.n	8003d26 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	2b03      	cmp	r3, #3
 8003cea:	d856      	bhi.n	8003d9a <DMA_CheckFifoParam+0xce>
 8003cec:	a201      	add	r2, pc, #4	; (adr r2, 8003cf4 <DMA_CheckFifoParam+0x28>)
 8003cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf2:	bf00      	nop
 8003cf4:	08003d05 	.word	0x08003d05
 8003cf8:	08003d17 	.word	0x08003d17
 8003cfc:	08003d05 	.word	0x08003d05
 8003d00:	08003d9b 	.word	0x08003d9b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d046      	beq.n	8003d9e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d14:	e043      	b.n	8003d9e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d1e:	d140      	bne.n	8003da2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d24:	e03d      	b.n	8003da2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d2e:	d121      	bne.n	8003d74 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	2b03      	cmp	r3, #3
 8003d34:	d837      	bhi.n	8003da6 <DMA_CheckFifoParam+0xda>
 8003d36:	a201      	add	r2, pc, #4	; (adr r2, 8003d3c <DMA_CheckFifoParam+0x70>)
 8003d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3c:	08003d4d 	.word	0x08003d4d
 8003d40:	08003d53 	.word	0x08003d53
 8003d44:	08003d4d 	.word	0x08003d4d
 8003d48:	08003d65 	.word	0x08003d65
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d50:	e030      	b.n	8003db4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d025      	beq.n	8003daa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d62:	e022      	b.n	8003daa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d6c:	d11f      	bne.n	8003dae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d72:	e01c      	b.n	8003dae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d903      	bls.n	8003d82 <DMA_CheckFifoParam+0xb6>
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	2b03      	cmp	r3, #3
 8003d7e:	d003      	beq.n	8003d88 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d80:	e018      	b.n	8003db4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	73fb      	strb	r3, [r7, #15]
      break;
 8003d86:	e015      	b.n	8003db4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00e      	beq.n	8003db2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	73fb      	strb	r3, [r7, #15]
      break;
 8003d98:	e00b      	b.n	8003db2 <DMA_CheckFifoParam+0xe6>
      break;
 8003d9a:	bf00      	nop
 8003d9c:	e00a      	b.n	8003db4 <DMA_CheckFifoParam+0xe8>
      break;
 8003d9e:	bf00      	nop
 8003da0:	e008      	b.n	8003db4 <DMA_CheckFifoParam+0xe8>
      break;
 8003da2:	bf00      	nop
 8003da4:	e006      	b.n	8003db4 <DMA_CheckFifoParam+0xe8>
      break;
 8003da6:	bf00      	nop
 8003da8:	e004      	b.n	8003db4 <DMA_CheckFifoParam+0xe8>
      break;
 8003daa:	bf00      	nop
 8003dac:	e002      	b.n	8003db4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003dae:	bf00      	nop
 8003db0:	e000      	b.n	8003db4 <DMA_CheckFifoParam+0xe8>
      break;
 8003db2:	bf00      	nop
    }
  } 
  
  return status; 
 8003db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop

08003dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b089      	sub	sp, #36	; 0x24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003dde:	2300      	movs	r3, #0
 8003de0:	61fb      	str	r3, [r7, #28]
 8003de2:	e175      	b.n	80040d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003de4:	2201      	movs	r2, #1
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	4013      	ands	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	f040 8164 	bne.w	80040ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f003 0303 	and.w	r3, r3, #3
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d005      	beq.n	8003e1a <HAL_GPIO_Init+0x56>
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d130      	bne.n	8003e7c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	2203      	movs	r2, #3
 8003e26:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2a:	43db      	mvns	r3, r3
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	68da      	ldr	r2, [r3, #12]
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e50:	2201      	movs	r2, #1
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	091b      	lsrs	r3, r3, #4
 8003e66:	f003 0201 	and.w	r2, r3, #1
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f003 0303 	and.w	r3, r3, #3
 8003e84:	2b03      	cmp	r3, #3
 8003e86:	d017      	beq.n	8003eb8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	2203      	movs	r2, #3
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f003 0303 	and.w	r3, r3, #3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d123      	bne.n	8003f0c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	08da      	lsrs	r2, r3, #3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	3208      	adds	r2, #8
 8003ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	220f      	movs	r2, #15
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	691a      	ldr	r2, [r3, #16]
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	f003 0307 	and.w	r3, r3, #7
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	08da      	lsrs	r2, r3, #3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	3208      	adds	r2, #8
 8003f06:	69b9      	ldr	r1, [r7, #24]
 8003f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	2203      	movs	r2, #3
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	4013      	ands	r3, r2
 8003f22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f003 0203 	and.w	r2, r3, #3
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 80be 	beq.w	80040ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f4e:	4b66      	ldr	r3, [pc, #408]	; (80040e8 <HAL_GPIO_Init+0x324>)
 8003f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f52:	4a65      	ldr	r2, [pc, #404]	; (80040e8 <HAL_GPIO_Init+0x324>)
 8003f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f58:	6453      	str	r3, [r2, #68]	; 0x44
 8003f5a:	4b63      	ldr	r3, [pc, #396]	; (80040e8 <HAL_GPIO_Init+0x324>)
 8003f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003f66:	4a61      	ldr	r2, [pc, #388]	; (80040ec <HAL_GPIO_Init+0x328>)
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	089b      	lsrs	r3, r3, #2
 8003f6c:	3302      	adds	r3, #2
 8003f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	f003 0303 	and.w	r3, r3, #3
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	220f      	movs	r2, #15
 8003f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f82:	43db      	mvns	r3, r3
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	4013      	ands	r3, r2
 8003f88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a58      	ldr	r2, [pc, #352]	; (80040f0 <HAL_GPIO_Init+0x32c>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d037      	beq.n	8004002 <HAL_GPIO_Init+0x23e>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a57      	ldr	r2, [pc, #348]	; (80040f4 <HAL_GPIO_Init+0x330>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d031      	beq.n	8003ffe <HAL_GPIO_Init+0x23a>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a56      	ldr	r2, [pc, #344]	; (80040f8 <HAL_GPIO_Init+0x334>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d02b      	beq.n	8003ffa <HAL_GPIO_Init+0x236>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a55      	ldr	r2, [pc, #340]	; (80040fc <HAL_GPIO_Init+0x338>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d025      	beq.n	8003ff6 <HAL_GPIO_Init+0x232>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a54      	ldr	r2, [pc, #336]	; (8004100 <HAL_GPIO_Init+0x33c>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d01f      	beq.n	8003ff2 <HAL_GPIO_Init+0x22e>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a53      	ldr	r2, [pc, #332]	; (8004104 <HAL_GPIO_Init+0x340>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d019      	beq.n	8003fee <HAL_GPIO_Init+0x22a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a52      	ldr	r2, [pc, #328]	; (8004108 <HAL_GPIO_Init+0x344>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d013      	beq.n	8003fea <HAL_GPIO_Init+0x226>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a51      	ldr	r2, [pc, #324]	; (800410c <HAL_GPIO_Init+0x348>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d00d      	beq.n	8003fe6 <HAL_GPIO_Init+0x222>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a50      	ldr	r2, [pc, #320]	; (8004110 <HAL_GPIO_Init+0x34c>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d007      	beq.n	8003fe2 <HAL_GPIO_Init+0x21e>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a4f      	ldr	r2, [pc, #316]	; (8004114 <HAL_GPIO_Init+0x350>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d101      	bne.n	8003fde <HAL_GPIO_Init+0x21a>
 8003fda:	2309      	movs	r3, #9
 8003fdc:	e012      	b.n	8004004 <HAL_GPIO_Init+0x240>
 8003fde:	230a      	movs	r3, #10
 8003fe0:	e010      	b.n	8004004 <HAL_GPIO_Init+0x240>
 8003fe2:	2308      	movs	r3, #8
 8003fe4:	e00e      	b.n	8004004 <HAL_GPIO_Init+0x240>
 8003fe6:	2307      	movs	r3, #7
 8003fe8:	e00c      	b.n	8004004 <HAL_GPIO_Init+0x240>
 8003fea:	2306      	movs	r3, #6
 8003fec:	e00a      	b.n	8004004 <HAL_GPIO_Init+0x240>
 8003fee:	2305      	movs	r3, #5
 8003ff0:	e008      	b.n	8004004 <HAL_GPIO_Init+0x240>
 8003ff2:	2304      	movs	r3, #4
 8003ff4:	e006      	b.n	8004004 <HAL_GPIO_Init+0x240>
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e004      	b.n	8004004 <HAL_GPIO_Init+0x240>
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	e002      	b.n	8004004 <HAL_GPIO_Init+0x240>
 8003ffe:	2301      	movs	r3, #1
 8004000:	e000      	b.n	8004004 <HAL_GPIO_Init+0x240>
 8004002:	2300      	movs	r3, #0
 8004004:	69fa      	ldr	r2, [r7, #28]
 8004006:	f002 0203 	and.w	r2, r2, #3
 800400a:	0092      	lsls	r2, r2, #2
 800400c:	4093      	lsls	r3, r2
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	4313      	orrs	r3, r2
 8004012:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004014:	4935      	ldr	r1, [pc, #212]	; (80040ec <HAL_GPIO_Init+0x328>)
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	089b      	lsrs	r3, r3, #2
 800401a:	3302      	adds	r3, #2
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004022:	4b3d      	ldr	r3, [pc, #244]	; (8004118 <HAL_GPIO_Init+0x354>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	43db      	mvns	r3, r3
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	4013      	ands	r3, r2
 8004030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	4313      	orrs	r3, r2
 8004044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004046:	4a34      	ldr	r2, [pc, #208]	; (8004118 <HAL_GPIO_Init+0x354>)
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800404c:	4b32      	ldr	r3, [pc, #200]	; (8004118 <HAL_GPIO_Init+0x354>)
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	43db      	mvns	r3, r3
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	4013      	ands	r3, r2
 800405a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d003      	beq.n	8004070 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	4313      	orrs	r3, r2
 800406e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004070:	4a29      	ldr	r2, [pc, #164]	; (8004118 <HAL_GPIO_Init+0x354>)
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004076:	4b28      	ldr	r3, [pc, #160]	; (8004118 <HAL_GPIO_Init+0x354>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	43db      	mvns	r3, r3
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	4013      	ands	r3, r2
 8004084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004092:	69ba      	ldr	r2, [r7, #24]
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	4313      	orrs	r3, r2
 8004098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800409a:	4a1f      	ldr	r2, [pc, #124]	; (8004118 <HAL_GPIO_Init+0x354>)
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040a0:	4b1d      	ldr	r3, [pc, #116]	; (8004118 <HAL_GPIO_Init+0x354>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	43db      	mvns	r3, r3
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	4013      	ands	r3, r2
 80040ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d003      	beq.n	80040c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040c4:	4a14      	ldr	r2, [pc, #80]	; (8004118 <HAL_GPIO_Init+0x354>)
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	3301      	adds	r3, #1
 80040ce:	61fb      	str	r3, [r7, #28]
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	2b0f      	cmp	r3, #15
 80040d4:	f67f ae86 	bls.w	8003de4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80040d8:	bf00      	nop
 80040da:	bf00      	nop
 80040dc:	3724      	adds	r7, #36	; 0x24
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	40023800 	.word	0x40023800
 80040ec:	40013800 	.word	0x40013800
 80040f0:	40020000 	.word	0x40020000
 80040f4:	40020400 	.word	0x40020400
 80040f8:	40020800 	.word	0x40020800
 80040fc:	40020c00 	.word	0x40020c00
 8004100:	40021000 	.word	0x40021000
 8004104:	40021400 	.word	0x40021400
 8004108:	40021800 	.word	0x40021800
 800410c:	40021c00 	.word	0x40021c00
 8004110:	40022000 	.word	0x40022000
 8004114:	40022400 	.word	0x40022400
 8004118:	40013c00 	.word	0x40013c00

0800411c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	460b      	mov	r3, r1
 8004126:	807b      	strh	r3, [r7, #2]
 8004128:	4613      	mov	r3, r2
 800412a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800412c:	787b      	ldrb	r3, [r7, #1]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d003      	beq.n	800413a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004132:	887a      	ldrh	r2, [r7, #2]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004138:	e003      	b.n	8004142 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800413a:	887b      	ldrh	r3, [r7, #2]
 800413c:	041a      	lsls	r2, r3, #16
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	619a      	str	r2, [r3, #24]
}
 8004142:	bf00      	nop
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr

0800414e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800414e:	b480      	push	{r7}
 8004150:	b085      	sub	sp, #20
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
 8004156:	460b      	mov	r3, r1
 8004158:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004160:	887a      	ldrh	r2, [r7, #2]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	4013      	ands	r3, r2
 8004166:	041a      	lsls	r2, r3, #16
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	43d9      	mvns	r1, r3
 800416c:	887b      	ldrh	r3, [r7, #2]
 800416e:	400b      	ands	r3, r1
 8004170:	431a      	orrs	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	619a      	str	r2, [r3, #24]
}
 8004176:	bf00      	nop
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
	...

08004184 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e07f      	b.n	8004296 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d106      	bne.n	80041b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7fd ff38 	bl	8002020 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2224      	movs	r2, #36	; 0x24
 80041b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0201 	bic.w	r2, r2, #1
 80041c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80041d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d107      	bne.n	80041fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041fa:	609a      	str	r2, [r3, #8]
 80041fc:	e006      	b.n	800420c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	689a      	ldr	r2, [r3, #8]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800420a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	2b02      	cmp	r3, #2
 8004212:	d104      	bne.n	800421e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800421c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6859      	ldr	r1, [r3, #4]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	4b1d      	ldr	r3, [pc, #116]	; (80042a0 <HAL_I2C_Init+0x11c>)
 800422a:	430b      	orrs	r3, r1
 800422c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800423c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691a      	ldr	r2, [r3, #16]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	69d9      	ldr	r1, [r3, #28]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a1a      	ldr	r2, [r3, #32]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0201 	orr.w	r2, r2, #1
 8004276:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2220      	movs	r2, #32
 8004282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3708      	adds	r7, #8
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	02008000 	.word	0x02008000

080042a4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b088      	sub	sp, #32
 80042a8:	af02      	add	r7, sp, #8
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	4608      	mov	r0, r1
 80042ae:	4611      	mov	r1, r2
 80042b0:	461a      	mov	r2, r3
 80042b2:	4603      	mov	r3, r0
 80042b4:	817b      	strh	r3, [r7, #10]
 80042b6:	460b      	mov	r3, r1
 80042b8:	813b      	strh	r3, [r7, #8]
 80042ba:	4613      	mov	r3, r2
 80042bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b20      	cmp	r3, #32
 80042c8:	f040 80f9 	bne.w	80044be <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042cc:	6a3b      	ldr	r3, [r7, #32]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d002      	beq.n	80042d8 <HAL_I2C_Mem_Write+0x34>
 80042d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d105      	bne.n	80042e4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e0ed      	b.n	80044c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d101      	bne.n	80042f2 <HAL_I2C_Mem_Write+0x4e>
 80042ee:	2302      	movs	r3, #2
 80042f0:	e0e6      	b.n	80044c0 <HAL_I2C_Mem_Write+0x21c>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042fa:	f7fe fe0b 	bl	8002f14 <HAL_GetTick>
 80042fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	2319      	movs	r3, #25
 8004306:	2201      	movs	r2, #1
 8004308:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 ffc0 	bl	8005292 <I2C_WaitOnFlagUntilTimeout>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e0d1      	b.n	80044c0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2221      	movs	r2, #33	; 0x21
 8004320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2240      	movs	r2, #64	; 0x40
 8004328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6a3a      	ldr	r2, [r7, #32]
 8004336:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800433c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004344:	88f8      	ldrh	r0, [r7, #6]
 8004346:	893a      	ldrh	r2, [r7, #8]
 8004348:	8979      	ldrh	r1, [r7, #10]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	9301      	str	r3, [sp, #4]
 800434e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	4603      	mov	r3, r0
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f000 fb81 	bl	8004a5c <I2C_RequestMemoryWrite>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d005      	beq.n	800436c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e0a9      	b.n	80044c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004370:	b29b      	uxth	r3, r3
 8004372:	2bff      	cmp	r3, #255	; 0xff
 8004374:	d90e      	bls.n	8004394 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	22ff      	movs	r2, #255	; 0xff
 800437a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004380:	b2da      	uxtb	r2, r3
 8004382:	8979      	ldrh	r1, [r7, #10]
 8004384:	2300      	movs	r3, #0
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f001 f91d 	bl	80055cc <I2C_TransferConfig>
 8004392:	e00f      	b.n	80043b4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004398:	b29a      	uxth	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a2:	b2da      	uxtb	r2, r3
 80043a4:	8979      	ldrh	r1, [r7, #10]
 80043a6:	2300      	movs	r3, #0
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f001 f90c 	bl	80055cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f000 ffaa 	bl	8005312 <I2C_WaitOnTXISFlagUntilTimeout>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e07b      	b.n	80044c0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043cc:	781a      	ldrb	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f0:	3b01      	subs	r3, #1
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d034      	beq.n	800446c <HAL_I2C_Mem_Write+0x1c8>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004406:	2b00      	cmp	r3, #0
 8004408:	d130      	bne.n	800446c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004410:	2200      	movs	r2, #0
 8004412:	2180      	movs	r1, #128	; 0x80
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f000 ff3c 	bl	8005292 <I2C_WaitOnFlagUntilTimeout>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e04d      	b.n	80044c0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004428:	b29b      	uxth	r3, r3
 800442a:	2bff      	cmp	r3, #255	; 0xff
 800442c:	d90e      	bls.n	800444c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	22ff      	movs	r2, #255	; 0xff
 8004432:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004438:	b2da      	uxtb	r2, r3
 800443a:	8979      	ldrh	r1, [r7, #10]
 800443c:	2300      	movs	r3, #0
 800443e:	9300      	str	r3, [sp, #0]
 8004440:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f001 f8c1 	bl	80055cc <I2C_TransferConfig>
 800444a:	e00f      	b.n	800446c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004450:	b29a      	uxth	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800445a:	b2da      	uxtb	r2, r3
 800445c:	8979      	ldrh	r1, [r7, #10]
 800445e:	2300      	movs	r3, #0
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f001 f8b0 	bl	80055cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004470:	b29b      	uxth	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d19e      	bne.n	80043b4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 ff89 	bl	8005392 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e01a      	b.n	80044c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2220      	movs	r2, #32
 8004490:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	6859      	ldr	r1, [r3, #4]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	4b0a      	ldr	r3, [pc, #40]	; (80044c8 <HAL_I2C_Mem_Write+0x224>)
 800449e:	400b      	ands	r3, r1
 80044a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2220      	movs	r2, #32
 80044a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044ba:	2300      	movs	r3, #0
 80044bc:	e000      	b.n	80044c0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80044be:	2302      	movs	r3, #2
  }
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3718      	adds	r7, #24
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	fe00e800 	.word	0xfe00e800

080044cc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b088      	sub	sp, #32
 80044d0:	af02      	add	r7, sp, #8
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	4608      	mov	r0, r1
 80044d6:	4611      	mov	r1, r2
 80044d8:	461a      	mov	r2, r3
 80044da:	4603      	mov	r3, r0
 80044dc:	817b      	strh	r3, [r7, #10]
 80044de:	460b      	mov	r3, r1
 80044e0:	813b      	strh	r3, [r7, #8]
 80044e2:	4613      	mov	r3, r2
 80044e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b20      	cmp	r3, #32
 80044f0:	f040 80fd 	bne.w	80046ee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80044f4:	6a3b      	ldr	r3, [r7, #32]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d002      	beq.n	8004500 <HAL_I2C_Mem_Read+0x34>
 80044fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d105      	bne.n	800450c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004506:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e0f1      	b.n	80046f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004512:	2b01      	cmp	r3, #1
 8004514:	d101      	bne.n	800451a <HAL_I2C_Mem_Read+0x4e>
 8004516:	2302      	movs	r3, #2
 8004518:	e0ea      	b.n	80046f0 <HAL_I2C_Mem_Read+0x224>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004522:	f7fe fcf7 	bl	8002f14 <HAL_GetTick>
 8004526:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	2319      	movs	r3, #25
 800452e:	2201      	movs	r2, #1
 8004530:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f000 feac 	bl	8005292 <I2C_WaitOnFlagUntilTimeout>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e0d5      	b.n	80046f0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2222      	movs	r2, #34	; 0x22
 8004548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2240      	movs	r2, #64	; 0x40
 8004550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6a3a      	ldr	r2, [r7, #32]
 800455e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004564:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800456c:	88f8      	ldrh	r0, [r7, #6]
 800456e:	893a      	ldrh	r2, [r7, #8]
 8004570:	8979      	ldrh	r1, [r7, #10]
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	9301      	str	r3, [sp, #4]
 8004576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004578:	9300      	str	r3, [sp, #0]
 800457a:	4603      	mov	r3, r0
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 fac1 	bl	8004b04 <I2C_RequestMemoryRead>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d005      	beq.n	8004594 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e0ad      	b.n	80046f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004598:	b29b      	uxth	r3, r3
 800459a:	2bff      	cmp	r3, #255	; 0xff
 800459c:	d90e      	bls.n	80045bc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	22ff      	movs	r2, #255	; 0xff
 80045a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a8:	b2da      	uxtb	r2, r3
 80045aa:	8979      	ldrh	r1, [r7, #10]
 80045ac:	4b52      	ldr	r3, [pc, #328]	; (80046f8 <HAL_I2C_Mem_Read+0x22c>)
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f001 f809 	bl	80055cc <I2C_TransferConfig>
 80045ba:	e00f      	b.n	80045dc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ca:	b2da      	uxtb	r2, r3
 80045cc:	8979      	ldrh	r1, [r7, #10]
 80045ce:	4b4a      	ldr	r3, [pc, #296]	; (80046f8 <HAL_I2C_Mem_Read+0x22c>)
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f000 fff8 	bl	80055cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e2:	2200      	movs	r2, #0
 80045e4:	2104      	movs	r1, #4
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 fe53 	bl	8005292 <I2C_WaitOnFlagUntilTimeout>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e07c      	b.n	80046f0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004600:	b2d2      	uxtb	r2, r2
 8004602:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004608:	1c5a      	adds	r2, r3, #1
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004612:	3b01      	subs	r3, #1
 8004614:	b29a      	uxth	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461e:	b29b      	uxth	r3, r3
 8004620:	3b01      	subs	r3, #1
 8004622:	b29a      	uxth	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462c:	b29b      	uxth	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d034      	beq.n	800469c <HAL_I2C_Mem_Read+0x1d0>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004636:	2b00      	cmp	r3, #0
 8004638:	d130      	bne.n	800469c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004640:	2200      	movs	r2, #0
 8004642:	2180      	movs	r1, #128	; 0x80
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 fe24 	bl	8005292 <I2C_WaitOnFlagUntilTimeout>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e04d      	b.n	80046f0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004658:	b29b      	uxth	r3, r3
 800465a:	2bff      	cmp	r3, #255	; 0xff
 800465c:	d90e      	bls.n	800467c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	22ff      	movs	r2, #255	; 0xff
 8004662:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004668:	b2da      	uxtb	r2, r3
 800466a:	8979      	ldrh	r1, [r7, #10]
 800466c:	2300      	movs	r3, #0
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 ffa9 	bl	80055cc <I2C_TransferConfig>
 800467a:	e00f      	b.n	800469c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004680:	b29a      	uxth	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800468a:	b2da      	uxtb	r2, r3
 800468c:	8979      	ldrh	r1, [r7, #10]
 800468e:	2300      	movs	r3, #0
 8004690:	9300      	str	r3, [sp, #0]
 8004692:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 ff98 	bl	80055cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d19a      	bne.n	80045dc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f000 fe71 	bl	8005392 <I2C_WaitOnSTOPFlagUntilTimeout>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e01a      	b.n	80046f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2220      	movs	r2, #32
 80046c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	6859      	ldr	r1, [r3, #4]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	4b0b      	ldr	r3, [pc, #44]	; (80046fc <HAL_I2C_Mem_Read+0x230>)
 80046ce:	400b      	ands	r3, r1
 80046d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2220      	movs	r2, #32
 80046d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046ea:	2300      	movs	r3, #0
 80046ec:	e000      	b.n	80046f0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80046ee:	2302      	movs	r3, #2
  }
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3718      	adds	r7, #24
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	80002400 	.word	0x80002400
 80046fc:	fe00e800 	.word	0xfe00e800

08004700 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800471c:	2b00      	cmp	r3, #0
 800471e:	d005      	beq.n	800472c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	68f9      	ldr	r1, [r7, #12]
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	4798      	blx	r3
  }
}
 800472c:	bf00      	nop
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00f      	beq.n	8004776 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00a      	beq.n	8004776 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004764:	f043 0201 	orr.w	r2, r3, #1
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004774:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00f      	beq.n	80047a0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00a      	beq.n	80047a0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800478e:	f043 0208 	orr.w	r2, r3, #8
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800479e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00f      	beq.n	80047ca <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00a      	beq.n	80047ca <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b8:	f043 0202 	orr.w	r2, r3, #2
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047c8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f003 030b 	and.w	r3, r3, #11
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80047da:	68f9      	ldr	r1, [r7, #12]
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 fc1f 	bl	8005020 <I2C_ITError>
  }
}
 80047e2:	bf00      	nop
 80047e4:	3718      	adds	r7, #24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b083      	sub	sp, #12
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004812:	b480      	push	{r7}
 8004814:	b083      	sub	sp, #12
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
 800481a:	460b      	mov	r3, r1
 800481c:	70fb      	strb	r3, [r7, #3]
 800481e:	4613      	mov	r3, r2
 8004820:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004822:	bf00      	nop
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr

0800482e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800482e:	b480      	push	{r7}
 8004830:	b083      	sub	sp, #12
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004836:	bf00      	nop
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800484a:	bf00      	nop
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004856:	b480      	push	{r7}
 8004858:	b083      	sub	sp, #12
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800485e:	bf00      	nop
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b086      	sub	sp, #24
 800486e:	af00      	add	r7, sp, #0
 8004870:	60f8      	str	r0, [r7, #12]
 8004872:	60b9      	str	r1, [r7, #8]
 8004874:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004886:	2b01      	cmp	r3, #1
 8004888:	d101      	bne.n	800488e <I2C_Slave_ISR_IT+0x24>
 800488a:	2302      	movs	r3, #2
 800488c:	e0e1      	b.n	8004a52 <I2C_Slave_ISR_IT+0x1e8>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	f003 0320 	and.w	r3, r3, #32
 800489c:	2b00      	cmp	r3, #0
 800489e:	d008      	beq.n	80048b2 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80048aa:	6939      	ldr	r1, [r7, #16]
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f000 fa5d 	bl	8004d6c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f003 0310 	and.w	r3, r3, #16
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d04b      	beq.n	8004954 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d046      	beq.n	8004954 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d128      	bne.n	8004922 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b28      	cmp	r3, #40	; 0x28
 80048da:	d108      	bne.n	80048ee <I2C_Slave_ISR_IT+0x84>
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048e2:	d104      	bne.n	80048ee <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80048e4:	6939      	ldr	r1, [r7, #16]
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f000 fb46 	bl	8004f78 <I2C_ITListenCplt>
 80048ec:	e031      	b.n	8004952 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b29      	cmp	r3, #41	; 0x29
 80048f8:	d10e      	bne.n	8004918 <I2C_Slave_ISR_IT+0xae>
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004900:	d00a      	beq.n	8004918 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2210      	movs	r2, #16
 8004908:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f000 fc7f 	bl	800520e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f000 f9cf 	bl	8004cb4 <I2C_ITSlaveSeqCplt>
 8004916:	e01c      	b.n	8004952 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2210      	movs	r2, #16
 800491e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004920:	e08f      	b.n	8004a42 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2210      	movs	r2, #16
 8004928:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800492e:	f043 0204 	orr.w	r2, r3, #4
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d003      	beq.n	8004944 <I2C_Slave_ISR_IT+0xda>
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004942:	d17e      	bne.n	8004a42 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004948:	4619      	mov	r1, r3
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	f000 fb68 	bl	8005020 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004950:	e077      	b.n	8004a42 <I2C_Slave_ISR_IT+0x1d8>
 8004952:	e076      	b.n	8004a42 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	f003 0304 	and.w	r3, r3, #4
 800495a:	2b00      	cmp	r3, #0
 800495c:	d02f      	beq.n	80049be <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004964:	2b00      	cmp	r3, #0
 8004966:	d02a      	beq.n	80049be <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800496c:	b29b      	uxth	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d018      	beq.n	80049a4 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497c:	b2d2      	uxtb	r2, r2
 800497e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004984:	1c5a      	adds	r2, r3, #1
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800498e:	3b01      	subs	r3, #1
 8004990:	b29a      	uxth	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800499a:	b29b      	uxth	r3, r3
 800499c:	3b01      	subs	r3, #1
 800499e:	b29a      	uxth	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d14b      	bne.n	8004a46 <I2C_Slave_ISR_IT+0x1dc>
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049b4:	d047      	beq.n	8004a46 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 f97c 	bl	8004cb4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80049bc:	e043      	b.n	8004a46 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f003 0308 	and.w	r3, r3, #8
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d009      	beq.n	80049dc <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d004      	beq.n	80049dc <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80049d2:	6939      	ldr	r1, [r7, #16]
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f000 f8e9 	bl	8004bac <I2C_ITAddrCplt>
 80049da:	e035      	b.n	8004a48 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d030      	beq.n	8004a48 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d02b      	beq.n	8004a48 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d018      	beq.n	8004a2c <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fe:	781a      	ldrb	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0a:	1c5a      	adds	r2, r3, #1
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	3b01      	subs	r3, #1
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a22:	3b01      	subs	r3, #1
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	851a      	strh	r2, [r3, #40]	; 0x28
 8004a2a:	e00d      	b.n	8004a48 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a32:	d002      	beq.n	8004a3a <I2C_Slave_ISR_IT+0x1d0>
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d106      	bne.n	8004a48 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f000 f93a 	bl	8004cb4 <I2C_ITSlaveSeqCplt>
 8004a40:	e002      	b.n	8004a48 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8004a42:	bf00      	nop
 8004a44:	e000      	b.n	8004a48 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8004a46:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3718      	adds	r7, #24
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
	...

08004a5c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b086      	sub	sp, #24
 8004a60:	af02      	add	r7, sp, #8
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	4608      	mov	r0, r1
 8004a66:	4611      	mov	r1, r2
 8004a68:	461a      	mov	r2, r3
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	817b      	strh	r3, [r7, #10]
 8004a6e:	460b      	mov	r3, r1
 8004a70:	813b      	strh	r3, [r7, #8]
 8004a72:	4613      	mov	r3, r2
 8004a74:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004a76:	88fb      	ldrh	r3, [r7, #6]
 8004a78:	b2da      	uxtb	r2, r3
 8004a7a:	8979      	ldrh	r1, [r7, #10]
 8004a7c:	4b20      	ldr	r3, [pc, #128]	; (8004b00 <I2C_RequestMemoryWrite+0xa4>)
 8004a7e:	9300      	str	r3, [sp, #0]
 8004a80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f000 fda1 	bl	80055cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a8a:	69fa      	ldr	r2, [r7, #28]
 8004a8c:	69b9      	ldr	r1, [r7, #24]
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f000 fc3f 	bl	8005312 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e02c      	b.n	8004af8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a9e:	88fb      	ldrh	r3, [r7, #6]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d105      	bne.n	8004ab0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004aa4:	893b      	ldrh	r3, [r7, #8]
 8004aa6:	b2da      	uxtb	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	629a      	str	r2, [r3, #40]	; 0x28
 8004aae:	e015      	b.n	8004adc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004ab0:	893b      	ldrh	r3, [r7, #8]
 8004ab2:	0a1b      	lsrs	r3, r3, #8
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	b2da      	uxtb	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004abe:	69fa      	ldr	r2, [r7, #28]
 8004ac0:	69b9      	ldr	r1, [r7, #24]
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f000 fc25 	bl	8005312 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e012      	b.n	8004af8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ad2:	893b      	ldrh	r3, [r7, #8]
 8004ad4:	b2da      	uxtb	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	2180      	movs	r1, #128	; 0x80
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f000 fbd3 	bl	8005292 <I2C_WaitOnFlagUntilTimeout>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d001      	beq.n	8004af6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e000      	b.n	8004af8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	80002000 	.word	0x80002000

08004b04 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af02      	add	r7, sp, #8
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	4608      	mov	r0, r1
 8004b0e:	4611      	mov	r1, r2
 8004b10:	461a      	mov	r2, r3
 8004b12:	4603      	mov	r3, r0
 8004b14:	817b      	strh	r3, [r7, #10]
 8004b16:	460b      	mov	r3, r1
 8004b18:	813b      	strh	r3, [r7, #8]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004b1e:	88fb      	ldrh	r3, [r7, #6]
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	8979      	ldrh	r1, [r7, #10]
 8004b24:	4b20      	ldr	r3, [pc, #128]	; (8004ba8 <I2C_RequestMemoryRead+0xa4>)
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	2300      	movs	r3, #0
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f000 fd4e 	bl	80055cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b30:	69fa      	ldr	r2, [r7, #28]
 8004b32:	69b9      	ldr	r1, [r7, #24]
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f000 fbec 	bl	8005312 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d001      	beq.n	8004b44 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e02c      	b.n	8004b9e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b44:	88fb      	ldrh	r3, [r7, #6]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d105      	bne.n	8004b56 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b4a:	893b      	ldrh	r3, [r7, #8]
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	629a      	str	r2, [r3, #40]	; 0x28
 8004b54:	e015      	b.n	8004b82 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004b56:	893b      	ldrh	r3, [r7, #8]
 8004b58:	0a1b      	lsrs	r3, r3, #8
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	b2da      	uxtb	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b64:	69fa      	ldr	r2, [r7, #28]
 8004b66:	69b9      	ldr	r1, [r7, #24]
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f000 fbd2 	bl	8005312 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d001      	beq.n	8004b78 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e012      	b.n	8004b9e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b78:	893b      	ldrh	r3, [r7, #8]
 8004b7a:	b2da      	uxtb	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	2140      	movs	r1, #64	; 0x40
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f000 fb80 	bl	8005292 <I2C_WaitOnFlagUntilTimeout>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d001      	beq.n	8004b9c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e000      	b.n	8004b9e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	80002000 	.word	0x80002000

08004bac <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004bc2:	2b28      	cmp	r3, #40	; 0x28
 8004bc4:	d16a      	bne.n	8004c9c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	0c1b      	lsrs	r3, r3, #16
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	0c1b      	lsrs	r3, r3, #16
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004be4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bf2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004c00:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d138      	bne.n	8004c7c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004c0a:	897b      	ldrh	r3, [r7, #10]
 8004c0c:	09db      	lsrs	r3, r3, #7
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	89bb      	ldrh	r3, [r7, #12]
 8004c12:	4053      	eors	r3, r2
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	f003 0306 	and.w	r3, r3, #6
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d11c      	bne.n	8004c58 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004c1e:	897b      	ldrh	r3, [r7, #10]
 8004c20:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c26:	1c5a      	adds	r2, r3, #1
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d13b      	bne.n	8004cac <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2208      	movs	r2, #8
 8004c40:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004c4a:	89ba      	ldrh	r2, [r7, #12]
 8004c4c:	7bfb      	ldrb	r3, [r7, #15]
 8004c4e:	4619      	mov	r1, r3
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f7ff fdde 	bl	8004812 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004c56:	e029      	b.n	8004cac <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004c58:	893b      	ldrh	r3, [r7, #8]
 8004c5a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004c5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 fce5 	bl	8005630 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004c6e:	89ba      	ldrh	r2, [r7, #12]
 8004c70:	7bfb      	ldrb	r3, [r7, #15]
 8004c72:	4619      	mov	r1, r3
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f7ff fdcc 	bl	8004812 <HAL_I2C_AddrCallback>
}
 8004c7a:	e017      	b.n	8004cac <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004c7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 fcd5 	bl	8005630 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004c8e:	89ba      	ldrh	r2, [r7, #12]
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
 8004c92:	4619      	mov	r1, r3
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f7ff fdbc 	bl	8004812 <HAL_I2C_AddrCallback>
}
 8004c9a:	e007      	b.n	8004cac <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2208      	movs	r2, #8
 8004ca2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004cac:	bf00      	nop
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d008      	beq.n	8004ce8 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	e00c      	b.n	8004d02 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d007      	beq.n	8004d02 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d00:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b29      	cmp	r3, #41	; 0x29
 8004d0c:	d112      	bne.n	8004d34 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2228      	movs	r2, #40	; 0x28
 8004d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2221      	movs	r2, #33	; 0x21
 8004d1a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 fc86 	bl	8005630 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f7ff fd5c 	bl	80047ea <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004d32:	e017      	b.n	8004d64 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b2a      	cmp	r3, #42	; 0x2a
 8004d3e:	d111      	bne.n	8004d64 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2228      	movs	r2, #40	; 0x28
 8004d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2222      	movs	r2, #34	; 0x22
 8004d4c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004d4e:	2102      	movs	r1, #2
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 fc6d 	bl	8005630 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7ff fd4d 	bl	80047fe <HAL_I2C_SlaveRxCpltCallback>
}
 8004d64:	bf00      	nop
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b086      	sub	sp, #24
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d88:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004d92:	7bfb      	ldrb	r3, [r7, #15]
 8004d94:	2b21      	cmp	r3, #33	; 0x21
 8004d96:	d002      	beq.n	8004d9e <I2C_ITSlaveCplt+0x32>
 8004d98:	7bfb      	ldrb	r3, [r7, #15]
 8004d9a:	2b29      	cmp	r3, #41	; 0x29
 8004d9c:	d108      	bne.n	8004db0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004d9e:	f248 0101 	movw	r1, #32769	; 0x8001
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 fc44 	bl	8005630 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2221      	movs	r2, #33	; 0x21
 8004dac:	631a      	str	r2, [r3, #48]	; 0x30
 8004dae:	e00d      	b.n	8004dcc <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004db0:	7bfb      	ldrb	r3, [r7, #15]
 8004db2:	2b22      	cmp	r3, #34	; 0x22
 8004db4:	d002      	beq.n	8004dbc <I2C_ITSlaveCplt+0x50>
 8004db6:	7bfb      	ldrb	r3, [r7, #15]
 8004db8:	2b2a      	cmp	r3, #42	; 0x2a
 8004dba:	d107      	bne.n	8004dcc <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004dbc:	f248 0102 	movw	r1, #32770	; 0x8002
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 fc35 	bl	8005630 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2222      	movs	r2, #34	; 0x22
 8004dca:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dda:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6859      	ldr	r1, [r3, #4]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	4b62      	ldr	r3, [pc, #392]	; (8004f70 <I2C_ITSlaveCplt+0x204>)
 8004de8:	400b      	ands	r3, r1
 8004dea:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 fa0e 	bl	800520e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d013      	beq.n	8004e24 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e0a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d01f      	beq.n	8004e54 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e22:	e017      	b.n	8004e54 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d012      	beq.n	8004e54 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e3c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d006      	beq.n	8004e54 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	f003 0304 	and.w	r3, r3, #4
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d020      	beq.n	8004ea0 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f023 0304 	bic.w	r3, r3, #4
 8004e64:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e70:	b2d2      	uxtb	r2, r2
 8004e72:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e78:	1c5a      	adds	r2, r3, #1
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00c      	beq.n	8004ea0 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d005      	beq.n	8004eb6 <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eae:	f043 0204 	orr.w	r2, r3, #4
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d010      	beq.n	8004eee <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f8a4 	bl	8005020 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	2b28      	cmp	r3, #40	; 0x28
 8004ee2:	d141      	bne.n	8004f68 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004ee4:	6979      	ldr	r1, [r7, #20]
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 f846 	bl	8004f78 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004eec:	e03c      	b.n	8004f68 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ef6:	d014      	beq.n	8004f22 <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f7ff fedb 	bl	8004cb4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a1c      	ldr	r2, [pc, #112]	; (8004f74 <I2C_ITSlaveCplt+0x208>)
 8004f02:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2220      	movs	r2, #32
 8004f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7ff fc87 	bl	800482e <HAL_I2C_ListenCpltCallback>
}
 8004f20:	e022      	b.n	8004f68 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b22      	cmp	r3, #34	; 0x22
 8004f2c:	d10e      	bne.n	8004f4c <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2220      	movs	r2, #32
 8004f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f7ff fc5a 	bl	80047fe <HAL_I2C_SlaveRxCpltCallback>
}
 8004f4a:	e00d      	b.n	8004f68 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7ff fc41 	bl	80047ea <HAL_I2C_SlaveTxCpltCallback>
}
 8004f68:	bf00      	nop
 8004f6a:	3718      	adds	r7, #24
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	fe00e800 	.word	0xfe00e800
 8004f74:	ffff0000 	.word	0xffff0000

08004f78 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a25      	ldr	r2, [pc, #148]	; (800501c <I2C_ITListenCplt+0xa4>)
 8004f86:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2220      	movs	r2, #32
 8004f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	f003 0304 	and.w	r3, r3, #4
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d022      	beq.n	8004ff4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb8:	b2d2      	uxtb	r2, r2
 8004fba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc0:	1c5a      	adds	r2, r3, #1
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d012      	beq.n	8004ff4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fec:	f043 0204 	orr.w	r2, r3, #4
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004ff4:	f248 0103 	movw	r1, #32771	; 0x8003
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 fb19 	bl	8005630 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2210      	movs	r2, #16
 8005004:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f7ff fc0d 	bl	800482e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005014:	bf00      	nop
 8005016:	3708      	adds	r7, #8
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	ffff0000 	.word	0xffff0000

08005020 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005030:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a5d      	ldr	r2, [pc, #372]	; (80051b4 <I2C_ITError+0x194>)
 800503e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	431a      	orrs	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005052:	7bfb      	ldrb	r3, [r7, #15]
 8005054:	2b28      	cmp	r3, #40	; 0x28
 8005056:	d005      	beq.n	8005064 <I2C_ITError+0x44>
 8005058:	7bfb      	ldrb	r3, [r7, #15]
 800505a:	2b29      	cmp	r3, #41	; 0x29
 800505c:	d002      	beq.n	8005064 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800505e:	7bfb      	ldrb	r3, [r7, #15]
 8005060:	2b2a      	cmp	r3, #42	; 0x2a
 8005062:	d10b      	bne.n	800507c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005064:	2103      	movs	r1, #3
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 fae2 	bl	8005630 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2228      	movs	r2, #40	; 0x28
 8005070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a50      	ldr	r2, [pc, #320]	; (80051b8 <I2C_ITError+0x198>)
 8005078:	635a      	str	r2, [r3, #52]	; 0x34
 800507a:	e011      	b.n	80050a0 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800507c:	f248 0103 	movw	r1, #32771	; 0x8003
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 fad5 	bl	8005630 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b60      	cmp	r3, #96	; 0x60
 8005090:	d003      	beq.n	800509a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2220      	movs	r2, #32
 8005096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a4:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d039      	beq.n	8005122 <I2C_ITError+0x102>
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	2b11      	cmp	r3, #17
 80050b2:	d002      	beq.n	80050ba <I2C_ITError+0x9a>
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	2b21      	cmp	r3, #33	; 0x21
 80050b8:	d133      	bne.n	8005122 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050c8:	d107      	bne.n	80050da <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80050d8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050de:	4618      	mov	r0, r3
 80050e0:	f7fe fd82 	bl	8003be8 <HAL_DMA_GetState>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d017      	beq.n	800511a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ee:	4a33      	ldr	r2, [pc, #204]	; (80051bc <I2C_ITError+0x19c>)
 80050f0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fe:	4618      	mov	r0, r3
 8005100:	f7fe fbc6 	bl	8003890 <HAL_DMA_Abort_IT>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d04d      	beq.n	80051a6 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005114:	4610      	mov	r0, r2
 8005116:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005118:	e045      	b.n	80051a6 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f850 	bl	80051c0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005120:	e041      	b.n	80051a6 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005126:	2b00      	cmp	r3, #0
 8005128:	d039      	beq.n	800519e <I2C_ITError+0x17e>
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2b12      	cmp	r3, #18
 800512e:	d002      	beq.n	8005136 <I2C_ITError+0x116>
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	2b22      	cmp	r3, #34	; 0x22
 8005134:	d133      	bne.n	800519e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005140:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005144:	d107      	bne.n	8005156 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005154:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800515a:	4618      	mov	r0, r3
 800515c:	f7fe fd44 	bl	8003be8 <HAL_DMA_GetState>
 8005160:	4603      	mov	r3, r0
 8005162:	2b01      	cmp	r3, #1
 8005164:	d017      	beq.n	8005196 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800516a:	4a14      	ldr	r2, [pc, #80]	; (80051bc <I2C_ITError+0x19c>)
 800516c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800517a:	4618      	mov	r0, r3
 800517c:	f7fe fb88 	bl	8003890 <HAL_DMA_Abort_IT>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d011      	beq.n	80051aa <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005190:	4610      	mov	r0, r2
 8005192:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005194:	e009      	b.n	80051aa <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f812 	bl	80051c0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800519c:	e005      	b.n	80051aa <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f80e 	bl	80051c0 <I2C_TreatErrorCallback>
  }
}
 80051a4:	e002      	b.n	80051ac <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80051a6:	bf00      	nop
 80051a8:	e000      	b.n	80051ac <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80051aa:	bf00      	nop
}
 80051ac:	bf00      	nop
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	ffff0000 	.word	0xffff0000
 80051b8:	0800486b 	.word	0x0800486b
 80051bc:	08005257 	.word	0x08005257

080051c0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	2b60      	cmp	r3, #96	; 0x60
 80051d2:	d10e      	bne.n	80051f2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2220      	movs	r2, #32
 80051d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f7ff fb33 	bl	8004856 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80051f0:	e009      	b.n	8005206 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f7ff fb1e 	bl	8004842 <HAL_I2C_ErrorCallback>
}
 8005206:	bf00      	nop
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800520e:	b480      	push	{r7}
 8005210:	b083      	sub	sp, #12
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	2b02      	cmp	r3, #2
 8005222:	d103      	bne.n	800522c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2200      	movs	r2, #0
 800522a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b01      	cmp	r3, #1
 8005238:	d007      	beq.n	800524a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	699a      	ldr	r2, [r3, #24]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f042 0201 	orr.w	r2, r2, #1
 8005248:	619a      	str	r2, [r3, #24]
  }
}
 800524a:	bf00      	nop
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b084      	sub	sp, #16
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005262:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005268:	2b00      	cmp	r3, #0
 800526a:	d003      	beq.n	8005274 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005270:	2200      	movs	r2, #0
 8005272:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005280:	2200      	movs	r2, #0
 8005282:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f7ff ff9b 	bl	80051c0 <I2C_TreatErrorCallback>
}
 800528a:	bf00      	nop
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b084      	sub	sp, #16
 8005296:	af00      	add	r7, sp, #0
 8005298:	60f8      	str	r0, [r7, #12]
 800529a:	60b9      	str	r1, [r7, #8]
 800529c:	603b      	str	r3, [r7, #0]
 800529e:	4613      	mov	r3, r2
 80052a0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052a2:	e022      	b.n	80052ea <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052aa:	d01e      	beq.n	80052ea <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ac:	f7fd fe32 	bl	8002f14 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d302      	bcc.n	80052c2 <I2C_WaitOnFlagUntilTimeout+0x30>
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d113      	bne.n	80052ea <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c6:	f043 0220 	orr.w	r2, r3, #32
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2220      	movs	r2, #32
 80052d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e00f      	b.n	800530a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	699a      	ldr	r2, [r3, #24]
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	4013      	ands	r3, r2
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	bf0c      	ite	eq
 80052fa:	2301      	moveq	r3, #1
 80052fc:	2300      	movne	r3, #0
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	461a      	mov	r2, r3
 8005302:	79fb      	ldrb	r3, [r7, #7]
 8005304:	429a      	cmp	r2, r3
 8005306:	d0cd      	beq.n	80052a4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b084      	sub	sp, #16
 8005316:	af00      	add	r7, sp, #0
 8005318:	60f8      	str	r0, [r7, #12]
 800531a:	60b9      	str	r1, [r7, #8]
 800531c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800531e:	e02c      	b.n	800537a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	68b9      	ldr	r1, [r7, #8]
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f000 f871 	bl	800540c <I2C_IsErrorOccurred>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d001      	beq.n	8005334 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e02a      	b.n	800538a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533a:	d01e      	beq.n	800537a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800533c:	f7fd fdea 	bl	8002f14 <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	429a      	cmp	r2, r3
 800534a:	d302      	bcc.n	8005352 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d113      	bne.n	800537a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005356:	f043 0220 	orr.w	r2, r3, #32
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2220      	movs	r2, #32
 8005362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e007      	b.n	800538a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	f003 0302 	and.w	r3, r3, #2
 8005384:	2b02      	cmp	r3, #2
 8005386:	d1cb      	bne.n	8005320 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b084      	sub	sp, #16
 8005396:	af00      	add	r7, sp, #0
 8005398:	60f8      	str	r0, [r7, #12]
 800539a:	60b9      	str	r1, [r7, #8]
 800539c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800539e:	e028      	b.n	80053f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	68b9      	ldr	r1, [r7, #8]
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f000 f831 	bl	800540c <I2C_IsErrorOccurred>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d001      	beq.n	80053b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e026      	b.n	8005402 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053b4:	f7fd fdae 	bl	8002f14 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d302      	bcc.n	80053ca <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d113      	bne.n	80053f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ce:	f043 0220 	orr.w	r2, r3, #32
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2220      	movs	r2, #32
 80053da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e007      	b.n	8005402 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	f003 0320 	and.w	r3, r3, #32
 80053fc:	2b20      	cmp	r3, #32
 80053fe:	d1cf      	bne.n	80053a0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
	...

0800540c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b08a      	sub	sp, #40	; 0x28
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005418:	2300      	movs	r3, #0
 800541a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005426:	2300      	movs	r3, #0
 8005428:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	f003 0310 	and.w	r3, r3, #16
 8005434:	2b00      	cmp	r3, #0
 8005436:	d068      	beq.n	800550a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2210      	movs	r2, #16
 800543e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005440:	e049      	b.n	80054d6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005448:	d045      	beq.n	80054d6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800544a:	f7fd fd63 	bl	8002f14 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	429a      	cmp	r2, r3
 8005458:	d302      	bcc.n	8005460 <I2C_IsErrorOccurred+0x54>
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d13a      	bne.n	80054d6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800546a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005472:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800547e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005482:	d121      	bne.n	80054c8 <I2C_IsErrorOccurred+0xbc>
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800548a:	d01d      	beq.n	80054c8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800548c:	7cfb      	ldrb	r3, [r7, #19]
 800548e:	2b20      	cmp	r3, #32
 8005490:	d01a      	beq.n	80054c8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054a0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80054a2:	f7fd fd37 	bl	8002f14 <HAL_GetTick>
 80054a6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054a8:	e00e      	b.n	80054c8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80054aa:	f7fd fd33 	bl	8002f14 <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	2b19      	cmp	r3, #25
 80054b6:	d907      	bls.n	80054c8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80054b8:	6a3b      	ldr	r3, [r7, #32]
 80054ba:	f043 0320 	orr.w	r3, r3, #32
 80054be:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80054c6:	e006      	b.n	80054d6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	f003 0320 	and.w	r3, r3, #32
 80054d2:	2b20      	cmp	r3, #32
 80054d4:	d1e9      	bne.n	80054aa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	f003 0320 	and.w	r3, r3, #32
 80054e0:	2b20      	cmp	r3, #32
 80054e2:	d003      	beq.n	80054ec <I2C_IsErrorOccurred+0xe0>
 80054e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0aa      	beq.n	8005442 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80054ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d103      	bne.n	80054fc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2220      	movs	r2, #32
 80054fa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80054fc:	6a3b      	ldr	r3, [r7, #32]
 80054fe:	f043 0304 	orr.w	r3, r3, #4
 8005502:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00b      	beq.n	8005534 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800551c:	6a3b      	ldr	r3, [r7, #32]
 800551e:	f043 0301 	orr.w	r3, r3, #1
 8005522:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f44f 7280 	mov.w	r2, #256	; 0x100
 800552c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00b      	beq.n	8005556 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	f043 0308 	orr.w	r3, r3, #8
 8005544:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800554e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00b      	beq.n	8005578 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005560:	6a3b      	ldr	r3, [r7, #32]
 8005562:	f043 0302 	orr.w	r3, r3, #2
 8005566:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005570:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005578:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800557c:	2b00      	cmp	r3, #0
 800557e:	d01c      	beq.n	80055ba <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f7ff fe44 	bl	800520e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6859      	ldr	r1, [r3, #4]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	4b0d      	ldr	r3, [pc, #52]	; (80055c8 <I2C_IsErrorOccurred+0x1bc>)
 8005592:	400b      	ands	r3, r1
 8005594:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800559a:	6a3b      	ldr	r3, [r7, #32]
 800559c:	431a      	orrs	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2220      	movs	r2, #32
 80055a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80055ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3728      	adds	r7, #40	; 0x28
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	fe00e800 	.word	0xfe00e800

080055cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b087      	sub	sp, #28
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	607b      	str	r3, [r7, #4]
 80055d6:	460b      	mov	r3, r1
 80055d8:	817b      	strh	r3, [r7, #10]
 80055da:	4613      	mov	r3, r2
 80055dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055de:	897b      	ldrh	r3, [r7, #10]
 80055e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80055e4:	7a7b      	ldrb	r3, [r7, #9]
 80055e6:	041b      	lsls	r3, r3, #16
 80055e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055ec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055f2:	6a3b      	ldr	r3, [r7, #32]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055fa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	6a3b      	ldr	r3, [r7, #32]
 8005604:	0d5b      	lsrs	r3, r3, #21
 8005606:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800560a:	4b08      	ldr	r3, [pc, #32]	; (800562c <I2C_TransferConfig+0x60>)
 800560c:	430b      	orrs	r3, r1
 800560e:	43db      	mvns	r3, r3
 8005610:	ea02 0103 	and.w	r1, r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	430a      	orrs	r2, r1
 800561c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800561e:	bf00      	nop
 8005620:	371c      	adds	r7, #28
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	03ff63ff 	.word	0x03ff63ff

08005630 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	460b      	mov	r3, r1
 800563a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800563c:	2300      	movs	r3, #0
 800563e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005640:	887b      	ldrh	r3, [r7, #2]
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00f      	beq.n	800566a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005650:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005658:	b2db      	uxtb	r3, r3
 800565a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800565e:	2b28      	cmp	r3, #40	; 0x28
 8005660:	d003      	beq.n	800566a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005668:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800566a:	887b      	ldrh	r3, [r7, #2]
 800566c:	f003 0302 	and.w	r3, r3, #2
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00f      	beq.n	8005694 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800567a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005682:	b2db      	uxtb	r3, r3
 8005684:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005688:	2b28      	cmp	r3, #40	; 0x28
 800568a:	d003      	beq.n	8005694 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005692:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005694:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005698:	2b00      	cmp	r3, #0
 800569a:	da03      	bge.n	80056a4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80056a2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80056a4:	887b      	ldrh	r3, [r7, #2]
 80056a6:	2b10      	cmp	r3, #16
 80056a8:	d103      	bne.n	80056b2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80056b0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80056b2:	887b      	ldrh	r3, [r7, #2]
 80056b4:	2b20      	cmp	r3, #32
 80056b6:	d103      	bne.n	80056c0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f043 0320 	orr.w	r3, r3, #32
 80056be:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80056c0:	887b      	ldrh	r3, [r7, #2]
 80056c2:	2b40      	cmp	r3, #64	; 0x40
 80056c4:	d103      	bne.n	80056ce <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056cc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	6819      	ldr	r1, [r3, #0]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	43da      	mvns	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	400a      	ands	r2, r1
 80056de:	601a      	str	r2, [r3, #0]
}
 80056e0:	bf00      	nop
 80056e2:	3714      	adds	r7, #20
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b20      	cmp	r3, #32
 8005700:	d138      	bne.n	8005774 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005708:	2b01      	cmp	r3, #1
 800570a:	d101      	bne.n	8005710 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800570c:	2302      	movs	r3, #2
 800570e:	e032      	b.n	8005776 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2224      	movs	r2, #36	; 0x24
 800571c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f022 0201 	bic.w	r2, r2, #1
 800572e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800573e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	6819      	ldr	r1, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	430a      	orrs	r2, r1
 800574e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f042 0201 	orr.w	r2, r2, #1
 800575e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2220      	movs	r2, #32
 8005764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005770:	2300      	movs	r3, #0
 8005772:	e000      	b.n	8005776 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005774:	2302      	movs	r3, #2
  }
}
 8005776:	4618      	mov	r0, r3
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005782:	b480      	push	{r7}
 8005784:	b085      	sub	sp, #20
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
 800578a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b20      	cmp	r3, #32
 8005796:	d139      	bne.n	800580c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d101      	bne.n	80057a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80057a2:	2302      	movs	r3, #2
 80057a4:	e033      	b.n	800580e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2224      	movs	r2, #36	; 0x24
 80057b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f022 0201 	bic.w	r2, r2, #1
 80057c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80057d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	021b      	lsls	r3, r3, #8
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	4313      	orrs	r3, r2
 80057de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0201 	orr.w	r2, r2, #1
 80057f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2220      	movs	r2, #32
 80057fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005808:	2300      	movs	r3, #0
 800580a:	e000      	b.n	800580e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800580c:	2302      	movs	r3, #2
  }
}
 800580e:	4618      	mov	r0, r3
 8005810:	3714      	adds	r7, #20
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
	...

0800581c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800581c:	b480      	push	{r7}
 800581e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005820:	4b05      	ldr	r3, [pc, #20]	; (8005838 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a04      	ldr	r2, [pc, #16]	; (8005838 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005826:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800582a:	6013      	str	r3, [r2, #0]
}
 800582c:	bf00      	nop
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	40007000 	.word	0x40007000

0800583c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005844:	2300      	movs	r3, #0
 8005846:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d101      	bne.n	8005852 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e291      	b.n	8005d76 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	2b00      	cmp	r3, #0
 800585c:	f000 8087 	beq.w	800596e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005860:	4b96      	ldr	r3, [pc, #600]	; (8005abc <HAL_RCC_OscConfig+0x280>)
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	f003 030c 	and.w	r3, r3, #12
 8005868:	2b04      	cmp	r3, #4
 800586a:	d00c      	beq.n	8005886 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800586c:	4b93      	ldr	r3, [pc, #588]	; (8005abc <HAL_RCC_OscConfig+0x280>)
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f003 030c 	and.w	r3, r3, #12
 8005874:	2b08      	cmp	r3, #8
 8005876:	d112      	bne.n	800589e <HAL_RCC_OscConfig+0x62>
 8005878:	4b90      	ldr	r3, [pc, #576]	; (8005abc <HAL_RCC_OscConfig+0x280>)
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005880:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005884:	d10b      	bne.n	800589e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005886:	4b8d      	ldr	r3, [pc, #564]	; (8005abc <HAL_RCC_OscConfig+0x280>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d06c      	beq.n	800596c <HAL_RCC_OscConfig+0x130>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d168      	bne.n	800596c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e26b      	b.n	8005d76 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058a6:	d106      	bne.n	80058b6 <HAL_RCC_OscConfig+0x7a>
 80058a8:	4b84      	ldr	r3, [pc, #528]	; (8005abc <HAL_RCC_OscConfig+0x280>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a83      	ldr	r2, [pc, #524]	; (8005abc <HAL_RCC_OscConfig+0x280>)
 80058ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058b2:	6013      	str	r3, [r2, #0]
 80058b4:	e02e      	b.n	8005914 <HAL_RCC_OscConfig+0xd8>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10c      	bne.n	80058d8 <HAL_RCC_OscConfig+0x9c>
 80058be:	4b7f      	ldr	r3, [pc, #508]	; (8005abc <HAL_RCC_OscConfig+0x280>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a7e      	ldr	r2, [pc, #504]	; (8005abc <HAL_RCC_OscConfig+0x280>)
 80058c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058c8:	6013      	str	r3, [r2, #0]
 80058ca:	4b7c      	ldr	r3, [pc, #496]	; (8005abc <HAL_RCC_OscConfig+0x280>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a7b      	ldr	r2, [pc, #492]	; (8005abc <HAL_RCC_OscConfig+0x280>)
 80058d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058d4:	6013      	str	r3, [r2, #0]
 80058d6:	e01d      	b.n	8005914 <HAL_RCC_OscConfig+0xd8>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058e0:	d10c      	bne.n	80058fc <HAL_RCC_OscConfig+0xc0>
 80058e2:	4b76      	ldr	r3, [pc, #472]	; (8005abc <HAL_RCC_OscConfig+0x280>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a75      	ldr	r2, [pc, #468]	; (8005abc <HAL_RCC_OscConfig+0x280>)
 80058e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058ec:	6013      	str	r3, [r2, #0]
 80058ee:	4b73      	ldr	r3, [pc, #460]	; (8005abc <HAL_RCC_OscConfig+0x280>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a72      	ldr	r2, [pc, #456]	; (8005abc <HAL_RCC_OscConfig+0x280>)
 80058f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058f8:	6013      	str	r3, [r2, #0]
 80058fa:	e00b      	b.n	8005914 <HAL_RCC_OscConfig+0xd8>
 80058fc:	4b6f      	ldr	r3, [pc, #444]	; (8005abc <HAL_RCC_OscConfig+0x280>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a6e      	ldr	r2, [pc, #440]	; (8005abc <HAL_RCC_OscConfig+0x280>)
 8005902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005906:	6013      	str	r3, [r2, #0]
 8005908:	4b6c      	ldr	r3, [pc, #432]	; (8005abc <HAL_RCC_OscConfig+0x280>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a6b      	ldr	r2, [pc, #428]	; (8005abc <HAL_RCC_OscConfig+0x280>)
 800590e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005912:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d013      	beq.n	8005944 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800591c:	f7fd fafa 	bl	8002f14 <HAL_GetTick>
 8005920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005922:	e008      	b.n	8005936 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005924:	f7fd faf6 	bl	8002f14 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b64      	cmp	r3, #100	; 0x64
 8005930:	d901      	bls.n	8005936 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e21f      	b.n	8005d76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005936:	4b61      	ldr	r3, [pc, #388]	; (8005abc <HAL_RCC_OscConfig+0x280>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d0f0      	beq.n	8005924 <HAL_RCC_OscConfig+0xe8>
 8005942:	e014      	b.n	800596e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005944:	f7fd fae6 	bl	8002f14 <HAL_GetTick>
 8005948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800594a:	e008      	b.n	800595e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800594c:	f7fd fae2 	bl	8002f14 <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	2b64      	cmp	r3, #100	; 0x64
 8005958:	d901      	bls.n	800595e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e20b      	b.n	8005d76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800595e:	4b57      	ldr	r3, [pc, #348]	; (8005abc <HAL_RCC_OscConfig+0x280>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1f0      	bne.n	800594c <HAL_RCC_OscConfig+0x110>
 800596a:	e000      	b.n	800596e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800596c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0302 	and.w	r3, r3, #2
 8005976:	2b00      	cmp	r3, #0
 8005978:	d069      	beq.n	8005a4e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800597a:	4b50      	ldr	r3, [pc, #320]	; (8005abc <HAL_RCC_OscConfig+0x280>)
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	f003 030c 	and.w	r3, r3, #12
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00b      	beq.n	800599e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005986:	4b4d      	ldr	r3, [pc, #308]	; (8005abc <HAL_RCC_OscConfig+0x280>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f003 030c 	and.w	r3, r3, #12
 800598e:	2b08      	cmp	r3, #8
 8005990:	d11c      	bne.n	80059cc <HAL_RCC_OscConfig+0x190>
 8005992:	4b4a      	ldr	r3, [pc, #296]	; (8005abc <HAL_RCC_OscConfig+0x280>)
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d116      	bne.n	80059cc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800599e:	4b47      	ldr	r3, [pc, #284]	; (8005abc <HAL_RCC_OscConfig+0x280>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d005      	beq.n	80059b6 <HAL_RCC_OscConfig+0x17a>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d001      	beq.n	80059b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e1df      	b.n	8005d76 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059b6:	4b41      	ldr	r3, [pc, #260]	; (8005abc <HAL_RCC_OscConfig+0x280>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	493d      	ldr	r1, [pc, #244]	; (8005abc <HAL_RCC_OscConfig+0x280>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059ca:	e040      	b.n	8005a4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d023      	beq.n	8005a1c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059d4:	4b39      	ldr	r3, [pc, #228]	; (8005abc <HAL_RCC_OscConfig+0x280>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a38      	ldr	r2, [pc, #224]	; (8005abc <HAL_RCC_OscConfig+0x280>)
 80059da:	f043 0301 	orr.w	r3, r3, #1
 80059de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e0:	f7fd fa98 	bl	8002f14 <HAL_GetTick>
 80059e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059e6:	e008      	b.n	80059fa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059e8:	f7fd fa94 	bl	8002f14 <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d901      	bls.n	80059fa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e1bd      	b.n	8005d76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059fa:	4b30      	ldr	r3, [pc, #192]	; (8005abc <HAL_RCC_OscConfig+0x280>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d0f0      	beq.n	80059e8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a06:	4b2d      	ldr	r3, [pc, #180]	; (8005abc <HAL_RCC_OscConfig+0x280>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	00db      	lsls	r3, r3, #3
 8005a14:	4929      	ldr	r1, [pc, #164]	; (8005abc <HAL_RCC_OscConfig+0x280>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	600b      	str	r3, [r1, #0]
 8005a1a:	e018      	b.n	8005a4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a1c:	4b27      	ldr	r3, [pc, #156]	; (8005abc <HAL_RCC_OscConfig+0x280>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a26      	ldr	r2, [pc, #152]	; (8005abc <HAL_RCC_OscConfig+0x280>)
 8005a22:	f023 0301 	bic.w	r3, r3, #1
 8005a26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a28:	f7fd fa74 	bl	8002f14 <HAL_GetTick>
 8005a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a2e:	e008      	b.n	8005a42 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a30:	f7fd fa70 	bl	8002f14 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e199      	b.n	8005d76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a42:	4b1e      	ldr	r3, [pc, #120]	; (8005abc <HAL_RCC_OscConfig+0x280>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0302 	and.w	r3, r3, #2
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1f0      	bne.n	8005a30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0308 	and.w	r3, r3, #8
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d038      	beq.n	8005acc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d019      	beq.n	8005a96 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a62:	4b16      	ldr	r3, [pc, #88]	; (8005abc <HAL_RCC_OscConfig+0x280>)
 8005a64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a66:	4a15      	ldr	r2, [pc, #84]	; (8005abc <HAL_RCC_OscConfig+0x280>)
 8005a68:	f043 0301 	orr.w	r3, r3, #1
 8005a6c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a6e:	f7fd fa51 	bl	8002f14 <HAL_GetTick>
 8005a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a74:	e008      	b.n	8005a88 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a76:	f7fd fa4d 	bl	8002f14 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d901      	bls.n	8005a88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e176      	b.n	8005d76 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a88:	4b0c      	ldr	r3, [pc, #48]	; (8005abc <HAL_RCC_OscConfig+0x280>)
 8005a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a8c:	f003 0302 	and.w	r3, r3, #2
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d0f0      	beq.n	8005a76 <HAL_RCC_OscConfig+0x23a>
 8005a94:	e01a      	b.n	8005acc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a96:	4b09      	ldr	r3, [pc, #36]	; (8005abc <HAL_RCC_OscConfig+0x280>)
 8005a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a9a:	4a08      	ldr	r2, [pc, #32]	; (8005abc <HAL_RCC_OscConfig+0x280>)
 8005a9c:	f023 0301 	bic.w	r3, r3, #1
 8005aa0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aa2:	f7fd fa37 	bl	8002f14 <HAL_GetTick>
 8005aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005aa8:	e00a      	b.n	8005ac0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005aaa:	f7fd fa33 	bl	8002f14 <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d903      	bls.n	8005ac0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e15c      	b.n	8005d76 <HAL_RCC_OscConfig+0x53a>
 8005abc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ac0:	4b91      	ldr	r3, [pc, #580]	; (8005d08 <HAL_RCC_OscConfig+0x4cc>)
 8005ac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1ee      	bne.n	8005aaa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0304 	and.w	r3, r3, #4
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f000 80a4 	beq.w	8005c22 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ada:	4b8b      	ldr	r3, [pc, #556]	; (8005d08 <HAL_RCC_OscConfig+0x4cc>)
 8005adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10d      	bne.n	8005b02 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ae6:	4b88      	ldr	r3, [pc, #544]	; (8005d08 <HAL_RCC_OscConfig+0x4cc>)
 8005ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aea:	4a87      	ldr	r2, [pc, #540]	; (8005d08 <HAL_RCC_OscConfig+0x4cc>)
 8005aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005af0:	6413      	str	r3, [r2, #64]	; 0x40
 8005af2:	4b85      	ldr	r3, [pc, #532]	; (8005d08 <HAL_RCC_OscConfig+0x4cc>)
 8005af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005afa:	60bb      	str	r3, [r7, #8]
 8005afc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005afe:	2301      	movs	r3, #1
 8005b00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b02:	4b82      	ldr	r3, [pc, #520]	; (8005d0c <HAL_RCC_OscConfig+0x4d0>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d118      	bne.n	8005b40 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005b0e:	4b7f      	ldr	r3, [pc, #508]	; (8005d0c <HAL_RCC_OscConfig+0x4d0>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a7e      	ldr	r2, [pc, #504]	; (8005d0c <HAL_RCC_OscConfig+0x4d0>)
 8005b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b1a:	f7fd f9fb 	bl	8002f14 <HAL_GetTick>
 8005b1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b20:	e008      	b.n	8005b34 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b22:	f7fd f9f7 	bl	8002f14 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b64      	cmp	r3, #100	; 0x64
 8005b2e:	d901      	bls.n	8005b34 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e120      	b.n	8005d76 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b34:	4b75      	ldr	r3, [pc, #468]	; (8005d0c <HAL_RCC_OscConfig+0x4d0>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d0f0      	beq.n	8005b22 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d106      	bne.n	8005b56 <HAL_RCC_OscConfig+0x31a>
 8005b48:	4b6f      	ldr	r3, [pc, #444]	; (8005d08 <HAL_RCC_OscConfig+0x4cc>)
 8005b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4c:	4a6e      	ldr	r2, [pc, #440]	; (8005d08 <HAL_RCC_OscConfig+0x4cc>)
 8005b4e:	f043 0301 	orr.w	r3, r3, #1
 8005b52:	6713      	str	r3, [r2, #112]	; 0x70
 8005b54:	e02d      	b.n	8005bb2 <HAL_RCC_OscConfig+0x376>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10c      	bne.n	8005b78 <HAL_RCC_OscConfig+0x33c>
 8005b5e:	4b6a      	ldr	r3, [pc, #424]	; (8005d08 <HAL_RCC_OscConfig+0x4cc>)
 8005b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b62:	4a69      	ldr	r2, [pc, #420]	; (8005d08 <HAL_RCC_OscConfig+0x4cc>)
 8005b64:	f023 0301 	bic.w	r3, r3, #1
 8005b68:	6713      	str	r3, [r2, #112]	; 0x70
 8005b6a:	4b67      	ldr	r3, [pc, #412]	; (8005d08 <HAL_RCC_OscConfig+0x4cc>)
 8005b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b6e:	4a66      	ldr	r2, [pc, #408]	; (8005d08 <HAL_RCC_OscConfig+0x4cc>)
 8005b70:	f023 0304 	bic.w	r3, r3, #4
 8005b74:	6713      	str	r3, [r2, #112]	; 0x70
 8005b76:	e01c      	b.n	8005bb2 <HAL_RCC_OscConfig+0x376>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	2b05      	cmp	r3, #5
 8005b7e:	d10c      	bne.n	8005b9a <HAL_RCC_OscConfig+0x35e>
 8005b80:	4b61      	ldr	r3, [pc, #388]	; (8005d08 <HAL_RCC_OscConfig+0x4cc>)
 8005b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b84:	4a60      	ldr	r2, [pc, #384]	; (8005d08 <HAL_RCC_OscConfig+0x4cc>)
 8005b86:	f043 0304 	orr.w	r3, r3, #4
 8005b8a:	6713      	str	r3, [r2, #112]	; 0x70
 8005b8c:	4b5e      	ldr	r3, [pc, #376]	; (8005d08 <HAL_RCC_OscConfig+0x4cc>)
 8005b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b90:	4a5d      	ldr	r2, [pc, #372]	; (8005d08 <HAL_RCC_OscConfig+0x4cc>)
 8005b92:	f043 0301 	orr.w	r3, r3, #1
 8005b96:	6713      	str	r3, [r2, #112]	; 0x70
 8005b98:	e00b      	b.n	8005bb2 <HAL_RCC_OscConfig+0x376>
 8005b9a:	4b5b      	ldr	r3, [pc, #364]	; (8005d08 <HAL_RCC_OscConfig+0x4cc>)
 8005b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b9e:	4a5a      	ldr	r2, [pc, #360]	; (8005d08 <HAL_RCC_OscConfig+0x4cc>)
 8005ba0:	f023 0301 	bic.w	r3, r3, #1
 8005ba4:	6713      	str	r3, [r2, #112]	; 0x70
 8005ba6:	4b58      	ldr	r3, [pc, #352]	; (8005d08 <HAL_RCC_OscConfig+0x4cc>)
 8005ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005baa:	4a57      	ldr	r2, [pc, #348]	; (8005d08 <HAL_RCC_OscConfig+0x4cc>)
 8005bac:	f023 0304 	bic.w	r3, r3, #4
 8005bb0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d015      	beq.n	8005be6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bba:	f7fd f9ab 	bl	8002f14 <HAL_GetTick>
 8005bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bc0:	e00a      	b.n	8005bd8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bc2:	f7fd f9a7 	bl	8002f14 <HAL_GetTick>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d901      	bls.n	8005bd8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e0ce      	b.n	8005d76 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bd8:	4b4b      	ldr	r3, [pc, #300]	; (8005d08 <HAL_RCC_OscConfig+0x4cc>)
 8005bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bdc:	f003 0302 	and.w	r3, r3, #2
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d0ee      	beq.n	8005bc2 <HAL_RCC_OscConfig+0x386>
 8005be4:	e014      	b.n	8005c10 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005be6:	f7fd f995 	bl	8002f14 <HAL_GetTick>
 8005bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bec:	e00a      	b.n	8005c04 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bee:	f7fd f991 	bl	8002f14 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d901      	bls.n	8005c04 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e0b8      	b.n	8005d76 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c04:	4b40      	ldr	r3, [pc, #256]	; (8005d08 <HAL_RCC_OscConfig+0x4cc>)
 8005c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c08:	f003 0302 	and.w	r3, r3, #2
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1ee      	bne.n	8005bee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c10:	7dfb      	ldrb	r3, [r7, #23]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d105      	bne.n	8005c22 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c16:	4b3c      	ldr	r3, [pc, #240]	; (8005d08 <HAL_RCC_OscConfig+0x4cc>)
 8005c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1a:	4a3b      	ldr	r2, [pc, #236]	; (8005d08 <HAL_RCC_OscConfig+0x4cc>)
 8005c1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c20:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	f000 80a4 	beq.w	8005d74 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c2c:	4b36      	ldr	r3, [pc, #216]	; (8005d08 <HAL_RCC_OscConfig+0x4cc>)
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f003 030c 	and.w	r3, r3, #12
 8005c34:	2b08      	cmp	r3, #8
 8005c36:	d06b      	beq.n	8005d10 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d149      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c40:	4b31      	ldr	r3, [pc, #196]	; (8005d08 <HAL_RCC_OscConfig+0x4cc>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a30      	ldr	r2, [pc, #192]	; (8005d08 <HAL_RCC_OscConfig+0x4cc>)
 8005c46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c4c:	f7fd f962 	bl	8002f14 <HAL_GetTick>
 8005c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c52:	e008      	b.n	8005c66 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c54:	f7fd f95e 	bl	8002f14 <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d901      	bls.n	8005c66 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e087      	b.n	8005d76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c66:	4b28      	ldr	r3, [pc, #160]	; (8005d08 <HAL_RCC_OscConfig+0x4cc>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1f0      	bne.n	8005c54 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	69da      	ldr	r2, [r3, #28]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c80:	019b      	lsls	r3, r3, #6
 8005c82:	431a      	orrs	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c88:	085b      	lsrs	r3, r3, #1
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	041b      	lsls	r3, r3, #16
 8005c8e:	431a      	orrs	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c94:	061b      	lsls	r3, r3, #24
 8005c96:	4313      	orrs	r3, r2
 8005c98:	4a1b      	ldr	r2, [pc, #108]	; (8005d08 <HAL_RCC_OscConfig+0x4cc>)
 8005c9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c9e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ca0:	4b19      	ldr	r3, [pc, #100]	; (8005d08 <HAL_RCC_OscConfig+0x4cc>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a18      	ldr	r2, [pc, #96]	; (8005d08 <HAL_RCC_OscConfig+0x4cc>)
 8005ca6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005caa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cac:	f7fd f932 	bl	8002f14 <HAL_GetTick>
 8005cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cb2:	e008      	b.n	8005cc6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cb4:	f7fd f92e 	bl	8002f14 <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d901      	bls.n	8005cc6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e057      	b.n	8005d76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cc6:	4b10      	ldr	r3, [pc, #64]	; (8005d08 <HAL_RCC_OscConfig+0x4cc>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d0f0      	beq.n	8005cb4 <HAL_RCC_OscConfig+0x478>
 8005cd2:	e04f      	b.n	8005d74 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cd4:	4b0c      	ldr	r3, [pc, #48]	; (8005d08 <HAL_RCC_OscConfig+0x4cc>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a0b      	ldr	r2, [pc, #44]	; (8005d08 <HAL_RCC_OscConfig+0x4cc>)
 8005cda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce0:	f7fd f918 	bl	8002f14 <HAL_GetTick>
 8005ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ce6:	e008      	b.n	8005cfa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ce8:	f7fd f914 	bl	8002f14 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d901      	bls.n	8005cfa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e03d      	b.n	8005d76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cfa:	4b03      	ldr	r3, [pc, #12]	; (8005d08 <HAL_RCC_OscConfig+0x4cc>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1f0      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x4ac>
 8005d06:	e035      	b.n	8005d74 <HAL_RCC_OscConfig+0x538>
 8005d08:	40023800 	.word	0x40023800
 8005d0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005d10:	4b1b      	ldr	r3, [pc, #108]	; (8005d80 <HAL_RCC_OscConfig+0x544>)
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d028      	beq.n	8005d70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d121      	bne.n	8005d70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d11a      	bne.n	8005d70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d40:	4013      	ands	r3, r2
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d46:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d111      	bne.n	8005d70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d56:	085b      	lsrs	r3, r3, #1
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d107      	bne.n	8005d70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d001      	beq.n	8005d74 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e000      	b.n	8005d76 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3718      	adds	r7, #24
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	40023800 	.word	0x40023800

08005d84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d101      	bne.n	8005d9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e0d0      	b.n	8005f3e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d9c:	4b6a      	ldr	r3, [pc, #424]	; (8005f48 <HAL_RCC_ClockConfig+0x1c4>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 030f 	and.w	r3, r3, #15
 8005da4:	683a      	ldr	r2, [r7, #0]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d910      	bls.n	8005dcc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005daa:	4b67      	ldr	r3, [pc, #412]	; (8005f48 <HAL_RCC_ClockConfig+0x1c4>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f023 020f 	bic.w	r2, r3, #15
 8005db2:	4965      	ldr	r1, [pc, #404]	; (8005f48 <HAL_RCC_ClockConfig+0x1c4>)
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dba:	4b63      	ldr	r3, [pc, #396]	; (8005f48 <HAL_RCC_ClockConfig+0x1c4>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 030f 	and.w	r3, r3, #15
 8005dc2:	683a      	ldr	r2, [r7, #0]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d001      	beq.n	8005dcc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e0b8      	b.n	8005f3e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0302 	and.w	r3, r3, #2
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d020      	beq.n	8005e1a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0304 	and.w	r3, r3, #4
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d005      	beq.n	8005df0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005de4:	4b59      	ldr	r3, [pc, #356]	; (8005f4c <HAL_RCC_ClockConfig+0x1c8>)
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	4a58      	ldr	r2, [pc, #352]	; (8005f4c <HAL_RCC_ClockConfig+0x1c8>)
 8005dea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005dee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0308 	and.w	r3, r3, #8
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d005      	beq.n	8005e08 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005dfc:	4b53      	ldr	r3, [pc, #332]	; (8005f4c <HAL_RCC_ClockConfig+0x1c8>)
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	4a52      	ldr	r2, [pc, #328]	; (8005f4c <HAL_RCC_ClockConfig+0x1c8>)
 8005e02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e08:	4b50      	ldr	r3, [pc, #320]	; (8005f4c <HAL_RCC_ClockConfig+0x1c8>)
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	494d      	ldr	r1, [pc, #308]	; (8005f4c <HAL_RCC_ClockConfig+0x1c8>)
 8005e16:	4313      	orrs	r3, r2
 8005e18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d040      	beq.n	8005ea8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d107      	bne.n	8005e3e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e2e:	4b47      	ldr	r3, [pc, #284]	; (8005f4c <HAL_RCC_ClockConfig+0x1c8>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d115      	bne.n	8005e66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e07f      	b.n	8005f3e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d107      	bne.n	8005e56 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e46:	4b41      	ldr	r3, [pc, #260]	; (8005f4c <HAL_RCC_ClockConfig+0x1c8>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d109      	bne.n	8005e66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e073      	b.n	8005f3e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e56:	4b3d      	ldr	r3, [pc, #244]	; (8005f4c <HAL_RCC_ClockConfig+0x1c8>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0302 	and.w	r3, r3, #2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e06b      	b.n	8005f3e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e66:	4b39      	ldr	r3, [pc, #228]	; (8005f4c <HAL_RCC_ClockConfig+0x1c8>)
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f023 0203 	bic.w	r2, r3, #3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	4936      	ldr	r1, [pc, #216]	; (8005f4c <HAL_RCC_ClockConfig+0x1c8>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e78:	f7fd f84c 	bl	8002f14 <HAL_GetTick>
 8005e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e7e:	e00a      	b.n	8005e96 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e80:	f7fd f848 	bl	8002f14 <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d901      	bls.n	8005e96 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e053      	b.n	8005f3e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e96:	4b2d      	ldr	r3, [pc, #180]	; (8005f4c <HAL_RCC_ClockConfig+0x1c8>)
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f003 020c 	and.w	r2, r3, #12
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d1eb      	bne.n	8005e80 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ea8:	4b27      	ldr	r3, [pc, #156]	; (8005f48 <HAL_RCC_ClockConfig+0x1c4>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 030f 	and.w	r3, r3, #15
 8005eb0:	683a      	ldr	r2, [r7, #0]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d210      	bcs.n	8005ed8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eb6:	4b24      	ldr	r3, [pc, #144]	; (8005f48 <HAL_RCC_ClockConfig+0x1c4>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f023 020f 	bic.w	r2, r3, #15
 8005ebe:	4922      	ldr	r1, [pc, #136]	; (8005f48 <HAL_RCC_ClockConfig+0x1c4>)
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ec6:	4b20      	ldr	r3, [pc, #128]	; (8005f48 <HAL_RCC_ClockConfig+0x1c4>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 030f 	and.w	r3, r3, #15
 8005ece:	683a      	ldr	r2, [r7, #0]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d001      	beq.n	8005ed8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e032      	b.n	8005f3e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d008      	beq.n	8005ef6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ee4:	4b19      	ldr	r3, [pc, #100]	; (8005f4c <HAL_RCC_ClockConfig+0x1c8>)
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	4916      	ldr	r1, [pc, #88]	; (8005f4c <HAL_RCC_ClockConfig+0x1c8>)
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0308 	and.w	r3, r3, #8
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d009      	beq.n	8005f16 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005f02:	4b12      	ldr	r3, [pc, #72]	; (8005f4c <HAL_RCC_ClockConfig+0x1c8>)
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	00db      	lsls	r3, r3, #3
 8005f10:	490e      	ldr	r1, [pc, #56]	; (8005f4c <HAL_RCC_ClockConfig+0x1c8>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f16:	f000 f821 	bl	8005f5c <HAL_RCC_GetSysClockFreq>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	4b0b      	ldr	r3, [pc, #44]	; (8005f4c <HAL_RCC_ClockConfig+0x1c8>)
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	091b      	lsrs	r3, r3, #4
 8005f22:	f003 030f 	and.w	r3, r3, #15
 8005f26:	490a      	ldr	r1, [pc, #40]	; (8005f50 <HAL_RCC_ClockConfig+0x1cc>)
 8005f28:	5ccb      	ldrb	r3, [r1, r3]
 8005f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f2e:	4a09      	ldr	r2, [pc, #36]	; (8005f54 <HAL_RCC_ClockConfig+0x1d0>)
 8005f30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005f32:	4b09      	ldr	r3, [pc, #36]	; (8005f58 <HAL_RCC_ClockConfig+0x1d4>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7fc ffa8 	bl	8002e8c <HAL_InitTick>

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	40023c00 	.word	0x40023c00
 8005f4c:	40023800 	.word	0x40023800
 8005f50:	0800ea30 	.word	0x0800ea30
 8005f54:	20000000 	.word	0x20000000
 8005f58:	20000004 	.word	0x20000004

08005f5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f60:	b094      	sub	sp, #80	; 0x50
 8005f62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005f64:	2300      	movs	r3, #0
 8005f66:	647b      	str	r3, [r7, #68]	; 0x44
 8005f68:	2300      	movs	r3, #0
 8005f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005f70:	2300      	movs	r3, #0
 8005f72:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f74:	4b79      	ldr	r3, [pc, #484]	; (800615c <HAL_RCC_GetSysClockFreq+0x200>)
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f003 030c 	and.w	r3, r3, #12
 8005f7c:	2b08      	cmp	r3, #8
 8005f7e:	d00d      	beq.n	8005f9c <HAL_RCC_GetSysClockFreq+0x40>
 8005f80:	2b08      	cmp	r3, #8
 8005f82:	f200 80e1 	bhi.w	8006148 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d002      	beq.n	8005f90 <HAL_RCC_GetSysClockFreq+0x34>
 8005f8a:	2b04      	cmp	r3, #4
 8005f8c:	d003      	beq.n	8005f96 <HAL_RCC_GetSysClockFreq+0x3a>
 8005f8e:	e0db      	b.n	8006148 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f90:	4b73      	ldr	r3, [pc, #460]	; (8006160 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f92:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f94:	e0db      	b.n	800614e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f96:	4b73      	ldr	r3, [pc, #460]	; (8006164 <HAL_RCC_GetSysClockFreq+0x208>)
 8005f98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f9a:	e0d8      	b.n	800614e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f9c:	4b6f      	ldr	r3, [pc, #444]	; (800615c <HAL_RCC_GetSysClockFreq+0x200>)
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fa4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005fa6:	4b6d      	ldr	r3, [pc, #436]	; (800615c <HAL_RCC_GetSysClockFreq+0x200>)
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d063      	beq.n	800607a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fb2:	4b6a      	ldr	r3, [pc, #424]	; (800615c <HAL_RCC_GetSysClockFreq+0x200>)
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	099b      	lsrs	r3, r3, #6
 8005fb8:	2200      	movs	r2, #0
 8005fba:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fbc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fc4:	633b      	str	r3, [r7, #48]	; 0x30
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	637b      	str	r3, [r7, #52]	; 0x34
 8005fca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005fce:	4622      	mov	r2, r4
 8005fd0:	462b      	mov	r3, r5
 8005fd2:	f04f 0000 	mov.w	r0, #0
 8005fd6:	f04f 0100 	mov.w	r1, #0
 8005fda:	0159      	lsls	r1, r3, #5
 8005fdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fe0:	0150      	lsls	r0, r2, #5
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	4621      	mov	r1, r4
 8005fe8:	1a51      	subs	r1, r2, r1
 8005fea:	6139      	str	r1, [r7, #16]
 8005fec:	4629      	mov	r1, r5
 8005fee:	eb63 0301 	sbc.w	r3, r3, r1
 8005ff2:	617b      	str	r3, [r7, #20]
 8005ff4:	f04f 0200 	mov.w	r2, #0
 8005ff8:	f04f 0300 	mov.w	r3, #0
 8005ffc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006000:	4659      	mov	r1, fp
 8006002:	018b      	lsls	r3, r1, #6
 8006004:	4651      	mov	r1, sl
 8006006:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800600a:	4651      	mov	r1, sl
 800600c:	018a      	lsls	r2, r1, #6
 800600e:	4651      	mov	r1, sl
 8006010:	ebb2 0801 	subs.w	r8, r2, r1
 8006014:	4659      	mov	r1, fp
 8006016:	eb63 0901 	sbc.w	r9, r3, r1
 800601a:	f04f 0200 	mov.w	r2, #0
 800601e:	f04f 0300 	mov.w	r3, #0
 8006022:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006026:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800602a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800602e:	4690      	mov	r8, r2
 8006030:	4699      	mov	r9, r3
 8006032:	4623      	mov	r3, r4
 8006034:	eb18 0303 	adds.w	r3, r8, r3
 8006038:	60bb      	str	r3, [r7, #8]
 800603a:	462b      	mov	r3, r5
 800603c:	eb49 0303 	adc.w	r3, r9, r3
 8006040:	60fb      	str	r3, [r7, #12]
 8006042:	f04f 0200 	mov.w	r2, #0
 8006046:	f04f 0300 	mov.w	r3, #0
 800604a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800604e:	4629      	mov	r1, r5
 8006050:	024b      	lsls	r3, r1, #9
 8006052:	4621      	mov	r1, r4
 8006054:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006058:	4621      	mov	r1, r4
 800605a:	024a      	lsls	r2, r1, #9
 800605c:	4610      	mov	r0, r2
 800605e:	4619      	mov	r1, r3
 8006060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006062:	2200      	movs	r2, #0
 8006064:	62bb      	str	r3, [r7, #40]	; 0x28
 8006066:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006068:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800606c:	f7fa fe7c 	bl	8000d68 <__aeabi_uldivmod>
 8006070:	4602      	mov	r2, r0
 8006072:	460b      	mov	r3, r1
 8006074:	4613      	mov	r3, r2
 8006076:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006078:	e058      	b.n	800612c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800607a:	4b38      	ldr	r3, [pc, #224]	; (800615c <HAL_RCC_GetSysClockFreq+0x200>)
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	099b      	lsrs	r3, r3, #6
 8006080:	2200      	movs	r2, #0
 8006082:	4618      	mov	r0, r3
 8006084:	4611      	mov	r1, r2
 8006086:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800608a:	623b      	str	r3, [r7, #32]
 800608c:	2300      	movs	r3, #0
 800608e:	627b      	str	r3, [r7, #36]	; 0x24
 8006090:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006094:	4642      	mov	r2, r8
 8006096:	464b      	mov	r3, r9
 8006098:	f04f 0000 	mov.w	r0, #0
 800609c:	f04f 0100 	mov.w	r1, #0
 80060a0:	0159      	lsls	r1, r3, #5
 80060a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060a6:	0150      	lsls	r0, r2, #5
 80060a8:	4602      	mov	r2, r0
 80060aa:	460b      	mov	r3, r1
 80060ac:	4641      	mov	r1, r8
 80060ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80060b2:	4649      	mov	r1, r9
 80060b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80060b8:	f04f 0200 	mov.w	r2, #0
 80060bc:	f04f 0300 	mov.w	r3, #0
 80060c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80060c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80060c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80060cc:	ebb2 040a 	subs.w	r4, r2, sl
 80060d0:	eb63 050b 	sbc.w	r5, r3, fp
 80060d4:	f04f 0200 	mov.w	r2, #0
 80060d8:	f04f 0300 	mov.w	r3, #0
 80060dc:	00eb      	lsls	r3, r5, #3
 80060de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060e2:	00e2      	lsls	r2, r4, #3
 80060e4:	4614      	mov	r4, r2
 80060e6:	461d      	mov	r5, r3
 80060e8:	4643      	mov	r3, r8
 80060ea:	18e3      	adds	r3, r4, r3
 80060ec:	603b      	str	r3, [r7, #0]
 80060ee:	464b      	mov	r3, r9
 80060f0:	eb45 0303 	adc.w	r3, r5, r3
 80060f4:	607b      	str	r3, [r7, #4]
 80060f6:	f04f 0200 	mov.w	r2, #0
 80060fa:	f04f 0300 	mov.w	r3, #0
 80060fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006102:	4629      	mov	r1, r5
 8006104:	028b      	lsls	r3, r1, #10
 8006106:	4621      	mov	r1, r4
 8006108:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800610c:	4621      	mov	r1, r4
 800610e:	028a      	lsls	r2, r1, #10
 8006110:	4610      	mov	r0, r2
 8006112:	4619      	mov	r1, r3
 8006114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006116:	2200      	movs	r2, #0
 8006118:	61bb      	str	r3, [r7, #24]
 800611a:	61fa      	str	r2, [r7, #28]
 800611c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006120:	f7fa fe22 	bl	8000d68 <__aeabi_uldivmod>
 8006124:	4602      	mov	r2, r0
 8006126:	460b      	mov	r3, r1
 8006128:	4613      	mov	r3, r2
 800612a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800612c:	4b0b      	ldr	r3, [pc, #44]	; (800615c <HAL_RCC_GetSysClockFreq+0x200>)
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	0c1b      	lsrs	r3, r3, #16
 8006132:	f003 0303 	and.w	r3, r3, #3
 8006136:	3301      	adds	r3, #1
 8006138:	005b      	lsls	r3, r3, #1
 800613a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800613c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800613e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006140:	fbb2 f3f3 	udiv	r3, r2, r3
 8006144:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006146:	e002      	b.n	800614e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006148:	4b05      	ldr	r3, [pc, #20]	; (8006160 <HAL_RCC_GetSysClockFreq+0x204>)
 800614a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800614c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800614e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006150:	4618      	mov	r0, r3
 8006152:	3750      	adds	r7, #80	; 0x50
 8006154:	46bd      	mov	sp, r7
 8006156:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800615a:	bf00      	nop
 800615c:	40023800 	.word	0x40023800
 8006160:	00f42400 	.word	0x00f42400
 8006164:	007a1200 	.word	0x007a1200

08006168 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006168:	b480      	push	{r7}
 800616a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800616c:	4b03      	ldr	r3, [pc, #12]	; (800617c <HAL_RCC_GetHCLKFreq+0x14>)
 800616e:	681b      	ldr	r3, [r3, #0]
}
 8006170:	4618      	mov	r0, r3
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	20000000 	.word	0x20000000

08006180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006184:	f7ff fff0 	bl	8006168 <HAL_RCC_GetHCLKFreq>
 8006188:	4602      	mov	r2, r0
 800618a:	4b05      	ldr	r3, [pc, #20]	; (80061a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	0a9b      	lsrs	r3, r3, #10
 8006190:	f003 0307 	and.w	r3, r3, #7
 8006194:	4903      	ldr	r1, [pc, #12]	; (80061a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006196:	5ccb      	ldrb	r3, [r1, r3]
 8006198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800619c:	4618      	mov	r0, r3
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	40023800 	.word	0x40023800
 80061a4:	0800ea40 	.word	0x0800ea40

080061a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80061ac:	f7ff ffdc 	bl	8006168 <HAL_RCC_GetHCLKFreq>
 80061b0:	4602      	mov	r2, r0
 80061b2:	4b05      	ldr	r3, [pc, #20]	; (80061c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	0b5b      	lsrs	r3, r3, #13
 80061b8:	f003 0307 	and.w	r3, r3, #7
 80061bc:	4903      	ldr	r1, [pc, #12]	; (80061cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80061be:	5ccb      	ldrb	r3, [r1, r3]
 80061c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	40023800 	.word	0x40023800
 80061cc:	0800ea40 	.word	0x0800ea40

080061d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b088      	sub	sp, #32
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80061d8:	2300      	movs	r3, #0
 80061da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80061dc:	2300      	movs	r3, #0
 80061de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80061e0:	2300      	movs	r3, #0
 80061e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80061e4:	2300      	movs	r3, #0
 80061e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80061e8:	2300      	movs	r3, #0
 80061ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0301 	and.w	r3, r3, #1
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d012      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80061f8:	4b69      	ldr	r3, [pc, #420]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	4a68      	ldr	r2, [pc, #416]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006202:	6093      	str	r3, [r2, #8]
 8006204:	4b66      	ldr	r3, [pc, #408]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006206:	689a      	ldr	r2, [r3, #8]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800620c:	4964      	ldr	r1, [pc, #400]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800620e:	4313      	orrs	r3, r2
 8006210:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800621a:	2301      	movs	r3, #1
 800621c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d017      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800622a:	4b5d      	ldr	r3, [pc, #372]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800622c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006230:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006238:	4959      	ldr	r1, [pc, #356]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800623a:	4313      	orrs	r3, r2
 800623c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006244:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006248:	d101      	bne.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800624a:	2301      	movs	r3, #1
 800624c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006252:	2b00      	cmp	r3, #0
 8006254:	d101      	bne.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006256:	2301      	movs	r3, #1
 8006258:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d017      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006266:	4b4e      	ldr	r3, [pc, #312]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800626c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006274:	494a      	ldr	r1, [pc, #296]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006276:	4313      	orrs	r3, r2
 8006278:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006280:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006284:	d101      	bne.n	800628a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006286:	2301      	movs	r3, #1
 8006288:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006292:	2301      	movs	r3, #1
 8006294:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d001      	beq.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80062a2:	2301      	movs	r3, #1
 80062a4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0320 	and.w	r3, r3, #32
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	f000 808b 	beq.w	80063ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80062b4:	4b3a      	ldr	r3, [pc, #232]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b8:	4a39      	ldr	r2, [pc, #228]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062be:	6413      	str	r3, [r2, #64]	; 0x40
 80062c0:	4b37      	ldr	r3, [pc, #220]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062c8:	60bb      	str	r3, [r7, #8]
 80062ca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80062cc:	4b35      	ldr	r3, [pc, #212]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a34      	ldr	r2, [pc, #208]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80062d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062d8:	f7fc fe1c 	bl	8002f14 <HAL_GetTick>
 80062dc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80062de:	e008      	b.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062e0:	f7fc fe18 	bl	8002f14 <HAL_GetTick>
 80062e4:	4602      	mov	r2, r0
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	2b64      	cmp	r3, #100	; 0x64
 80062ec:	d901      	bls.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	e357      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80062f2:	4b2c      	ldr	r3, [pc, #176]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d0f0      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80062fe:	4b28      	ldr	r3, [pc, #160]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006306:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d035      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	429a      	cmp	r2, r3
 800631a:	d02e      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800631c:	4b20      	ldr	r3, [pc, #128]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800631e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006324:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006326:	4b1e      	ldr	r3, [pc, #120]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800632a:	4a1d      	ldr	r2, [pc, #116]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800632c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006330:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006332:	4b1b      	ldr	r3, [pc, #108]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006336:	4a1a      	ldr	r2, [pc, #104]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800633c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800633e:	4a18      	ldr	r2, [pc, #96]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006344:	4b16      	ldr	r3, [pc, #88]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006348:	f003 0301 	and.w	r3, r3, #1
 800634c:	2b01      	cmp	r3, #1
 800634e:	d114      	bne.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006350:	f7fc fde0 	bl	8002f14 <HAL_GetTick>
 8006354:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006356:	e00a      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006358:	f7fc fddc 	bl	8002f14 <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	f241 3288 	movw	r2, #5000	; 0x1388
 8006366:	4293      	cmp	r3, r2
 8006368:	d901      	bls.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e319      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800636e:	4b0c      	ldr	r3, [pc, #48]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006372:	f003 0302 	and.w	r3, r3, #2
 8006376:	2b00      	cmp	r3, #0
 8006378:	d0ee      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006382:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006386:	d111      	bne.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006388:	4b05      	ldr	r3, [pc, #20]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006394:	4b04      	ldr	r3, [pc, #16]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006396:	400b      	ands	r3, r1
 8006398:	4901      	ldr	r1, [pc, #4]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800639a:	4313      	orrs	r3, r2
 800639c:	608b      	str	r3, [r1, #8]
 800639e:	e00b      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80063a0:	40023800 	.word	0x40023800
 80063a4:	40007000 	.word	0x40007000
 80063a8:	0ffffcff 	.word	0x0ffffcff
 80063ac:	4baa      	ldr	r3, [pc, #680]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	4aa9      	ldr	r2, [pc, #676]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80063b6:	6093      	str	r3, [r2, #8]
 80063b8:	4ba7      	ldr	r3, [pc, #668]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063c4:	49a4      	ldr	r1, [pc, #656]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0310 	and.w	r3, r3, #16
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d010      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80063d6:	4ba0      	ldr	r3, [pc, #640]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063dc:	4a9e      	ldr	r2, [pc, #632]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80063e6:	4b9c      	ldr	r3, [pc, #624]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063e8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f0:	4999      	ldr	r1, [pc, #612]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063f2:	4313      	orrs	r3, r2
 80063f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00a      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006404:	4b94      	ldr	r3, [pc, #592]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800640a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006412:	4991      	ldr	r1, [pc, #580]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006414:	4313      	orrs	r3, r2
 8006416:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00a      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006426:	4b8c      	ldr	r3, [pc, #560]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800642c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006434:	4988      	ldr	r1, [pc, #544]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006436:	4313      	orrs	r3, r2
 8006438:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00a      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006448:	4b83      	ldr	r3, [pc, #524]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800644a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800644e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006456:	4980      	ldr	r1, [pc, #512]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006458:	4313      	orrs	r3, r2
 800645a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00a      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800646a:	4b7b      	ldr	r3, [pc, #492]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800646c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006470:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006478:	4977      	ldr	r1, [pc, #476]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800647a:	4313      	orrs	r3, r2
 800647c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00a      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800648c:	4b72      	ldr	r3, [pc, #456]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800648e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006492:	f023 0203 	bic.w	r2, r3, #3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800649a:	496f      	ldr	r1, [pc, #444]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800649c:	4313      	orrs	r3, r2
 800649e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00a      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80064ae:	4b6a      	ldr	r3, [pc, #424]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064b4:	f023 020c 	bic.w	r2, r3, #12
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064bc:	4966      	ldr	r1, [pc, #408]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064be:	4313      	orrs	r3, r2
 80064c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00a      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80064d0:	4b61      	ldr	r3, [pc, #388]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064d6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064de:	495e      	ldr	r1, [pc, #376]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00a      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80064f2:	4b59      	ldr	r3, [pc, #356]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006500:	4955      	ldr	r1, [pc, #340]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006502:	4313      	orrs	r3, r2
 8006504:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00a      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006514:	4b50      	ldr	r3, [pc, #320]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800651a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006522:	494d      	ldr	r1, [pc, #308]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006524:	4313      	orrs	r3, r2
 8006526:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00a      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006536:	4b48      	ldr	r3, [pc, #288]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800653c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006544:	4944      	ldr	r1, [pc, #272]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006546:	4313      	orrs	r3, r2
 8006548:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00a      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006558:	4b3f      	ldr	r3, [pc, #252]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800655a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800655e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006566:	493c      	ldr	r1, [pc, #240]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006568:	4313      	orrs	r3, r2
 800656a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00a      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800657a:	4b37      	ldr	r3, [pc, #220]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800657c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006580:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006588:	4933      	ldr	r1, [pc, #204]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800658a:	4313      	orrs	r3, r2
 800658c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00a      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800659c:	4b2e      	ldr	r3, [pc, #184]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800659e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065a2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065aa:	492b      	ldr	r1, [pc, #172]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065ac:	4313      	orrs	r3, r2
 80065ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d011      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80065be:	4b26      	ldr	r3, [pc, #152]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065c4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065cc:	4922      	ldr	r1, [pc, #136]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065dc:	d101      	bne.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80065de:	2301      	movs	r3, #1
 80065e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 0308 	and.w	r3, r3, #8
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80065ee:	2301      	movs	r3, #1
 80065f0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00a      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065fe:	4b16      	ldr	r3, [pc, #88]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006604:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800660c:	4912      	ldr	r1, [pc, #72]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800660e:	4313      	orrs	r3, r2
 8006610:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00b      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006620:	4b0d      	ldr	r3, [pc, #52]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006626:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006630:	4909      	ldr	r1, [pc, #36]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006632:	4313      	orrs	r3, r2
 8006634:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d006      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006646:	2b00      	cmp	r3, #0
 8006648:	f000 80d9 	beq.w	80067fe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800664c:	4b02      	ldr	r3, [pc, #8]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a01      	ldr	r2, [pc, #4]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006652:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006656:	e001      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006658:	40023800 	.word	0x40023800
 800665c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800665e:	f7fc fc59 	bl	8002f14 <HAL_GetTick>
 8006662:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006664:	e008      	b.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006666:	f7fc fc55 	bl	8002f14 <HAL_GetTick>
 800666a:	4602      	mov	r2, r0
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	2b64      	cmp	r3, #100	; 0x64
 8006672:	d901      	bls.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006674:	2303      	movs	r3, #3
 8006676:	e194      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006678:	4b6c      	ldr	r3, [pc, #432]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1f0      	bne.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0301 	and.w	r3, r3, #1
 800668c:	2b00      	cmp	r3, #0
 800668e:	d021      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006694:	2b00      	cmp	r3, #0
 8006696:	d11d      	bne.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006698:	4b64      	ldr	r3, [pc, #400]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800669a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800669e:	0c1b      	lsrs	r3, r3, #16
 80066a0:	f003 0303 	and.w	r3, r3, #3
 80066a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80066a6:	4b61      	ldr	r3, [pc, #388]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066ac:	0e1b      	lsrs	r3, r3, #24
 80066ae:	f003 030f 	and.w	r3, r3, #15
 80066b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	019a      	lsls	r2, r3, #6
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	041b      	lsls	r3, r3, #16
 80066be:	431a      	orrs	r2, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	061b      	lsls	r3, r3, #24
 80066c4:	431a      	orrs	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	071b      	lsls	r3, r3, #28
 80066cc:	4957      	ldr	r1, [pc, #348]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d004      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066e8:	d00a      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d02e      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066fe:	d129      	bne.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006700:	4b4a      	ldr	r3, [pc, #296]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006706:	0c1b      	lsrs	r3, r3, #16
 8006708:	f003 0303 	and.w	r3, r3, #3
 800670c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800670e:	4b47      	ldr	r3, [pc, #284]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006714:	0f1b      	lsrs	r3, r3, #28
 8006716:	f003 0307 	and.w	r3, r3, #7
 800671a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	019a      	lsls	r2, r3, #6
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	041b      	lsls	r3, r3, #16
 8006726:	431a      	orrs	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	061b      	lsls	r3, r3, #24
 800672e:	431a      	orrs	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	071b      	lsls	r3, r3, #28
 8006734:	493d      	ldr	r1, [pc, #244]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006736:	4313      	orrs	r3, r2
 8006738:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800673c:	4b3b      	ldr	r3, [pc, #236]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800673e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006742:	f023 021f 	bic.w	r2, r3, #31
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674a:	3b01      	subs	r3, #1
 800674c:	4937      	ldr	r1, [pc, #220]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800674e:	4313      	orrs	r3, r2
 8006750:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800675c:	2b00      	cmp	r3, #0
 800675e:	d01d      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006760:	4b32      	ldr	r3, [pc, #200]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006762:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006766:	0e1b      	lsrs	r3, r3, #24
 8006768:	f003 030f 	and.w	r3, r3, #15
 800676c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800676e:	4b2f      	ldr	r3, [pc, #188]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006770:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006774:	0f1b      	lsrs	r3, r3, #28
 8006776:	f003 0307 	and.w	r3, r3, #7
 800677a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	019a      	lsls	r2, r3, #6
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	041b      	lsls	r3, r3, #16
 8006788:	431a      	orrs	r2, r3
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	061b      	lsls	r3, r3, #24
 800678e:	431a      	orrs	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	071b      	lsls	r3, r3, #28
 8006794:	4925      	ldr	r1, [pc, #148]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006796:	4313      	orrs	r3, r2
 8006798:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d011      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	019a      	lsls	r2, r3, #6
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	041b      	lsls	r3, r3, #16
 80067b4:	431a      	orrs	r2, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	061b      	lsls	r3, r3, #24
 80067bc:	431a      	orrs	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	071b      	lsls	r3, r3, #28
 80067c4:	4919      	ldr	r1, [pc, #100]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80067cc:	4b17      	ldr	r3, [pc, #92]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a16      	ldr	r2, [pc, #88]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80067d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067d8:	f7fc fb9c 	bl	8002f14 <HAL_GetTick>
 80067dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067de:	e008      	b.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80067e0:	f7fc fb98 	bl	8002f14 <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	2b64      	cmp	r3, #100	; 0x64
 80067ec:	d901      	bls.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e0d7      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067f2:	4b0e      	ldr	r3, [pc, #56]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d0f0      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	2b01      	cmp	r3, #1
 8006802:	f040 80cd 	bne.w	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006806:	4b09      	ldr	r3, [pc, #36]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a08      	ldr	r2, [pc, #32]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800680c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006810:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006812:	f7fc fb7f 	bl	8002f14 <HAL_GetTick>
 8006816:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006818:	e00a      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800681a:	f7fc fb7b 	bl	8002f14 <HAL_GetTick>
 800681e:	4602      	mov	r2, r0
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	2b64      	cmp	r3, #100	; 0x64
 8006826:	d903      	bls.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006828:	2303      	movs	r3, #3
 800682a:	e0ba      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800682c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006830:	4b5e      	ldr	r3, [pc, #376]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006838:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800683c:	d0ed      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d003      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800684e:	2b00      	cmp	r3, #0
 8006850:	d009      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800685a:	2b00      	cmp	r3, #0
 800685c:	d02e      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006862:	2b00      	cmp	r3, #0
 8006864:	d12a      	bne.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006866:	4b51      	ldr	r3, [pc, #324]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800686c:	0c1b      	lsrs	r3, r3, #16
 800686e:	f003 0303 	and.w	r3, r3, #3
 8006872:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006874:	4b4d      	ldr	r3, [pc, #308]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800687a:	0f1b      	lsrs	r3, r3, #28
 800687c:	f003 0307 	and.w	r3, r3, #7
 8006880:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	019a      	lsls	r2, r3, #6
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	041b      	lsls	r3, r3, #16
 800688c:	431a      	orrs	r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	061b      	lsls	r3, r3, #24
 8006894:	431a      	orrs	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	071b      	lsls	r3, r3, #28
 800689a:	4944      	ldr	r1, [pc, #272]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800689c:	4313      	orrs	r3, r2
 800689e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80068a2:	4b42      	ldr	r3, [pc, #264]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80068a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068a8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b0:	3b01      	subs	r3, #1
 80068b2:	021b      	lsls	r3, r3, #8
 80068b4:	493d      	ldr	r1, [pc, #244]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d022      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068d0:	d11d      	bne.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80068d2:	4b36      	ldr	r3, [pc, #216]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80068d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068d8:	0e1b      	lsrs	r3, r3, #24
 80068da:	f003 030f 	and.w	r3, r3, #15
 80068de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80068e0:	4b32      	ldr	r3, [pc, #200]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80068e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e6:	0f1b      	lsrs	r3, r3, #28
 80068e8:	f003 0307 	and.w	r3, r3, #7
 80068ec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	695b      	ldr	r3, [r3, #20]
 80068f2:	019a      	lsls	r2, r3, #6
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a1b      	ldr	r3, [r3, #32]
 80068f8:	041b      	lsls	r3, r3, #16
 80068fa:	431a      	orrs	r2, r3
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	061b      	lsls	r3, r3, #24
 8006900:	431a      	orrs	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	071b      	lsls	r3, r3, #28
 8006906:	4929      	ldr	r1, [pc, #164]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006908:	4313      	orrs	r3, r2
 800690a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0308 	and.w	r3, r3, #8
 8006916:	2b00      	cmp	r3, #0
 8006918:	d028      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800691a:	4b24      	ldr	r3, [pc, #144]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800691c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006920:	0e1b      	lsrs	r3, r3, #24
 8006922:	f003 030f 	and.w	r3, r3, #15
 8006926:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006928:	4b20      	ldr	r3, [pc, #128]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800692a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800692e:	0c1b      	lsrs	r3, r3, #16
 8006930:	f003 0303 	and.w	r3, r3, #3
 8006934:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	019a      	lsls	r2, r3, #6
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	041b      	lsls	r3, r3, #16
 8006940:	431a      	orrs	r2, r3
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	061b      	lsls	r3, r3, #24
 8006946:	431a      	orrs	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	69db      	ldr	r3, [r3, #28]
 800694c:	071b      	lsls	r3, r3, #28
 800694e:	4917      	ldr	r1, [pc, #92]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006950:	4313      	orrs	r3, r2
 8006952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006956:	4b15      	ldr	r3, [pc, #84]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006958:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800695c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006964:	4911      	ldr	r1, [pc, #68]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006966:	4313      	orrs	r3, r2
 8006968:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800696c:	4b0f      	ldr	r3, [pc, #60]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a0e      	ldr	r2, [pc, #56]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006976:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006978:	f7fc facc 	bl	8002f14 <HAL_GetTick>
 800697c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800697e:	e008      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006980:	f7fc fac8 	bl	8002f14 <HAL_GetTick>
 8006984:	4602      	mov	r2, r0
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	2b64      	cmp	r3, #100	; 0x64
 800698c:	d901      	bls.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e007      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006992:	4b06      	ldr	r3, [pc, #24]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800699a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800699e:	d1ef      	bne.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3720      	adds	r7, #32
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	40023800 	.word	0x40023800

080069b0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d101      	bne.n	80069c6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e071      	b.n	8006aaa <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	7f5b      	ldrb	r3, [r3, #29]
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d105      	bne.n	80069dc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f7fb ff74 	bl	80028c4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2202      	movs	r2, #2
 80069e0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	f003 0310 	and.w	r3, r3, #16
 80069ec:	2b10      	cmp	r3, #16
 80069ee:	d053      	beq.n	8006a98 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	22ca      	movs	r2, #202	; 0xca
 80069f6:	625a      	str	r2, [r3, #36]	; 0x24
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2253      	movs	r2, #83	; 0x53
 80069fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 fa4d 	bl	8006ea0 <RTC_EnterInitMode>
 8006a06:	4603      	mov	r3, r0
 8006a08:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006a0a:	7bfb      	ldrb	r3, [r7, #15]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d12a      	bne.n	8006a66 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6899      	ldr	r1, [r3, #8]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	4b26      	ldr	r3, [pc, #152]	; (8006ab4 <HAL_RTC_Init+0x104>)
 8006a1c:	400b      	ands	r3, r1
 8006a1e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	6899      	ldr	r1, [r3, #8]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	685a      	ldr	r2, [r3, #4]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	431a      	orrs	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	695b      	ldr	r3, [r3, #20]
 8006a34:	431a      	orrs	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	430a      	orrs	r2, r1
 8006a3c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	68d2      	ldr	r2, [r2, #12]
 8006a46:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6919      	ldr	r1, [r3, #16]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	041a      	lsls	r2, r3, #16
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	430a      	orrs	r2, r1
 8006a5a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 fa56 	bl	8006f0e <RTC_ExitInitMode>
 8006a62:	4603      	mov	r3, r0
 8006a64:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006a66:	7bfb      	ldrb	r3, [r7, #15]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d110      	bne.n	8006a8e <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f022 0208 	bic.w	r2, r2, #8
 8006a7a:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	699a      	ldr	r2, [r3, #24]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	22ff      	movs	r2, #255	; 0xff
 8006a94:	625a      	str	r2, [r3, #36]	; 0x24
 8006a96:	e001      	b.n	8006a9c <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006a9c:	7bfb      	ldrb	r3, [r7, #15]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d102      	bne.n	8006aa8 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8006aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	ff8fffbf 	.word	0xff8fffbf

08006ab8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006ab8:	b590      	push	{r4, r7, lr}
 8006aba:	b087      	sub	sp, #28
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	7f1b      	ldrb	r3, [r3, #28]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d101      	bne.n	8006ad4 <HAL_RTC_SetTime+0x1c>
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	e085      	b.n	8006be0 <HAL_RTC_SetTime+0x128>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2202      	movs	r2, #2
 8006ade:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d126      	bne.n	8006b34 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d102      	bne.n	8006afa <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	2200      	movs	r2, #0
 8006af8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	4618      	mov	r0, r3
 8006b00:	f000 fa2a 	bl	8006f58 <RTC_ByteToBcd2>
 8006b04:	4603      	mov	r3, r0
 8006b06:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	785b      	ldrb	r3, [r3, #1]
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f000 fa23 	bl	8006f58 <RTC_ByteToBcd2>
 8006b12:	4603      	mov	r3, r0
 8006b14:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006b16:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	789b      	ldrb	r3, [r3, #2]
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f000 fa1b 	bl	8006f58 <RTC_ByteToBcd2>
 8006b22:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006b24:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	78db      	ldrb	r3, [r3, #3]
 8006b2c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	617b      	str	r3, [r7, #20]
 8006b32:	e018      	b.n	8006b66 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d102      	bne.n	8006b48 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	2200      	movs	r2, #0
 8006b46:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	785b      	ldrb	r3, [r3, #1]
 8006b52:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006b54:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006b56:	68ba      	ldr	r2, [r7, #8]
 8006b58:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006b5a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	78db      	ldrb	r3, [r3, #3]
 8006b60:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006b62:	4313      	orrs	r3, r2
 8006b64:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	22ca      	movs	r2, #202	; 0xca
 8006b6c:	625a      	str	r2, [r3, #36]	; 0x24
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2253      	movs	r2, #83	; 0x53
 8006b74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f000 f992 	bl	8006ea0 <RTC_EnterInitMode>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006b80:	7cfb      	ldrb	r3, [r7, #19]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d11e      	bne.n	8006bc4 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	6979      	ldr	r1, [r7, #20]
 8006b8c:	4b16      	ldr	r3, [pc, #88]	; (8006be8 <HAL_RTC_SetTime+0x130>)
 8006b8e:	400b      	ands	r3, r1
 8006b90:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	689a      	ldr	r2, [r3, #8]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006ba0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	6899      	ldr	r1, [r3, #8]
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	68da      	ldr	r2, [r3, #12]
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	431a      	orrs	r2, r3
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006bba:	68f8      	ldr	r0, [r7, #12]
 8006bbc:	f000 f9a7 	bl	8006f0e <RTC_ExitInitMode>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006bc4:	7cfb      	ldrb	r3, [r7, #19]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d102      	bne.n	8006bd0 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	22ff      	movs	r2, #255	; 0xff
 8006bd6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	771a      	strb	r2, [r3, #28]

  return status;
 8006bde:	7cfb      	ldrb	r3, [r7, #19]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	371c      	adds	r7, #28
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd90      	pop	{r4, r7, pc}
 8006be8:	007f7f7f 	.word	0x007f7f7f

08006bec <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b086      	sub	sp, #24
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	4b22      	ldr	r3, [pc, #136]	; (8006ca4 <HAL_RTC_GetTime+0xb8>)
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	0c1b      	lsrs	r3, r3, #16
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c2a:	b2da      	uxtb	r2, r3
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	0a1b      	lsrs	r3, r3, #8
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c3a:	b2da      	uxtb	r2, r3
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c48:	b2da      	uxtb	r2, r3
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	0d9b      	lsrs	r3, r3, #22
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	f003 0301 	and.w	r3, r3, #1
 8006c58:	b2da      	uxtb	r2, r3
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d11a      	bne.n	8006c9a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f000 f993 	bl	8006f94 <RTC_Bcd2ToByte>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	461a      	mov	r2, r3
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	785b      	ldrb	r3, [r3, #1]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 f98a 	bl	8006f94 <RTC_Bcd2ToByte>
 8006c80:	4603      	mov	r3, r0
 8006c82:	461a      	mov	r2, r3
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	789b      	ldrb	r3, [r3, #2]
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f000 f981 	bl	8006f94 <RTC_Bcd2ToByte>
 8006c92:	4603      	mov	r3, r0
 8006c94:	461a      	mov	r2, r3
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3718      	adds	r7, #24
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	007f7f7f 	.word	0x007f7f7f

08006ca8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006ca8:	b590      	push	{r4, r7, lr}
 8006caa:	b087      	sub	sp, #28
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	7f1b      	ldrb	r3, [r3, #28]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d101      	bne.n	8006cc4 <HAL_RTC_SetDate+0x1c>
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	e06f      	b.n	8006da4 <HAL_RTC_SetDate+0xfc>
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2202      	movs	r2, #2
 8006cce:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d10e      	bne.n	8006cf4 <HAL_RTC_SetDate+0x4c>
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	785b      	ldrb	r3, [r3, #1]
 8006cda:	f003 0310 	and.w	r3, r3, #16
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d008      	beq.n	8006cf4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	785b      	ldrb	r3, [r3, #1]
 8006ce6:	f023 0310 	bic.w	r3, r3, #16
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	330a      	adds	r3, #10
 8006cee:	b2da      	uxtb	r2, r3
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d11c      	bne.n	8006d34 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	78db      	ldrb	r3, [r3, #3]
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f000 f92a 	bl	8006f58 <RTC_ByteToBcd2>
 8006d04:	4603      	mov	r3, r0
 8006d06:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	785b      	ldrb	r3, [r3, #1]
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f000 f923 	bl	8006f58 <RTC_ByteToBcd2>
 8006d12:	4603      	mov	r3, r0
 8006d14:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006d16:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	789b      	ldrb	r3, [r3, #2]
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f000 f91b 	bl	8006f58 <RTC_ByteToBcd2>
 8006d22:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006d24:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	617b      	str	r3, [r7, #20]
 8006d32:	e00e      	b.n	8006d52 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	78db      	ldrb	r3, [r3, #3]
 8006d38:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	785b      	ldrb	r3, [r3, #1]
 8006d3e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006d40:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006d42:	68ba      	ldr	r2, [r7, #8]
 8006d44:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006d46:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	22ca      	movs	r2, #202	; 0xca
 8006d58:	625a      	str	r2, [r3, #36]	; 0x24
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2253      	movs	r2, #83	; 0x53
 8006d60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006d62:	68f8      	ldr	r0, [r7, #12]
 8006d64:	f000 f89c 	bl	8006ea0 <RTC_EnterInitMode>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006d6c:	7cfb      	ldrb	r3, [r7, #19]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d10a      	bne.n	8006d88 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	6979      	ldr	r1, [r7, #20]
 8006d78:	4b0c      	ldr	r3, [pc, #48]	; (8006dac <HAL_RTC_SetDate+0x104>)
 8006d7a:	400b      	ands	r3, r1
 8006d7c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006d7e:	68f8      	ldr	r0, [r7, #12]
 8006d80:	f000 f8c5 	bl	8006f0e <RTC_ExitInitMode>
 8006d84:	4603      	mov	r3, r0
 8006d86:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006d88:	7cfb      	ldrb	r3, [r7, #19]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d102      	bne.n	8006d94 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2201      	movs	r2, #1
 8006d92:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	22ff      	movs	r2, #255	; 0xff
 8006d9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	771a      	strb	r2, [r3, #28]

  return status;
 8006da2:	7cfb      	ldrb	r3, [r7, #19]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	371c      	adds	r7, #28
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd90      	pop	{r4, r7, pc}
 8006dac:	00ffff3f 	.word	0x00ffff3f

08006db0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	685a      	ldr	r2, [r3, #4]
 8006dc6:	4b21      	ldr	r3, [pc, #132]	; (8006e4c <HAL_RTC_GetDate+0x9c>)
 8006dc8:	4013      	ands	r3, r2
 8006dca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	0c1b      	lsrs	r3, r3, #16
 8006dd0:	b2da      	uxtb	r2, r3
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	0a1b      	lsrs	r3, r3, #8
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	f003 031f 	and.w	r3, r3, #31
 8006de0:	b2da      	uxtb	r2, r3
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	0b5b      	lsrs	r3, r3, #13
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	f003 0307 	and.w	r3, r3, #7
 8006dfe:	b2da      	uxtb	r2, r3
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d11a      	bne.n	8006e40 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	78db      	ldrb	r3, [r3, #3]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 f8c0 	bl	8006f94 <RTC_Bcd2ToByte>
 8006e14:	4603      	mov	r3, r0
 8006e16:	461a      	mov	r2, r3
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	785b      	ldrb	r3, [r3, #1]
 8006e20:	4618      	mov	r0, r3
 8006e22:	f000 f8b7 	bl	8006f94 <RTC_Bcd2ToByte>
 8006e26:	4603      	mov	r3, r0
 8006e28:	461a      	mov	r2, r3
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	789b      	ldrb	r3, [r3, #2]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 f8ae 	bl	8006f94 <RTC_Bcd2ToByte>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3718      	adds	r7, #24
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	00ffff3f 	.word	0x00ffff3f

08006e50 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68da      	ldr	r2, [r3, #12]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006e6a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e6c:	f7fc f852 	bl	8002f14 <HAL_GetTick>
 8006e70:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006e72:	e009      	b.n	8006e88 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006e74:	f7fc f84e 	bl	8002f14 <HAL_GetTick>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e82:	d901      	bls.n	8006e88 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006e84:	2303      	movs	r3, #3
 8006e86:	e007      	b.n	8006e98 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	f003 0320 	and.w	r3, r3, #32
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d0ee      	beq.n	8006e74 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3710      	adds	r7, #16
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006eac:	2300      	movs	r3, #0
 8006eae:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d122      	bne.n	8006f04 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68da      	ldr	r2, [r3, #12]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ecc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006ece:	f7fc f821 	bl	8002f14 <HAL_GetTick>
 8006ed2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006ed4:	e00c      	b.n	8006ef0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006ed6:	f7fc f81d 	bl	8002f14 <HAL_GetTick>
 8006eda:	4602      	mov	r2, r0
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	1ad3      	subs	r3, r2, r3
 8006ee0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ee4:	d904      	bls.n	8006ef0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2204      	movs	r2, #4
 8006eea:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d102      	bne.n	8006f04 <RTC_EnterInitMode+0x64>
 8006efe:	7bfb      	ldrb	r3, [r7, #15]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d1e8      	bne.n	8006ed6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b084      	sub	sp, #16
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f16:	2300      	movs	r3, #0
 8006f18:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68da      	ldr	r2, [r3, #12]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f28:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	f003 0320 	and.w	r3, r3, #32
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10a      	bne.n	8006f4e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f7ff ff89 	bl	8006e50 <HAL_RTC_WaitForSynchro>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d004      	beq.n	8006f4e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2204      	movs	r2, #4
 8006f48:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3710      	adds	r7, #16
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	4603      	mov	r3, r0
 8006f60:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006f62:	2300      	movs	r3, #0
 8006f64:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8006f66:	e005      	b.n	8006f74 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8006f6e:	79fb      	ldrb	r3, [r7, #7]
 8006f70:	3b0a      	subs	r3, #10
 8006f72:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006f74:	79fb      	ldrb	r3, [r7, #7]
 8006f76:	2b09      	cmp	r3, #9
 8006f78:	d8f6      	bhi.n	8006f68 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	011b      	lsls	r3, r3, #4
 8006f80:	b2da      	uxtb	r2, r3
 8006f82:	79fb      	ldrb	r3, [r7, #7]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	b2db      	uxtb	r3, r3
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3714      	adds	r7, #20
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8006fa2:	79fb      	ldrb	r3, [r7, #7]
 8006fa4:	091b      	lsrs	r3, r3, #4
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	461a      	mov	r2, r3
 8006faa:	4613      	mov	r3, r2
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	4413      	add	r3, r2
 8006fb0:	005b      	lsls	r3, r3, #1
 8006fb2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	b2da      	uxtb	r2, r3
 8006fb8:	79fb      	ldrb	r3, [r7, #7]
 8006fba:	f003 030f 	and.w	r3, r3, #15
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	4413      	add	r3, r2
 8006fc2:	b2db      	uxtb	r3, r3
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3714      	adds	r7, #20
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d101      	bne.n	8006fe2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e049      	b.n	8007076 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d106      	bne.n	8006ffc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f7fb fdea 	bl	8002bd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2202      	movs	r2, #2
 8007000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	3304      	adds	r3, #4
 800700c:	4619      	mov	r1, r3
 800700e:	4610      	mov	r0, r2
 8007010:	f000 fd30 	bl	8007a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3708      	adds	r7, #8
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
	...

08007080 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007080:	b480      	push	{r7}
 8007082:	b085      	sub	sp, #20
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800708e:	b2db      	uxtb	r3, r3
 8007090:	2b01      	cmp	r3, #1
 8007092:	d001      	beq.n	8007098 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	e054      	b.n	8007142 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2202      	movs	r2, #2
 800709c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	68da      	ldr	r2, [r3, #12]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f042 0201 	orr.w	r2, r2, #1
 80070ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a26      	ldr	r2, [pc, #152]	; (8007150 <HAL_TIM_Base_Start_IT+0xd0>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d022      	beq.n	8007100 <HAL_TIM_Base_Start_IT+0x80>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070c2:	d01d      	beq.n	8007100 <HAL_TIM_Base_Start_IT+0x80>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a22      	ldr	r2, [pc, #136]	; (8007154 <HAL_TIM_Base_Start_IT+0xd4>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d018      	beq.n	8007100 <HAL_TIM_Base_Start_IT+0x80>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a21      	ldr	r2, [pc, #132]	; (8007158 <HAL_TIM_Base_Start_IT+0xd8>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d013      	beq.n	8007100 <HAL_TIM_Base_Start_IT+0x80>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a1f      	ldr	r2, [pc, #124]	; (800715c <HAL_TIM_Base_Start_IT+0xdc>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d00e      	beq.n	8007100 <HAL_TIM_Base_Start_IT+0x80>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a1e      	ldr	r2, [pc, #120]	; (8007160 <HAL_TIM_Base_Start_IT+0xe0>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d009      	beq.n	8007100 <HAL_TIM_Base_Start_IT+0x80>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a1c      	ldr	r2, [pc, #112]	; (8007164 <HAL_TIM_Base_Start_IT+0xe4>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d004      	beq.n	8007100 <HAL_TIM_Base_Start_IT+0x80>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a1b      	ldr	r2, [pc, #108]	; (8007168 <HAL_TIM_Base_Start_IT+0xe8>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d115      	bne.n	800712c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	689a      	ldr	r2, [r3, #8]
 8007106:	4b19      	ldr	r3, [pc, #100]	; (800716c <HAL_TIM_Base_Start_IT+0xec>)
 8007108:	4013      	ands	r3, r2
 800710a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2b06      	cmp	r3, #6
 8007110:	d015      	beq.n	800713e <HAL_TIM_Base_Start_IT+0xbe>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007118:	d011      	beq.n	800713e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f042 0201 	orr.w	r2, r2, #1
 8007128:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800712a:	e008      	b.n	800713e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f042 0201 	orr.w	r2, r2, #1
 800713a:	601a      	str	r2, [r3, #0]
 800713c:	e000      	b.n	8007140 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800713e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3714      	adds	r7, #20
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
 800714e:	bf00      	nop
 8007150:	40010000 	.word	0x40010000
 8007154:	40000400 	.word	0x40000400
 8007158:	40000800 	.word	0x40000800
 800715c:	40000c00 	.word	0x40000c00
 8007160:	40010400 	.word	0x40010400
 8007164:	40014000 	.word	0x40014000
 8007168:	40001800 	.word	0x40001800
 800716c:	00010007 	.word	0x00010007

08007170 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d101      	bne.n	8007182 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	e049      	b.n	8007216 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007188:	b2db      	uxtb	r3, r3
 800718a:	2b00      	cmp	r3, #0
 800718c:	d106      	bne.n	800719c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f841 	bl	800721e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2202      	movs	r2, #2
 80071a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	3304      	adds	r3, #4
 80071ac:	4619      	mov	r1, r3
 80071ae:	4610      	mov	r0, r2
 80071b0:	f000 fc60 	bl	8007a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3708      	adds	r7, #8
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800721e:	b480      	push	{r7}
 8007220:	b083      	sub	sp, #12
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007226:	bf00      	nop
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
	...

08007234 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d109      	bne.n	8007258 <HAL_TIM_PWM_Start+0x24>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800724a:	b2db      	uxtb	r3, r3
 800724c:	2b01      	cmp	r3, #1
 800724e:	bf14      	ite	ne
 8007250:	2301      	movne	r3, #1
 8007252:	2300      	moveq	r3, #0
 8007254:	b2db      	uxtb	r3, r3
 8007256:	e03c      	b.n	80072d2 <HAL_TIM_PWM_Start+0x9e>
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	2b04      	cmp	r3, #4
 800725c:	d109      	bne.n	8007272 <HAL_TIM_PWM_Start+0x3e>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007264:	b2db      	uxtb	r3, r3
 8007266:	2b01      	cmp	r3, #1
 8007268:	bf14      	ite	ne
 800726a:	2301      	movne	r3, #1
 800726c:	2300      	moveq	r3, #0
 800726e:	b2db      	uxtb	r3, r3
 8007270:	e02f      	b.n	80072d2 <HAL_TIM_PWM_Start+0x9e>
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	2b08      	cmp	r3, #8
 8007276:	d109      	bne.n	800728c <HAL_TIM_PWM_Start+0x58>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800727e:	b2db      	uxtb	r3, r3
 8007280:	2b01      	cmp	r3, #1
 8007282:	bf14      	ite	ne
 8007284:	2301      	movne	r3, #1
 8007286:	2300      	moveq	r3, #0
 8007288:	b2db      	uxtb	r3, r3
 800728a:	e022      	b.n	80072d2 <HAL_TIM_PWM_Start+0x9e>
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	2b0c      	cmp	r3, #12
 8007290:	d109      	bne.n	80072a6 <HAL_TIM_PWM_Start+0x72>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b01      	cmp	r3, #1
 800729c:	bf14      	ite	ne
 800729e:	2301      	movne	r3, #1
 80072a0:	2300      	moveq	r3, #0
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	e015      	b.n	80072d2 <HAL_TIM_PWM_Start+0x9e>
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	2b10      	cmp	r3, #16
 80072aa:	d109      	bne.n	80072c0 <HAL_TIM_PWM_Start+0x8c>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	bf14      	ite	ne
 80072b8:	2301      	movne	r3, #1
 80072ba:	2300      	moveq	r3, #0
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	e008      	b.n	80072d2 <HAL_TIM_PWM_Start+0x9e>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	bf14      	ite	ne
 80072cc:	2301      	movne	r3, #1
 80072ce:	2300      	moveq	r3, #0
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d001      	beq.n	80072da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e092      	b.n	8007400 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d104      	bne.n	80072ea <HAL_TIM_PWM_Start+0xb6>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2202      	movs	r2, #2
 80072e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072e8:	e023      	b.n	8007332 <HAL_TIM_PWM_Start+0xfe>
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	2b04      	cmp	r3, #4
 80072ee:	d104      	bne.n	80072fa <HAL_TIM_PWM_Start+0xc6>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2202      	movs	r2, #2
 80072f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072f8:	e01b      	b.n	8007332 <HAL_TIM_PWM_Start+0xfe>
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	2b08      	cmp	r3, #8
 80072fe:	d104      	bne.n	800730a <HAL_TIM_PWM_Start+0xd6>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2202      	movs	r2, #2
 8007304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007308:	e013      	b.n	8007332 <HAL_TIM_PWM_Start+0xfe>
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	2b0c      	cmp	r3, #12
 800730e:	d104      	bne.n	800731a <HAL_TIM_PWM_Start+0xe6>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2202      	movs	r2, #2
 8007314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007318:	e00b      	b.n	8007332 <HAL_TIM_PWM_Start+0xfe>
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	2b10      	cmp	r3, #16
 800731e:	d104      	bne.n	800732a <HAL_TIM_PWM_Start+0xf6>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2202      	movs	r2, #2
 8007324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007328:	e003      	b.n	8007332 <HAL_TIM_PWM_Start+0xfe>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2202      	movs	r2, #2
 800732e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2201      	movs	r2, #1
 8007338:	6839      	ldr	r1, [r7, #0]
 800733a:	4618      	mov	r0, r3
 800733c:	f000 ff32 	bl	80081a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a30      	ldr	r2, [pc, #192]	; (8007408 <HAL_TIM_PWM_Start+0x1d4>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d004      	beq.n	8007354 <HAL_TIM_PWM_Start+0x120>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a2f      	ldr	r2, [pc, #188]	; (800740c <HAL_TIM_PWM_Start+0x1d8>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d101      	bne.n	8007358 <HAL_TIM_PWM_Start+0x124>
 8007354:	2301      	movs	r3, #1
 8007356:	e000      	b.n	800735a <HAL_TIM_PWM_Start+0x126>
 8007358:	2300      	movs	r3, #0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d007      	beq.n	800736e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800736c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a25      	ldr	r2, [pc, #148]	; (8007408 <HAL_TIM_PWM_Start+0x1d4>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d022      	beq.n	80073be <HAL_TIM_PWM_Start+0x18a>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007380:	d01d      	beq.n	80073be <HAL_TIM_PWM_Start+0x18a>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a22      	ldr	r2, [pc, #136]	; (8007410 <HAL_TIM_PWM_Start+0x1dc>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d018      	beq.n	80073be <HAL_TIM_PWM_Start+0x18a>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a20      	ldr	r2, [pc, #128]	; (8007414 <HAL_TIM_PWM_Start+0x1e0>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d013      	beq.n	80073be <HAL_TIM_PWM_Start+0x18a>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a1f      	ldr	r2, [pc, #124]	; (8007418 <HAL_TIM_PWM_Start+0x1e4>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d00e      	beq.n	80073be <HAL_TIM_PWM_Start+0x18a>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a19      	ldr	r2, [pc, #100]	; (800740c <HAL_TIM_PWM_Start+0x1d8>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d009      	beq.n	80073be <HAL_TIM_PWM_Start+0x18a>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a1b      	ldr	r2, [pc, #108]	; (800741c <HAL_TIM_PWM_Start+0x1e8>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d004      	beq.n	80073be <HAL_TIM_PWM_Start+0x18a>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a19      	ldr	r2, [pc, #100]	; (8007420 <HAL_TIM_PWM_Start+0x1ec>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d115      	bne.n	80073ea <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	689a      	ldr	r2, [r3, #8]
 80073c4:	4b17      	ldr	r3, [pc, #92]	; (8007424 <HAL_TIM_PWM_Start+0x1f0>)
 80073c6:	4013      	ands	r3, r2
 80073c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2b06      	cmp	r3, #6
 80073ce:	d015      	beq.n	80073fc <HAL_TIM_PWM_Start+0x1c8>
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073d6:	d011      	beq.n	80073fc <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f042 0201 	orr.w	r2, r2, #1
 80073e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073e8:	e008      	b.n	80073fc <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f042 0201 	orr.w	r2, r2, #1
 80073f8:	601a      	str	r2, [r3, #0]
 80073fa:	e000      	b.n	80073fe <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3710      	adds	r7, #16
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	40010000 	.word	0x40010000
 800740c:	40010400 	.word	0x40010400
 8007410:	40000400 	.word	0x40000400
 8007414:	40000800 	.word	0x40000800
 8007418:	40000c00 	.word	0x40000c00
 800741c:	40014000 	.word	0x40014000
 8007420:	40001800 	.word	0x40001800
 8007424:	00010007 	.word	0x00010007

08007428 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	f003 0302 	and.w	r3, r3, #2
 800743a:	2b02      	cmp	r3, #2
 800743c:	d122      	bne.n	8007484 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	f003 0302 	and.w	r3, r3, #2
 8007448:	2b02      	cmp	r3, #2
 800744a:	d11b      	bne.n	8007484 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f06f 0202 	mvn.w	r2, #2
 8007454:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2201      	movs	r2, #1
 800745a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	699b      	ldr	r3, [r3, #24]
 8007462:	f003 0303 	and.w	r3, r3, #3
 8007466:	2b00      	cmp	r3, #0
 8007468:	d003      	beq.n	8007472 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 fae4 	bl	8007a38 <HAL_TIM_IC_CaptureCallback>
 8007470:	e005      	b.n	800747e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 fad6 	bl	8007a24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 fae7 	bl	8007a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	f003 0304 	and.w	r3, r3, #4
 800748e:	2b04      	cmp	r3, #4
 8007490:	d122      	bne.n	80074d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	f003 0304 	and.w	r3, r3, #4
 800749c:	2b04      	cmp	r3, #4
 800749e:	d11b      	bne.n	80074d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f06f 0204 	mvn.w	r2, #4
 80074a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2202      	movs	r2, #2
 80074ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	699b      	ldr	r3, [r3, #24]
 80074b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d003      	beq.n	80074c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 faba 	bl	8007a38 <HAL_TIM_IC_CaptureCallback>
 80074c4:	e005      	b.n	80074d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 faac 	bl	8007a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 fabd 	bl	8007a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	f003 0308 	and.w	r3, r3, #8
 80074e2:	2b08      	cmp	r3, #8
 80074e4:	d122      	bne.n	800752c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	f003 0308 	and.w	r3, r3, #8
 80074f0:	2b08      	cmp	r3, #8
 80074f2:	d11b      	bne.n	800752c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f06f 0208 	mvn.w	r2, #8
 80074fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2204      	movs	r2, #4
 8007502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	69db      	ldr	r3, [r3, #28]
 800750a:	f003 0303 	and.w	r3, r3, #3
 800750e:	2b00      	cmp	r3, #0
 8007510:	d003      	beq.n	800751a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fa90 	bl	8007a38 <HAL_TIM_IC_CaptureCallback>
 8007518:	e005      	b.n	8007526 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 fa82 	bl	8007a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 fa93 	bl	8007a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	f003 0310 	and.w	r3, r3, #16
 8007536:	2b10      	cmp	r3, #16
 8007538:	d122      	bne.n	8007580 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	f003 0310 	and.w	r3, r3, #16
 8007544:	2b10      	cmp	r3, #16
 8007546:	d11b      	bne.n	8007580 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f06f 0210 	mvn.w	r2, #16
 8007550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2208      	movs	r2, #8
 8007556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	69db      	ldr	r3, [r3, #28]
 800755e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007562:	2b00      	cmp	r3, #0
 8007564:	d003      	beq.n	800756e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 fa66 	bl	8007a38 <HAL_TIM_IC_CaptureCallback>
 800756c:	e005      	b.n	800757a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 fa58 	bl	8007a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fa69 	bl	8007a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	f003 0301 	and.w	r3, r3, #1
 800758a:	2b01      	cmp	r3, #1
 800758c:	d10e      	bne.n	80075ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	f003 0301 	and.w	r3, r3, #1
 8007598:	2b01      	cmp	r3, #1
 800759a:	d107      	bne.n	80075ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f06f 0201 	mvn.w	r2, #1
 80075a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f7fa fdfe 	bl	80021a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075b6:	2b80      	cmp	r3, #128	; 0x80
 80075b8:	d10e      	bne.n	80075d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075c4:	2b80      	cmp	r3, #128	; 0x80
 80075c6:	d107      	bne.n	80075d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80075d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 fea4 	bl	8008320 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075e6:	d10e      	bne.n	8007606 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075f2:	2b80      	cmp	r3, #128	; 0x80
 80075f4:	d107      	bne.n	8007606 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80075fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 fe97 	bl	8008334 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007610:	2b40      	cmp	r3, #64	; 0x40
 8007612:	d10e      	bne.n	8007632 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800761e:	2b40      	cmp	r3, #64	; 0x40
 8007620:	d107      	bne.n	8007632 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800762a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 fa17 	bl	8007a60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	f003 0320 	and.w	r3, r3, #32
 800763c:	2b20      	cmp	r3, #32
 800763e:	d10e      	bne.n	800765e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	f003 0320 	and.w	r3, r3, #32
 800764a:	2b20      	cmp	r3, #32
 800764c:	d107      	bne.n	800765e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f06f 0220 	mvn.w	r2, #32
 8007656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 fe57 	bl	800830c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800765e:	bf00      	nop
 8007660:	3708      	adds	r7, #8
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
	...

08007668 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b086      	sub	sp, #24
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007674:	2300      	movs	r3, #0
 8007676:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800767e:	2b01      	cmp	r3, #1
 8007680:	d101      	bne.n	8007686 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007682:	2302      	movs	r3, #2
 8007684:	e0ff      	b.n	8007886 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2201      	movs	r2, #1
 800768a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2b14      	cmp	r3, #20
 8007692:	f200 80f0 	bhi.w	8007876 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007696:	a201      	add	r2, pc, #4	; (adr r2, 800769c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800769c:	080076f1 	.word	0x080076f1
 80076a0:	08007877 	.word	0x08007877
 80076a4:	08007877 	.word	0x08007877
 80076a8:	08007877 	.word	0x08007877
 80076ac:	08007731 	.word	0x08007731
 80076b0:	08007877 	.word	0x08007877
 80076b4:	08007877 	.word	0x08007877
 80076b8:	08007877 	.word	0x08007877
 80076bc:	08007773 	.word	0x08007773
 80076c0:	08007877 	.word	0x08007877
 80076c4:	08007877 	.word	0x08007877
 80076c8:	08007877 	.word	0x08007877
 80076cc:	080077b3 	.word	0x080077b3
 80076d0:	08007877 	.word	0x08007877
 80076d4:	08007877 	.word	0x08007877
 80076d8:	08007877 	.word	0x08007877
 80076dc:	080077f5 	.word	0x080077f5
 80076e0:	08007877 	.word	0x08007877
 80076e4:	08007877 	.word	0x08007877
 80076e8:	08007877 	.word	0x08007877
 80076ec:	08007835 	.word	0x08007835
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	68b9      	ldr	r1, [r7, #8]
 80076f6:	4618      	mov	r0, r3
 80076f8:	f000 fa5c 	bl	8007bb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	699a      	ldr	r2, [r3, #24]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f042 0208 	orr.w	r2, r2, #8
 800770a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	699a      	ldr	r2, [r3, #24]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f022 0204 	bic.w	r2, r2, #4
 800771a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6999      	ldr	r1, [r3, #24]
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	691a      	ldr	r2, [r3, #16]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	430a      	orrs	r2, r1
 800772c:	619a      	str	r2, [r3, #24]
      break;
 800772e:	e0a5      	b.n	800787c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68b9      	ldr	r1, [r7, #8]
 8007736:	4618      	mov	r0, r3
 8007738:	f000 faae 	bl	8007c98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	699a      	ldr	r2, [r3, #24]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800774a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	699a      	ldr	r2, [r3, #24]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800775a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	6999      	ldr	r1, [r3, #24]
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	691b      	ldr	r3, [r3, #16]
 8007766:	021a      	lsls	r2, r3, #8
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	430a      	orrs	r2, r1
 800776e:	619a      	str	r2, [r3, #24]
      break;
 8007770:	e084      	b.n	800787c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68b9      	ldr	r1, [r7, #8]
 8007778:	4618      	mov	r0, r3
 800777a:	f000 fb05 	bl	8007d88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	69da      	ldr	r2, [r3, #28]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f042 0208 	orr.w	r2, r2, #8
 800778c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	69da      	ldr	r2, [r3, #28]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f022 0204 	bic.w	r2, r2, #4
 800779c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	69d9      	ldr	r1, [r3, #28]
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	691a      	ldr	r2, [r3, #16]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	430a      	orrs	r2, r1
 80077ae:	61da      	str	r2, [r3, #28]
      break;
 80077b0:	e064      	b.n	800787c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	68b9      	ldr	r1, [r7, #8]
 80077b8:	4618      	mov	r0, r3
 80077ba:	f000 fb5b 	bl	8007e74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	69da      	ldr	r2, [r3, #28]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	69da      	ldr	r2, [r3, #28]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	69d9      	ldr	r1, [r3, #28]
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	021a      	lsls	r2, r3, #8
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	430a      	orrs	r2, r1
 80077f0:	61da      	str	r2, [r3, #28]
      break;
 80077f2:	e043      	b.n	800787c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	68b9      	ldr	r1, [r7, #8]
 80077fa:	4618      	mov	r0, r3
 80077fc:	f000 fb92 	bl	8007f24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f042 0208 	orr.w	r2, r2, #8
 800780e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f022 0204 	bic.w	r2, r2, #4
 800781e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	691a      	ldr	r2, [r3, #16]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	430a      	orrs	r2, r1
 8007830:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007832:	e023      	b.n	800787c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	68b9      	ldr	r1, [r7, #8]
 800783a:	4618      	mov	r0, r3
 800783c:	f000 fbc4 	bl	8007fc8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800784e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800785e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	021a      	lsls	r2, r3, #8
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	430a      	orrs	r2, r1
 8007872:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007874:	e002      	b.n	800787c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	75fb      	strb	r3, [r7, #23]
      break;
 800787a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2200      	movs	r2, #0
 8007880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007884:	7dfb      	ldrb	r3, [r7, #23]
}
 8007886:	4618      	mov	r0, r3
 8007888:	3718      	adds	r7, #24
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop

08007890 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800789a:	2300      	movs	r3, #0
 800789c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d101      	bne.n	80078ac <HAL_TIM_ConfigClockSource+0x1c>
 80078a8:	2302      	movs	r3, #2
 80078aa:	e0b4      	b.n	8007a16 <HAL_TIM_ConfigClockSource+0x186>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2202      	movs	r2, #2
 80078b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80078c4:	68ba      	ldr	r2, [r7, #8]
 80078c6:	4b56      	ldr	r3, [pc, #344]	; (8007a20 <HAL_TIM_ConfigClockSource+0x190>)
 80078c8:	4013      	ands	r3, r2
 80078ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	68ba      	ldr	r2, [r7, #8]
 80078da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078e4:	d03e      	beq.n	8007964 <HAL_TIM_ConfigClockSource+0xd4>
 80078e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078ea:	f200 8087 	bhi.w	80079fc <HAL_TIM_ConfigClockSource+0x16c>
 80078ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078f2:	f000 8086 	beq.w	8007a02 <HAL_TIM_ConfigClockSource+0x172>
 80078f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078fa:	d87f      	bhi.n	80079fc <HAL_TIM_ConfigClockSource+0x16c>
 80078fc:	2b70      	cmp	r3, #112	; 0x70
 80078fe:	d01a      	beq.n	8007936 <HAL_TIM_ConfigClockSource+0xa6>
 8007900:	2b70      	cmp	r3, #112	; 0x70
 8007902:	d87b      	bhi.n	80079fc <HAL_TIM_ConfigClockSource+0x16c>
 8007904:	2b60      	cmp	r3, #96	; 0x60
 8007906:	d050      	beq.n	80079aa <HAL_TIM_ConfigClockSource+0x11a>
 8007908:	2b60      	cmp	r3, #96	; 0x60
 800790a:	d877      	bhi.n	80079fc <HAL_TIM_ConfigClockSource+0x16c>
 800790c:	2b50      	cmp	r3, #80	; 0x50
 800790e:	d03c      	beq.n	800798a <HAL_TIM_ConfigClockSource+0xfa>
 8007910:	2b50      	cmp	r3, #80	; 0x50
 8007912:	d873      	bhi.n	80079fc <HAL_TIM_ConfigClockSource+0x16c>
 8007914:	2b40      	cmp	r3, #64	; 0x40
 8007916:	d058      	beq.n	80079ca <HAL_TIM_ConfigClockSource+0x13a>
 8007918:	2b40      	cmp	r3, #64	; 0x40
 800791a:	d86f      	bhi.n	80079fc <HAL_TIM_ConfigClockSource+0x16c>
 800791c:	2b30      	cmp	r3, #48	; 0x30
 800791e:	d064      	beq.n	80079ea <HAL_TIM_ConfigClockSource+0x15a>
 8007920:	2b30      	cmp	r3, #48	; 0x30
 8007922:	d86b      	bhi.n	80079fc <HAL_TIM_ConfigClockSource+0x16c>
 8007924:	2b20      	cmp	r3, #32
 8007926:	d060      	beq.n	80079ea <HAL_TIM_ConfigClockSource+0x15a>
 8007928:	2b20      	cmp	r3, #32
 800792a:	d867      	bhi.n	80079fc <HAL_TIM_ConfigClockSource+0x16c>
 800792c:	2b00      	cmp	r3, #0
 800792e:	d05c      	beq.n	80079ea <HAL_TIM_ConfigClockSource+0x15a>
 8007930:	2b10      	cmp	r3, #16
 8007932:	d05a      	beq.n	80079ea <HAL_TIM_ConfigClockSource+0x15a>
 8007934:	e062      	b.n	80079fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007946:	f000 fc0d 	bl	8008164 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007958:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68ba      	ldr	r2, [r7, #8]
 8007960:	609a      	str	r2, [r3, #8]
      break;
 8007962:	e04f      	b.n	8007a04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007974:	f000 fbf6 	bl	8008164 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	689a      	ldr	r2, [r3, #8]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007986:	609a      	str	r2, [r3, #8]
      break;
 8007988:	e03c      	b.n	8007a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007996:	461a      	mov	r2, r3
 8007998:	f000 fb6a 	bl	8008070 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2150      	movs	r1, #80	; 0x50
 80079a2:	4618      	mov	r0, r3
 80079a4:	f000 fbc3 	bl	800812e <TIM_ITRx_SetConfig>
      break;
 80079a8:	e02c      	b.n	8007a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80079b6:	461a      	mov	r2, r3
 80079b8:	f000 fb89 	bl	80080ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2160      	movs	r1, #96	; 0x60
 80079c2:	4618      	mov	r0, r3
 80079c4:	f000 fbb3 	bl	800812e <TIM_ITRx_SetConfig>
      break;
 80079c8:	e01c      	b.n	8007a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079d6:	461a      	mov	r2, r3
 80079d8:	f000 fb4a 	bl	8008070 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2140      	movs	r1, #64	; 0x40
 80079e2:	4618      	mov	r0, r3
 80079e4:	f000 fba3 	bl	800812e <TIM_ITRx_SetConfig>
      break;
 80079e8:	e00c      	b.n	8007a04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4619      	mov	r1, r3
 80079f4:	4610      	mov	r0, r2
 80079f6:	f000 fb9a 	bl	800812e <TIM_ITRx_SetConfig>
      break;
 80079fa:	e003      	b.n	8007a04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007a00:	e000      	b.n	8007a04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007a02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	fffeff88 	.word	0xfffeff88

08007a24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a2c:	bf00      	nop
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a40:	bf00      	nop
 8007a42:	370c      	adds	r7, #12
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a54:	bf00      	nop
 8007a56:	370c      	adds	r7, #12
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a68:	bf00      	nop
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a40      	ldr	r2, [pc, #256]	; (8007b88 <TIM_Base_SetConfig+0x114>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d013      	beq.n	8007ab4 <TIM_Base_SetConfig+0x40>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a92:	d00f      	beq.n	8007ab4 <TIM_Base_SetConfig+0x40>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4a3d      	ldr	r2, [pc, #244]	; (8007b8c <TIM_Base_SetConfig+0x118>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d00b      	beq.n	8007ab4 <TIM_Base_SetConfig+0x40>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	4a3c      	ldr	r2, [pc, #240]	; (8007b90 <TIM_Base_SetConfig+0x11c>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d007      	beq.n	8007ab4 <TIM_Base_SetConfig+0x40>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	4a3b      	ldr	r2, [pc, #236]	; (8007b94 <TIM_Base_SetConfig+0x120>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d003      	beq.n	8007ab4 <TIM_Base_SetConfig+0x40>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	4a3a      	ldr	r2, [pc, #232]	; (8007b98 <TIM_Base_SetConfig+0x124>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d108      	bne.n	8007ac6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a2f      	ldr	r2, [pc, #188]	; (8007b88 <TIM_Base_SetConfig+0x114>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d02b      	beq.n	8007b26 <TIM_Base_SetConfig+0xb2>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ad4:	d027      	beq.n	8007b26 <TIM_Base_SetConfig+0xb2>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a2c      	ldr	r2, [pc, #176]	; (8007b8c <TIM_Base_SetConfig+0x118>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d023      	beq.n	8007b26 <TIM_Base_SetConfig+0xb2>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a2b      	ldr	r2, [pc, #172]	; (8007b90 <TIM_Base_SetConfig+0x11c>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d01f      	beq.n	8007b26 <TIM_Base_SetConfig+0xb2>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4a2a      	ldr	r2, [pc, #168]	; (8007b94 <TIM_Base_SetConfig+0x120>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d01b      	beq.n	8007b26 <TIM_Base_SetConfig+0xb2>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a29      	ldr	r2, [pc, #164]	; (8007b98 <TIM_Base_SetConfig+0x124>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d017      	beq.n	8007b26 <TIM_Base_SetConfig+0xb2>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a28      	ldr	r2, [pc, #160]	; (8007b9c <TIM_Base_SetConfig+0x128>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d013      	beq.n	8007b26 <TIM_Base_SetConfig+0xb2>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a27      	ldr	r2, [pc, #156]	; (8007ba0 <TIM_Base_SetConfig+0x12c>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d00f      	beq.n	8007b26 <TIM_Base_SetConfig+0xb2>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4a26      	ldr	r2, [pc, #152]	; (8007ba4 <TIM_Base_SetConfig+0x130>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d00b      	beq.n	8007b26 <TIM_Base_SetConfig+0xb2>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a25      	ldr	r2, [pc, #148]	; (8007ba8 <TIM_Base_SetConfig+0x134>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d007      	beq.n	8007b26 <TIM_Base_SetConfig+0xb2>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a24      	ldr	r2, [pc, #144]	; (8007bac <TIM_Base_SetConfig+0x138>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d003      	beq.n	8007b26 <TIM_Base_SetConfig+0xb2>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a23      	ldr	r2, [pc, #140]	; (8007bb0 <TIM_Base_SetConfig+0x13c>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d108      	bne.n	8007b38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	695b      	ldr	r3, [r3, #20]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	689a      	ldr	r2, [r3, #8]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4a0a      	ldr	r2, [pc, #40]	; (8007b88 <TIM_Base_SetConfig+0x114>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d003      	beq.n	8007b6c <TIM_Base_SetConfig+0xf8>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4a0c      	ldr	r2, [pc, #48]	; (8007b98 <TIM_Base_SetConfig+0x124>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d103      	bne.n	8007b74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	691a      	ldr	r2, [r3, #16]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	615a      	str	r2, [r3, #20]
}
 8007b7a:	bf00      	nop
 8007b7c:	3714      	adds	r7, #20
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop
 8007b88:	40010000 	.word	0x40010000
 8007b8c:	40000400 	.word	0x40000400
 8007b90:	40000800 	.word	0x40000800
 8007b94:	40000c00 	.word	0x40000c00
 8007b98:	40010400 	.word	0x40010400
 8007b9c:	40014000 	.word	0x40014000
 8007ba0:	40014400 	.word	0x40014400
 8007ba4:	40014800 	.word	0x40014800
 8007ba8:	40001800 	.word	0x40001800
 8007bac:	40001c00 	.word	0x40001c00
 8007bb0:	40002000 	.word	0x40002000

08007bb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b087      	sub	sp, #28
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a1b      	ldr	r3, [r3, #32]
 8007bc2:	f023 0201 	bic.w	r2, r3, #1
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a1b      	ldr	r3, [r3, #32]
 8007bce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	699b      	ldr	r3, [r3, #24]
 8007bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	4b2b      	ldr	r3, [pc, #172]	; (8007c8c <TIM_OC1_SetConfig+0xd8>)
 8007be0:	4013      	ands	r3, r2
 8007be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f023 0303 	bic.w	r3, r3, #3
 8007bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	f023 0302 	bic.w	r3, r3, #2
 8007bfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	697a      	ldr	r2, [r7, #20]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4a21      	ldr	r2, [pc, #132]	; (8007c90 <TIM_OC1_SetConfig+0xdc>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d003      	beq.n	8007c18 <TIM_OC1_SetConfig+0x64>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4a20      	ldr	r2, [pc, #128]	; (8007c94 <TIM_OC1_SetConfig+0xe0>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d10c      	bne.n	8007c32 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	f023 0308 	bic.w	r3, r3, #8
 8007c1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	697a      	ldr	r2, [r7, #20]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	f023 0304 	bic.w	r3, r3, #4
 8007c30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a16      	ldr	r2, [pc, #88]	; (8007c90 <TIM_OC1_SetConfig+0xdc>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d003      	beq.n	8007c42 <TIM_OC1_SetConfig+0x8e>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a15      	ldr	r2, [pc, #84]	; (8007c94 <TIM_OC1_SetConfig+0xe0>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d111      	bne.n	8007c66 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	695b      	ldr	r3, [r3, #20]
 8007c56:	693a      	ldr	r2, [r7, #16]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	699b      	ldr	r3, [r3, #24]
 8007c60:	693a      	ldr	r2, [r7, #16]
 8007c62:	4313      	orrs	r3, r2
 8007c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	693a      	ldr	r2, [r7, #16]
 8007c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	685a      	ldr	r2, [r3, #4]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	697a      	ldr	r2, [r7, #20]
 8007c7e:	621a      	str	r2, [r3, #32]
}
 8007c80:	bf00      	nop
 8007c82:	371c      	adds	r7, #28
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr
 8007c8c:	fffeff8f 	.word	0xfffeff8f
 8007c90:	40010000 	.word	0x40010000
 8007c94:	40010400 	.word	0x40010400

08007c98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b087      	sub	sp, #28
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6a1b      	ldr	r3, [r3, #32]
 8007ca6:	f023 0210 	bic.w	r2, r3, #16
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a1b      	ldr	r3, [r3, #32]
 8007cb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	699b      	ldr	r3, [r3, #24]
 8007cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	4b2e      	ldr	r3, [pc, #184]	; (8007d7c <TIM_OC2_SetConfig+0xe4>)
 8007cc4:	4013      	ands	r3, r2
 8007cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	021b      	lsls	r3, r3, #8
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	f023 0320 	bic.w	r3, r3, #32
 8007ce2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	011b      	lsls	r3, r3, #4
 8007cea:	697a      	ldr	r2, [r7, #20]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a23      	ldr	r2, [pc, #140]	; (8007d80 <TIM_OC2_SetConfig+0xe8>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d003      	beq.n	8007d00 <TIM_OC2_SetConfig+0x68>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a22      	ldr	r2, [pc, #136]	; (8007d84 <TIM_OC2_SetConfig+0xec>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d10d      	bne.n	8007d1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	011b      	lsls	r3, r3, #4
 8007d0e:	697a      	ldr	r2, [r7, #20]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a18      	ldr	r2, [pc, #96]	; (8007d80 <TIM_OC2_SetConfig+0xe8>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d003      	beq.n	8007d2c <TIM_OC2_SetConfig+0x94>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a17      	ldr	r2, [pc, #92]	; (8007d84 <TIM_OC2_SetConfig+0xec>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d113      	bne.n	8007d54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	695b      	ldr	r3, [r3, #20]
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	693a      	ldr	r2, [r7, #16]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	699b      	ldr	r3, [r3, #24]
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	693a      	ldr	r2, [r7, #16]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	693a      	ldr	r2, [r7, #16]
 8007d58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	68fa      	ldr	r2, [r7, #12]
 8007d5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	685a      	ldr	r2, [r3, #4]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	697a      	ldr	r2, [r7, #20]
 8007d6c:	621a      	str	r2, [r3, #32]
}
 8007d6e:	bf00      	nop
 8007d70:	371c      	adds	r7, #28
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr
 8007d7a:	bf00      	nop
 8007d7c:	feff8fff 	.word	0xfeff8fff
 8007d80:	40010000 	.word	0x40010000
 8007d84:	40010400 	.word	0x40010400

08007d88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b087      	sub	sp, #28
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a1b      	ldr	r3, [r3, #32]
 8007d96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a1b      	ldr	r3, [r3, #32]
 8007da2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	69db      	ldr	r3, [r3, #28]
 8007dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007db0:	68fa      	ldr	r2, [r7, #12]
 8007db2:	4b2d      	ldr	r3, [pc, #180]	; (8007e68 <TIM_OC3_SetConfig+0xe0>)
 8007db4:	4013      	ands	r3, r2
 8007db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f023 0303 	bic.w	r3, r3, #3
 8007dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68fa      	ldr	r2, [r7, #12]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007dd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	021b      	lsls	r3, r3, #8
 8007dd8:	697a      	ldr	r2, [r7, #20]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4a22      	ldr	r2, [pc, #136]	; (8007e6c <TIM_OC3_SetConfig+0xe4>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d003      	beq.n	8007dee <TIM_OC3_SetConfig+0x66>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a21      	ldr	r2, [pc, #132]	; (8007e70 <TIM_OC3_SetConfig+0xe8>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d10d      	bne.n	8007e0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007df4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	021b      	lsls	r3, r3, #8
 8007dfc:	697a      	ldr	r2, [r7, #20]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a17      	ldr	r2, [pc, #92]	; (8007e6c <TIM_OC3_SetConfig+0xe4>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d003      	beq.n	8007e1a <TIM_OC3_SetConfig+0x92>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a16      	ldr	r2, [pc, #88]	; (8007e70 <TIM_OC3_SetConfig+0xe8>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d113      	bne.n	8007e42 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	695b      	ldr	r3, [r3, #20]
 8007e2e:	011b      	lsls	r3, r3, #4
 8007e30:	693a      	ldr	r2, [r7, #16]
 8007e32:	4313      	orrs	r3, r2
 8007e34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	699b      	ldr	r3, [r3, #24]
 8007e3a:	011b      	lsls	r3, r3, #4
 8007e3c:	693a      	ldr	r2, [r7, #16]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	693a      	ldr	r2, [r7, #16]
 8007e46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	68fa      	ldr	r2, [r7, #12]
 8007e4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	685a      	ldr	r2, [r3, #4]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	697a      	ldr	r2, [r7, #20]
 8007e5a:	621a      	str	r2, [r3, #32]
}
 8007e5c:	bf00      	nop
 8007e5e:	371c      	adds	r7, #28
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr
 8007e68:	fffeff8f 	.word	0xfffeff8f
 8007e6c:	40010000 	.word	0x40010000
 8007e70:	40010400 	.word	0x40010400

08007e74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b087      	sub	sp, #28
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a1b      	ldr	r3, [r3, #32]
 8007e82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a1b      	ldr	r3, [r3, #32]
 8007e8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	69db      	ldr	r3, [r3, #28]
 8007e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	4b1e      	ldr	r3, [pc, #120]	; (8007f18 <TIM_OC4_SetConfig+0xa4>)
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007eaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	021b      	lsls	r3, r3, #8
 8007eb2:	68fa      	ldr	r2, [r7, #12]
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ebe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	031b      	lsls	r3, r3, #12
 8007ec6:	693a      	ldr	r2, [r7, #16]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	4a13      	ldr	r2, [pc, #76]	; (8007f1c <TIM_OC4_SetConfig+0xa8>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d003      	beq.n	8007edc <TIM_OC4_SetConfig+0x68>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	4a12      	ldr	r2, [pc, #72]	; (8007f20 <TIM_OC4_SetConfig+0xac>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d109      	bne.n	8007ef0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ee2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	695b      	ldr	r3, [r3, #20]
 8007ee8:	019b      	lsls	r3, r3, #6
 8007eea:	697a      	ldr	r2, [r7, #20]
 8007eec:	4313      	orrs	r3, r2
 8007eee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	697a      	ldr	r2, [r7, #20]
 8007ef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	685a      	ldr	r2, [r3, #4]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	693a      	ldr	r2, [r7, #16]
 8007f08:	621a      	str	r2, [r3, #32]
}
 8007f0a:	bf00      	nop
 8007f0c:	371c      	adds	r7, #28
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr
 8007f16:	bf00      	nop
 8007f18:	feff8fff 	.word	0xfeff8fff
 8007f1c:	40010000 	.word	0x40010000
 8007f20:	40010400 	.word	0x40010400

08007f24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b087      	sub	sp, #28
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6a1b      	ldr	r3, [r3, #32]
 8007f32:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a1b      	ldr	r3, [r3, #32]
 8007f3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	4b1b      	ldr	r3, [pc, #108]	; (8007fbc <TIM_OC5_SetConfig+0x98>)
 8007f50:	4013      	ands	r3, r2
 8007f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68fa      	ldr	r2, [r7, #12]
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007f64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	041b      	lsls	r3, r3, #16
 8007f6c:	693a      	ldr	r2, [r7, #16]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4a12      	ldr	r2, [pc, #72]	; (8007fc0 <TIM_OC5_SetConfig+0x9c>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d003      	beq.n	8007f82 <TIM_OC5_SetConfig+0x5e>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4a11      	ldr	r2, [pc, #68]	; (8007fc4 <TIM_OC5_SetConfig+0xa0>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d109      	bne.n	8007f96 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	695b      	ldr	r3, [r3, #20]
 8007f8e:	021b      	lsls	r3, r3, #8
 8007f90:	697a      	ldr	r2, [r7, #20]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	697a      	ldr	r2, [r7, #20]
 8007f9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	685a      	ldr	r2, [r3, #4]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	693a      	ldr	r2, [r7, #16]
 8007fae:	621a      	str	r2, [r3, #32]
}
 8007fb0:	bf00      	nop
 8007fb2:	371c      	adds	r7, #28
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr
 8007fbc:	fffeff8f 	.word	0xfffeff8f
 8007fc0:	40010000 	.word	0x40010000
 8007fc4:	40010400 	.word	0x40010400

08007fc8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b087      	sub	sp, #28
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6a1b      	ldr	r3, [r3, #32]
 8007fd6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6a1b      	ldr	r3, [r3, #32]
 8007fe2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007ff0:	68fa      	ldr	r2, [r7, #12]
 8007ff2:	4b1c      	ldr	r3, [pc, #112]	; (8008064 <TIM_OC6_SetConfig+0x9c>)
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	021b      	lsls	r3, r3, #8
 8007ffe:	68fa      	ldr	r2, [r7, #12]
 8008000:	4313      	orrs	r3, r2
 8008002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800800a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	051b      	lsls	r3, r3, #20
 8008012:	693a      	ldr	r2, [r7, #16]
 8008014:	4313      	orrs	r3, r2
 8008016:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	4a13      	ldr	r2, [pc, #76]	; (8008068 <TIM_OC6_SetConfig+0xa0>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d003      	beq.n	8008028 <TIM_OC6_SetConfig+0x60>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	4a12      	ldr	r2, [pc, #72]	; (800806c <TIM_OC6_SetConfig+0xa4>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d109      	bne.n	800803c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800802e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	695b      	ldr	r3, [r3, #20]
 8008034:	029b      	lsls	r3, r3, #10
 8008036:	697a      	ldr	r2, [r7, #20]
 8008038:	4313      	orrs	r3, r2
 800803a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	697a      	ldr	r2, [r7, #20]
 8008040:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	68fa      	ldr	r2, [r7, #12]
 8008046:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	685a      	ldr	r2, [r3, #4]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	693a      	ldr	r2, [r7, #16]
 8008054:	621a      	str	r2, [r3, #32]
}
 8008056:	bf00      	nop
 8008058:	371c      	adds	r7, #28
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	feff8fff 	.word	0xfeff8fff
 8008068:	40010000 	.word	0x40010000
 800806c:	40010400 	.word	0x40010400

08008070 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008070:	b480      	push	{r7}
 8008072:	b087      	sub	sp, #28
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6a1b      	ldr	r3, [r3, #32]
 8008080:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6a1b      	ldr	r3, [r3, #32]
 8008086:	f023 0201 	bic.w	r2, r3, #1
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	699b      	ldr	r3, [r3, #24]
 8008092:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800809a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	011b      	lsls	r3, r3, #4
 80080a0:	693a      	ldr	r2, [r7, #16]
 80080a2:	4313      	orrs	r3, r2
 80080a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	f023 030a 	bic.w	r3, r3, #10
 80080ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80080ae:	697a      	ldr	r2, [r7, #20]
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	693a      	ldr	r2, [r7, #16]
 80080ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	697a      	ldr	r2, [r7, #20]
 80080c0:	621a      	str	r2, [r3, #32]
}
 80080c2:	bf00      	nop
 80080c4:	371c      	adds	r7, #28
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr

080080ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080ce:	b480      	push	{r7}
 80080d0:	b087      	sub	sp, #28
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	60f8      	str	r0, [r7, #12]
 80080d6:	60b9      	str	r1, [r7, #8]
 80080d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	6a1b      	ldr	r3, [r3, #32]
 80080de:	f023 0210 	bic.w	r2, r3, #16
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	699b      	ldr	r3, [r3, #24]
 80080ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6a1b      	ldr	r3, [r3, #32]
 80080f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	031b      	lsls	r3, r3, #12
 80080fe:	697a      	ldr	r2, [r7, #20]
 8008100:	4313      	orrs	r3, r2
 8008102:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800810a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	011b      	lsls	r3, r3, #4
 8008110:	693a      	ldr	r2, [r7, #16]
 8008112:	4313      	orrs	r3, r2
 8008114:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	697a      	ldr	r2, [r7, #20]
 800811a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	693a      	ldr	r2, [r7, #16]
 8008120:	621a      	str	r2, [r3, #32]
}
 8008122:	bf00      	nop
 8008124:	371c      	adds	r7, #28
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr

0800812e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800812e:	b480      	push	{r7}
 8008130:	b085      	sub	sp, #20
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
 8008136:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008144:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008146:	683a      	ldr	r2, [r7, #0]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	4313      	orrs	r3, r2
 800814c:	f043 0307 	orr.w	r3, r3, #7
 8008150:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	68fa      	ldr	r2, [r7, #12]
 8008156:	609a      	str	r2, [r3, #8]
}
 8008158:	bf00      	nop
 800815a:	3714      	adds	r7, #20
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008164:	b480      	push	{r7}
 8008166:	b087      	sub	sp, #28
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	607a      	str	r2, [r7, #4]
 8008170:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800817e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	021a      	lsls	r2, r3, #8
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	431a      	orrs	r2, r3
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	4313      	orrs	r3, r2
 800818c:	697a      	ldr	r2, [r7, #20]
 800818e:	4313      	orrs	r3, r2
 8008190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	697a      	ldr	r2, [r7, #20]
 8008196:	609a      	str	r2, [r3, #8]
}
 8008198:	bf00      	nop
 800819a:	371c      	adds	r7, #28
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b087      	sub	sp, #28
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	60b9      	str	r1, [r7, #8]
 80081ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	f003 031f 	and.w	r3, r3, #31
 80081b6:	2201      	movs	r2, #1
 80081b8:	fa02 f303 	lsl.w	r3, r2, r3
 80081bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6a1a      	ldr	r2, [r3, #32]
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	43db      	mvns	r3, r3
 80081c6:	401a      	ands	r2, r3
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6a1a      	ldr	r2, [r3, #32]
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	f003 031f 	and.w	r3, r3, #31
 80081d6:	6879      	ldr	r1, [r7, #4]
 80081d8:	fa01 f303 	lsl.w	r3, r1, r3
 80081dc:	431a      	orrs	r2, r3
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	621a      	str	r2, [r3, #32]
}
 80081e2:	bf00      	nop
 80081e4:	371c      	adds	r7, #28
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
	...

080081f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008200:	2b01      	cmp	r3, #1
 8008202:	d101      	bne.n	8008208 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008204:	2302      	movs	r3, #2
 8008206:	e06d      	b.n	80082e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2202      	movs	r2, #2
 8008214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a30      	ldr	r2, [pc, #192]	; (80082f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d004      	beq.n	800823c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a2f      	ldr	r2, [pc, #188]	; (80082f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d108      	bne.n	800824e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008242:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	68fa      	ldr	r2, [r7, #12]
 800824a:	4313      	orrs	r3, r2
 800824c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008254:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	68fa      	ldr	r2, [r7, #12]
 800825c:	4313      	orrs	r3, r2
 800825e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a20      	ldr	r2, [pc, #128]	; (80082f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d022      	beq.n	80082b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800827a:	d01d      	beq.n	80082b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a1d      	ldr	r2, [pc, #116]	; (80082f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d018      	beq.n	80082b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a1c      	ldr	r2, [pc, #112]	; (80082fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d013      	beq.n	80082b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a1a      	ldr	r2, [pc, #104]	; (8008300 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d00e      	beq.n	80082b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a15      	ldr	r2, [pc, #84]	; (80082f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d009      	beq.n	80082b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a16      	ldr	r2, [pc, #88]	; (8008304 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d004      	beq.n	80082b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a15      	ldr	r2, [pc, #84]	; (8008308 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d10c      	bne.n	80082d2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	68ba      	ldr	r2, [r7, #8]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	68ba      	ldr	r2, [r7, #8]
 80082d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2201      	movs	r2, #1
 80082d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082e2:	2300      	movs	r3, #0
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3714      	adds	r7, #20
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr
 80082f0:	40010000 	.word	0x40010000
 80082f4:	40010400 	.word	0x40010400
 80082f8:	40000400 	.word	0x40000400
 80082fc:	40000800 	.word	0x40000800
 8008300:	40000c00 	.word	0x40000c00
 8008304:	40014000 	.word	0x40014000
 8008308:	40001800 	.word	0x40001800

0800830c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800830c:	b480      	push	{r7}
 800830e:	b083      	sub	sp, #12
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008314:	bf00      	nop
 8008316:	370c      	adds	r7, #12
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr

08008320 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008328:	bf00      	nop
 800832a:	370c      	adds	r7, #12
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800833c:	bf00      	nop
 800833e:	370c      	adds	r7, #12
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d101      	bne.n	800835a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	e040      	b.n	80083dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800835e:	2b00      	cmp	r3, #0
 8008360:	d106      	bne.n	8008370 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f7fa fcbe 	bl	8002cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2224      	movs	r2, #36	; 0x24
 8008374:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f022 0201 	bic.w	r2, r2, #1
 8008384:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 fb84 	bl	8008a94 <UART_SetConfig>
 800838c:	4603      	mov	r3, r0
 800838e:	2b01      	cmp	r3, #1
 8008390:	d101      	bne.n	8008396 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	e022      	b.n	80083dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839a:	2b00      	cmp	r3, #0
 800839c:	d002      	beq.n	80083a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 fddc 	bl	8008f5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	685a      	ldr	r2, [r3, #4]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80083b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	689a      	ldr	r2, [r3, #8]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80083c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f042 0201 	orr.w	r2, r2, #1
 80083d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 fe63 	bl	80090a0 <UART_CheckIdleState>
 80083da:	4603      	mov	r3, r0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3708      	adds	r7, #8
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b08b      	sub	sp, #44	; 0x2c
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	4613      	mov	r3, r2
 80083f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083f6:	2b20      	cmp	r3, #32
 80083f8:	d147      	bne.n	800848a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d002      	beq.n	8008406 <HAL_UART_Transmit_IT+0x22>
 8008400:	88fb      	ldrh	r3, [r7, #6]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d101      	bne.n	800840a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	e040      	b.n	800848c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	68ba      	ldr	r2, [r7, #8]
 800840e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	88fa      	ldrh	r2, [r7, #6]
 8008414:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	88fa      	ldrh	r2, [r7, #6]
 800841c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2200      	movs	r2, #0
 8008424:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2200      	movs	r2, #0
 800842a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2221      	movs	r2, #33	; 0x21
 8008432:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800843c:	d107      	bne.n	800844e <HAL_UART_Transmit_IT+0x6a>
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	691b      	ldr	r3, [r3, #16]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d103      	bne.n	800844e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	4a13      	ldr	r2, [pc, #76]	; (8008498 <HAL_UART_Transmit_IT+0xb4>)
 800844a:	66da      	str	r2, [r3, #108]	; 0x6c
 800844c:	e002      	b.n	8008454 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	4a12      	ldr	r2, [pc, #72]	; (800849c <HAL_UART_Transmit_IT+0xb8>)
 8008452:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	e853 3f00 	ldrex	r3, [r3]
 8008460:	613b      	str	r3, [r7, #16]
   return(result);
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008468:	627b      	str	r3, [r7, #36]	; 0x24
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	461a      	mov	r2, r3
 8008470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008472:	623b      	str	r3, [r7, #32]
 8008474:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008476:	69f9      	ldr	r1, [r7, #28]
 8008478:	6a3a      	ldr	r2, [r7, #32]
 800847a:	e841 2300 	strex	r3, r2, [r1]
 800847e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d1e6      	bne.n	8008454 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8008486:	2300      	movs	r3, #0
 8008488:	e000      	b.n	800848c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800848a:	2302      	movs	r3, #2
  }
}
 800848c:	4618      	mov	r0, r3
 800848e:	372c      	adds	r7, #44	; 0x2c
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr
 8008498:	080097b7 	.word	0x080097b7
 800849c:	08009701 	.word	0x08009701

080084a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b0ba      	sub	sp, #232	; 0xe8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	69db      	ldr	r3, [r3, #28]
 80084ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80084c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80084ca:	f640 030f 	movw	r3, #2063	; 0x80f
 80084ce:	4013      	ands	r3, r2
 80084d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80084d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d115      	bne.n	8008508 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80084dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084e0:	f003 0320 	and.w	r3, r3, #32
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d00f      	beq.n	8008508 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80084e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084ec:	f003 0320 	and.w	r3, r3, #32
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d009      	beq.n	8008508 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	f000 8297 	beq.w	8008a2c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	4798      	blx	r3
      }
      return;
 8008506:	e291      	b.n	8008a2c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008508:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800850c:	2b00      	cmp	r3, #0
 800850e:	f000 8117 	beq.w	8008740 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008512:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008516:	f003 0301 	and.w	r3, r3, #1
 800851a:	2b00      	cmp	r3, #0
 800851c:	d106      	bne.n	800852c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800851e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008522:	4b85      	ldr	r3, [pc, #532]	; (8008738 <HAL_UART_IRQHandler+0x298>)
 8008524:	4013      	ands	r3, r2
 8008526:	2b00      	cmp	r3, #0
 8008528:	f000 810a 	beq.w	8008740 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800852c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008530:	f003 0301 	and.w	r3, r3, #1
 8008534:	2b00      	cmp	r3, #0
 8008536:	d011      	beq.n	800855c <HAL_UART_IRQHandler+0xbc>
 8008538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800853c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008540:	2b00      	cmp	r3, #0
 8008542:	d00b      	beq.n	800855c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2201      	movs	r2, #1
 800854a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008552:	f043 0201 	orr.w	r2, r3, #1
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800855c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008560:	f003 0302 	and.w	r3, r3, #2
 8008564:	2b00      	cmp	r3, #0
 8008566:	d011      	beq.n	800858c <HAL_UART_IRQHandler+0xec>
 8008568:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800856c:	f003 0301 	and.w	r3, r3, #1
 8008570:	2b00      	cmp	r3, #0
 8008572:	d00b      	beq.n	800858c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2202      	movs	r2, #2
 800857a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008582:	f043 0204 	orr.w	r2, r3, #4
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800858c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008590:	f003 0304 	and.w	r3, r3, #4
 8008594:	2b00      	cmp	r3, #0
 8008596:	d011      	beq.n	80085bc <HAL_UART_IRQHandler+0x11c>
 8008598:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800859c:	f003 0301 	and.w	r3, r3, #1
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00b      	beq.n	80085bc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2204      	movs	r2, #4
 80085aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085b2:	f043 0202 	orr.w	r2, r3, #2
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80085bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085c0:	f003 0308 	and.w	r3, r3, #8
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d017      	beq.n	80085f8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80085c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085cc:	f003 0320 	and.w	r3, r3, #32
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d105      	bne.n	80085e0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80085d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085d8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00b      	beq.n	80085f8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2208      	movs	r2, #8
 80085e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085ee:	f043 0208 	orr.w	r2, r3, #8
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80085f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008600:	2b00      	cmp	r3, #0
 8008602:	d012      	beq.n	800862a <HAL_UART_IRQHandler+0x18a>
 8008604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008608:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800860c:	2b00      	cmp	r3, #0
 800860e:	d00c      	beq.n	800862a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008618:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008620:	f043 0220 	orr.w	r2, r3, #32
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008630:	2b00      	cmp	r3, #0
 8008632:	f000 81fd 	beq.w	8008a30 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800863a:	f003 0320 	and.w	r3, r3, #32
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00d      	beq.n	800865e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008642:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008646:	f003 0320 	and.w	r3, r3, #32
 800864a:	2b00      	cmp	r3, #0
 800864c:	d007      	beq.n	800865e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008652:	2b00      	cmp	r3, #0
 8008654:	d003      	beq.n	800865e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008664:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008672:	2b40      	cmp	r3, #64	; 0x40
 8008674:	d005      	beq.n	8008682 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008676:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800867a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800867e:	2b00      	cmp	r3, #0
 8008680:	d04f      	beq.n	8008722 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 fed0 	bl	8009428 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008692:	2b40      	cmp	r3, #64	; 0x40
 8008694:	d141      	bne.n	800871a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	3308      	adds	r3, #8
 800869c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80086a4:	e853 3f00 	ldrex	r3, [r3]
 80086a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80086ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80086b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	3308      	adds	r3, #8
 80086be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80086c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80086c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80086ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80086d2:	e841 2300 	strex	r3, r2, [r1]
 80086d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80086da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d1d9      	bne.n	8008696 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d013      	beq.n	8008712 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086ee:	4a13      	ldr	r2, [pc, #76]	; (800873c <HAL_UART_IRQHandler+0x29c>)
 80086f0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7fb f8ca 	bl	8003890 <HAL_DMA_Abort_IT>
 80086fc:	4603      	mov	r3, r0
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d017      	beq.n	8008732 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800870c:	4610      	mov	r0, r2
 800870e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008710:	e00f      	b.n	8008732 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 f9b4 	bl	8008a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008718:	e00b      	b.n	8008732 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 f9b0 	bl	8008a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008720:	e007      	b.n	8008732 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 f9ac 	bl	8008a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2200      	movs	r2, #0
 800872c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8008730:	e17e      	b.n	8008a30 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008732:	bf00      	nop
    return;
 8008734:	e17c      	b.n	8008a30 <HAL_UART_IRQHandler+0x590>
 8008736:	bf00      	nop
 8008738:	04000120 	.word	0x04000120
 800873c:	080096d5 	.word	0x080096d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008744:	2b01      	cmp	r3, #1
 8008746:	f040 814c 	bne.w	80089e2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800874a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800874e:	f003 0310 	and.w	r3, r3, #16
 8008752:	2b00      	cmp	r3, #0
 8008754:	f000 8145 	beq.w	80089e2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800875c:	f003 0310 	and.w	r3, r3, #16
 8008760:	2b00      	cmp	r3, #0
 8008762:	f000 813e 	beq.w	80089e2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2210      	movs	r2, #16
 800876c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008778:	2b40      	cmp	r3, #64	; 0x40
 800877a:	f040 80b6 	bne.w	80088ea <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800878a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800878e:	2b00      	cmp	r3, #0
 8008790:	f000 8150 	beq.w	8008a34 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800879a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800879e:	429a      	cmp	r2, r3
 80087a0:	f080 8148 	bcs.w	8008a34 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80087aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087b2:	69db      	ldr	r3, [r3, #28]
 80087b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087b8:	f000 8086 	beq.w	80088c8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80087c8:	e853 3f00 	ldrex	r3, [r3]
 80087cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80087d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80087d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	461a      	mov	r2, r3
 80087e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80087e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80087ea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80087f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80087f6:	e841 2300 	strex	r3, r2, [r1]
 80087fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80087fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008802:	2b00      	cmp	r3, #0
 8008804:	d1da      	bne.n	80087bc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	3308      	adds	r3, #8
 800880c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008810:	e853 3f00 	ldrex	r3, [r3]
 8008814:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008816:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008818:	f023 0301 	bic.w	r3, r3, #1
 800881c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	3308      	adds	r3, #8
 8008826:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800882a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800882e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008830:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008832:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008836:	e841 2300 	strex	r3, r2, [r1]
 800883a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800883c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1e1      	bne.n	8008806 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	3308      	adds	r3, #8
 8008848:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800884a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800884c:	e853 3f00 	ldrex	r3, [r3]
 8008850:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008852:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008854:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008858:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	3308      	adds	r3, #8
 8008862:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008866:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008868:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800886a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800886c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800886e:	e841 2300 	strex	r3, r2, [r1]
 8008872:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008874:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008876:	2b00      	cmp	r3, #0
 8008878:	d1e3      	bne.n	8008842 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2220      	movs	r2, #32
 800887e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800888e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008890:	e853 3f00 	ldrex	r3, [r3]
 8008894:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008898:	f023 0310 	bic.w	r3, r3, #16
 800889c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	461a      	mov	r2, r3
 80088a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80088ac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80088b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80088b2:	e841 2300 	strex	r3, r2, [r1]
 80088b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80088b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d1e4      	bne.n	8008888 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7fa ff74 	bl	80037b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2202      	movs	r2, #2
 80088cc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80088da:	b29b      	uxth	r3, r3
 80088dc:	1ad3      	subs	r3, r2, r3
 80088de:	b29b      	uxth	r3, r3
 80088e0:	4619      	mov	r1, r3
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f7f9 fe22 	bl	800252c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80088e8:	e0a4      	b.n	8008a34 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	1ad3      	subs	r3, r2, r3
 80088fa:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008904:	b29b      	uxth	r3, r3
 8008906:	2b00      	cmp	r3, #0
 8008908:	f000 8096 	beq.w	8008a38 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800890c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008910:	2b00      	cmp	r3, #0
 8008912:	f000 8091 	beq.w	8008a38 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800891c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800891e:	e853 3f00 	ldrex	r3, [r3]
 8008922:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008926:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800892a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	461a      	mov	r2, r3
 8008934:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008938:	647b      	str	r3, [r7, #68]	; 0x44
 800893a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800893c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800893e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008940:	e841 2300 	strex	r3, r2, [r1]
 8008944:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008948:	2b00      	cmp	r3, #0
 800894a:	d1e4      	bne.n	8008916 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	3308      	adds	r3, #8
 8008952:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008956:	e853 3f00 	ldrex	r3, [r3]
 800895a:	623b      	str	r3, [r7, #32]
   return(result);
 800895c:	6a3b      	ldr	r3, [r7, #32]
 800895e:	f023 0301 	bic.w	r3, r3, #1
 8008962:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	3308      	adds	r3, #8
 800896c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008970:	633a      	str	r2, [r7, #48]	; 0x30
 8008972:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008974:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008976:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008978:	e841 2300 	strex	r3, r2, [r1]
 800897c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800897e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008980:	2b00      	cmp	r3, #0
 8008982:	d1e3      	bne.n	800894c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2220      	movs	r2, #32
 8008988:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	e853 3f00 	ldrex	r3, [r3]
 80089a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f023 0310 	bic.w	r3, r3, #16
 80089ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	461a      	mov	r2, r3
 80089b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80089ba:	61fb      	str	r3, [r7, #28]
 80089bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089be:	69b9      	ldr	r1, [r7, #24]
 80089c0:	69fa      	ldr	r2, [r7, #28]
 80089c2:	e841 2300 	strex	r3, r2, [r1]
 80089c6:	617b      	str	r3, [r7, #20]
   return(result);
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d1e4      	bne.n	8008998 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2202      	movs	r2, #2
 80089d2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80089d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80089d8:	4619      	mov	r1, r3
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f7f9 fda6 	bl	800252c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80089e0:	e02a      	b.n	8008a38 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80089e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00e      	beq.n	8008a0c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80089ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d008      	beq.n	8008a0c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d01c      	beq.n	8008a3c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	4798      	blx	r3
    }
    return;
 8008a0a:	e017      	b.n	8008a3c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d012      	beq.n	8008a3e <HAL_UART_IRQHandler+0x59e>
 8008a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d00c      	beq.n	8008a3e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 ff26 	bl	8009876 <UART_EndTransmit_IT>
    return;
 8008a2a:	e008      	b.n	8008a3e <HAL_UART_IRQHandler+0x59e>
      return;
 8008a2c:	bf00      	nop
 8008a2e:	e006      	b.n	8008a3e <HAL_UART_IRQHandler+0x59e>
    return;
 8008a30:	bf00      	nop
 8008a32:	e004      	b.n	8008a3e <HAL_UART_IRQHandler+0x59e>
      return;
 8008a34:	bf00      	nop
 8008a36:	e002      	b.n	8008a3e <HAL_UART_IRQHandler+0x59e>
      return;
 8008a38:	bf00      	nop
 8008a3a:	e000      	b.n	8008a3e <HAL_UART_IRQHandler+0x59e>
    return;
 8008a3c:	bf00      	nop
  }

}
 8008a3e:	37e8      	adds	r7, #232	; 0xe8
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008a4c:	bf00      	nop
 8008a4e:	370c      	adds	r7, #12
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008a60:	bf00      	nop
 8008a62:	370c      	adds	r7, #12
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008a74:	bf00      	nop
 8008a76:	370c      	adds	r7, #12
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008a88:	bf00      	nop
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b088      	sub	sp, #32
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	689a      	ldr	r2, [r3, #8]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	431a      	orrs	r2, r3
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	695b      	ldr	r3, [r3, #20]
 8008aae:	431a      	orrs	r2, r3
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	69db      	ldr	r3, [r3, #28]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	4ba6      	ldr	r3, [pc, #664]	; (8008d58 <UART_SetConfig+0x2c4>)
 8008ac0:	4013      	ands	r3, r2
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	6812      	ldr	r2, [r2, #0]
 8008ac6:	6979      	ldr	r1, [r7, #20]
 8008ac8:	430b      	orrs	r3, r1
 8008aca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	68da      	ldr	r2, [r3, #12]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	430a      	orrs	r2, r1
 8008ae0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	699b      	ldr	r3, [r3, #24]
 8008ae6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a1b      	ldr	r3, [r3, #32]
 8008aec:	697a      	ldr	r2, [r7, #20]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	697a      	ldr	r2, [r7, #20]
 8008b02:	430a      	orrs	r2, r1
 8008b04:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a94      	ldr	r2, [pc, #592]	; (8008d5c <UART_SetConfig+0x2c8>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d120      	bne.n	8008b52 <UART_SetConfig+0xbe>
 8008b10:	4b93      	ldr	r3, [pc, #588]	; (8008d60 <UART_SetConfig+0x2cc>)
 8008b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b16:	f003 0303 	and.w	r3, r3, #3
 8008b1a:	2b03      	cmp	r3, #3
 8008b1c:	d816      	bhi.n	8008b4c <UART_SetConfig+0xb8>
 8008b1e:	a201      	add	r2, pc, #4	; (adr r2, 8008b24 <UART_SetConfig+0x90>)
 8008b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b24:	08008b35 	.word	0x08008b35
 8008b28:	08008b41 	.word	0x08008b41
 8008b2c:	08008b3b 	.word	0x08008b3b
 8008b30:	08008b47 	.word	0x08008b47
 8008b34:	2301      	movs	r3, #1
 8008b36:	77fb      	strb	r3, [r7, #31]
 8008b38:	e150      	b.n	8008ddc <UART_SetConfig+0x348>
 8008b3a:	2302      	movs	r3, #2
 8008b3c:	77fb      	strb	r3, [r7, #31]
 8008b3e:	e14d      	b.n	8008ddc <UART_SetConfig+0x348>
 8008b40:	2304      	movs	r3, #4
 8008b42:	77fb      	strb	r3, [r7, #31]
 8008b44:	e14a      	b.n	8008ddc <UART_SetConfig+0x348>
 8008b46:	2308      	movs	r3, #8
 8008b48:	77fb      	strb	r3, [r7, #31]
 8008b4a:	e147      	b.n	8008ddc <UART_SetConfig+0x348>
 8008b4c:	2310      	movs	r3, #16
 8008b4e:	77fb      	strb	r3, [r7, #31]
 8008b50:	e144      	b.n	8008ddc <UART_SetConfig+0x348>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a83      	ldr	r2, [pc, #524]	; (8008d64 <UART_SetConfig+0x2d0>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d132      	bne.n	8008bc2 <UART_SetConfig+0x12e>
 8008b5c:	4b80      	ldr	r3, [pc, #512]	; (8008d60 <UART_SetConfig+0x2cc>)
 8008b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b62:	f003 030c 	and.w	r3, r3, #12
 8008b66:	2b0c      	cmp	r3, #12
 8008b68:	d828      	bhi.n	8008bbc <UART_SetConfig+0x128>
 8008b6a:	a201      	add	r2, pc, #4	; (adr r2, 8008b70 <UART_SetConfig+0xdc>)
 8008b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b70:	08008ba5 	.word	0x08008ba5
 8008b74:	08008bbd 	.word	0x08008bbd
 8008b78:	08008bbd 	.word	0x08008bbd
 8008b7c:	08008bbd 	.word	0x08008bbd
 8008b80:	08008bb1 	.word	0x08008bb1
 8008b84:	08008bbd 	.word	0x08008bbd
 8008b88:	08008bbd 	.word	0x08008bbd
 8008b8c:	08008bbd 	.word	0x08008bbd
 8008b90:	08008bab 	.word	0x08008bab
 8008b94:	08008bbd 	.word	0x08008bbd
 8008b98:	08008bbd 	.word	0x08008bbd
 8008b9c:	08008bbd 	.word	0x08008bbd
 8008ba0:	08008bb7 	.word	0x08008bb7
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	77fb      	strb	r3, [r7, #31]
 8008ba8:	e118      	b.n	8008ddc <UART_SetConfig+0x348>
 8008baa:	2302      	movs	r3, #2
 8008bac:	77fb      	strb	r3, [r7, #31]
 8008bae:	e115      	b.n	8008ddc <UART_SetConfig+0x348>
 8008bb0:	2304      	movs	r3, #4
 8008bb2:	77fb      	strb	r3, [r7, #31]
 8008bb4:	e112      	b.n	8008ddc <UART_SetConfig+0x348>
 8008bb6:	2308      	movs	r3, #8
 8008bb8:	77fb      	strb	r3, [r7, #31]
 8008bba:	e10f      	b.n	8008ddc <UART_SetConfig+0x348>
 8008bbc:	2310      	movs	r3, #16
 8008bbe:	77fb      	strb	r3, [r7, #31]
 8008bc0:	e10c      	b.n	8008ddc <UART_SetConfig+0x348>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a68      	ldr	r2, [pc, #416]	; (8008d68 <UART_SetConfig+0x2d4>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d120      	bne.n	8008c0e <UART_SetConfig+0x17a>
 8008bcc:	4b64      	ldr	r3, [pc, #400]	; (8008d60 <UART_SetConfig+0x2cc>)
 8008bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bd2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008bd6:	2b30      	cmp	r3, #48	; 0x30
 8008bd8:	d013      	beq.n	8008c02 <UART_SetConfig+0x16e>
 8008bda:	2b30      	cmp	r3, #48	; 0x30
 8008bdc:	d814      	bhi.n	8008c08 <UART_SetConfig+0x174>
 8008bde:	2b20      	cmp	r3, #32
 8008be0:	d009      	beq.n	8008bf6 <UART_SetConfig+0x162>
 8008be2:	2b20      	cmp	r3, #32
 8008be4:	d810      	bhi.n	8008c08 <UART_SetConfig+0x174>
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d002      	beq.n	8008bf0 <UART_SetConfig+0x15c>
 8008bea:	2b10      	cmp	r3, #16
 8008bec:	d006      	beq.n	8008bfc <UART_SetConfig+0x168>
 8008bee:	e00b      	b.n	8008c08 <UART_SetConfig+0x174>
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	77fb      	strb	r3, [r7, #31]
 8008bf4:	e0f2      	b.n	8008ddc <UART_SetConfig+0x348>
 8008bf6:	2302      	movs	r3, #2
 8008bf8:	77fb      	strb	r3, [r7, #31]
 8008bfa:	e0ef      	b.n	8008ddc <UART_SetConfig+0x348>
 8008bfc:	2304      	movs	r3, #4
 8008bfe:	77fb      	strb	r3, [r7, #31]
 8008c00:	e0ec      	b.n	8008ddc <UART_SetConfig+0x348>
 8008c02:	2308      	movs	r3, #8
 8008c04:	77fb      	strb	r3, [r7, #31]
 8008c06:	e0e9      	b.n	8008ddc <UART_SetConfig+0x348>
 8008c08:	2310      	movs	r3, #16
 8008c0a:	77fb      	strb	r3, [r7, #31]
 8008c0c:	e0e6      	b.n	8008ddc <UART_SetConfig+0x348>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a56      	ldr	r2, [pc, #344]	; (8008d6c <UART_SetConfig+0x2d8>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d120      	bne.n	8008c5a <UART_SetConfig+0x1c6>
 8008c18:	4b51      	ldr	r3, [pc, #324]	; (8008d60 <UART_SetConfig+0x2cc>)
 8008c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008c22:	2bc0      	cmp	r3, #192	; 0xc0
 8008c24:	d013      	beq.n	8008c4e <UART_SetConfig+0x1ba>
 8008c26:	2bc0      	cmp	r3, #192	; 0xc0
 8008c28:	d814      	bhi.n	8008c54 <UART_SetConfig+0x1c0>
 8008c2a:	2b80      	cmp	r3, #128	; 0x80
 8008c2c:	d009      	beq.n	8008c42 <UART_SetConfig+0x1ae>
 8008c2e:	2b80      	cmp	r3, #128	; 0x80
 8008c30:	d810      	bhi.n	8008c54 <UART_SetConfig+0x1c0>
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d002      	beq.n	8008c3c <UART_SetConfig+0x1a8>
 8008c36:	2b40      	cmp	r3, #64	; 0x40
 8008c38:	d006      	beq.n	8008c48 <UART_SetConfig+0x1b4>
 8008c3a:	e00b      	b.n	8008c54 <UART_SetConfig+0x1c0>
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	77fb      	strb	r3, [r7, #31]
 8008c40:	e0cc      	b.n	8008ddc <UART_SetConfig+0x348>
 8008c42:	2302      	movs	r3, #2
 8008c44:	77fb      	strb	r3, [r7, #31]
 8008c46:	e0c9      	b.n	8008ddc <UART_SetConfig+0x348>
 8008c48:	2304      	movs	r3, #4
 8008c4a:	77fb      	strb	r3, [r7, #31]
 8008c4c:	e0c6      	b.n	8008ddc <UART_SetConfig+0x348>
 8008c4e:	2308      	movs	r3, #8
 8008c50:	77fb      	strb	r3, [r7, #31]
 8008c52:	e0c3      	b.n	8008ddc <UART_SetConfig+0x348>
 8008c54:	2310      	movs	r3, #16
 8008c56:	77fb      	strb	r3, [r7, #31]
 8008c58:	e0c0      	b.n	8008ddc <UART_SetConfig+0x348>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a44      	ldr	r2, [pc, #272]	; (8008d70 <UART_SetConfig+0x2dc>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d125      	bne.n	8008cb0 <UART_SetConfig+0x21c>
 8008c64:	4b3e      	ldr	r3, [pc, #248]	; (8008d60 <UART_SetConfig+0x2cc>)
 8008c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c72:	d017      	beq.n	8008ca4 <UART_SetConfig+0x210>
 8008c74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c78:	d817      	bhi.n	8008caa <UART_SetConfig+0x216>
 8008c7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c7e:	d00b      	beq.n	8008c98 <UART_SetConfig+0x204>
 8008c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c84:	d811      	bhi.n	8008caa <UART_SetConfig+0x216>
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d003      	beq.n	8008c92 <UART_SetConfig+0x1fe>
 8008c8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c8e:	d006      	beq.n	8008c9e <UART_SetConfig+0x20a>
 8008c90:	e00b      	b.n	8008caa <UART_SetConfig+0x216>
 8008c92:	2300      	movs	r3, #0
 8008c94:	77fb      	strb	r3, [r7, #31]
 8008c96:	e0a1      	b.n	8008ddc <UART_SetConfig+0x348>
 8008c98:	2302      	movs	r3, #2
 8008c9a:	77fb      	strb	r3, [r7, #31]
 8008c9c:	e09e      	b.n	8008ddc <UART_SetConfig+0x348>
 8008c9e:	2304      	movs	r3, #4
 8008ca0:	77fb      	strb	r3, [r7, #31]
 8008ca2:	e09b      	b.n	8008ddc <UART_SetConfig+0x348>
 8008ca4:	2308      	movs	r3, #8
 8008ca6:	77fb      	strb	r3, [r7, #31]
 8008ca8:	e098      	b.n	8008ddc <UART_SetConfig+0x348>
 8008caa:	2310      	movs	r3, #16
 8008cac:	77fb      	strb	r3, [r7, #31]
 8008cae:	e095      	b.n	8008ddc <UART_SetConfig+0x348>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a2f      	ldr	r2, [pc, #188]	; (8008d74 <UART_SetConfig+0x2e0>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d125      	bne.n	8008d06 <UART_SetConfig+0x272>
 8008cba:	4b29      	ldr	r3, [pc, #164]	; (8008d60 <UART_SetConfig+0x2cc>)
 8008cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cc0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008cc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008cc8:	d017      	beq.n	8008cfa <UART_SetConfig+0x266>
 8008cca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008cce:	d817      	bhi.n	8008d00 <UART_SetConfig+0x26c>
 8008cd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cd4:	d00b      	beq.n	8008cee <UART_SetConfig+0x25a>
 8008cd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cda:	d811      	bhi.n	8008d00 <UART_SetConfig+0x26c>
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d003      	beq.n	8008ce8 <UART_SetConfig+0x254>
 8008ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ce4:	d006      	beq.n	8008cf4 <UART_SetConfig+0x260>
 8008ce6:	e00b      	b.n	8008d00 <UART_SetConfig+0x26c>
 8008ce8:	2301      	movs	r3, #1
 8008cea:	77fb      	strb	r3, [r7, #31]
 8008cec:	e076      	b.n	8008ddc <UART_SetConfig+0x348>
 8008cee:	2302      	movs	r3, #2
 8008cf0:	77fb      	strb	r3, [r7, #31]
 8008cf2:	e073      	b.n	8008ddc <UART_SetConfig+0x348>
 8008cf4:	2304      	movs	r3, #4
 8008cf6:	77fb      	strb	r3, [r7, #31]
 8008cf8:	e070      	b.n	8008ddc <UART_SetConfig+0x348>
 8008cfa:	2308      	movs	r3, #8
 8008cfc:	77fb      	strb	r3, [r7, #31]
 8008cfe:	e06d      	b.n	8008ddc <UART_SetConfig+0x348>
 8008d00:	2310      	movs	r3, #16
 8008d02:	77fb      	strb	r3, [r7, #31]
 8008d04:	e06a      	b.n	8008ddc <UART_SetConfig+0x348>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a1b      	ldr	r2, [pc, #108]	; (8008d78 <UART_SetConfig+0x2e4>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d138      	bne.n	8008d82 <UART_SetConfig+0x2ee>
 8008d10:	4b13      	ldr	r3, [pc, #76]	; (8008d60 <UART_SetConfig+0x2cc>)
 8008d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d16:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008d1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008d1e:	d017      	beq.n	8008d50 <UART_SetConfig+0x2bc>
 8008d20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008d24:	d82a      	bhi.n	8008d7c <UART_SetConfig+0x2e8>
 8008d26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d2a:	d00b      	beq.n	8008d44 <UART_SetConfig+0x2b0>
 8008d2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d30:	d824      	bhi.n	8008d7c <UART_SetConfig+0x2e8>
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d003      	beq.n	8008d3e <UART_SetConfig+0x2aa>
 8008d36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d3a:	d006      	beq.n	8008d4a <UART_SetConfig+0x2b6>
 8008d3c:	e01e      	b.n	8008d7c <UART_SetConfig+0x2e8>
 8008d3e:	2300      	movs	r3, #0
 8008d40:	77fb      	strb	r3, [r7, #31]
 8008d42:	e04b      	b.n	8008ddc <UART_SetConfig+0x348>
 8008d44:	2302      	movs	r3, #2
 8008d46:	77fb      	strb	r3, [r7, #31]
 8008d48:	e048      	b.n	8008ddc <UART_SetConfig+0x348>
 8008d4a:	2304      	movs	r3, #4
 8008d4c:	77fb      	strb	r3, [r7, #31]
 8008d4e:	e045      	b.n	8008ddc <UART_SetConfig+0x348>
 8008d50:	2308      	movs	r3, #8
 8008d52:	77fb      	strb	r3, [r7, #31]
 8008d54:	e042      	b.n	8008ddc <UART_SetConfig+0x348>
 8008d56:	bf00      	nop
 8008d58:	efff69f3 	.word	0xefff69f3
 8008d5c:	40011000 	.word	0x40011000
 8008d60:	40023800 	.word	0x40023800
 8008d64:	40004400 	.word	0x40004400
 8008d68:	40004800 	.word	0x40004800
 8008d6c:	40004c00 	.word	0x40004c00
 8008d70:	40005000 	.word	0x40005000
 8008d74:	40011400 	.word	0x40011400
 8008d78:	40007800 	.word	0x40007800
 8008d7c:	2310      	movs	r3, #16
 8008d7e:	77fb      	strb	r3, [r7, #31]
 8008d80:	e02c      	b.n	8008ddc <UART_SetConfig+0x348>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a72      	ldr	r2, [pc, #456]	; (8008f50 <UART_SetConfig+0x4bc>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d125      	bne.n	8008dd8 <UART_SetConfig+0x344>
 8008d8c:	4b71      	ldr	r3, [pc, #452]	; (8008f54 <UART_SetConfig+0x4c0>)
 8008d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d92:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008d96:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008d9a:	d017      	beq.n	8008dcc <UART_SetConfig+0x338>
 8008d9c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008da0:	d817      	bhi.n	8008dd2 <UART_SetConfig+0x33e>
 8008da2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008da6:	d00b      	beq.n	8008dc0 <UART_SetConfig+0x32c>
 8008da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dac:	d811      	bhi.n	8008dd2 <UART_SetConfig+0x33e>
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d003      	beq.n	8008dba <UART_SetConfig+0x326>
 8008db2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008db6:	d006      	beq.n	8008dc6 <UART_SetConfig+0x332>
 8008db8:	e00b      	b.n	8008dd2 <UART_SetConfig+0x33e>
 8008dba:	2300      	movs	r3, #0
 8008dbc:	77fb      	strb	r3, [r7, #31]
 8008dbe:	e00d      	b.n	8008ddc <UART_SetConfig+0x348>
 8008dc0:	2302      	movs	r3, #2
 8008dc2:	77fb      	strb	r3, [r7, #31]
 8008dc4:	e00a      	b.n	8008ddc <UART_SetConfig+0x348>
 8008dc6:	2304      	movs	r3, #4
 8008dc8:	77fb      	strb	r3, [r7, #31]
 8008dca:	e007      	b.n	8008ddc <UART_SetConfig+0x348>
 8008dcc:	2308      	movs	r3, #8
 8008dce:	77fb      	strb	r3, [r7, #31]
 8008dd0:	e004      	b.n	8008ddc <UART_SetConfig+0x348>
 8008dd2:	2310      	movs	r3, #16
 8008dd4:	77fb      	strb	r3, [r7, #31]
 8008dd6:	e001      	b.n	8008ddc <UART_SetConfig+0x348>
 8008dd8:	2310      	movs	r3, #16
 8008dda:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	69db      	ldr	r3, [r3, #28]
 8008de0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008de4:	d15b      	bne.n	8008e9e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008de6:	7ffb      	ldrb	r3, [r7, #31]
 8008de8:	2b08      	cmp	r3, #8
 8008dea:	d828      	bhi.n	8008e3e <UART_SetConfig+0x3aa>
 8008dec:	a201      	add	r2, pc, #4	; (adr r2, 8008df4 <UART_SetConfig+0x360>)
 8008dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df2:	bf00      	nop
 8008df4:	08008e19 	.word	0x08008e19
 8008df8:	08008e21 	.word	0x08008e21
 8008dfc:	08008e29 	.word	0x08008e29
 8008e00:	08008e3f 	.word	0x08008e3f
 8008e04:	08008e2f 	.word	0x08008e2f
 8008e08:	08008e3f 	.word	0x08008e3f
 8008e0c:	08008e3f 	.word	0x08008e3f
 8008e10:	08008e3f 	.word	0x08008e3f
 8008e14:	08008e37 	.word	0x08008e37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e18:	f7fd f9b2 	bl	8006180 <HAL_RCC_GetPCLK1Freq>
 8008e1c:	61b8      	str	r0, [r7, #24]
        break;
 8008e1e:	e013      	b.n	8008e48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e20:	f7fd f9c2 	bl	80061a8 <HAL_RCC_GetPCLK2Freq>
 8008e24:	61b8      	str	r0, [r7, #24]
        break;
 8008e26:	e00f      	b.n	8008e48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e28:	4b4b      	ldr	r3, [pc, #300]	; (8008f58 <UART_SetConfig+0x4c4>)
 8008e2a:	61bb      	str	r3, [r7, #24]
        break;
 8008e2c:	e00c      	b.n	8008e48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e2e:	f7fd f895 	bl	8005f5c <HAL_RCC_GetSysClockFreq>
 8008e32:	61b8      	str	r0, [r7, #24]
        break;
 8008e34:	e008      	b.n	8008e48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e3a:	61bb      	str	r3, [r7, #24]
        break;
 8008e3c:	e004      	b.n	8008e48 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	77bb      	strb	r3, [r7, #30]
        break;
 8008e46:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008e48:	69bb      	ldr	r3, [r7, #24]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d074      	beq.n	8008f38 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	005a      	lsls	r2, r3, #1
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	085b      	lsrs	r3, r3, #1
 8008e58:	441a      	add	r2, r3
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e62:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	2b0f      	cmp	r3, #15
 8008e68:	d916      	bls.n	8008e98 <UART_SetConfig+0x404>
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e70:	d212      	bcs.n	8008e98 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	f023 030f 	bic.w	r3, r3, #15
 8008e7a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	085b      	lsrs	r3, r3, #1
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	f003 0307 	and.w	r3, r3, #7
 8008e86:	b29a      	uxth	r2, r3
 8008e88:	89fb      	ldrh	r3, [r7, #14]
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	89fa      	ldrh	r2, [r7, #14]
 8008e94:	60da      	str	r2, [r3, #12]
 8008e96:	e04f      	b.n	8008f38 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	77bb      	strb	r3, [r7, #30]
 8008e9c:	e04c      	b.n	8008f38 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008e9e:	7ffb      	ldrb	r3, [r7, #31]
 8008ea0:	2b08      	cmp	r3, #8
 8008ea2:	d828      	bhi.n	8008ef6 <UART_SetConfig+0x462>
 8008ea4:	a201      	add	r2, pc, #4	; (adr r2, 8008eac <UART_SetConfig+0x418>)
 8008ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eaa:	bf00      	nop
 8008eac:	08008ed1 	.word	0x08008ed1
 8008eb0:	08008ed9 	.word	0x08008ed9
 8008eb4:	08008ee1 	.word	0x08008ee1
 8008eb8:	08008ef7 	.word	0x08008ef7
 8008ebc:	08008ee7 	.word	0x08008ee7
 8008ec0:	08008ef7 	.word	0x08008ef7
 8008ec4:	08008ef7 	.word	0x08008ef7
 8008ec8:	08008ef7 	.word	0x08008ef7
 8008ecc:	08008eef 	.word	0x08008eef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ed0:	f7fd f956 	bl	8006180 <HAL_RCC_GetPCLK1Freq>
 8008ed4:	61b8      	str	r0, [r7, #24]
        break;
 8008ed6:	e013      	b.n	8008f00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ed8:	f7fd f966 	bl	80061a8 <HAL_RCC_GetPCLK2Freq>
 8008edc:	61b8      	str	r0, [r7, #24]
        break;
 8008ede:	e00f      	b.n	8008f00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ee0:	4b1d      	ldr	r3, [pc, #116]	; (8008f58 <UART_SetConfig+0x4c4>)
 8008ee2:	61bb      	str	r3, [r7, #24]
        break;
 8008ee4:	e00c      	b.n	8008f00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ee6:	f7fd f839 	bl	8005f5c <HAL_RCC_GetSysClockFreq>
 8008eea:	61b8      	str	r0, [r7, #24]
        break;
 8008eec:	e008      	b.n	8008f00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ef2:	61bb      	str	r3, [r7, #24]
        break;
 8008ef4:	e004      	b.n	8008f00 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008efa:	2301      	movs	r3, #1
 8008efc:	77bb      	strb	r3, [r7, #30]
        break;
 8008efe:	bf00      	nop
    }

    if (pclk != 0U)
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d018      	beq.n	8008f38 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	085a      	lsrs	r2, r3, #1
 8008f0c:	69bb      	ldr	r3, [r7, #24]
 8008f0e:	441a      	add	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f18:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	2b0f      	cmp	r3, #15
 8008f1e:	d909      	bls.n	8008f34 <UART_SetConfig+0x4a0>
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f26:	d205      	bcs.n	8008f34 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	b29a      	uxth	r2, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	60da      	str	r2, [r3, #12]
 8008f32:	e001      	b.n	8008f38 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008f34:	2301      	movs	r3, #1
 8008f36:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2200      	movs	r2, #0
 8008f42:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008f44:	7fbb      	ldrb	r3, [r7, #30]
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3720      	adds	r7, #32
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	40007c00 	.word	0x40007c00
 8008f54:	40023800 	.word	0x40023800
 8008f58:	00f42400 	.word	0x00f42400

08008f5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b083      	sub	sp, #12
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f68:	f003 0301 	and.w	r3, r3, #1
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d00a      	beq.n	8008f86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	430a      	orrs	r2, r1
 8008f84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8a:	f003 0302 	and.w	r3, r3, #2
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d00a      	beq.n	8008fa8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	430a      	orrs	r2, r1
 8008fa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fac:	f003 0304 	and.w	r3, r3, #4
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d00a      	beq.n	8008fca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	430a      	orrs	r2, r1
 8008fc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fce:	f003 0308 	and.w	r3, r3, #8
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d00a      	beq.n	8008fec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	430a      	orrs	r2, r1
 8008fea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff0:	f003 0310 	and.w	r3, r3, #16
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d00a      	beq.n	800900e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	430a      	orrs	r2, r1
 800900c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009012:	f003 0320 	and.w	r3, r3, #32
 8009016:	2b00      	cmp	r3, #0
 8009018:	d00a      	beq.n	8009030 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	430a      	orrs	r2, r1
 800902e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009038:	2b00      	cmp	r3, #0
 800903a:	d01a      	beq.n	8009072 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	430a      	orrs	r2, r1
 8009050:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009056:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800905a:	d10a      	bne.n	8009072 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	430a      	orrs	r2, r1
 8009070:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800907a:	2b00      	cmp	r3, #0
 800907c:	d00a      	beq.n	8009094 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	430a      	orrs	r2, r1
 8009092:	605a      	str	r2, [r3, #4]
  }
}
 8009094:	bf00      	nop
 8009096:	370c      	adds	r7, #12
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b086      	sub	sp, #24
 80090a4:	af02      	add	r7, sp, #8
 80090a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2200      	movs	r2, #0
 80090ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80090b0:	f7f9 ff30 	bl	8002f14 <HAL_GetTick>
 80090b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f003 0308 	and.w	r3, r3, #8
 80090c0:	2b08      	cmp	r3, #8
 80090c2:	d10e      	bne.n	80090e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80090c8:	9300      	str	r3, [sp, #0]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2200      	movs	r2, #0
 80090ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 f81b 	bl	800910e <UART_WaitOnFlagUntilTimeout>
 80090d8:	4603      	mov	r3, r0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d001      	beq.n	80090e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090de:	2303      	movs	r3, #3
 80090e0:	e011      	b.n	8009106 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2220      	movs	r2, #32
 80090e6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2220      	movs	r2, #32
 80090ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2200      	movs	r2, #0
 80090f4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2200      	movs	r2, #0
 80090fa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2200      	movs	r2, #0
 8009100:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3710      	adds	r7, #16
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}

0800910e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800910e:	b580      	push	{r7, lr}
 8009110:	b09c      	sub	sp, #112	; 0x70
 8009112:	af00      	add	r7, sp, #0
 8009114:	60f8      	str	r0, [r7, #12]
 8009116:	60b9      	str	r1, [r7, #8]
 8009118:	603b      	str	r3, [r7, #0]
 800911a:	4613      	mov	r3, r2
 800911c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800911e:	e0a7      	b.n	8009270 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009120:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009126:	f000 80a3 	beq.w	8009270 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800912a:	f7f9 fef3 	bl	8002f14 <HAL_GetTick>
 800912e:	4602      	mov	r2, r0
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	1ad3      	subs	r3, r2, r3
 8009134:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009136:	429a      	cmp	r2, r3
 8009138:	d302      	bcc.n	8009140 <UART_WaitOnFlagUntilTimeout+0x32>
 800913a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800913c:	2b00      	cmp	r3, #0
 800913e:	d13f      	bne.n	80091c0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009148:	e853 3f00 	ldrex	r3, [r3]
 800914c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800914e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009150:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009154:	667b      	str	r3, [r7, #100]	; 0x64
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	461a      	mov	r2, r3
 800915c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800915e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009160:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009162:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009164:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009166:	e841 2300 	strex	r3, r2, [r1]
 800916a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800916c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800916e:	2b00      	cmp	r3, #0
 8009170:	d1e6      	bne.n	8009140 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	3308      	adds	r3, #8
 8009178:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800917a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800917c:	e853 3f00 	ldrex	r3, [r3]
 8009180:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009184:	f023 0301 	bic.w	r3, r3, #1
 8009188:	663b      	str	r3, [r7, #96]	; 0x60
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	3308      	adds	r3, #8
 8009190:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009192:	64ba      	str	r2, [r7, #72]	; 0x48
 8009194:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009196:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009198:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800919a:	e841 2300 	strex	r3, r2, [r1]
 800919e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80091a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d1e5      	bne.n	8009172 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2220      	movs	r2, #32
 80091aa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2220      	movs	r2, #32
 80091b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2200      	movs	r2, #0
 80091b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80091bc:	2303      	movs	r3, #3
 80091be:	e068      	b.n	8009292 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f003 0304 	and.w	r3, r3, #4
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d050      	beq.n	8009270 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	69db      	ldr	r3, [r3, #28]
 80091d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091dc:	d148      	bne.n	8009270 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80091e6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f0:	e853 3f00 	ldrex	r3, [r3]
 80091f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80091fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	461a      	mov	r2, r3
 8009204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009206:	637b      	str	r3, [r7, #52]	; 0x34
 8009208:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800920a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800920c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800920e:	e841 2300 	strex	r3, r2, [r1]
 8009212:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009216:	2b00      	cmp	r3, #0
 8009218:	d1e6      	bne.n	80091e8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	3308      	adds	r3, #8
 8009220:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	e853 3f00 	ldrex	r3, [r3]
 8009228:	613b      	str	r3, [r7, #16]
   return(result);
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	f023 0301 	bic.w	r3, r3, #1
 8009230:	66bb      	str	r3, [r7, #104]	; 0x68
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	3308      	adds	r3, #8
 8009238:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800923a:	623a      	str	r2, [r7, #32]
 800923c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923e:	69f9      	ldr	r1, [r7, #28]
 8009240:	6a3a      	ldr	r2, [r7, #32]
 8009242:	e841 2300 	strex	r3, r2, [r1]
 8009246:	61bb      	str	r3, [r7, #24]
   return(result);
 8009248:	69bb      	ldr	r3, [r7, #24]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d1e5      	bne.n	800921a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2220      	movs	r2, #32
 8009252:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2220      	movs	r2, #32
 8009258:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2220      	movs	r2, #32
 8009260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2200      	movs	r2, #0
 8009268:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800926c:	2303      	movs	r3, #3
 800926e:	e010      	b.n	8009292 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	69da      	ldr	r2, [r3, #28]
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	4013      	ands	r3, r2
 800927a:	68ba      	ldr	r2, [r7, #8]
 800927c:	429a      	cmp	r2, r3
 800927e:	bf0c      	ite	eq
 8009280:	2301      	moveq	r3, #1
 8009282:	2300      	movne	r3, #0
 8009284:	b2db      	uxtb	r3, r3
 8009286:	461a      	mov	r2, r3
 8009288:	79fb      	ldrb	r3, [r7, #7]
 800928a:	429a      	cmp	r2, r3
 800928c:	f43f af48 	beq.w	8009120 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009290:	2300      	movs	r3, #0
}
 8009292:	4618      	mov	r0, r3
 8009294:	3770      	adds	r7, #112	; 0x70
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
	...

0800929c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b096      	sub	sp, #88	; 0x58
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	4613      	mov	r3, r2
 80092a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	68ba      	ldr	r2, [r7, #8]
 80092ae:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	88fa      	ldrh	r2, [r7, #6]
 80092b4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2200      	movs	r2, #0
 80092bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2222      	movs	r2, #34	; 0x22
 80092c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d028      	beq.n	8009322 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092d4:	4a3e      	ldr	r2, [pc, #248]	; (80093d0 <UART_Start_Receive_DMA+0x134>)
 80092d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092dc:	4a3d      	ldr	r2, [pc, #244]	; (80093d4 <UART_Start_Receive_DMA+0x138>)
 80092de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092e4:	4a3c      	ldr	r2, [pc, #240]	; (80093d8 <UART_Start_Receive_DMA+0x13c>)
 80092e6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092ec:	2200      	movs	r2, #0
 80092ee:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	3324      	adds	r3, #36	; 0x24
 80092fa:	4619      	mov	r1, r3
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009300:	461a      	mov	r2, r3
 8009302:	88fb      	ldrh	r3, [r7, #6]
 8009304:	f7fa f9f4 	bl	80036f0 <HAL_DMA_Start_IT>
 8009308:	4603      	mov	r3, r0
 800930a:	2b00      	cmp	r3, #0
 800930c:	d009      	beq.n	8009322 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2210      	movs	r2, #16
 8009312:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2220      	movs	r2, #32
 800931a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800931e:	2301      	movs	r3, #1
 8009320:	e051      	b.n	80093c6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	691b      	ldr	r3, [r3, #16]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d018      	beq.n	800935c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009332:	e853 3f00 	ldrex	r3, [r3]
 8009336:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800933e:	657b      	str	r3, [r7, #84]	; 0x54
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	461a      	mov	r2, r3
 8009346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009348:	64bb      	str	r3, [r7, #72]	; 0x48
 800934a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800934e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009350:	e841 2300 	strex	r3, r2, [r1]
 8009354:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009358:	2b00      	cmp	r3, #0
 800935a:	d1e6      	bne.n	800932a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	3308      	adds	r3, #8
 8009362:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009366:	e853 3f00 	ldrex	r3, [r3]
 800936a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800936c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936e:	f043 0301 	orr.w	r3, r3, #1
 8009372:	653b      	str	r3, [r7, #80]	; 0x50
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	3308      	adds	r3, #8
 800937a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800937c:	637a      	str	r2, [r7, #52]	; 0x34
 800937e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009380:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009382:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009384:	e841 2300 	strex	r3, r2, [r1]
 8009388:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800938a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800938c:	2b00      	cmp	r3, #0
 800938e:	d1e5      	bne.n	800935c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	3308      	adds	r3, #8
 8009396:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	e853 3f00 	ldrex	r3, [r3]
 800939e:	613b      	str	r3, [r7, #16]
   return(result);
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	3308      	adds	r3, #8
 80093ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80093b0:	623a      	str	r2, [r7, #32]
 80093b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b4:	69f9      	ldr	r1, [r7, #28]
 80093b6:	6a3a      	ldr	r2, [r7, #32]
 80093b8:	e841 2300 	strex	r3, r2, [r1]
 80093bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80093be:	69bb      	ldr	r3, [r7, #24]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d1e5      	bne.n	8009390 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80093c4:	2300      	movs	r3, #0
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3758      	adds	r7, #88	; 0x58
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
 80093ce:	bf00      	nop
 80093d0:	080094f1 	.word	0x080094f1
 80093d4:	08009619 	.word	0x08009619
 80093d8:	08009657 	.word	0x08009657

080093dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80093dc:	b480      	push	{r7}
 80093de:	b089      	sub	sp, #36	; 0x24
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	e853 3f00 	ldrex	r3, [r3]
 80093f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80093f8:	61fb      	str	r3, [r7, #28]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	461a      	mov	r2, r3
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	61bb      	str	r3, [r7, #24]
 8009404:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009406:	6979      	ldr	r1, [r7, #20]
 8009408:	69ba      	ldr	r2, [r7, #24]
 800940a:	e841 2300 	strex	r3, r2, [r1]
 800940e:	613b      	str	r3, [r7, #16]
   return(result);
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d1e6      	bne.n	80093e4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2220      	movs	r2, #32
 800941a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800941c:	bf00      	nop
 800941e:	3724      	adds	r7, #36	; 0x24
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009428:	b480      	push	{r7}
 800942a:	b095      	sub	sp, #84	; 0x54
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009438:	e853 3f00 	ldrex	r3, [r3]
 800943c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800943e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009440:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009444:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	461a      	mov	r2, r3
 800944c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800944e:	643b      	str	r3, [r7, #64]	; 0x40
 8009450:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009452:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009454:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009456:	e841 2300 	strex	r3, r2, [r1]
 800945a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800945c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800945e:	2b00      	cmp	r3, #0
 8009460:	d1e6      	bne.n	8009430 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	3308      	adds	r3, #8
 8009468:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800946a:	6a3b      	ldr	r3, [r7, #32]
 800946c:	e853 3f00 	ldrex	r3, [r3]
 8009470:	61fb      	str	r3, [r7, #28]
   return(result);
 8009472:	69fb      	ldr	r3, [r7, #28]
 8009474:	f023 0301 	bic.w	r3, r3, #1
 8009478:	64bb      	str	r3, [r7, #72]	; 0x48
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	3308      	adds	r3, #8
 8009480:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009482:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009484:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009486:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009488:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800948a:	e841 2300 	strex	r3, r2, [r1]
 800948e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009492:	2b00      	cmp	r3, #0
 8009494:	d1e5      	bne.n	8009462 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800949a:	2b01      	cmp	r3, #1
 800949c:	d118      	bne.n	80094d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	e853 3f00 	ldrex	r3, [r3]
 80094aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	f023 0310 	bic.w	r3, r3, #16
 80094b2:	647b      	str	r3, [r7, #68]	; 0x44
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	461a      	mov	r2, r3
 80094ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094bc:	61bb      	str	r3, [r7, #24]
 80094be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c0:	6979      	ldr	r1, [r7, #20]
 80094c2:	69ba      	ldr	r2, [r7, #24]
 80094c4:	e841 2300 	strex	r3, r2, [r1]
 80094c8:	613b      	str	r3, [r7, #16]
   return(result);
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d1e6      	bne.n	800949e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2220      	movs	r2, #32
 80094d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80094e4:	bf00      	nop
 80094e6:	3754      	adds	r7, #84	; 0x54
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b09c      	sub	sp, #112	; 0x70
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094fc:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	69db      	ldr	r3, [r3, #28]
 8009502:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009506:	d071      	beq.n	80095ec <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8009508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800950a:	2200      	movs	r2, #0
 800950c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009518:	e853 3f00 	ldrex	r3, [r3]
 800951c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800951e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009524:	66bb      	str	r3, [r7, #104]	; 0x68
 8009526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	461a      	mov	r2, r3
 800952c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800952e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009530:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009532:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009534:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009536:	e841 2300 	strex	r3, r2, [r1]
 800953a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800953c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800953e:	2b00      	cmp	r3, #0
 8009540:	d1e6      	bne.n	8009510 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	3308      	adds	r3, #8
 8009548:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800954a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800954c:	e853 3f00 	ldrex	r3, [r3]
 8009550:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009554:	f023 0301 	bic.w	r3, r3, #1
 8009558:	667b      	str	r3, [r7, #100]	; 0x64
 800955a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	3308      	adds	r3, #8
 8009560:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009562:	647a      	str	r2, [r7, #68]	; 0x44
 8009564:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009566:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009568:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800956a:	e841 2300 	strex	r3, r2, [r1]
 800956e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009572:	2b00      	cmp	r3, #0
 8009574:	d1e5      	bne.n	8009542 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	3308      	adds	r3, #8
 800957c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800957e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009580:	e853 3f00 	ldrex	r3, [r3]
 8009584:	623b      	str	r3, [r7, #32]
   return(result);
 8009586:	6a3b      	ldr	r3, [r7, #32]
 8009588:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800958c:	663b      	str	r3, [r7, #96]	; 0x60
 800958e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	3308      	adds	r3, #8
 8009594:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009596:	633a      	str	r2, [r7, #48]	; 0x30
 8009598:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800959a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800959c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800959e:	e841 2300 	strex	r3, r2, [r1]
 80095a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80095a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d1e5      	bne.n	8009576 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80095aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095ac:	2220      	movs	r2, #32
 80095ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d118      	bne.n	80095ec <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	e853 3f00 	ldrex	r3, [r3]
 80095c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f023 0310 	bic.w	r3, r3, #16
 80095ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	461a      	mov	r2, r3
 80095d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095d8:	61fb      	str	r3, [r7, #28]
 80095da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095dc:	69b9      	ldr	r1, [r7, #24]
 80095de:	69fa      	ldr	r2, [r7, #28]
 80095e0:	e841 2300 	strex	r3, r2, [r1]
 80095e4:	617b      	str	r3, [r7, #20]
   return(result);
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d1e6      	bne.n	80095ba <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095ee:	2200      	movs	r2, #0
 80095f0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d107      	bne.n	800960a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009600:	4619      	mov	r1, r3
 8009602:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009604:	f7f8 ff92 	bl	800252c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009608:	e002      	b.n	8009610 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800960a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800960c:	f7ff fa24 	bl	8008a58 <HAL_UART_RxCpltCallback>
}
 8009610:	bf00      	nop
 8009612:	3770      	adds	r7, #112	; 0x70
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009624:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2201      	movs	r2, #1
 800962a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009630:	2b01      	cmp	r3, #1
 8009632:	d109      	bne.n	8009648 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800963a:	085b      	lsrs	r3, r3, #1
 800963c:	b29b      	uxth	r3, r3
 800963e:	4619      	mov	r1, r3
 8009640:	68f8      	ldr	r0, [r7, #12]
 8009642:	f7f8 ff73 	bl	800252c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009646:	e002      	b.n	800964e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f7ff fa0f 	bl	8008a6c <HAL_UART_RxHalfCpltCallback>
}
 800964e:	bf00      	nop
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}

08009656 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009656:	b580      	push	{r7, lr}
 8009658:	b086      	sub	sp, #24
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009662:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009668:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009670:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	689b      	ldr	r3, [r3, #8]
 8009678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800967c:	2b80      	cmp	r3, #128	; 0x80
 800967e:	d109      	bne.n	8009694 <UART_DMAError+0x3e>
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	2b21      	cmp	r3, #33	; 0x21
 8009684:	d106      	bne.n	8009694 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	2200      	movs	r2, #0
 800968a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800968e:	6978      	ldr	r0, [r7, #20]
 8009690:	f7ff fea4 	bl	80093dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800969e:	2b40      	cmp	r3, #64	; 0x40
 80096a0:	d109      	bne.n	80096b6 <UART_DMAError+0x60>
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2b22      	cmp	r3, #34	; 0x22
 80096a6:	d106      	bne.n	80096b6 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	2200      	movs	r2, #0
 80096ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80096b0:	6978      	ldr	r0, [r7, #20]
 80096b2:	f7ff feb9 	bl	8009428 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096bc:	f043 0210 	orr.w	r2, r3, #16
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80096c6:	6978      	ldr	r0, [r7, #20]
 80096c8:	f7ff f9da 	bl	8008a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096cc:	bf00      	nop
 80096ce:	3718      	adds	r7, #24
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2200      	movs	r2, #0
 80096ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80096f2:	68f8      	ldr	r0, [r7, #12]
 80096f4:	f7ff f9c4 	bl	8008a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096f8:	bf00      	nop
 80096fa:	3710      	adds	r7, #16
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009700:	b480      	push	{r7}
 8009702:	b08f      	sub	sp, #60	; 0x3c
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800970c:	2b21      	cmp	r3, #33	; 0x21
 800970e:	d14c      	bne.n	80097aa <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009716:	b29b      	uxth	r3, r3
 8009718:	2b00      	cmp	r3, #0
 800971a:	d132      	bne.n	8009782 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009722:	6a3b      	ldr	r3, [r7, #32]
 8009724:	e853 3f00 	ldrex	r3, [r3]
 8009728:	61fb      	str	r3, [r7, #28]
   return(result);
 800972a:	69fb      	ldr	r3, [r7, #28]
 800972c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009730:	637b      	str	r3, [r7, #52]	; 0x34
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	461a      	mov	r2, r3
 8009738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800973a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800973c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800973e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009742:	e841 2300 	strex	r3, r2, [r1]
 8009746:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974a:	2b00      	cmp	r3, #0
 800974c:	d1e6      	bne.n	800971c <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	e853 3f00 	ldrex	r3, [r3]
 800975a:	60bb      	str	r3, [r7, #8]
   return(result);
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009762:	633b      	str	r3, [r7, #48]	; 0x30
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	461a      	mov	r2, r3
 800976a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800976c:	61bb      	str	r3, [r7, #24]
 800976e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009770:	6979      	ldr	r1, [r7, #20]
 8009772:	69ba      	ldr	r2, [r7, #24]
 8009774:	e841 2300 	strex	r3, r2, [r1]
 8009778:	613b      	str	r3, [r7, #16]
   return(result);
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d1e6      	bne.n	800974e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009780:	e013      	b.n	80097aa <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009786:	781a      	ldrb	r2, [r3, #0]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009792:	1c5a      	adds	r2, r3, #1
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800979e:	b29b      	uxth	r3, r3
 80097a0:	3b01      	subs	r3, #1
 80097a2:	b29a      	uxth	r2, r3
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80097aa:	bf00      	nop
 80097ac:	373c      	adds	r7, #60	; 0x3c
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr

080097b6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80097b6:	b480      	push	{r7}
 80097b8:	b091      	sub	sp, #68	; 0x44
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097c2:	2b21      	cmp	r3, #33	; 0x21
 80097c4:	d151      	bne.n	800986a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d132      	bne.n	8009838 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097da:	e853 3f00 	ldrex	r3, [r3]
 80097de:	623b      	str	r3, [r7, #32]
   return(result);
 80097e0:	6a3b      	ldr	r3, [r7, #32]
 80097e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	461a      	mov	r2, r3
 80097ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f0:	633b      	str	r3, [r7, #48]	; 0x30
 80097f2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80097f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097f8:	e841 2300 	strex	r3, r2, [r1]
 80097fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80097fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009800:	2b00      	cmp	r3, #0
 8009802:	d1e6      	bne.n	80097d2 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	e853 3f00 	ldrex	r3, [r3]
 8009810:	60fb      	str	r3, [r7, #12]
   return(result);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009818:	637b      	str	r3, [r7, #52]	; 0x34
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	461a      	mov	r2, r3
 8009820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009822:	61fb      	str	r3, [r7, #28]
 8009824:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009826:	69b9      	ldr	r1, [r7, #24]
 8009828:	69fa      	ldr	r2, [r7, #28]
 800982a:	e841 2300 	strex	r3, r2, [r1]
 800982e:	617b      	str	r3, [r7, #20]
   return(result);
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d1e6      	bne.n	8009804 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009836:	e018      	b.n	800986a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800983c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800983e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009840:	881b      	ldrh	r3, [r3, #0]
 8009842:	461a      	mov	r2, r3
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800984c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009852:	1c9a      	adds	r2, r3, #2
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800985e:	b29b      	uxth	r3, r3
 8009860:	3b01      	subs	r3, #1
 8009862:	b29a      	uxth	r2, r3
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800986a:	bf00      	nop
 800986c:	3744      	adds	r7, #68	; 0x44
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr

08009876 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b088      	sub	sp, #32
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	e853 3f00 	ldrex	r3, [r3]
 800988a:	60bb      	str	r3, [r7, #8]
   return(result);
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009892:	61fb      	str	r3, [r7, #28]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	461a      	mov	r2, r3
 800989a:	69fb      	ldr	r3, [r7, #28]
 800989c:	61bb      	str	r3, [r7, #24]
 800989e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a0:	6979      	ldr	r1, [r7, #20]
 80098a2:	69ba      	ldr	r2, [r7, #24]
 80098a4:	e841 2300 	strex	r3, r2, [r1]
 80098a8:	613b      	str	r3, [r7, #16]
   return(result);
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d1e6      	bne.n	800987e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2220      	movs	r2, #32
 80098b4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2200      	movs	r2, #0
 80098ba:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f7ff f8c1 	bl	8008a44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098c2:	bf00      	nop
 80098c4:	3720      	adds	r7, #32
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}

080098ca <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098ca:	b580      	push	{r7, lr}
 80098cc:	b08c      	sub	sp, #48	; 0x30
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	60f8      	str	r0, [r7, #12]
 80098d2:	60b9      	str	r1, [r7, #8]
 80098d4:	4613      	mov	r3, r2
 80098d6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098de:	2b20      	cmp	r3, #32
 80098e0:	d142      	bne.n	8009968 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d002      	beq.n	80098ee <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80098e8:	88fb      	ldrh	r3, [r7, #6]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d101      	bne.n	80098f2 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80098ee:	2301      	movs	r3, #1
 80098f0:	e03b      	b.n	800996a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2201      	movs	r2, #1
 80098f6:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2200      	movs	r2, #0
 80098fc:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80098fe:	88fb      	ldrh	r3, [r7, #6]
 8009900:	461a      	mov	r2, r3
 8009902:	68b9      	ldr	r1, [r7, #8]
 8009904:	68f8      	ldr	r0, [r7, #12]
 8009906:	f7ff fcc9 	bl	800929c <UART_Start_Receive_DMA>
 800990a:	4603      	mov	r3, r0
 800990c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009910:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009914:	2b00      	cmp	r3, #0
 8009916:	d124      	bne.n	8009962 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800991c:	2b01      	cmp	r3, #1
 800991e:	d11d      	bne.n	800995c <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2210      	movs	r2, #16
 8009926:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800992e:	69bb      	ldr	r3, [r7, #24]
 8009930:	e853 3f00 	ldrex	r3, [r3]
 8009934:	617b      	str	r3, [r7, #20]
   return(result);
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	f043 0310 	orr.w	r3, r3, #16
 800993c:	62bb      	str	r3, [r7, #40]	; 0x28
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	461a      	mov	r2, r3
 8009944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009946:	627b      	str	r3, [r7, #36]	; 0x24
 8009948:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800994a:	6a39      	ldr	r1, [r7, #32]
 800994c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800994e:	e841 2300 	strex	r3, r2, [r1]
 8009952:	61fb      	str	r3, [r7, #28]
   return(result);
 8009954:	69fb      	ldr	r3, [r7, #28]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d1e6      	bne.n	8009928 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800995a:	e002      	b.n	8009962 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800995c:	2301      	movs	r3, #1
 800995e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8009962:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009966:	e000      	b.n	800996a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009968:	2302      	movs	r3, #2
  }
}
 800996a:	4618      	mov	r0, r3
 800996c:	3730      	adds	r7, #48	; 0x30
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
	...

08009974 <arm_pid_init_f32>:
 8009974:	ed90 7a08 	vldr	s14, [r0, #32]
 8009978:	edd0 7a06 	vldr	s15, [r0, #24]
 800997c:	ed90 6a07 	vldr	s12, [r0, #28]
 8009980:	eef1 6a67 	vneg.f32	s13, s15
 8009984:	ed80 7a02 	vstr	s14, [r0, #8]
 8009988:	ee77 7a86 	vadd.f32	s15, s15, s12
 800998c:	ee37 6a07 	vadd.f32	s12, s14, s14
 8009990:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009994:	ee36 7ac6 	vsub.f32	s14, s13, s12
 8009998:	edc0 7a00 	vstr	s15, [r0]
 800999c:	ed80 7a01 	vstr	s14, [r0, #4]
 80099a0:	b901      	cbnz	r1, 80099a4 <arm_pid_init_f32+0x30>
 80099a2:	4770      	bx	lr
 80099a4:	2300      	movs	r3, #0
 80099a6:	60c3      	str	r3, [r0, #12]
 80099a8:	6103      	str	r3, [r0, #16]
 80099aa:	6143      	str	r3, [r0, #20]
 80099ac:	4770      	bx	lr
 80099ae:	bf00      	nop

080099b0 <__cvt>:
 80099b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099b4:	ec55 4b10 	vmov	r4, r5, d0
 80099b8:	2d00      	cmp	r5, #0
 80099ba:	460e      	mov	r6, r1
 80099bc:	4619      	mov	r1, r3
 80099be:	462b      	mov	r3, r5
 80099c0:	bfbb      	ittet	lt
 80099c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80099c6:	461d      	movlt	r5, r3
 80099c8:	2300      	movge	r3, #0
 80099ca:	232d      	movlt	r3, #45	; 0x2d
 80099cc:	700b      	strb	r3, [r1, #0]
 80099ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80099d4:	4691      	mov	r9, r2
 80099d6:	f023 0820 	bic.w	r8, r3, #32
 80099da:	bfbc      	itt	lt
 80099dc:	4622      	movlt	r2, r4
 80099de:	4614      	movlt	r4, r2
 80099e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80099e4:	d005      	beq.n	80099f2 <__cvt+0x42>
 80099e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80099ea:	d100      	bne.n	80099ee <__cvt+0x3e>
 80099ec:	3601      	adds	r6, #1
 80099ee:	2102      	movs	r1, #2
 80099f0:	e000      	b.n	80099f4 <__cvt+0x44>
 80099f2:	2103      	movs	r1, #3
 80099f4:	ab03      	add	r3, sp, #12
 80099f6:	9301      	str	r3, [sp, #4]
 80099f8:	ab02      	add	r3, sp, #8
 80099fa:	9300      	str	r3, [sp, #0]
 80099fc:	ec45 4b10 	vmov	d0, r4, r5
 8009a00:	4653      	mov	r3, sl
 8009a02:	4632      	mov	r2, r6
 8009a04:	f001 f8bc 	bl	800ab80 <_dtoa_r>
 8009a08:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009a0c:	4607      	mov	r7, r0
 8009a0e:	d102      	bne.n	8009a16 <__cvt+0x66>
 8009a10:	f019 0f01 	tst.w	r9, #1
 8009a14:	d022      	beq.n	8009a5c <__cvt+0xac>
 8009a16:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009a1a:	eb07 0906 	add.w	r9, r7, r6
 8009a1e:	d110      	bne.n	8009a42 <__cvt+0x92>
 8009a20:	783b      	ldrb	r3, [r7, #0]
 8009a22:	2b30      	cmp	r3, #48	; 0x30
 8009a24:	d10a      	bne.n	8009a3c <__cvt+0x8c>
 8009a26:	2200      	movs	r2, #0
 8009a28:	2300      	movs	r3, #0
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	4629      	mov	r1, r5
 8009a2e:	f7f7 f86b 	bl	8000b08 <__aeabi_dcmpeq>
 8009a32:	b918      	cbnz	r0, 8009a3c <__cvt+0x8c>
 8009a34:	f1c6 0601 	rsb	r6, r6, #1
 8009a38:	f8ca 6000 	str.w	r6, [sl]
 8009a3c:	f8da 3000 	ldr.w	r3, [sl]
 8009a40:	4499      	add	r9, r3
 8009a42:	2200      	movs	r2, #0
 8009a44:	2300      	movs	r3, #0
 8009a46:	4620      	mov	r0, r4
 8009a48:	4629      	mov	r1, r5
 8009a4a:	f7f7 f85d 	bl	8000b08 <__aeabi_dcmpeq>
 8009a4e:	b108      	cbz	r0, 8009a54 <__cvt+0xa4>
 8009a50:	f8cd 900c 	str.w	r9, [sp, #12]
 8009a54:	2230      	movs	r2, #48	; 0x30
 8009a56:	9b03      	ldr	r3, [sp, #12]
 8009a58:	454b      	cmp	r3, r9
 8009a5a:	d307      	bcc.n	8009a6c <__cvt+0xbc>
 8009a5c:	9b03      	ldr	r3, [sp, #12]
 8009a5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a60:	1bdb      	subs	r3, r3, r7
 8009a62:	4638      	mov	r0, r7
 8009a64:	6013      	str	r3, [r2, #0]
 8009a66:	b004      	add	sp, #16
 8009a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a6c:	1c59      	adds	r1, r3, #1
 8009a6e:	9103      	str	r1, [sp, #12]
 8009a70:	701a      	strb	r2, [r3, #0]
 8009a72:	e7f0      	b.n	8009a56 <__cvt+0xa6>

08009a74 <__exponent>:
 8009a74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a76:	4603      	mov	r3, r0
 8009a78:	2900      	cmp	r1, #0
 8009a7a:	bfb8      	it	lt
 8009a7c:	4249      	neglt	r1, r1
 8009a7e:	f803 2b02 	strb.w	r2, [r3], #2
 8009a82:	bfb4      	ite	lt
 8009a84:	222d      	movlt	r2, #45	; 0x2d
 8009a86:	222b      	movge	r2, #43	; 0x2b
 8009a88:	2909      	cmp	r1, #9
 8009a8a:	7042      	strb	r2, [r0, #1]
 8009a8c:	dd2a      	ble.n	8009ae4 <__exponent+0x70>
 8009a8e:	f10d 0207 	add.w	r2, sp, #7
 8009a92:	4617      	mov	r7, r2
 8009a94:	260a      	movs	r6, #10
 8009a96:	4694      	mov	ip, r2
 8009a98:	fb91 f5f6 	sdiv	r5, r1, r6
 8009a9c:	fb06 1415 	mls	r4, r6, r5, r1
 8009aa0:	3430      	adds	r4, #48	; 0x30
 8009aa2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009aa6:	460c      	mov	r4, r1
 8009aa8:	2c63      	cmp	r4, #99	; 0x63
 8009aaa:	f102 32ff 	add.w	r2, r2, #4294967295
 8009aae:	4629      	mov	r1, r5
 8009ab0:	dcf1      	bgt.n	8009a96 <__exponent+0x22>
 8009ab2:	3130      	adds	r1, #48	; 0x30
 8009ab4:	f1ac 0402 	sub.w	r4, ip, #2
 8009ab8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009abc:	1c41      	adds	r1, r0, #1
 8009abe:	4622      	mov	r2, r4
 8009ac0:	42ba      	cmp	r2, r7
 8009ac2:	d30a      	bcc.n	8009ada <__exponent+0x66>
 8009ac4:	f10d 0209 	add.w	r2, sp, #9
 8009ac8:	eba2 020c 	sub.w	r2, r2, ip
 8009acc:	42bc      	cmp	r4, r7
 8009ace:	bf88      	it	hi
 8009ad0:	2200      	movhi	r2, #0
 8009ad2:	4413      	add	r3, r2
 8009ad4:	1a18      	subs	r0, r3, r0
 8009ad6:	b003      	add	sp, #12
 8009ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ada:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009ade:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009ae2:	e7ed      	b.n	8009ac0 <__exponent+0x4c>
 8009ae4:	2330      	movs	r3, #48	; 0x30
 8009ae6:	3130      	adds	r1, #48	; 0x30
 8009ae8:	7083      	strb	r3, [r0, #2]
 8009aea:	70c1      	strb	r1, [r0, #3]
 8009aec:	1d03      	adds	r3, r0, #4
 8009aee:	e7f1      	b.n	8009ad4 <__exponent+0x60>

08009af0 <_printf_float>:
 8009af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009af4:	ed2d 8b02 	vpush	{d8}
 8009af8:	b08d      	sub	sp, #52	; 0x34
 8009afa:	460c      	mov	r4, r1
 8009afc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009b00:	4616      	mov	r6, r2
 8009b02:	461f      	mov	r7, r3
 8009b04:	4605      	mov	r5, r0
 8009b06:	f000 ff25 	bl	800a954 <_localeconv_r>
 8009b0a:	f8d0 a000 	ldr.w	sl, [r0]
 8009b0e:	4650      	mov	r0, sl
 8009b10:	f7f6 fbce 	bl	80002b0 <strlen>
 8009b14:	2300      	movs	r3, #0
 8009b16:	930a      	str	r3, [sp, #40]	; 0x28
 8009b18:	6823      	ldr	r3, [r4, #0]
 8009b1a:	9305      	str	r3, [sp, #20]
 8009b1c:	f8d8 3000 	ldr.w	r3, [r8]
 8009b20:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009b24:	3307      	adds	r3, #7
 8009b26:	f023 0307 	bic.w	r3, r3, #7
 8009b2a:	f103 0208 	add.w	r2, r3, #8
 8009b2e:	f8c8 2000 	str.w	r2, [r8]
 8009b32:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b36:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009b3a:	9307      	str	r3, [sp, #28]
 8009b3c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009b40:	ee08 0a10 	vmov	s16, r0
 8009b44:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009b48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b4c:	4b9e      	ldr	r3, [pc, #632]	; (8009dc8 <_printf_float+0x2d8>)
 8009b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b52:	f7f7 f80b 	bl	8000b6c <__aeabi_dcmpun>
 8009b56:	bb88      	cbnz	r0, 8009bbc <_printf_float+0xcc>
 8009b58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b5c:	4b9a      	ldr	r3, [pc, #616]	; (8009dc8 <_printf_float+0x2d8>)
 8009b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b62:	f7f6 ffe5 	bl	8000b30 <__aeabi_dcmple>
 8009b66:	bb48      	cbnz	r0, 8009bbc <_printf_float+0xcc>
 8009b68:	2200      	movs	r2, #0
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	4640      	mov	r0, r8
 8009b6e:	4649      	mov	r1, r9
 8009b70:	f7f6 ffd4 	bl	8000b1c <__aeabi_dcmplt>
 8009b74:	b110      	cbz	r0, 8009b7c <_printf_float+0x8c>
 8009b76:	232d      	movs	r3, #45	; 0x2d
 8009b78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b7c:	4a93      	ldr	r2, [pc, #588]	; (8009dcc <_printf_float+0x2dc>)
 8009b7e:	4b94      	ldr	r3, [pc, #592]	; (8009dd0 <_printf_float+0x2e0>)
 8009b80:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009b84:	bf94      	ite	ls
 8009b86:	4690      	movls	r8, r2
 8009b88:	4698      	movhi	r8, r3
 8009b8a:	2303      	movs	r3, #3
 8009b8c:	6123      	str	r3, [r4, #16]
 8009b8e:	9b05      	ldr	r3, [sp, #20]
 8009b90:	f023 0304 	bic.w	r3, r3, #4
 8009b94:	6023      	str	r3, [r4, #0]
 8009b96:	f04f 0900 	mov.w	r9, #0
 8009b9a:	9700      	str	r7, [sp, #0]
 8009b9c:	4633      	mov	r3, r6
 8009b9e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009ba0:	4621      	mov	r1, r4
 8009ba2:	4628      	mov	r0, r5
 8009ba4:	f000 f9da 	bl	8009f5c <_printf_common>
 8009ba8:	3001      	adds	r0, #1
 8009baa:	f040 8090 	bne.w	8009cce <_printf_float+0x1de>
 8009bae:	f04f 30ff 	mov.w	r0, #4294967295
 8009bb2:	b00d      	add	sp, #52	; 0x34
 8009bb4:	ecbd 8b02 	vpop	{d8}
 8009bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bbc:	4642      	mov	r2, r8
 8009bbe:	464b      	mov	r3, r9
 8009bc0:	4640      	mov	r0, r8
 8009bc2:	4649      	mov	r1, r9
 8009bc4:	f7f6 ffd2 	bl	8000b6c <__aeabi_dcmpun>
 8009bc8:	b140      	cbz	r0, 8009bdc <_printf_float+0xec>
 8009bca:	464b      	mov	r3, r9
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	bfbc      	itt	lt
 8009bd0:	232d      	movlt	r3, #45	; 0x2d
 8009bd2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009bd6:	4a7f      	ldr	r2, [pc, #508]	; (8009dd4 <_printf_float+0x2e4>)
 8009bd8:	4b7f      	ldr	r3, [pc, #508]	; (8009dd8 <_printf_float+0x2e8>)
 8009bda:	e7d1      	b.n	8009b80 <_printf_float+0x90>
 8009bdc:	6863      	ldr	r3, [r4, #4]
 8009bde:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009be2:	9206      	str	r2, [sp, #24]
 8009be4:	1c5a      	adds	r2, r3, #1
 8009be6:	d13f      	bne.n	8009c68 <_printf_float+0x178>
 8009be8:	2306      	movs	r3, #6
 8009bea:	6063      	str	r3, [r4, #4]
 8009bec:	9b05      	ldr	r3, [sp, #20]
 8009bee:	6861      	ldr	r1, [r4, #4]
 8009bf0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	9303      	str	r3, [sp, #12]
 8009bf8:	ab0a      	add	r3, sp, #40	; 0x28
 8009bfa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009bfe:	ab09      	add	r3, sp, #36	; 0x24
 8009c00:	ec49 8b10 	vmov	d0, r8, r9
 8009c04:	9300      	str	r3, [sp, #0]
 8009c06:	6022      	str	r2, [r4, #0]
 8009c08:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009c0c:	4628      	mov	r0, r5
 8009c0e:	f7ff fecf 	bl	80099b0 <__cvt>
 8009c12:	9b06      	ldr	r3, [sp, #24]
 8009c14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c16:	2b47      	cmp	r3, #71	; 0x47
 8009c18:	4680      	mov	r8, r0
 8009c1a:	d108      	bne.n	8009c2e <_printf_float+0x13e>
 8009c1c:	1cc8      	adds	r0, r1, #3
 8009c1e:	db02      	blt.n	8009c26 <_printf_float+0x136>
 8009c20:	6863      	ldr	r3, [r4, #4]
 8009c22:	4299      	cmp	r1, r3
 8009c24:	dd41      	ble.n	8009caa <_printf_float+0x1ba>
 8009c26:	f1ab 0302 	sub.w	r3, fp, #2
 8009c2a:	fa5f fb83 	uxtb.w	fp, r3
 8009c2e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009c32:	d820      	bhi.n	8009c76 <_printf_float+0x186>
 8009c34:	3901      	subs	r1, #1
 8009c36:	465a      	mov	r2, fp
 8009c38:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009c3c:	9109      	str	r1, [sp, #36]	; 0x24
 8009c3e:	f7ff ff19 	bl	8009a74 <__exponent>
 8009c42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c44:	1813      	adds	r3, r2, r0
 8009c46:	2a01      	cmp	r2, #1
 8009c48:	4681      	mov	r9, r0
 8009c4a:	6123      	str	r3, [r4, #16]
 8009c4c:	dc02      	bgt.n	8009c54 <_printf_float+0x164>
 8009c4e:	6822      	ldr	r2, [r4, #0]
 8009c50:	07d2      	lsls	r2, r2, #31
 8009c52:	d501      	bpl.n	8009c58 <_printf_float+0x168>
 8009c54:	3301      	adds	r3, #1
 8009c56:	6123      	str	r3, [r4, #16]
 8009c58:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d09c      	beq.n	8009b9a <_printf_float+0xaa>
 8009c60:	232d      	movs	r3, #45	; 0x2d
 8009c62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c66:	e798      	b.n	8009b9a <_printf_float+0xaa>
 8009c68:	9a06      	ldr	r2, [sp, #24]
 8009c6a:	2a47      	cmp	r2, #71	; 0x47
 8009c6c:	d1be      	bne.n	8009bec <_printf_float+0xfc>
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d1bc      	bne.n	8009bec <_printf_float+0xfc>
 8009c72:	2301      	movs	r3, #1
 8009c74:	e7b9      	b.n	8009bea <_printf_float+0xfa>
 8009c76:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009c7a:	d118      	bne.n	8009cae <_printf_float+0x1be>
 8009c7c:	2900      	cmp	r1, #0
 8009c7e:	6863      	ldr	r3, [r4, #4]
 8009c80:	dd0b      	ble.n	8009c9a <_printf_float+0x1aa>
 8009c82:	6121      	str	r1, [r4, #16]
 8009c84:	b913      	cbnz	r3, 8009c8c <_printf_float+0x19c>
 8009c86:	6822      	ldr	r2, [r4, #0]
 8009c88:	07d0      	lsls	r0, r2, #31
 8009c8a:	d502      	bpl.n	8009c92 <_printf_float+0x1a2>
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	440b      	add	r3, r1
 8009c90:	6123      	str	r3, [r4, #16]
 8009c92:	65a1      	str	r1, [r4, #88]	; 0x58
 8009c94:	f04f 0900 	mov.w	r9, #0
 8009c98:	e7de      	b.n	8009c58 <_printf_float+0x168>
 8009c9a:	b913      	cbnz	r3, 8009ca2 <_printf_float+0x1b2>
 8009c9c:	6822      	ldr	r2, [r4, #0]
 8009c9e:	07d2      	lsls	r2, r2, #31
 8009ca0:	d501      	bpl.n	8009ca6 <_printf_float+0x1b6>
 8009ca2:	3302      	adds	r3, #2
 8009ca4:	e7f4      	b.n	8009c90 <_printf_float+0x1a0>
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	e7f2      	b.n	8009c90 <_printf_float+0x1a0>
 8009caa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cb0:	4299      	cmp	r1, r3
 8009cb2:	db05      	blt.n	8009cc0 <_printf_float+0x1d0>
 8009cb4:	6823      	ldr	r3, [r4, #0]
 8009cb6:	6121      	str	r1, [r4, #16]
 8009cb8:	07d8      	lsls	r0, r3, #31
 8009cba:	d5ea      	bpl.n	8009c92 <_printf_float+0x1a2>
 8009cbc:	1c4b      	adds	r3, r1, #1
 8009cbe:	e7e7      	b.n	8009c90 <_printf_float+0x1a0>
 8009cc0:	2900      	cmp	r1, #0
 8009cc2:	bfd4      	ite	le
 8009cc4:	f1c1 0202 	rsble	r2, r1, #2
 8009cc8:	2201      	movgt	r2, #1
 8009cca:	4413      	add	r3, r2
 8009ccc:	e7e0      	b.n	8009c90 <_printf_float+0x1a0>
 8009cce:	6823      	ldr	r3, [r4, #0]
 8009cd0:	055a      	lsls	r2, r3, #21
 8009cd2:	d407      	bmi.n	8009ce4 <_printf_float+0x1f4>
 8009cd4:	6923      	ldr	r3, [r4, #16]
 8009cd6:	4642      	mov	r2, r8
 8009cd8:	4631      	mov	r1, r6
 8009cda:	4628      	mov	r0, r5
 8009cdc:	47b8      	blx	r7
 8009cde:	3001      	adds	r0, #1
 8009ce0:	d12c      	bne.n	8009d3c <_printf_float+0x24c>
 8009ce2:	e764      	b.n	8009bae <_printf_float+0xbe>
 8009ce4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009ce8:	f240 80e0 	bls.w	8009eac <_printf_float+0x3bc>
 8009cec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	f7f6 ff08 	bl	8000b08 <__aeabi_dcmpeq>
 8009cf8:	2800      	cmp	r0, #0
 8009cfa:	d034      	beq.n	8009d66 <_printf_float+0x276>
 8009cfc:	4a37      	ldr	r2, [pc, #220]	; (8009ddc <_printf_float+0x2ec>)
 8009cfe:	2301      	movs	r3, #1
 8009d00:	4631      	mov	r1, r6
 8009d02:	4628      	mov	r0, r5
 8009d04:	47b8      	blx	r7
 8009d06:	3001      	adds	r0, #1
 8009d08:	f43f af51 	beq.w	8009bae <_printf_float+0xbe>
 8009d0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d10:	429a      	cmp	r2, r3
 8009d12:	db02      	blt.n	8009d1a <_printf_float+0x22a>
 8009d14:	6823      	ldr	r3, [r4, #0]
 8009d16:	07d8      	lsls	r0, r3, #31
 8009d18:	d510      	bpl.n	8009d3c <_printf_float+0x24c>
 8009d1a:	ee18 3a10 	vmov	r3, s16
 8009d1e:	4652      	mov	r2, sl
 8009d20:	4631      	mov	r1, r6
 8009d22:	4628      	mov	r0, r5
 8009d24:	47b8      	blx	r7
 8009d26:	3001      	adds	r0, #1
 8009d28:	f43f af41 	beq.w	8009bae <_printf_float+0xbe>
 8009d2c:	f04f 0800 	mov.w	r8, #0
 8009d30:	f104 091a 	add.w	r9, r4, #26
 8009d34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d36:	3b01      	subs	r3, #1
 8009d38:	4543      	cmp	r3, r8
 8009d3a:	dc09      	bgt.n	8009d50 <_printf_float+0x260>
 8009d3c:	6823      	ldr	r3, [r4, #0]
 8009d3e:	079b      	lsls	r3, r3, #30
 8009d40:	f100 8107 	bmi.w	8009f52 <_printf_float+0x462>
 8009d44:	68e0      	ldr	r0, [r4, #12]
 8009d46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d48:	4298      	cmp	r0, r3
 8009d4a:	bfb8      	it	lt
 8009d4c:	4618      	movlt	r0, r3
 8009d4e:	e730      	b.n	8009bb2 <_printf_float+0xc2>
 8009d50:	2301      	movs	r3, #1
 8009d52:	464a      	mov	r2, r9
 8009d54:	4631      	mov	r1, r6
 8009d56:	4628      	mov	r0, r5
 8009d58:	47b8      	blx	r7
 8009d5a:	3001      	adds	r0, #1
 8009d5c:	f43f af27 	beq.w	8009bae <_printf_float+0xbe>
 8009d60:	f108 0801 	add.w	r8, r8, #1
 8009d64:	e7e6      	b.n	8009d34 <_printf_float+0x244>
 8009d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	dc39      	bgt.n	8009de0 <_printf_float+0x2f0>
 8009d6c:	4a1b      	ldr	r2, [pc, #108]	; (8009ddc <_printf_float+0x2ec>)
 8009d6e:	2301      	movs	r3, #1
 8009d70:	4631      	mov	r1, r6
 8009d72:	4628      	mov	r0, r5
 8009d74:	47b8      	blx	r7
 8009d76:	3001      	adds	r0, #1
 8009d78:	f43f af19 	beq.w	8009bae <_printf_float+0xbe>
 8009d7c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009d80:	4313      	orrs	r3, r2
 8009d82:	d102      	bne.n	8009d8a <_printf_float+0x29a>
 8009d84:	6823      	ldr	r3, [r4, #0]
 8009d86:	07d9      	lsls	r1, r3, #31
 8009d88:	d5d8      	bpl.n	8009d3c <_printf_float+0x24c>
 8009d8a:	ee18 3a10 	vmov	r3, s16
 8009d8e:	4652      	mov	r2, sl
 8009d90:	4631      	mov	r1, r6
 8009d92:	4628      	mov	r0, r5
 8009d94:	47b8      	blx	r7
 8009d96:	3001      	adds	r0, #1
 8009d98:	f43f af09 	beq.w	8009bae <_printf_float+0xbe>
 8009d9c:	f04f 0900 	mov.w	r9, #0
 8009da0:	f104 0a1a 	add.w	sl, r4, #26
 8009da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009da6:	425b      	negs	r3, r3
 8009da8:	454b      	cmp	r3, r9
 8009daa:	dc01      	bgt.n	8009db0 <_printf_float+0x2c0>
 8009dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dae:	e792      	b.n	8009cd6 <_printf_float+0x1e6>
 8009db0:	2301      	movs	r3, #1
 8009db2:	4652      	mov	r2, sl
 8009db4:	4631      	mov	r1, r6
 8009db6:	4628      	mov	r0, r5
 8009db8:	47b8      	blx	r7
 8009dba:	3001      	adds	r0, #1
 8009dbc:	f43f aef7 	beq.w	8009bae <_printf_float+0xbe>
 8009dc0:	f109 0901 	add.w	r9, r9, #1
 8009dc4:	e7ee      	b.n	8009da4 <_printf_float+0x2b4>
 8009dc6:	bf00      	nop
 8009dc8:	7fefffff 	.word	0x7fefffff
 8009dcc:	0800ea50 	.word	0x0800ea50
 8009dd0:	0800ea54 	.word	0x0800ea54
 8009dd4:	0800ea58 	.word	0x0800ea58
 8009dd8:	0800ea5c 	.word	0x0800ea5c
 8009ddc:	0800ede8 	.word	0x0800ede8
 8009de0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009de2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009de4:	429a      	cmp	r2, r3
 8009de6:	bfa8      	it	ge
 8009de8:	461a      	movge	r2, r3
 8009dea:	2a00      	cmp	r2, #0
 8009dec:	4691      	mov	r9, r2
 8009dee:	dc37      	bgt.n	8009e60 <_printf_float+0x370>
 8009df0:	f04f 0b00 	mov.w	fp, #0
 8009df4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009df8:	f104 021a 	add.w	r2, r4, #26
 8009dfc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009dfe:	9305      	str	r3, [sp, #20]
 8009e00:	eba3 0309 	sub.w	r3, r3, r9
 8009e04:	455b      	cmp	r3, fp
 8009e06:	dc33      	bgt.n	8009e70 <_printf_float+0x380>
 8009e08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	db3b      	blt.n	8009e88 <_printf_float+0x398>
 8009e10:	6823      	ldr	r3, [r4, #0]
 8009e12:	07da      	lsls	r2, r3, #31
 8009e14:	d438      	bmi.n	8009e88 <_printf_float+0x398>
 8009e16:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009e1a:	eba2 0903 	sub.w	r9, r2, r3
 8009e1e:	9b05      	ldr	r3, [sp, #20]
 8009e20:	1ad2      	subs	r2, r2, r3
 8009e22:	4591      	cmp	r9, r2
 8009e24:	bfa8      	it	ge
 8009e26:	4691      	movge	r9, r2
 8009e28:	f1b9 0f00 	cmp.w	r9, #0
 8009e2c:	dc35      	bgt.n	8009e9a <_printf_float+0x3aa>
 8009e2e:	f04f 0800 	mov.w	r8, #0
 8009e32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e36:	f104 0a1a 	add.w	sl, r4, #26
 8009e3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e3e:	1a9b      	subs	r3, r3, r2
 8009e40:	eba3 0309 	sub.w	r3, r3, r9
 8009e44:	4543      	cmp	r3, r8
 8009e46:	f77f af79 	ble.w	8009d3c <_printf_float+0x24c>
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	4652      	mov	r2, sl
 8009e4e:	4631      	mov	r1, r6
 8009e50:	4628      	mov	r0, r5
 8009e52:	47b8      	blx	r7
 8009e54:	3001      	adds	r0, #1
 8009e56:	f43f aeaa 	beq.w	8009bae <_printf_float+0xbe>
 8009e5a:	f108 0801 	add.w	r8, r8, #1
 8009e5e:	e7ec      	b.n	8009e3a <_printf_float+0x34a>
 8009e60:	4613      	mov	r3, r2
 8009e62:	4631      	mov	r1, r6
 8009e64:	4642      	mov	r2, r8
 8009e66:	4628      	mov	r0, r5
 8009e68:	47b8      	blx	r7
 8009e6a:	3001      	adds	r0, #1
 8009e6c:	d1c0      	bne.n	8009df0 <_printf_float+0x300>
 8009e6e:	e69e      	b.n	8009bae <_printf_float+0xbe>
 8009e70:	2301      	movs	r3, #1
 8009e72:	4631      	mov	r1, r6
 8009e74:	4628      	mov	r0, r5
 8009e76:	9205      	str	r2, [sp, #20]
 8009e78:	47b8      	blx	r7
 8009e7a:	3001      	adds	r0, #1
 8009e7c:	f43f ae97 	beq.w	8009bae <_printf_float+0xbe>
 8009e80:	9a05      	ldr	r2, [sp, #20]
 8009e82:	f10b 0b01 	add.w	fp, fp, #1
 8009e86:	e7b9      	b.n	8009dfc <_printf_float+0x30c>
 8009e88:	ee18 3a10 	vmov	r3, s16
 8009e8c:	4652      	mov	r2, sl
 8009e8e:	4631      	mov	r1, r6
 8009e90:	4628      	mov	r0, r5
 8009e92:	47b8      	blx	r7
 8009e94:	3001      	adds	r0, #1
 8009e96:	d1be      	bne.n	8009e16 <_printf_float+0x326>
 8009e98:	e689      	b.n	8009bae <_printf_float+0xbe>
 8009e9a:	9a05      	ldr	r2, [sp, #20]
 8009e9c:	464b      	mov	r3, r9
 8009e9e:	4442      	add	r2, r8
 8009ea0:	4631      	mov	r1, r6
 8009ea2:	4628      	mov	r0, r5
 8009ea4:	47b8      	blx	r7
 8009ea6:	3001      	adds	r0, #1
 8009ea8:	d1c1      	bne.n	8009e2e <_printf_float+0x33e>
 8009eaa:	e680      	b.n	8009bae <_printf_float+0xbe>
 8009eac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009eae:	2a01      	cmp	r2, #1
 8009eb0:	dc01      	bgt.n	8009eb6 <_printf_float+0x3c6>
 8009eb2:	07db      	lsls	r3, r3, #31
 8009eb4:	d53a      	bpl.n	8009f2c <_printf_float+0x43c>
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	4642      	mov	r2, r8
 8009eba:	4631      	mov	r1, r6
 8009ebc:	4628      	mov	r0, r5
 8009ebe:	47b8      	blx	r7
 8009ec0:	3001      	adds	r0, #1
 8009ec2:	f43f ae74 	beq.w	8009bae <_printf_float+0xbe>
 8009ec6:	ee18 3a10 	vmov	r3, s16
 8009eca:	4652      	mov	r2, sl
 8009ecc:	4631      	mov	r1, r6
 8009ece:	4628      	mov	r0, r5
 8009ed0:	47b8      	blx	r7
 8009ed2:	3001      	adds	r0, #1
 8009ed4:	f43f ae6b 	beq.w	8009bae <_printf_float+0xbe>
 8009ed8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009edc:	2200      	movs	r2, #0
 8009ede:	2300      	movs	r3, #0
 8009ee0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009ee4:	f7f6 fe10 	bl	8000b08 <__aeabi_dcmpeq>
 8009ee8:	b9d8      	cbnz	r0, 8009f22 <_printf_float+0x432>
 8009eea:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009eee:	f108 0201 	add.w	r2, r8, #1
 8009ef2:	4631      	mov	r1, r6
 8009ef4:	4628      	mov	r0, r5
 8009ef6:	47b8      	blx	r7
 8009ef8:	3001      	adds	r0, #1
 8009efa:	d10e      	bne.n	8009f1a <_printf_float+0x42a>
 8009efc:	e657      	b.n	8009bae <_printf_float+0xbe>
 8009efe:	2301      	movs	r3, #1
 8009f00:	4652      	mov	r2, sl
 8009f02:	4631      	mov	r1, r6
 8009f04:	4628      	mov	r0, r5
 8009f06:	47b8      	blx	r7
 8009f08:	3001      	adds	r0, #1
 8009f0a:	f43f ae50 	beq.w	8009bae <_printf_float+0xbe>
 8009f0e:	f108 0801 	add.w	r8, r8, #1
 8009f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f14:	3b01      	subs	r3, #1
 8009f16:	4543      	cmp	r3, r8
 8009f18:	dcf1      	bgt.n	8009efe <_printf_float+0x40e>
 8009f1a:	464b      	mov	r3, r9
 8009f1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009f20:	e6da      	b.n	8009cd8 <_printf_float+0x1e8>
 8009f22:	f04f 0800 	mov.w	r8, #0
 8009f26:	f104 0a1a 	add.w	sl, r4, #26
 8009f2a:	e7f2      	b.n	8009f12 <_printf_float+0x422>
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	4642      	mov	r2, r8
 8009f30:	e7df      	b.n	8009ef2 <_printf_float+0x402>
 8009f32:	2301      	movs	r3, #1
 8009f34:	464a      	mov	r2, r9
 8009f36:	4631      	mov	r1, r6
 8009f38:	4628      	mov	r0, r5
 8009f3a:	47b8      	blx	r7
 8009f3c:	3001      	adds	r0, #1
 8009f3e:	f43f ae36 	beq.w	8009bae <_printf_float+0xbe>
 8009f42:	f108 0801 	add.w	r8, r8, #1
 8009f46:	68e3      	ldr	r3, [r4, #12]
 8009f48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f4a:	1a5b      	subs	r3, r3, r1
 8009f4c:	4543      	cmp	r3, r8
 8009f4e:	dcf0      	bgt.n	8009f32 <_printf_float+0x442>
 8009f50:	e6f8      	b.n	8009d44 <_printf_float+0x254>
 8009f52:	f04f 0800 	mov.w	r8, #0
 8009f56:	f104 0919 	add.w	r9, r4, #25
 8009f5a:	e7f4      	b.n	8009f46 <_printf_float+0x456>

08009f5c <_printf_common>:
 8009f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f60:	4616      	mov	r6, r2
 8009f62:	4699      	mov	r9, r3
 8009f64:	688a      	ldr	r2, [r1, #8]
 8009f66:	690b      	ldr	r3, [r1, #16]
 8009f68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	bfb8      	it	lt
 8009f70:	4613      	movlt	r3, r2
 8009f72:	6033      	str	r3, [r6, #0]
 8009f74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f78:	4607      	mov	r7, r0
 8009f7a:	460c      	mov	r4, r1
 8009f7c:	b10a      	cbz	r2, 8009f82 <_printf_common+0x26>
 8009f7e:	3301      	adds	r3, #1
 8009f80:	6033      	str	r3, [r6, #0]
 8009f82:	6823      	ldr	r3, [r4, #0]
 8009f84:	0699      	lsls	r1, r3, #26
 8009f86:	bf42      	ittt	mi
 8009f88:	6833      	ldrmi	r3, [r6, #0]
 8009f8a:	3302      	addmi	r3, #2
 8009f8c:	6033      	strmi	r3, [r6, #0]
 8009f8e:	6825      	ldr	r5, [r4, #0]
 8009f90:	f015 0506 	ands.w	r5, r5, #6
 8009f94:	d106      	bne.n	8009fa4 <_printf_common+0x48>
 8009f96:	f104 0a19 	add.w	sl, r4, #25
 8009f9a:	68e3      	ldr	r3, [r4, #12]
 8009f9c:	6832      	ldr	r2, [r6, #0]
 8009f9e:	1a9b      	subs	r3, r3, r2
 8009fa0:	42ab      	cmp	r3, r5
 8009fa2:	dc26      	bgt.n	8009ff2 <_printf_common+0x96>
 8009fa4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009fa8:	1e13      	subs	r3, r2, #0
 8009faa:	6822      	ldr	r2, [r4, #0]
 8009fac:	bf18      	it	ne
 8009fae:	2301      	movne	r3, #1
 8009fb0:	0692      	lsls	r2, r2, #26
 8009fb2:	d42b      	bmi.n	800a00c <_printf_common+0xb0>
 8009fb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fb8:	4649      	mov	r1, r9
 8009fba:	4638      	mov	r0, r7
 8009fbc:	47c0      	blx	r8
 8009fbe:	3001      	adds	r0, #1
 8009fc0:	d01e      	beq.n	800a000 <_printf_common+0xa4>
 8009fc2:	6823      	ldr	r3, [r4, #0]
 8009fc4:	6922      	ldr	r2, [r4, #16]
 8009fc6:	f003 0306 	and.w	r3, r3, #6
 8009fca:	2b04      	cmp	r3, #4
 8009fcc:	bf02      	ittt	eq
 8009fce:	68e5      	ldreq	r5, [r4, #12]
 8009fd0:	6833      	ldreq	r3, [r6, #0]
 8009fd2:	1aed      	subeq	r5, r5, r3
 8009fd4:	68a3      	ldr	r3, [r4, #8]
 8009fd6:	bf0c      	ite	eq
 8009fd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fdc:	2500      	movne	r5, #0
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	bfc4      	itt	gt
 8009fe2:	1a9b      	subgt	r3, r3, r2
 8009fe4:	18ed      	addgt	r5, r5, r3
 8009fe6:	2600      	movs	r6, #0
 8009fe8:	341a      	adds	r4, #26
 8009fea:	42b5      	cmp	r5, r6
 8009fec:	d11a      	bne.n	800a024 <_printf_common+0xc8>
 8009fee:	2000      	movs	r0, #0
 8009ff0:	e008      	b.n	800a004 <_printf_common+0xa8>
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	4652      	mov	r2, sl
 8009ff6:	4649      	mov	r1, r9
 8009ff8:	4638      	mov	r0, r7
 8009ffa:	47c0      	blx	r8
 8009ffc:	3001      	adds	r0, #1
 8009ffe:	d103      	bne.n	800a008 <_printf_common+0xac>
 800a000:	f04f 30ff 	mov.w	r0, #4294967295
 800a004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a008:	3501      	adds	r5, #1
 800a00a:	e7c6      	b.n	8009f9a <_printf_common+0x3e>
 800a00c:	18e1      	adds	r1, r4, r3
 800a00e:	1c5a      	adds	r2, r3, #1
 800a010:	2030      	movs	r0, #48	; 0x30
 800a012:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a016:	4422      	add	r2, r4
 800a018:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a01c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a020:	3302      	adds	r3, #2
 800a022:	e7c7      	b.n	8009fb4 <_printf_common+0x58>
 800a024:	2301      	movs	r3, #1
 800a026:	4622      	mov	r2, r4
 800a028:	4649      	mov	r1, r9
 800a02a:	4638      	mov	r0, r7
 800a02c:	47c0      	blx	r8
 800a02e:	3001      	adds	r0, #1
 800a030:	d0e6      	beq.n	800a000 <_printf_common+0xa4>
 800a032:	3601      	adds	r6, #1
 800a034:	e7d9      	b.n	8009fea <_printf_common+0x8e>
	...

0800a038 <_printf_i>:
 800a038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a03c:	7e0f      	ldrb	r7, [r1, #24]
 800a03e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a040:	2f78      	cmp	r7, #120	; 0x78
 800a042:	4691      	mov	r9, r2
 800a044:	4680      	mov	r8, r0
 800a046:	460c      	mov	r4, r1
 800a048:	469a      	mov	sl, r3
 800a04a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a04e:	d807      	bhi.n	800a060 <_printf_i+0x28>
 800a050:	2f62      	cmp	r7, #98	; 0x62
 800a052:	d80a      	bhi.n	800a06a <_printf_i+0x32>
 800a054:	2f00      	cmp	r7, #0
 800a056:	f000 80d4 	beq.w	800a202 <_printf_i+0x1ca>
 800a05a:	2f58      	cmp	r7, #88	; 0x58
 800a05c:	f000 80c0 	beq.w	800a1e0 <_printf_i+0x1a8>
 800a060:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a064:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a068:	e03a      	b.n	800a0e0 <_printf_i+0xa8>
 800a06a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a06e:	2b15      	cmp	r3, #21
 800a070:	d8f6      	bhi.n	800a060 <_printf_i+0x28>
 800a072:	a101      	add	r1, pc, #4	; (adr r1, 800a078 <_printf_i+0x40>)
 800a074:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a078:	0800a0d1 	.word	0x0800a0d1
 800a07c:	0800a0e5 	.word	0x0800a0e5
 800a080:	0800a061 	.word	0x0800a061
 800a084:	0800a061 	.word	0x0800a061
 800a088:	0800a061 	.word	0x0800a061
 800a08c:	0800a061 	.word	0x0800a061
 800a090:	0800a0e5 	.word	0x0800a0e5
 800a094:	0800a061 	.word	0x0800a061
 800a098:	0800a061 	.word	0x0800a061
 800a09c:	0800a061 	.word	0x0800a061
 800a0a0:	0800a061 	.word	0x0800a061
 800a0a4:	0800a1e9 	.word	0x0800a1e9
 800a0a8:	0800a111 	.word	0x0800a111
 800a0ac:	0800a1a3 	.word	0x0800a1a3
 800a0b0:	0800a061 	.word	0x0800a061
 800a0b4:	0800a061 	.word	0x0800a061
 800a0b8:	0800a20b 	.word	0x0800a20b
 800a0bc:	0800a061 	.word	0x0800a061
 800a0c0:	0800a111 	.word	0x0800a111
 800a0c4:	0800a061 	.word	0x0800a061
 800a0c8:	0800a061 	.word	0x0800a061
 800a0cc:	0800a1ab 	.word	0x0800a1ab
 800a0d0:	682b      	ldr	r3, [r5, #0]
 800a0d2:	1d1a      	adds	r2, r3, #4
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	602a      	str	r2, [r5, #0]
 800a0d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	e09f      	b.n	800a224 <_printf_i+0x1ec>
 800a0e4:	6820      	ldr	r0, [r4, #0]
 800a0e6:	682b      	ldr	r3, [r5, #0]
 800a0e8:	0607      	lsls	r7, r0, #24
 800a0ea:	f103 0104 	add.w	r1, r3, #4
 800a0ee:	6029      	str	r1, [r5, #0]
 800a0f0:	d501      	bpl.n	800a0f6 <_printf_i+0xbe>
 800a0f2:	681e      	ldr	r6, [r3, #0]
 800a0f4:	e003      	b.n	800a0fe <_printf_i+0xc6>
 800a0f6:	0646      	lsls	r6, r0, #25
 800a0f8:	d5fb      	bpl.n	800a0f2 <_printf_i+0xba>
 800a0fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a0fe:	2e00      	cmp	r6, #0
 800a100:	da03      	bge.n	800a10a <_printf_i+0xd2>
 800a102:	232d      	movs	r3, #45	; 0x2d
 800a104:	4276      	negs	r6, r6
 800a106:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a10a:	485a      	ldr	r0, [pc, #360]	; (800a274 <_printf_i+0x23c>)
 800a10c:	230a      	movs	r3, #10
 800a10e:	e012      	b.n	800a136 <_printf_i+0xfe>
 800a110:	682b      	ldr	r3, [r5, #0]
 800a112:	6820      	ldr	r0, [r4, #0]
 800a114:	1d19      	adds	r1, r3, #4
 800a116:	6029      	str	r1, [r5, #0]
 800a118:	0605      	lsls	r5, r0, #24
 800a11a:	d501      	bpl.n	800a120 <_printf_i+0xe8>
 800a11c:	681e      	ldr	r6, [r3, #0]
 800a11e:	e002      	b.n	800a126 <_printf_i+0xee>
 800a120:	0641      	lsls	r1, r0, #25
 800a122:	d5fb      	bpl.n	800a11c <_printf_i+0xe4>
 800a124:	881e      	ldrh	r6, [r3, #0]
 800a126:	4853      	ldr	r0, [pc, #332]	; (800a274 <_printf_i+0x23c>)
 800a128:	2f6f      	cmp	r7, #111	; 0x6f
 800a12a:	bf0c      	ite	eq
 800a12c:	2308      	moveq	r3, #8
 800a12e:	230a      	movne	r3, #10
 800a130:	2100      	movs	r1, #0
 800a132:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a136:	6865      	ldr	r5, [r4, #4]
 800a138:	60a5      	str	r5, [r4, #8]
 800a13a:	2d00      	cmp	r5, #0
 800a13c:	bfa2      	ittt	ge
 800a13e:	6821      	ldrge	r1, [r4, #0]
 800a140:	f021 0104 	bicge.w	r1, r1, #4
 800a144:	6021      	strge	r1, [r4, #0]
 800a146:	b90e      	cbnz	r6, 800a14c <_printf_i+0x114>
 800a148:	2d00      	cmp	r5, #0
 800a14a:	d04b      	beq.n	800a1e4 <_printf_i+0x1ac>
 800a14c:	4615      	mov	r5, r2
 800a14e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a152:	fb03 6711 	mls	r7, r3, r1, r6
 800a156:	5dc7      	ldrb	r7, [r0, r7]
 800a158:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a15c:	4637      	mov	r7, r6
 800a15e:	42bb      	cmp	r3, r7
 800a160:	460e      	mov	r6, r1
 800a162:	d9f4      	bls.n	800a14e <_printf_i+0x116>
 800a164:	2b08      	cmp	r3, #8
 800a166:	d10b      	bne.n	800a180 <_printf_i+0x148>
 800a168:	6823      	ldr	r3, [r4, #0]
 800a16a:	07de      	lsls	r6, r3, #31
 800a16c:	d508      	bpl.n	800a180 <_printf_i+0x148>
 800a16e:	6923      	ldr	r3, [r4, #16]
 800a170:	6861      	ldr	r1, [r4, #4]
 800a172:	4299      	cmp	r1, r3
 800a174:	bfde      	ittt	le
 800a176:	2330      	movle	r3, #48	; 0x30
 800a178:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a17c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a180:	1b52      	subs	r2, r2, r5
 800a182:	6122      	str	r2, [r4, #16]
 800a184:	f8cd a000 	str.w	sl, [sp]
 800a188:	464b      	mov	r3, r9
 800a18a:	aa03      	add	r2, sp, #12
 800a18c:	4621      	mov	r1, r4
 800a18e:	4640      	mov	r0, r8
 800a190:	f7ff fee4 	bl	8009f5c <_printf_common>
 800a194:	3001      	adds	r0, #1
 800a196:	d14a      	bne.n	800a22e <_printf_i+0x1f6>
 800a198:	f04f 30ff 	mov.w	r0, #4294967295
 800a19c:	b004      	add	sp, #16
 800a19e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1a2:	6823      	ldr	r3, [r4, #0]
 800a1a4:	f043 0320 	orr.w	r3, r3, #32
 800a1a8:	6023      	str	r3, [r4, #0]
 800a1aa:	4833      	ldr	r0, [pc, #204]	; (800a278 <_printf_i+0x240>)
 800a1ac:	2778      	movs	r7, #120	; 0x78
 800a1ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a1b2:	6823      	ldr	r3, [r4, #0]
 800a1b4:	6829      	ldr	r1, [r5, #0]
 800a1b6:	061f      	lsls	r7, r3, #24
 800a1b8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a1bc:	d402      	bmi.n	800a1c4 <_printf_i+0x18c>
 800a1be:	065f      	lsls	r7, r3, #25
 800a1c0:	bf48      	it	mi
 800a1c2:	b2b6      	uxthmi	r6, r6
 800a1c4:	07df      	lsls	r7, r3, #31
 800a1c6:	bf48      	it	mi
 800a1c8:	f043 0320 	orrmi.w	r3, r3, #32
 800a1cc:	6029      	str	r1, [r5, #0]
 800a1ce:	bf48      	it	mi
 800a1d0:	6023      	strmi	r3, [r4, #0]
 800a1d2:	b91e      	cbnz	r6, 800a1dc <_printf_i+0x1a4>
 800a1d4:	6823      	ldr	r3, [r4, #0]
 800a1d6:	f023 0320 	bic.w	r3, r3, #32
 800a1da:	6023      	str	r3, [r4, #0]
 800a1dc:	2310      	movs	r3, #16
 800a1de:	e7a7      	b.n	800a130 <_printf_i+0xf8>
 800a1e0:	4824      	ldr	r0, [pc, #144]	; (800a274 <_printf_i+0x23c>)
 800a1e2:	e7e4      	b.n	800a1ae <_printf_i+0x176>
 800a1e4:	4615      	mov	r5, r2
 800a1e6:	e7bd      	b.n	800a164 <_printf_i+0x12c>
 800a1e8:	682b      	ldr	r3, [r5, #0]
 800a1ea:	6826      	ldr	r6, [r4, #0]
 800a1ec:	6961      	ldr	r1, [r4, #20]
 800a1ee:	1d18      	adds	r0, r3, #4
 800a1f0:	6028      	str	r0, [r5, #0]
 800a1f2:	0635      	lsls	r5, r6, #24
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	d501      	bpl.n	800a1fc <_printf_i+0x1c4>
 800a1f8:	6019      	str	r1, [r3, #0]
 800a1fa:	e002      	b.n	800a202 <_printf_i+0x1ca>
 800a1fc:	0670      	lsls	r0, r6, #25
 800a1fe:	d5fb      	bpl.n	800a1f8 <_printf_i+0x1c0>
 800a200:	8019      	strh	r1, [r3, #0]
 800a202:	2300      	movs	r3, #0
 800a204:	6123      	str	r3, [r4, #16]
 800a206:	4615      	mov	r5, r2
 800a208:	e7bc      	b.n	800a184 <_printf_i+0x14c>
 800a20a:	682b      	ldr	r3, [r5, #0]
 800a20c:	1d1a      	adds	r2, r3, #4
 800a20e:	602a      	str	r2, [r5, #0]
 800a210:	681d      	ldr	r5, [r3, #0]
 800a212:	6862      	ldr	r2, [r4, #4]
 800a214:	2100      	movs	r1, #0
 800a216:	4628      	mov	r0, r5
 800a218:	f7f5 fffa 	bl	8000210 <memchr>
 800a21c:	b108      	cbz	r0, 800a222 <_printf_i+0x1ea>
 800a21e:	1b40      	subs	r0, r0, r5
 800a220:	6060      	str	r0, [r4, #4]
 800a222:	6863      	ldr	r3, [r4, #4]
 800a224:	6123      	str	r3, [r4, #16]
 800a226:	2300      	movs	r3, #0
 800a228:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a22c:	e7aa      	b.n	800a184 <_printf_i+0x14c>
 800a22e:	6923      	ldr	r3, [r4, #16]
 800a230:	462a      	mov	r2, r5
 800a232:	4649      	mov	r1, r9
 800a234:	4640      	mov	r0, r8
 800a236:	47d0      	blx	sl
 800a238:	3001      	adds	r0, #1
 800a23a:	d0ad      	beq.n	800a198 <_printf_i+0x160>
 800a23c:	6823      	ldr	r3, [r4, #0]
 800a23e:	079b      	lsls	r3, r3, #30
 800a240:	d413      	bmi.n	800a26a <_printf_i+0x232>
 800a242:	68e0      	ldr	r0, [r4, #12]
 800a244:	9b03      	ldr	r3, [sp, #12]
 800a246:	4298      	cmp	r0, r3
 800a248:	bfb8      	it	lt
 800a24a:	4618      	movlt	r0, r3
 800a24c:	e7a6      	b.n	800a19c <_printf_i+0x164>
 800a24e:	2301      	movs	r3, #1
 800a250:	4632      	mov	r2, r6
 800a252:	4649      	mov	r1, r9
 800a254:	4640      	mov	r0, r8
 800a256:	47d0      	blx	sl
 800a258:	3001      	adds	r0, #1
 800a25a:	d09d      	beq.n	800a198 <_printf_i+0x160>
 800a25c:	3501      	adds	r5, #1
 800a25e:	68e3      	ldr	r3, [r4, #12]
 800a260:	9903      	ldr	r1, [sp, #12]
 800a262:	1a5b      	subs	r3, r3, r1
 800a264:	42ab      	cmp	r3, r5
 800a266:	dcf2      	bgt.n	800a24e <_printf_i+0x216>
 800a268:	e7eb      	b.n	800a242 <_printf_i+0x20a>
 800a26a:	2500      	movs	r5, #0
 800a26c:	f104 0619 	add.w	r6, r4, #25
 800a270:	e7f5      	b.n	800a25e <_printf_i+0x226>
 800a272:	bf00      	nop
 800a274:	0800ea60 	.word	0x0800ea60
 800a278:	0800ea71 	.word	0x0800ea71

0800a27c <_scanf_float>:
 800a27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a280:	b087      	sub	sp, #28
 800a282:	4617      	mov	r7, r2
 800a284:	9303      	str	r3, [sp, #12]
 800a286:	688b      	ldr	r3, [r1, #8]
 800a288:	1e5a      	subs	r2, r3, #1
 800a28a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a28e:	bf83      	ittte	hi
 800a290:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a294:	195b      	addhi	r3, r3, r5
 800a296:	9302      	strhi	r3, [sp, #8]
 800a298:	2300      	movls	r3, #0
 800a29a:	bf86      	itte	hi
 800a29c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a2a0:	608b      	strhi	r3, [r1, #8]
 800a2a2:	9302      	strls	r3, [sp, #8]
 800a2a4:	680b      	ldr	r3, [r1, #0]
 800a2a6:	468b      	mov	fp, r1
 800a2a8:	2500      	movs	r5, #0
 800a2aa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a2ae:	f84b 3b1c 	str.w	r3, [fp], #28
 800a2b2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a2b6:	4680      	mov	r8, r0
 800a2b8:	460c      	mov	r4, r1
 800a2ba:	465e      	mov	r6, fp
 800a2bc:	46aa      	mov	sl, r5
 800a2be:	46a9      	mov	r9, r5
 800a2c0:	9501      	str	r5, [sp, #4]
 800a2c2:	68a2      	ldr	r2, [r4, #8]
 800a2c4:	b152      	cbz	r2, 800a2dc <_scanf_float+0x60>
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	781b      	ldrb	r3, [r3, #0]
 800a2ca:	2b4e      	cmp	r3, #78	; 0x4e
 800a2cc:	d864      	bhi.n	800a398 <_scanf_float+0x11c>
 800a2ce:	2b40      	cmp	r3, #64	; 0x40
 800a2d0:	d83c      	bhi.n	800a34c <_scanf_float+0xd0>
 800a2d2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a2d6:	b2c8      	uxtb	r0, r1
 800a2d8:	280e      	cmp	r0, #14
 800a2da:	d93a      	bls.n	800a352 <_scanf_float+0xd6>
 800a2dc:	f1b9 0f00 	cmp.w	r9, #0
 800a2e0:	d003      	beq.n	800a2ea <_scanf_float+0x6e>
 800a2e2:	6823      	ldr	r3, [r4, #0]
 800a2e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2e8:	6023      	str	r3, [r4, #0]
 800a2ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a2ee:	f1ba 0f01 	cmp.w	sl, #1
 800a2f2:	f200 8113 	bhi.w	800a51c <_scanf_float+0x2a0>
 800a2f6:	455e      	cmp	r6, fp
 800a2f8:	f200 8105 	bhi.w	800a506 <_scanf_float+0x28a>
 800a2fc:	2501      	movs	r5, #1
 800a2fe:	4628      	mov	r0, r5
 800a300:	b007      	add	sp, #28
 800a302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a306:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a30a:	2a0d      	cmp	r2, #13
 800a30c:	d8e6      	bhi.n	800a2dc <_scanf_float+0x60>
 800a30e:	a101      	add	r1, pc, #4	; (adr r1, 800a314 <_scanf_float+0x98>)
 800a310:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a314:	0800a453 	.word	0x0800a453
 800a318:	0800a2dd 	.word	0x0800a2dd
 800a31c:	0800a2dd 	.word	0x0800a2dd
 800a320:	0800a2dd 	.word	0x0800a2dd
 800a324:	0800a4b3 	.word	0x0800a4b3
 800a328:	0800a48b 	.word	0x0800a48b
 800a32c:	0800a2dd 	.word	0x0800a2dd
 800a330:	0800a2dd 	.word	0x0800a2dd
 800a334:	0800a461 	.word	0x0800a461
 800a338:	0800a2dd 	.word	0x0800a2dd
 800a33c:	0800a2dd 	.word	0x0800a2dd
 800a340:	0800a2dd 	.word	0x0800a2dd
 800a344:	0800a2dd 	.word	0x0800a2dd
 800a348:	0800a419 	.word	0x0800a419
 800a34c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a350:	e7db      	b.n	800a30a <_scanf_float+0x8e>
 800a352:	290e      	cmp	r1, #14
 800a354:	d8c2      	bhi.n	800a2dc <_scanf_float+0x60>
 800a356:	a001      	add	r0, pc, #4	; (adr r0, 800a35c <_scanf_float+0xe0>)
 800a358:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a35c:	0800a40b 	.word	0x0800a40b
 800a360:	0800a2dd 	.word	0x0800a2dd
 800a364:	0800a40b 	.word	0x0800a40b
 800a368:	0800a49f 	.word	0x0800a49f
 800a36c:	0800a2dd 	.word	0x0800a2dd
 800a370:	0800a3b9 	.word	0x0800a3b9
 800a374:	0800a3f5 	.word	0x0800a3f5
 800a378:	0800a3f5 	.word	0x0800a3f5
 800a37c:	0800a3f5 	.word	0x0800a3f5
 800a380:	0800a3f5 	.word	0x0800a3f5
 800a384:	0800a3f5 	.word	0x0800a3f5
 800a388:	0800a3f5 	.word	0x0800a3f5
 800a38c:	0800a3f5 	.word	0x0800a3f5
 800a390:	0800a3f5 	.word	0x0800a3f5
 800a394:	0800a3f5 	.word	0x0800a3f5
 800a398:	2b6e      	cmp	r3, #110	; 0x6e
 800a39a:	d809      	bhi.n	800a3b0 <_scanf_float+0x134>
 800a39c:	2b60      	cmp	r3, #96	; 0x60
 800a39e:	d8b2      	bhi.n	800a306 <_scanf_float+0x8a>
 800a3a0:	2b54      	cmp	r3, #84	; 0x54
 800a3a2:	d077      	beq.n	800a494 <_scanf_float+0x218>
 800a3a4:	2b59      	cmp	r3, #89	; 0x59
 800a3a6:	d199      	bne.n	800a2dc <_scanf_float+0x60>
 800a3a8:	2d07      	cmp	r5, #7
 800a3aa:	d197      	bne.n	800a2dc <_scanf_float+0x60>
 800a3ac:	2508      	movs	r5, #8
 800a3ae:	e029      	b.n	800a404 <_scanf_float+0x188>
 800a3b0:	2b74      	cmp	r3, #116	; 0x74
 800a3b2:	d06f      	beq.n	800a494 <_scanf_float+0x218>
 800a3b4:	2b79      	cmp	r3, #121	; 0x79
 800a3b6:	e7f6      	b.n	800a3a6 <_scanf_float+0x12a>
 800a3b8:	6821      	ldr	r1, [r4, #0]
 800a3ba:	05c8      	lsls	r0, r1, #23
 800a3bc:	d51a      	bpl.n	800a3f4 <_scanf_float+0x178>
 800a3be:	9b02      	ldr	r3, [sp, #8]
 800a3c0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a3c4:	6021      	str	r1, [r4, #0]
 800a3c6:	f109 0901 	add.w	r9, r9, #1
 800a3ca:	b11b      	cbz	r3, 800a3d4 <_scanf_float+0x158>
 800a3cc:	3b01      	subs	r3, #1
 800a3ce:	3201      	adds	r2, #1
 800a3d0:	9302      	str	r3, [sp, #8]
 800a3d2:	60a2      	str	r2, [r4, #8]
 800a3d4:	68a3      	ldr	r3, [r4, #8]
 800a3d6:	3b01      	subs	r3, #1
 800a3d8:	60a3      	str	r3, [r4, #8]
 800a3da:	6923      	ldr	r3, [r4, #16]
 800a3dc:	3301      	adds	r3, #1
 800a3de:	6123      	str	r3, [r4, #16]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	3b01      	subs	r3, #1
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	607b      	str	r3, [r7, #4]
 800a3e8:	f340 8084 	ble.w	800a4f4 <_scanf_float+0x278>
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	3301      	adds	r3, #1
 800a3f0:	603b      	str	r3, [r7, #0]
 800a3f2:	e766      	b.n	800a2c2 <_scanf_float+0x46>
 800a3f4:	eb1a 0f05 	cmn.w	sl, r5
 800a3f8:	f47f af70 	bne.w	800a2dc <_scanf_float+0x60>
 800a3fc:	6822      	ldr	r2, [r4, #0]
 800a3fe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a402:	6022      	str	r2, [r4, #0]
 800a404:	f806 3b01 	strb.w	r3, [r6], #1
 800a408:	e7e4      	b.n	800a3d4 <_scanf_float+0x158>
 800a40a:	6822      	ldr	r2, [r4, #0]
 800a40c:	0610      	lsls	r0, r2, #24
 800a40e:	f57f af65 	bpl.w	800a2dc <_scanf_float+0x60>
 800a412:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a416:	e7f4      	b.n	800a402 <_scanf_float+0x186>
 800a418:	f1ba 0f00 	cmp.w	sl, #0
 800a41c:	d10e      	bne.n	800a43c <_scanf_float+0x1c0>
 800a41e:	f1b9 0f00 	cmp.w	r9, #0
 800a422:	d10e      	bne.n	800a442 <_scanf_float+0x1c6>
 800a424:	6822      	ldr	r2, [r4, #0]
 800a426:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a42a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a42e:	d108      	bne.n	800a442 <_scanf_float+0x1c6>
 800a430:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a434:	6022      	str	r2, [r4, #0]
 800a436:	f04f 0a01 	mov.w	sl, #1
 800a43a:	e7e3      	b.n	800a404 <_scanf_float+0x188>
 800a43c:	f1ba 0f02 	cmp.w	sl, #2
 800a440:	d055      	beq.n	800a4ee <_scanf_float+0x272>
 800a442:	2d01      	cmp	r5, #1
 800a444:	d002      	beq.n	800a44c <_scanf_float+0x1d0>
 800a446:	2d04      	cmp	r5, #4
 800a448:	f47f af48 	bne.w	800a2dc <_scanf_float+0x60>
 800a44c:	3501      	adds	r5, #1
 800a44e:	b2ed      	uxtb	r5, r5
 800a450:	e7d8      	b.n	800a404 <_scanf_float+0x188>
 800a452:	f1ba 0f01 	cmp.w	sl, #1
 800a456:	f47f af41 	bne.w	800a2dc <_scanf_float+0x60>
 800a45a:	f04f 0a02 	mov.w	sl, #2
 800a45e:	e7d1      	b.n	800a404 <_scanf_float+0x188>
 800a460:	b97d      	cbnz	r5, 800a482 <_scanf_float+0x206>
 800a462:	f1b9 0f00 	cmp.w	r9, #0
 800a466:	f47f af3c 	bne.w	800a2e2 <_scanf_float+0x66>
 800a46a:	6822      	ldr	r2, [r4, #0]
 800a46c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a470:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a474:	f47f af39 	bne.w	800a2ea <_scanf_float+0x6e>
 800a478:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a47c:	6022      	str	r2, [r4, #0]
 800a47e:	2501      	movs	r5, #1
 800a480:	e7c0      	b.n	800a404 <_scanf_float+0x188>
 800a482:	2d03      	cmp	r5, #3
 800a484:	d0e2      	beq.n	800a44c <_scanf_float+0x1d0>
 800a486:	2d05      	cmp	r5, #5
 800a488:	e7de      	b.n	800a448 <_scanf_float+0x1cc>
 800a48a:	2d02      	cmp	r5, #2
 800a48c:	f47f af26 	bne.w	800a2dc <_scanf_float+0x60>
 800a490:	2503      	movs	r5, #3
 800a492:	e7b7      	b.n	800a404 <_scanf_float+0x188>
 800a494:	2d06      	cmp	r5, #6
 800a496:	f47f af21 	bne.w	800a2dc <_scanf_float+0x60>
 800a49a:	2507      	movs	r5, #7
 800a49c:	e7b2      	b.n	800a404 <_scanf_float+0x188>
 800a49e:	6822      	ldr	r2, [r4, #0]
 800a4a0:	0591      	lsls	r1, r2, #22
 800a4a2:	f57f af1b 	bpl.w	800a2dc <_scanf_float+0x60>
 800a4a6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a4aa:	6022      	str	r2, [r4, #0]
 800a4ac:	f8cd 9004 	str.w	r9, [sp, #4]
 800a4b0:	e7a8      	b.n	800a404 <_scanf_float+0x188>
 800a4b2:	6822      	ldr	r2, [r4, #0]
 800a4b4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a4b8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a4bc:	d006      	beq.n	800a4cc <_scanf_float+0x250>
 800a4be:	0550      	lsls	r0, r2, #21
 800a4c0:	f57f af0c 	bpl.w	800a2dc <_scanf_float+0x60>
 800a4c4:	f1b9 0f00 	cmp.w	r9, #0
 800a4c8:	f43f af0f 	beq.w	800a2ea <_scanf_float+0x6e>
 800a4cc:	0591      	lsls	r1, r2, #22
 800a4ce:	bf58      	it	pl
 800a4d0:	9901      	ldrpl	r1, [sp, #4]
 800a4d2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a4d6:	bf58      	it	pl
 800a4d8:	eba9 0101 	subpl.w	r1, r9, r1
 800a4dc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a4e0:	bf58      	it	pl
 800a4e2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a4e6:	6022      	str	r2, [r4, #0]
 800a4e8:	f04f 0900 	mov.w	r9, #0
 800a4ec:	e78a      	b.n	800a404 <_scanf_float+0x188>
 800a4ee:	f04f 0a03 	mov.w	sl, #3
 800a4f2:	e787      	b.n	800a404 <_scanf_float+0x188>
 800a4f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a4f8:	4639      	mov	r1, r7
 800a4fa:	4640      	mov	r0, r8
 800a4fc:	4798      	blx	r3
 800a4fe:	2800      	cmp	r0, #0
 800a500:	f43f aedf 	beq.w	800a2c2 <_scanf_float+0x46>
 800a504:	e6ea      	b.n	800a2dc <_scanf_float+0x60>
 800a506:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a50a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a50e:	463a      	mov	r2, r7
 800a510:	4640      	mov	r0, r8
 800a512:	4798      	blx	r3
 800a514:	6923      	ldr	r3, [r4, #16]
 800a516:	3b01      	subs	r3, #1
 800a518:	6123      	str	r3, [r4, #16]
 800a51a:	e6ec      	b.n	800a2f6 <_scanf_float+0x7a>
 800a51c:	1e6b      	subs	r3, r5, #1
 800a51e:	2b06      	cmp	r3, #6
 800a520:	d825      	bhi.n	800a56e <_scanf_float+0x2f2>
 800a522:	2d02      	cmp	r5, #2
 800a524:	d836      	bhi.n	800a594 <_scanf_float+0x318>
 800a526:	455e      	cmp	r6, fp
 800a528:	f67f aee8 	bls.w	800a2fc <_scanf_float+0x80>
 800a52c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a530:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a534:	463a      	mov	r2, r7
 800a536:	4640      	mov	r0, r8
 800a538:	4798      	blx	r3
 800a53a:	6923      	ldr	r3, [r4, #16]
 800a53c:	3b01      	subs	r3, #1
 800a53e:	6123      	str	r3, [r4, #16]
 800a540:	e7f1      	b.n	800a526 <_scanf_float+0x2aa>
 800a542:	9802      	ldr	r0, [sp, #8]
 800a544:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a548:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a54c:	9002      	str	r0, [sp, #8]
 800a54e:	463a      	mov	r2, r7
 800a550:	4640      	mov	r0, r8
 800a552:	4798      	blx	r3
 800a554:	6923      	ldr	r3, [r4, #16]
 800a556:	3b01      	subs	r3, #1
 800a558:	6123      	str	r3, [r4, #16]
 800a55a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a55e:	fa5f fa8a 	uxtb.w	sl, sl
 800a562:	f1ba 0f02 	cmp.w	sl, #2
 800a566:	d1ec      	bne.n	800a542 <_scanf_float+0x2c6>
 800a568:	3d03      	subs	r5, #3
 800a56a:	b2ed      	uxtb	r5, r5
 800a56c:	1b76      	subs	r6, r6, r5
 800a56e:	6823      	ldr	r3, [r4, #0]
 800a570:	05da      	lsls	r2, r3, #23
 800a572:	d52f      	bpl.n	800a5d4 <_scanf_float+0x358>
 800a574:	055b      	lsls	r3, r3, #21
 800a576:	d510      	bpl.n	800a59a <_scanf_float+0x31e>
 800a578:	455e      	cmp	r6, fp
 800a57a:	f67f aebf 	bls.w	800a2fc <_scanf_float+0x80>
 800a57e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a582:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a586:	463a      	mov	r2, r7
 800a588:	4640      	mov	r0, r8
 800a58a:	4798      	blx	r3
 800a58c:	6923      	ldr	r3, [r4, #16]
 800a58e:	3b01      	subs	r3, #1
 800a590:	6123      	str	r3, [r4, #16]
 800a592:	e7f1      	b.n	800a578 <_scanf_float+0x2fc>
 800a594:	46aa      	mov	sl, r5
 800a596:	9602      	str	r6, [sp, #8]
 800a598:	e7df      	b.n	800a55a <_scanf_float+0x2de>
 800a59a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a59e:	6923      	ldr	r3, [r4, #16]
 800a5a0:	2965      	cmp	r1, #101	; 0x65
 800a5a2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a5a6:	f106 35ff 	add.w	r5, r6, #4294967295
 800a5aa:	6123      	str	r3, [r4, #16]
 800a5ac:	d00c      	beq.n	800a5c8 <_scanf_float+0x34c>
 800a5ae:	2945      	cmp	r1, #69	; 0x45
 800a5b0:	d00a      	beq.n	800a5c8 <_scanf_float+0x34c>
 800a5b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a5b6:	463a      	mov	r2, r7
 800a5b8:	4640      	mov	r0, r8
 800a5ba:	4798      	blx	r3
 800a5bc:	6923      	ldr	r3, [r4, #16]
 800a5be:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a5c2:	3b01      	subs	r3, #1
 800a5c4:	1eb5      	subs	r5, r6, #2
 800a5c6:	6123      	str	r3, [r4, #16]
 800a5c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a5cc:	463a      	mov	r2, r7
 800a5ce:	4640      	mov	r0, r8
 800a5d0:	4798      	blx	r3
 800a5d2:	462e      	mov	r6, r5
 800a5d4:	6825      	ldr	r5, [r4, #0]
 800a5d6:	f015 0510 	ands.w	r5, r5, #16
 800a5da:	d158      	bne.n	800a68e <_scanf_float+0x412>
 800a5dc:	7035      	strb	r5, [r6, #0]
 800a5de:	6823      	ldr	r3, [r4, #0]
 800a5e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a5e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5e8:	d11c      	bne.n	800a624 <_scanf_float+0x3a8>
 800a5ea:	9b01      	ldr	r3, [sp, #4]
 800a5ec:	454b      	cmp	r3, r9
 800a5ee:	eba3 0209 	sub.w	r2, r3, r9
 800a5f2:	d124      	bne.n	800a63e <_scanf_float+0x3c2>
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	4659      	mov	r1, fp
 800a5f8:	4640      	mov	r0, r8
 800a5fa:	f002 fc6d 	bl	800ced8 <_strtod_r>
 800a5fe:	9b03      	ldr	r3, [sp, #12]
 800a600:	6821      	ldr	r1, [r4, #0]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f011 0f02 	tst.w	r1, #2
 800a608:	ec57 6b10 	vmov	r6, r7, d0
 800a60c:	f103 0204 	add.w	r2, r3, #4
 800a610:	d020      	beq.n	800a654 <_scanf_float+0x3d8>
 800a612:	9903      	ldr	r1, [sp, #12]
 800a614:	600a      	str	r2, [r1, #0]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	e9c3 6700 	strd	r6, r7, [r3]
 800a61c:	68e3      	ldr	r3, [r4, #12]
 800a61e:	3301      	adds	r3, #1
 800a620:	60e3      	str	r3, [r4, #12]
 800a622:	e66c      	b.n	800a2fe <_scanf_float+0x82>
 800a624:	9b04      	ldr	r3, [sp, #16]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d0e4      	beq.n	800a5f4 <_scanf_float+0x378>
 800a62a:	9905      	ldr	r1, [sp, #20]
 800a62c:	230a      	movs	r3, #10
 800a62e:	462a      	mov	r2, r5
 800a630:	3101      	adds	r1, #1
 800a632:	4640      	mov	r0, r8
 800a634:	f002 fcd8 	bl	800cfe8 <_strtol_r>
 800a638:	9b04      	ldr	r3, [sp, #16]
 800a63a:	9e05      	ldr	r6, [sp, #20]
 800a63c:	1ac2      	subs	r2, r0, r3
 800a63e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a642:	429e      	cmp	r6, r3
 800a644:	bf28      	it	cs
 800a646:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a64a:	4912      	ldr	r1, [pc, #72]	; (800a694 <_scanf_float+0x418>)
 800a64c:	4630      	mov	r0, r6
 800a64e:	f000 f8e7 	bl	800a820 <siprintf>
 800a652:	e7cf      	b.n	800a5f4 <_scanf_float+0x378>
 800a654:	f011 0f04 	tst.w	r1, #4
 800a658:	9903      	ldr	r1, [sp, #12]
 800a65a:	600a      	str	r2, [r1, #0]
 800a65c:	d1db      	bne.n	800a616 <_scanf_float+0x39a>
 800a65e:	f8d3 8000 	ldr.w	r8, [r3]
 800a662:	ee10 2a10 	vmov	r2, s0
 800a666:	ee10 0a10 	vmov	r0, s0
 800a66a:	463b      	mov	r3, r7
 800a66c:	4639      	mov	r1, r7
 800a66e:	f7f6 fa7d 	bl	8000b6c <__aeabi_dcmpun>
 800a672:	b128      	cbz	r0, 800a680 <_scanf_float+0x404>
 800a674:	4808      	ldr	r0, [pc, #32]	; (800a698 <_scanf_float+0x41c>)
 800a676:	f000 f9f3 	bl	800aa60 <nanf>
 800a67a:	ed88 0a00 	vstr	s0, [r8]
 800a67e:	e7cd      	b.n	800a61c <_scanf_float+0x3a0>
 800a680:	4630      	mov	r0, r6
 800a682:	4639      	mov	r1, r7
 800a684:	f7f6 fad0 	bl	8000c28 <__aeabi_d2f>
 800a688:	f8c8 0000 	str.w	r0, [r8]
 800a68c:	e7c6      	b.n	800a61c <_scanf_float+0x3a0>
 800a68e:	2500      	movs	r5, #0
 800a690:	e635      	b.n	800a2fe <_scanf_float+0x82>
 800a692:	bf00      	nop
 800a694:	0800ea82 	.word	0x0800ea82
 800a698:	0800ee30 	.word	0x0800ee30

0800a69c <std>:
 800a69c:	2300      	movs	r3, #0
 800a69e:	b510      	push	{r4, lr}
 800a6a0:	4604      	mov	r4, r0
 800a6a2:	e9c0 3300 	strd	r3, r3, [r0]
 800a6a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a6aa:	6083      	str	r3, [r0, #8]
 800a6ac:	8181      	strh	r1, [r0, #12]
 800a6ae:	6643      	str	r3, [r0, #100]	; 0x64
 800a6b0:	81c2      	strh	r2, [r0, #14]
 800a6b2:	6183      	str	r3, [r0, #24]
 800a6b4:	4619      	mov	r1, r3
 800a6b6:	2208      	movs	r2, #8
 800a6b8:	305c      	adds	r0, #92	; 0x5c
 800a6ba:	f000 f942 	bl	800a942 <memset>
 800a6be:	4b0d      	ldr	r3, [pc, #52]	; (800a6f4 <std+0x58>)
 800a6c0:	6263      	str	r3, [r4, #36]	; 0x24
 800a6c2:	4b0d      	ldr	r3, [pc, #52]	; (800a6f8 <std+0x5c>)
 800a6c4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a6c6:	4b0d      	ldr	r3, [pc, #52]	; (800a6fc <std+0x60>)
 800a6c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a6ca:	4b0d      	ldr	r3, [pc, #52]	; (800a700 <std+0x64>)
 800a6cc:	6323      	str	r3, [r4, #48]	; 0x30
 800a6ce:	4b0d      	ldr	r3, [pc, #52]	; (800a704 <std+0x68>)
 800a6d0:	6224      	str	r4, [r4, #32]
 800a6d2:	429c      	cmp	r4, r3
 800a6d4:	d006      	beq.n	800a6e4 <std+0x48>
 800a6d6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a6da:	4294      	cmp	r4, r2
 800a6dc:	d002      	beq.n	800a6e4 <std+0x48>
 800a6de:	33d0      	adds	r3, #208	; 0xd0
 800a6e0:	429c      	cmp	r4, r3
 800a6e2:	d105      	bne.n	800a6f0 <std+0x54>
 800a6e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a6e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6ec:	f000 b9a6 	b.w	800aa3c <__retarget_lock_init_recursive>
 800a6f0:	bd10      	pop	{r4, pc}
 800a6f2:	bf00      	nop
 800a6f4:	0800a8b9 	.word	0x0800a8b9
 800a6f8:	0800a8df 	.word	0x0800a8df
 800a6fc:	0800a917 	.word	0x0800a917
 800a700:	0800a93b 	.word	0x0800a93b
 800a704:	200005ec 	.word	0x200005ec

0800a708 <stdio_exit_handler>:
 800a708:	4a02      	ldr	r2, [pc, #8]	; (800a714 <stdio_exit_handler+0xc>)
 800a70a:	4903      	ldr	r1, [pc, #12]	; (800a718 <stdio_exit_handler+0x10>)
 800a70c:	4803      	ldr	r0, [pc, #12]	; (800a71c <stdio_exit_handler+0x14>)
 800a70e:	f000 b869 	b.w	800a7e4 <_fwalk_sglue>
 800a712:	bf00      	nop
 800a714:	2000000c 	.word	0x2000000c
 800a718:	0800d9e9 	.word	0x0800d9e9
 800a71c:	20000018 	.word	0x20000018

0800a720 <cleanup_stdio>:
 800a720:	6841      	ldr	r1, [r0, #4]
 800a722:	4b0c      	ldr	r3, [pc, #48]	; (800a754 <cleanup_stdio+0x34>)
 800a724:	4299      	cmp	r1, r3
 800a726:	b510      	push	{r4, lr}
 800a728:	4604      	mov	r4, r0
 800a72a:	d001      	beq.n	800a730 <cleanup_stdio+0x10>
 800a72c:	f003 f95c 	bl	800d9e8 <_fflush_r>
 800a730:	68a1      	ldr	r1, [r4, #8]
 800a732:	4b09      	ldr	r3, [pc, #36]	; (800a758 <cleanup_stdio+0x38>)
 800a734:	4299      	cmp	r1, r3
 800a736:	d002      	beq.n	800a73e <cleanup_stdio+0x1e>
 800a738:	4620      	mov	r0, r4
 800a73a:	f003 f955 	bl	800d9e8 <_fflush_r>
 800a73e:	68e1      	ldr	r1, [r4, #12]
 800a740:	4b06      	ldr	r3, [pc, #24]	; (800a75c <cleanup_stdio+0x3c>)
 800a742:	4299      	cmp	r1, r3
 800a744:	d004      	beq.n	800a750 <cleanup_stdio+0x30>
 800a746:	4620      	mov	r0, r4
 800a748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a74c:	f003 b94c 	b.w	800d9e8 <_fflush_r>
 800a750:	bd10      	pop	{r4, pc}
 800a752:	bf00      	nop
 800a754:	200005ec 	.word	0x200005ec
 800a758:	20000654 	.word	0x20000654
 800a75c:	200006bc 	.word	0x200006bc

0800a760 <global_stdio_init.part.0>:
 800a760:	b510      	push	{r4, lr}
 800a762:	4b0b      	ldr	r3, [pc, #44]	; (800a790 <global_stdio_init.part.0+0x30>)
 800a764:	4c0b      	ldr	r4, [pc, #44]	; (800a794 <global_stdio_init.part.0+0x34>)
 800a766:	4a0c      	ldr	r2, [pc, #48]	; (800a798 <global_stdio_init.part.0+0x38>)
 800a768:	601a      	str	r2, [r3, #0]
 800a76a:	4620      	mov	r0, r4
 800a76c:	2200      	movs	r2, #0
 800a76e:	2104      	movs	r1, #4
 800a770:	f7ff ff94 	bl	800a69c <std>
 800a774:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a778:	2201      	movs	r2, #1
 800a77a:	2109      	movs	r1, #9
 800a77c:	f7ff ff8e 	bl	800a69c <std>
 800a780:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a784:	2202      	movs	r2, #2
 800a786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a78a:	2112      	movs	r1, #18
 800a78c:	f7ff bf86 	b.w	800a69c <std>
 800a790:	20000724 	.word	0x20000724
 800a794:	200005ec 	.word	0x200005ec
 800a798:	0800a709 	.word	0x0800a709

0800a79c <__sfp_lock_acquire>:
 800a79c:	4801      	ldr	r0, [pc, #4]	; (800a7a4 <__sfp_lock_acquire+0x8>)
 800a79e:	f000 b94e 	b.w	800aa3e <__retarget_lock_acquire_recursive>
 800a7a2:	bf00      	nop
 800a7a4:	2000072d 	.word	0x2000072d

0800a7a8 <__sfp_lock_release>:
 800a7a8:	4801      	ldr	r0, [pc, #4]	; (800a7b0 <__sfp_lock_release+0x8>)
 800a7aa:	f000 b949 	b.w	800aa40 <__retarget_lock_release_recursive>
 800a7ae:	bf00      	nop
 800a7b0:	2000072d 	.word	0x2000072d

0800a7b4 <__sinit>:
 800a7b4:	b510      	push	{r4, lr}
 800a7b6:	4604      	mov	r4, r0
 800a7b8:	f7ff fff0 	bl	800a79c <__sfp_lock_acquire>
 800a7bc:	6a23      	ldr	r3, [r4, #32]
 800a7be:	b11b      	cbz	r3, 800a7c8 <__sinit+0x14>
 800a7c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7c4:	f7ff bff0 	b.w	800a7a8 <__sfp_lock_release>
 800a7c8:	4b04      	ldr	r3, [pc, #16]	; (800a7dc <__sinit+0x28>)
 800a7ca:	6223      	str	r3, [r4, #32]
 800a7cc:	4b04      	ldr	r3, [pc, #16]	; (800a7e0 <__sinit+0x2c>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d1f5      	bne.n	800a7c0 <__sinit+0xc>
 800a7d4:	f7ff ffc4 	bl	800a760 <global_stdio_init.part.0>
 800a7d8:	e7f2      	b.n	800a7c0 <__sinit+0xc>
 800a7da:	bf00      	nop
 800a7dc:	0800a721 	.word	0x0800a721
 800a7e0:	20000724 	.word	0x20000724

0800a7e4 <_fwalk_sglue>:
 800a7e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7e8:	4607      	mov	r7, r0
 800a7ea:	4688      	mov	r8, r1
 800a7ec:	4614      	mov	r4, r2
 800a7ee:	2600      	movs	r6, #0
 800a7f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a7f4:	f1b9 0901 	subs.w	r9, r9, #1
 800a7f8:	d505      	bpl.n	800a806 <_fwalk_sglue+0x22>
 800a7fa:	6824      	ldr	r4, [r4, #0]
 800a7fc:	2c00      	cmp	r4, #0
 800a7fe:	d1f7      	bne.n	800a7f0 <_fwalk_sglue+0xc>
 800a800:	4630      	mov	r0, r6
 800a802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a806:	89ab      	ldrh	r3, [r5, #12]
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d907      	bls.n	800a81c <_fwalk_sglue+0x38>
 800a80c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a810:	3301      	adds	r3, #1
 800a812:	d003      	beq.n	800a81c <_fwalk_sglue+0x38>
 800a814:	4629      	mov	r1, r5
 800a816:	4638      	mov	r0, r7
 800a818:	47c0      	blx	r8
 800a81a:	4306      	orrs	r6, r0
 800a81c:	3568      	adds	r5, #104	; 0x68
 800a81e:	e7e9      	b.n	800a7f4 <_fwalk_sglue+0x10>

0800a820 <siprintf>:
 800a820:	b40e      	push	{r1, r2, r3}
 800a822:	b500      	push	{lr}
 800a824:	b09c      	sub	sp, #112	; 0x70
 800a826:	ab1d      	add	r3, sp, #116	; 0x74
 800a828:	9002      	str	r0, [sp, #8]
 800a82a:	9006      	str	r0, [sp, #24]
 800a82c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a830:	4809      	ldr	r0, [pc, #36]	; (800a858 <siprintf+0x38>)
 800a832:	9107      	str	r1, [sp, #28]
 800a834:	9104      	str	r1, [sp, #16]
 800a836:	4909      	ldr	r1, [pc, #36]	; (800a85c <siprintf+0x3c>)
 800a838:	f853 2b04 	ldr.w	r2, [r3], #4
 800a83c:	9105      	str	r1, [sp, #20]
 800a83e:	6800      	ldr	r0, [r0, #0]
 800a840:	9301      	str	r3, [sp, #4]
 800a842:	a902      	add	r1, sp, #8
 800a844:	f002 fc2c 	bl	800d0a0 <_svfiprintf_r>
 800a848:	9b02      	ldr	r3, [sp, #8]
 800a84a:	2200      	movs	r2, #0
 800a84c:	701a      	strb	r2, [r3, #0]
 800a84e:	b01c      	add	sp, #112	; 0x70
 800a850:	f85d eb04 	ldr.w	lr, [sp], #4
 800a854:	b003      	add	sp, #12
 800a856:	4770      	bx	lr
 800a858:	20000064 	.word	0x20000064
 800a85c:	ffff0208 	.word	0xffff0208

0800a860 <siscanf>:
 800a860:	b40e      	push	{r1, r2, r3}
 800a862:	b510      	push	{r4, lr}
 800a864:	b09f      	sub	sp, #124	; 0x7c
 800a866:	ac21      	add	r4, sp, #132	; 0x84
 800a868:	f44f 7101 	mov.w	r1, #516	; 0x204
 800a86c:	f854 2b04 	ldr.w	r2, [r4], #4
 800a870:	9201      	str	r2, [sp, #4]
 800a872:	f8ad 101c 	strh.w	r1, [sp, #28]
 800a876:	9004      	str	r0, [sp, #16]
 800a878:	9008      	str	r0, [sp, #32]
 800a87a:	f7f5 fd19 	bl	80002b0 <strlen>
 800a87e:	4b0c      	ldr	r3, [pc, #48]	; (800a8b0 <siscanf+0x50>)
 800a880:	9005      	str	r0, [sp, #20]
 800a882:	9009      	str	r0, [sp, #36]	; 0x24
 800a884:	930d      	str	r3, [sp, #52]	; 0x34
 800a886:	480b      	ldr	r0, [pc, #44]	; (800a8b4 <siscanf+0x54>)
 800a888:	9a01      	ldr	r2, [sp, #4]
 800a88a:	6800      	ldr	r0, [r0, #0]
 800a88c:	9403      	str	r4, [sp, #12]
 800a88e:	2300      	movs	r3, #0
 800a890:	9311      	str	r3, [sp, #68]	; 0x44
 800a892:	9316      	str	r3, [sp, #88]	; 0x58
 800a894:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a898:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a89c:	a904      	add	r1, sp, #16
 800a89e:	4623      	mov	r3, r4
 800a8a0:	f002 fd56 	bl	800d350 <__ssvfiscanf_r>
 800a8a4:	b01f      	add	sp, #124	; 0x7c
 800a8a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8aa:	b003      	add	sp, #12
 800a8ac:	4770      	bx	lr
 800a8ae:	bf00      	nop
 800a8b0:	0800a8db 	.word	0x0800a8db
 800a8b4:	20000064 	.word	0x20000064

0800a8b8 <__sread>:
 800a8b8:	b510      	push	{r4, lr}
 800a8ba:	460c      	mov	r4, r1
 800a8bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8c0:	f000 f86e 	bl	800a9a0 <_read_r>
 800a8c4:	2800      	cmp	r0, #0
 800a8c6:	bfab      	itete	ge
 800a8c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a8ca:	89a3      	ldrhlt	r3, [r4, #12]
 800a8cc:	181b      	addge	r3, r3, r0
 800a8ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a8d2:	bfac      	ite	ge
 800a8d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a8d6:	81a3      	strhlt	r3, [r4, #12]
 800a8d8:	bd10      	pop	{r4, pc}

0800a8da <__seofread>:
 800a8da:	2000      	movs	r0, #0
 800a8dc:	4770      	bx	lr

0800a8de <__swrite>:
 800a8de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8e2:	461f      	mov	r7, r3
 800a8e4:	898b      	ldrh	r3, [r1, #12]
 800a8e6:	05db      	lsls	r3, r3, #23
 800a8e8:	4605      	mov	r5, r0
 800a8ea:	460c      	mov	r4, r1
 800a8ec:	4616      	mov	r6, r2
 800a8ee:	d505      	bpl.n	800a8fc <__swrite+0x1e>
 800a8f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8f4:	2302      	movs	r3, #2
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f000 f840 	bl	800a97c <_lseek_r>
 800a8fc:	89a3      	ldrh	r3, [r4, #12]
 800a8fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a902:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a906:	81a3      	strh	r3, [r4, #12]
 800a908:	4632      	mov	r2, r6
 800a90a:	463b      	mov	r3, r7
 800a90c:	4628      	mov	r0, r5
 800a90e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a912:	f000 b857 	b.w	800a9c4 <_write_r>

0800a916 <__sseek>:
 800a916:	b510      	push	{r4, lr}
 800a918:	460c      	mov	r4, r1
 800a91a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a91e:	f000 f82d 	bl	800a97c <_lseek_r>
 800a922:	1c43      	adds	r3, r0, #1
 800a924:	89a3      	ldrh	r3, [r4, #12]
 800a926:	bf15      	itete	ne
 800a928:	6560      	strne	r0, [r4, #84]	; 0x54
 800a92a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a92e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a932:	81a3      	strheq	r3, [r4, #12]
 800a934:	bf18      	it	ne
 800a936:	81a3      	strhne	r3, [r4, #12]
 800a938:	bd10      	pop	{r4, pc}

0800a93a <__sclose>:
 800a93a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a93e:	f000 b80d 	b.w	800a95c <_close_r>

0800a942 <memset>:
 800a942:	4402      	add	r2, r0
 800a944:	4603      	mov	r3, r0
 800a946:	4293      	cmp	r3, r2
 800a948:	d100      	bne.n	800a94c <memset+0xa>
 800a94a:	4770      	bx	lr
 800a94c:	f803 1b01 	strb.w	r1, [r3], #1
 800a950:	e7f9      	b.n	800a946 <memset+0x4>
	...

0800a954 <_localeconv_r>:
 800a954:	4800      	ldr	r0, [pc, #0]	; (800a958 <_localeconv_r+0x4>)
 800a956:	4770      	bx	lr
 800a958:	20000158 	.word	0x20000158

0800a95c <_close_r>:
 800a95c:	b538      	push	{r3, r4, r5, lr}
 800a95e:	4d06      	ldr	r5, [pc, #24]	; (800a978 <_close_r+0x1c>)
 800a960:	2300      	movs	r3, #0
 800a962:	4604      	mov	r4, r0
 800a964:	4608      	mov	r0, r1
 800a966:	602b      	str	r3, [r5, #0]
 800a968:	f7f8 f8b5 	bl	8002ad6 <_close>
 800a96c:	1c43      	adds	r3, r0, #1
 800a96e:	d102      	bne.n	800a976 <_close_r+0x1a>
 800a970:	682b      	ldr	r3, [r5, #0]
 800a972:	b103      	cbz	r3, 800a976 <_close_r+0x1a>
 800a974:	6023      	str	r3, [r4, #0]
 800a976:	bd38      	pop	{r3, r4, r5, pc}
 800a978:	20000728 	.word	0x20000728

0800a97c <_lseek_r>:
 800a97c:	b538      	push	{r3, r4, r5, lr}
 800a97e:	4d07      	ldr	r5, [pc, #28]	; (800a99c <_lseek_r+0x20>)
 800a980:	4604      	mov	r4, r0
 800a982:	4608      	mov	r0, r1
 800a984:	4611      	mov	r1, r2
 800a986:	2200      	movs	r2, #0
 800a988:	602a      	str	r2, [r5, #0]
 800a98a:	461a      	mov	r2, r3
 800a98c:	f7f8 f8ca 	bl	8002b24 <_lseek>
 800a990:	1c43      	adds	r3, r0, #1
 800a992:	d102      	bne.n	800a99a <_lseek_r+0x1e>
 800a994:	682b      	ldr	r3, [r5, #0]
 800a996:	b103      	cbz	r3, 800a99a <_lseek_r+0x1e>
 800a998:	6023      	str	r3, [r4, #0]
 800a99a:	bd38      	pop	{r3, r4, r5, pc}
 800a99c:	20000728 	.word	0x20000728

0800a9a0 <_read_r>:
 800a9a0:	b538      	push	{r3, r4, r5, lr}
 800a9a2:	4d07      	ldr	r5, [pc, #28]	; (800a9c0 <_read_r+0x20>)
 800a9a4:	4604      	mov	r4, r0
 800a9a6:	4608      	mov	r0, r1
 800a9a8:	4611      	mov	r1, r2
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	602a      	str	r2, [r5, #0]
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	f7f8 f858 	bl	8002a64 <_read>
 800a9b4:	1c43      	adds	r3, r0, #1
 800a9b6:	d102      	bne.n	800a9be <_read_r+0x1e>
 800a9b8:	682b      	ldr	r3, [r5, #0]
 800a9ba:	b103      	cbz	r3, 800a9be <_read_r+0x1e>
 800a9bc:	6023      	str	r3, [r4, #0]
 800a9be:	bd38      	pop	{r3, r4, r5, pc}
 800a9c0:	20000728 	.word	0x20000728

0800a9c4 <_write_r>:
 800a9c4:	b538      	push	{r3, r4, r5, lr}
 800a9c6:	4d07      	ldr	r5, [pc, #28]	; (800a9e4 <_write_r+0x20>)
 800a9c8:	4604      	mov	r4, r0
 800a9ca:	4608      	mov	r0, r1
 800a9cc:	4611      	mov	r1, r2
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	602a      	str	r2, [r5, #0]
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	f7f8 f863 	bl	8002a9e <_write>
 800a9d8:	1c43      	adds	r3, r0, #1
 800a9da:	d102      	bne.n	800a9e2 <_write_r+0x1e>
 800a9dc:	682b      	ldr	r3, [r5, #0]
 800a9de:	b103      	cbz	r3, 800a9e2 <_write_r+0x1e>
 800a9e0:	6023      	str	r3, [r4, #0]
 800a9e2:	bd38      	pop	{r3, r4, r5, pc}
 800a9e4:	20000728 	.word	0x20000728

0800a9e8 <__errno>:
 800a9e8:	4b01      	ldr	r3, [pc, #4]	; (800a9f0 <__errno+0x8>)
 800a9ea:	6818      	ldr	r0, [r3, #0]
 800a9ec:	4770      	bx	lr
 800a9ee:	bf00      	nop
 800a9f0:	20000064 	.word	0x20000064

0800a9f4 <__libc_init_array>:
 800a9f4:	b570      	push	{r4, r5, r6, lr}
 800a9f6:	4d0d      	ldr	r5, [pc, #52]	; (800aa2c <__libc_init_array+0x38>)
 800a9f8:	4c0d      	ldr	r4, [pc, #52]	; (800aa30 <__libc_init_array+0x3c>)
 800a9fa:	1b64      	subs	r4, r4, r5
 800a9fc:	10a4      	asrs	r4, r4, #2
 800a9fe:	2600      	movs	r6, #0
 800aa00:	42a6      	cmp	r6, r4
 800aa02:	d109      	bne.n	800aa18 <__libc_init_array+0x24>
 800aa04:	4d0b      	ldr	r5, [pc, #44]	; (800aa34 <__libc_init_array+0x40>)
 800aa06:	4c0c      	ldr	r4, [pc, #48]	; (800aa38 <__libc_init_array+0x44>)
 800aa08:	f003 ffde 	bl	800e9c8 <_init>
 800aa0c:	1b64      	subs	r4, r4, r5
 800aa0e:	10a4      	asrs	r4, r4, #2
 800aa10:	2600      	movs	r6, #0
 800aa12:	42a6      	cmp	r6, r4
 800aa14:	d105      	bne.n	800aa22 <__libc_init_array+0x2e>
 800aa16:	bd70      	pop	{r4, r5, r6, pc}
 800aa18:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa1c:	4798      	blx	r3
 800aa1e:	3601      	adds	r6, #1
 800aa20:	e7ee      	b.n	800aa00 <__libc_init_array+0xc>
 800aa22:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa26:	4798      	blx	r3
 800aa28:	3601      	adds	r6, #1
 800aa2a:	e7f2      	b.n	800aa12 <__libc_init_array+0x1e>
 800aa2c:	0800ee9c 	.word	0x0800ee9c
 800aa30:	0800ee9c 	.word	0x0800ee9c
 800aa34:	0800ee9c 	.word	0x0800ee9c
 800aa38:	0800eea0 	.word	0x0800eea0

0800aa3c <__retarget_lock_init_recursive>:
 800aa3c:	4770      	bx	lr

0800aa3e <__retarget_lock_acquire_recursive>:
 800aa3e:	4770      	bx	lr

0800aa40 <__retarget_lock_release_recursive>:
 800aa40:	4770      	bx	lr

0800aa42 <memcpy>:
 800aa42:	440a      	add	r2, r1
 800aa44:	4291      	cmp	r1, r2
 800aa46:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa4a:	d100      	bne.n	800aa4e <memcpy+0xc>
 800aa4c:	4770      	bx	lr
 800aa4e:	b510      	push	{r4, lr}
 800aa50:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa54:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa58:	4291      	cmp	r1, r2
 800aa5a:	d1f9      	bne.n	800aa50 <memcpy+0xe>
 800aa5c:	bd10      	pop	{r4, pc}
	...

0800aa60 <nanf>:
 800aa60:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800aa68 <nanf+0x8>
 800aa64:	4770      	bx	lr
 800aa66:	bf00      	nop
 800aa68:	7fc00000 	.word	0x7fc00000

0800aa6c <quorem>:
 800aa6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa70:	6903      	ldr	r3, [r0, #16]
 800aa72:	690c      	ldr	r4, [r1, #16]
 800aa74:	42a3      	cmp	r3, r4
 800aa76:	4607      	mov	r7, r0
 800aa78:	db7e      	blt.n	800ab78 <quorem+0x10c>
 800aa7a:	3c01      	subs	r4, #1
 800aa7c:	f101 0814 	add.w	r8, r1, #20
 800aa80:	f100 0514 	add.w	r5, r0, #20
 800aa84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa88:	9301      	str	r3, [sp, #4]
 800aa8a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aa8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa92:	3301      	adds	r3, #1
 800aa94:	429a      	cmp	r2, r3
 800aa96:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800aa9a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aa9e:	fbb2 f6f3 	udiv	r6, r2, r3
 800aaa2:	d331      	bcc.n	800ab08 <quorem+0x9c>
 800aaa4:	f04f 0e00 	mov.w	lr, #0
 800aaa8:	4640      	mov	r0, r8
 800aaaa:	46ac      	mov	ip, r5
 800aaac:	46f2      	mov	sl, lr
 800aaae:	f850 2b04 	ldr.w	r2, [r0], #4
 800aab2:	b293      	uxth	r3, r2
 800aab4:	fb06 e303 	mla	r3, r6, r3, lr
 800aab8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800aabc:	0c1a      	lsrs	r2, r3, #16
 800aabe:	b29b      	uxth	r3, r3
 800aac0:	ebaa 0303 	sub.w	r3, sl, r3
 800aac4:	f8dc a000 	ldr.w	sl, [ip]
 800aac8:	fa13 f38a 	uxtah	r3, r3, sl
 800aacc:	fb06 220e 	mla	r2, r6, lr, r2
 800aad0:	9300      	str	r3, [sp, #0]
 800aad2:	9b00      	ldr	r3, [sp, #0]
 800aad4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800aad8:	b292      	uxth	r2, r2
 800aada:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800aade:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aae2:	f8bd 3000 	ldrh.w	r3, [sp]
 800aae6:	4581      	cmp	r9, r0
 800aae8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aaec:	f84c 3b04 	str.w	r3, [ip], #4
 800aaf0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800aaf4:	d2db      	bcs.n	800aaae <quorem+0x42>
 800aaf6:	f855 300b 	ldr.w	r3, [r5, fp]
 800aafa:	b92b      	cbnz	r3, 800ab08 <quorem+0x9c>
 800aafc:	9b01      	ldr	r3, [sp, #4]
 800aafe:	3b04      	subs	r3, #4
 800ab00:	429d      	cmp	r5, r3
 800ab02:	461a      	mov	r2, r3
 800ab04:	d32c      	bcc.n	800ab60 <quorem+0xf4>
 800ab06:	613c      	str	r4, [r7, #16]
 800ab08:	4638      	mov	r0, r7
 800ab0a:	f001 f9f1 	bl	800bef0 <__mcmp>
 800ab0e:	2800      	cmp	r0, #0
 800ab10:	db22      	blt.n	800ab58 <quorem+0xec>
 800ab12:	3601      	adds	r6, #1
 800ab14:	4629      	mov	r1, r5
 800ab16:	2000      	movs	r0, #0
 800ab18:	f858 2b04 	ldr.w	r2, [r8], #4
 800ab1c:	f8d1 c000 	ldr.w	ip, [r1]
 800ab20:	b293      	uxth	r3, r2
 800ab22:	1ac3      	subs	r3, r0, r3
 800ab24:	0c12      	lsrs	r2, r2, #16
 800ab26:	fa13 f38c 	uxtah	r3, r3, ip
 800ab2a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ab2e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab38:	45c1      	cmp	r9, r8
 800ab3a:	f841 3b04 	str.w	r3, [r1], #4
 800ab3e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ab42:	d2e9      	bcs.n	800ab18 <quorem+0xac>
 800ab44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab48:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab4c:	b922      	cbnz	r2, 800ab58 <quorem+0xec>
 800ab4e:	3b04      	subs	r3, #4
 800ab50:	429d      	cmp	r5, r3
 800ab52:	461a      	mov	r2, r3
 800ab54:	d30a      	bcc.n	800ab6c <quorem+0x100>
 800ab56:	613c      	str	r4, [r7, #16]
 800ab58:	4630      	mov	r0, r6
 800ab5a:	b003      	add	sp, #12
 800ab5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab60:	6812      	ldr	r2, [r2, #0]
 800ab62:	3b04      	subs	r3, #4
 800ab64:	2a00      	cmp	r2, #0
 800ab66:	d1ce      	bne.n	800ab06 <quorem+0x9a>
 800ab68:	3c01      	subs	r4, #1
 800ab6a:	e7c9      	b.n	800ab00 <quorem+0x94>
 800ab6c:	6812      	ldr	r2, [r2, #0]
 800ab6e:	3b04      	subs	r3, #4
 800ab70:	2a00      	cmp	r2, #0
 800ab72:	d1f0      	bne.n	800ab56 <quorem+0xea>
 800ab74:	3c01      	subs	r4, #1
 800ab76:	e7eb      	b.n	800ab50 <quorem+0xe4>
 800ab78:	2000      	movs	r0, #0
 800ab7a:	e7ee      	b.n	800ab5a <quorem+0xee>
 800ab7c:	0000      	movs	r0, r0
	...

0800ab80 <_dtoa_r>:
 800ab80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab84:	ed2d 8b04 	vpush	{d8-d9}
 800ab88:	69c5      	ldr	r5, [r0, #28]
 800ab8a:	b093      	sub	sp, #76	; 0x4c
 800ab8c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ab90:	ec57 6b10 	vmov	r6, r7, d0
 800ab94:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ab98:	9107      	str	r1, [sp, #28]
 800ab9a:	4604      	mov	r4, r0
 800ab9c:	920a      	str	r2, [sp, #40]	; 0x28
 800ab9e:	930d      	str	r3, [sp, #52]	; 0x34
 800aba0:	b975      	cbnz	r5, 800abc0 <_dtoa_r+0x40>
 800aba2:	2010      	movs	r0, #16
 800aba4:	f000 fe2a 	bl	800b7fc <malloc>
 800aba8:	4602      	mov	r2, r0
 800abaa:	61e0      	str	r0, [r4, #28]
 800abac:	b920      	cbnz	r0, 800abb8 <_dtoa_r+0x38>
 800abae:	4bae      	ldr	r3, [pc, #696]	; (800ae68 <_dtoa_r+0x2e8>)
 800abb0:	21ef      	movs	r1, #239	; 0xef
 800abb2:	48ae      	ldr	r0, [pc, #696]	; (800ae6c <_dtoa_r+0x2ec>)
 800abb4:	f002 fff8 	bl	800dba8 <__assert_func>
 800abb8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800abbc:	6005      	str	r5, [r0, #0]
 800abbe:	60c5      	str	r5, [r0, #12]
 800abc0:	69e3      	ldr	r3, [r4, #28]
 800abc2:	6819      	ldr	r1, [r3, #0]
 800abc4:	b151      	cbz	r1, 800abdc <_dtoa_r+0x5c>
 800abc6:	685a      	ldr	r2, [r3, #4]
 800abc8:	604a      	str	r2, [r1, #4]
 800abca:	2301      	movs	r3, #1
 800abcc:	4093      	lsls	r3, r2
 800abce:	608b      	str	r3, [r1, #8]
 800abd0:	4620      	mov	r0, r4
 800abd2:	f000 ff07 	bl	800b9e4 <_Bfree>
 800abd6:	69e3      	ldr	r3, [r4, #28]
 800abd8:	2200      	movs	r2, #0
 800abda:	601a      	str	r2, [r3, #0]
 800abdc:	1e3b      	subs	r3, r7, #0
 800abde:	bfbb      	ittet	lt
 800abe0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800abe4:	9303      	strlt	r3, [sp, #12]
 800abe6:	2300      	movge	r3, #0
 800abe8:	2201      	movlt	r2, #1
 800abea:	bfac      	ite	ge
 800abec:	f8c8 3000 	strge.w	r3, [r8]
 800abf0:	f8c8 2000 	strlt.w	r2, [r8]
 800abf4:	4b9e      	ldr	r3, [pc, #632]	; (800ae70 <_dtoa_r+0x2f0>)
 800abf6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800abfa:	ea33 0308 	bics.w	r3, r3, r8
 800abfe:	d11b      	bne.n	800ac38 <_dtoa_r+0xb8>
 800ac00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac02:	f242 730f 	movw	r3, #9999	; 0x270f
 800ac06:	6013      	str	r3, [r2, #0]
 800ac08:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ac0c:	4333      	orrs	r3, r6
 800ac0e:	f000 8593 	beq.w	800b738 <_dtoa_r+0xbb8>
 800ac12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac14:	b963      	cbnz	r3, 800ac30 <_dtoa_r+0xb0>
 800ac16:	4b97      	ldr	r3, [pc, #604]	; (800ae74 <_dtoa_r+0x2f4>)
 800ac18:	e027      	b.n	800ac6a <_dtoa_r+0xea>
 800ac1a:	4b97      	ldr	r3, [pc, #604]	; (800ae78 <_dtoa_r+0x2f8>)
 800ac1c:	9300      	str	r3, [sp, #0]
 800ac1e:	3308      	adds	r3, #8
 800ac20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ac22:	6013      	str	r3, [r2, #0]
 800ac24:	9800      	ldr	r0, [sp, #0]
 800ac26:	b013      	add	sp, #76	; 0x4c
 800ac28:	ecbd 8b04 	vpop	{d8-d9}
 800ac2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac30:	4b90      	ldr	r3, [pc, #576]	; (800ae74 <_dtoa_r+0x2f4>)
 800ac32:	9300      	str	r3, [sp, #0]
 800ac34:	3303      	adds	r3, #3
 800ac36:	e7f3      	b.n	800ac20 <_dtoa_r+0xa0>
 800ac38:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	ec51 0b17 	vmov	r0, r1, d7
 800ac42:	eeb0 8a47 	vmov.f32	s16, s14
 800ac46:	eef0 8a67 	vmov.f32	s17, s15
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	f7f5 ff5c 	bl	8000b08 <__aeabi_dcmpeq>
 800ac50:	4681      	mov	r9, r0
 800ac52:	b160      	cbz	r0, 800ac6e <_dtoa_r+0xee>
 800ac54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac56:	2301      	movs	r3, #1
 800ac58:	6013      	str	r3, [r2, #0]
 800ac5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	f000 8568 	beq.w	800b732 <_dtoa_r+0xbb2>
 800ac62:	4b86      	ldr	r3, [pc, #536]	; (800ae7c <_dtoa_r+0x2fc>)
 800ac64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ac66:	6013      	str	r3, [r2, #0]
 800ac68:	3b01      	subs	r3, #1
 800ac6a:	9300      	str	r3, [sp, #0]
 800ac6c:	e7da      	b.n	800ac24 <_dtoa_r+0xa4>
 800ac6e:	aa10      	add	r2, sp, #64	; 0x40
 800ac70:	a911      	add	r1, sp, #68	; 0x44
 800ac72:	4620      	mov	r0, r4
 800ac74:	eeb0 0a48 	vmov.f32	s0, s16
 800ac78:	eef0 0a68 	vmov.f32	s1, s17
 800ac7c:	f001 fa4e 	bl	800c11c <__d2b>
 800ac80:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ac84:	4682      	mov	sl, r0
 800ac86:	2d00      	cmp	r5, #0
 800ac88:	d07f      	beq.n	800ad8a <_dtoa_r+0x20a>
 800ac8a:	ee18 3a90 	vmov	r3, s17
 800ac8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac92:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ac96:	ec51 0b18 	vmov	r0, r1, d8
 800ac9a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ac9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800aca2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800aca6:	4619      	mov	r1, r3
 800aca8:	2200      	movs	r2, #0
 800acaa:	4b75      	ldr	r3, [pc, #468]	; (800ae80 <_dtoa_r+0x300>)
 800acac:	f7f5 fb0c 	bl	80002c8 <__aeabi_dsub>
 800acb0:	a367      	add	r3, pc, #412	; (adr r3, 800ae50 <_dtoa_r+0x2d0>)
 800acb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb6:	f7f5 fcbf 	bl	8000638 <__aeabi_dmul>
 800acba:	a367      	add	r3, pc, #412	; (adr r3, 800ae58 <_dtoa_r+0x2d8>)
 800acbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc0:	f7f5 fb04 	bl	80002cc <__adddf3>
 800acc4:	4606      	mov	r6, r0
 800acc6:	4628      	mov	r0, r5
 800acc8:	460f      	mov	r7, r1
 800acca:	f7f5 fc4b 	bl	8000564 <__aeabi_i2d>
 800acce:	a364      	add	r3, pc, #400	; (adr r3, 800ae60 <_dtoa_r+0x2e0>)
 800acd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd4:	f7f5 fcb0 	bl	8000638 <__aeabi_dmul>
 800acd8:	4602      	mov	r2, r0
 800acda:	460b      	mov	r3, r1
 800acdc:	4630      	mov	r0, r6
 800acde:	4639      	mov	r1, r7
 800ace0:	f7f5 faf4 	bl	80002cc <__adddf3>
 800ace4:	4606      	mov	r6, r0
 800ace6:	460f      	mov	r7, r1
 800ace8:	f7f5 ff56 	bl	8000b98 <__aeabi_d2iz>
 800acec:	2200      	movs	r2, #0
 800acee:	4683      	mov	fp, r0
 800acf0:	2300      	movs	r3, #0
 800acf2:	4630      	mov	r0, r6
 800acf4:	4639      	mov	r1, r7
 800acf6:	f7f5 ff11 	bl	8000b1c <__aeabi_dcmplt>
 800acfa:	b148      	cbz	r0, 800ad10 <_dtoa_r+0x190>
 800acfc:	4658      	mov	r0, fp
 800acfe:	f7f5 fc31 	bl	8000564 <__aeabi_i2d>
 800ad02:	4632      	mov	r2, r6
 800ad04:	463b      	mov	r3, r7
 800ad06:	f7f5 feff 	bl	8000b08 <__aeabi_dcmpeq>
 800ad0a:	b908      	cbnz	r0, 800ad10 <_dtoa_r+0x190>
 800ad0c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ad10:	f1bb 0f16 	cmp.w	fp, #22
 800ad14:	d857      	bhi.n	800adc6 <_dtoa_r+0x246>
 800ad16:	4b5b      	ldr	r3, [pc, #364]	; (800ae84 <_dtoa_r+0x304>)
 800ad18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ad1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad20:	ec51 0b18 	vmov	r0, r1, d8
 800ad24:	f7f5 fefa 	bl	8000b1c <__aeabi_dcmplt>
 800ad28:	2800      	cmp	r0, #0
 800ad2a:	d04e      	beq.n	800adca <_dtoa_r+0x24a>
 800ad2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ad30:	2300      	movs	r3, #0
 800ad32:	930c      	str	r3, [sp, #48]	; 0x30
 800ad34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ad36:	1b5b      	subs	r3, r3, r5
 800ad38:	1e5a      	subs	r2, r3, #1
 800ad3a:	bf45      	ittet	mi
 800ad3c:	f1c3 0301 	rsbmi	r3, r3, #1
 800ad40:	9305      	strmi	r3, [sp, #20]
 800ad42:	2300      	movpl	r3, #0
 800ad44:	2300      	movmi	r3, #0
 800ad46:	9206      	str	r2, [sp, #24]
 800ad48:	bf54      	ite	pl
 800ad4a:	9305      	strpl	r3, [sp, #20]
 800ad4c:	9306      	strmi	r3, [sp, #24]
 800ad4e:	f1bb 0f00 	cmp.w	fp, #0
 800ad52:	db3c      	blt.n	800adce <_dtoa_r+0x24e>
 800ad54:	9b06      	ldr	r3, [sp, #24]
 800ad56:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ad5a:	445b      	add	r3, fp
 800ad5c:	9306      	str	r3, [sp, #24]
 800ad5e:	2300      	movs	r3, #0
 800ad60:	9308      	str	r3, [sp, #32]
 800ad62:	9b07      	ldr	r3, [sp, #28]
 800ad64:	2b09      	cmp	r3, #9
 800ad66:	d868      	bhi.n	800ae3a <_dtoa_r+0x2ba>
 800ad68:	2b05      	cmp	r3, #5
 800ad6a:	bfc4      	itt	gt
 800ad6c:	3b04      	subgt	r3, #4
 800ad6e:	9307      	strgt	r3, [sp, #28]
 800ad70:	9b07      	ldr	r3, [sp, #28]
 800ad72:	f1a3 0302 	sub.w	r3, r3, #2
 800ad76:	bfcc      	ite	gt
 800ad78:	2500      	movgt	r5, #0
 800ad7a:	2501      	movle	r5, #1
 800ad7c:	2b03      	cmp	r3, #3
 800ad7e:	f200 8085 	bhi.w	800ae8c <_dtoa_r+0x30c>
 800ad82:	e8df f003 	tbb	[pc, r3]
 800ad86:	3b2e      	.short	0x3b2e
 800ad88:	5839      	.short	0x5839
 800ad8a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ad8e:	441d      	add	r5, r3
 800ad90:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ad94:	2b20      	cmp	r3, #32
 800ad96:	bfc1      	itttt	gt
 800ad98:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ad9c:	fa08 f803 	lslgt.w	r8, r8, r3
 800ada0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ada4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ada8:	bfd6      	itet	le
 800adaa:	f1c3 0320 	rsble	r3, r3, #32
 800adae:	ea48 0003 	orrgt.w	r0, r8, r3
 800adb2:	fa06 f003 	lslle.w	r0, r6, r3
 800adb6:	f7f5 fbc5 	bl	8000544 <__aeabi_ui2d>
 800adba:	2201      	movs	r2, #1
 800adbc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800adc0:	3d01      	subs	r5, #1
 800adc2:	920e      	str	r2, [sp, #56]	; 0x38
 800adc4:	e76f      	b.n	800aca6 <_dtoa_r+0x126>
 800adc6:	2301      	movs	r3, #1
 800adc8:	e7b3      	b.n	800ad32 <_dtoa_r+0x1b2>
 800adca:	900c      	str	r0, [sp, #48]	; 0x30
 800adcc:	e7b2      	b.n	800ad34 <_dtoa_r+0x1b4>
 800adce:	9b05      	ldr	r3, [sp, #20]
 800add0:	eba3 030b 	sub.w	r3, r3, fp
 800add4:	9305      	str	r3, [sp, #20]
 800add6:	f1cb 0300 	rsb	r3, fp, #0
 800adda:	9308      	str	r3, [sp, #32]
 800addc:	2300      	movs	r3, #0
 800adde:	930b      	str	r3, [sp, #44]	; 0x2c
 800ade0:	e7bf      	b.n	800ad62 <_dtoa_r+0x1e2>
 800ade2:	2300      	movs	r3, #0
 800ade4:	9309      	str	r3, [sp, #36]	; 0x24
 800ade6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ade8:	2b00      	cmp	r3, #0
 800adea:	dc52      	bgt.n	800ae92 <_dtoa_r+0x312>
 800adec:	2301      	movs	r3, #1
 800adee:	9301      	str	r3, [sp, #4]
 800adf0:	9304      	str	r3, [sp, #16]
 800adf2:	461a      	mov	r2, r3
 800adf4:	920a      	str	r2, [sp, #40]	; 0x28
 800adf6:	e00b      	b.n	800ae10 <_dtoa_r+0x290>
 800adf8:	2301      	movs	r3, #1
 800adfa:	e7f3      	b.n	800ade4 <_dtoa_r+0x264>
 800adfc:	2300      	movs	r3, #0
 800adfe:	9309      	str	r3, [sp, #36]	; 0x24
 800ae00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae02:	445b      	add	r3, fp
 800ae04:	9301      	str	r3, [sp, #4]
 800ae06:	3301      	adds	r3, #1
 800ae08:	2b01      	cmp	r3, #1
 800ae0a:	9304      	str	r3, [sp, #16]
 800ae0c:	bfb8      	it	lt
 800ae0e:	2301      	movlt	r3, #1
 800ae10:	69e0      	ldr	r0, [r4, #28]
 800ae12:	2100      	movs	r1, #0
 800ae14:	2204      	movs	r2, #4
 800ae16:	f102 0614 	add.w	r6, r2, #20
 800ae1a:	429e      	cmp	r6, r3
 800ae1c:	d93d      	bls.n	800ae9a <_dtoa_r+0x31a>
 800ae1e:	6041      	str	r1, [r0, #4]
 800ae20:	4620      	mov	r0, r4
 800ae22:	f000 fd9f 	bl	800b964 <_Balloc>
 800ae26:	9000      	str	r0, [sp, #0]
 800ae28:	2800      	cmp	r0, #0
 800ae2a:	d139      	bne.n	800aea0 <_dtoa_r+0x320>
 800ae2c:	4b16      	ldr	r3, [pc, #88]	; (800ae88 <_dtoa_r+0x308>)
 800ae2e:	4602      	mov	r2, r0
 800ae30:	f240 11af 	movw	r1, #431	; 0x1af
 800ae34:	e6bd      	b.n	800abb2 <_dtoa_r+0x32>
 800ae36:	2301      	movs	r3, #1
 800ae38:	e7e1      	b.n	800adfe <_dtoa_r+0x27e>
 800ae3a:	2501      	movs	r5, #1
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	9307      	str	r3, [sp, #28]
 800ae40:	9509      	str	r5, [sp, #36]	; 0x24
 800ae42:	f04f 33ff 	mov.w	r3, #4294967295
 800ae46:	9301      	str	r3, [sp, #4]
 800ae48:	9304      	str	r3, [sp, #16]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	2312      	movs	r3, #18
 800ae4e:	e7d1      	b.n	800adf4 <_dtoa_r+0x274>
 800ae50:	636f4361 	.word	0x636f4361
 800ae54:	3fd287a7 	.word	0x3fd287a7
 800ae58:	8b60c8b3 	.word	0x8b60c8b3
 800ae5c:	3fc68a28 	.word	0x3fc68a28
 800ae60:	509f79fb 	.word	0x509f79fb
 800ae64:	3fd34413 	.word	0x3fd34413
 800ae68:	0800ea94 	.word	0x0800ea94
 800ae6c:	0800eaab 	.word	0x0800eaab
 800ae70:	7ff00000 	.word	0x7ff00000
 800ae74:	0800ea90 	.word	0x0800ea90
 800ae78:	0800ea87 	.word	0x0800ea87
 800ae7c:	0800ede9 	.word	0x0800ede9
 800ae80:	3ff80000 	.word	0x3ff80000
 800ae84:	0800eb98 	.word	0x0800eb98
 800ae88:	0800eb03 	.word	0x0800eb03
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	9309      	str	r3, [sp, #36]	; 0x24
 800ae90:	e7d7      	b.n	800ae42 <_dtoa_r+0x2c2>
 800ae92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae94:	9301      	str	r3, [sp, #4]
 800ae96:	9304      	str	r3, [sp, #16]
 800ae98:	e7ba      	b.n	800ae10 <_dtoa_r+0x290>
 800ae9a:	3101      	adds	r1, #1
 800ae9c:	0052      	lsls	r2, r2, #1
 800ae9e:	e7ba      	b.n	800ae16 <_dtoa_r+0x296>
 800aea0:	69e3      	ldr	r3, [r4, #28]
 800aea2:	9a00      	ldr	r2, [sp, #0]
 800aea4:	601a      	str	r2, [r3, #0]
 800aea6:	9b04      	ldr	r3, [sp, #16]
 800aea8:	2b0e      	cmp	r3, #14
 800aeaa:	f200 80a8 	bhi.w	800affe <_dtoa_r+0x47e>
 800aeae:	2d00      	cmp	r5, #0
 800aeb0:	f000 80a5 	beq.w	800affe <_dtoa_r+0x47e>
 800aeb4:	f1bb 0f00 	cmp.w	fp, #0
 800aeb8:	dd38      	ble.n	800af2c <_dtoa_r+0x3ac>
 800aeba:	4bc0      	ldr	r3, [pc, #768]	; (800b1bc <_dtoa_r+0x63c>)
 800aebc:	f00b 020f 	and.w	r2, fp, #15
 800aec0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aec4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800aec8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800aecc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800aed0:	d019      	beq.n	800af06 <_dtoa_r+0x386>
 800aed2:	4bbb      	ldr	r3, [pc, #748]	; (800b1c0 <_dtoa_r+0x640>)
 800aed4:	ec51 0b18 	vmov	r0, r1, d8
 800aed8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aedc:	f7f5 fcd6 	bl	800088c <__aeabi_ddiv>
 800aee0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aee4:	f008 080f 	and.w	r8, r8, #15
 800aee8:	2503      	movs	r5, #3
 800aeea:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b1c0 <_dtoa_r+0x640>
 800aeee:	f1b8 0f00 	cmp.w	r8, #0
 800aef2:	d10a      	bne.n	800af0a <_dtoa_r+0x38a>
 800aef4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aef8:	4632      	mov	r2, r6
 800aefa:	463b      	mov	r3, r7
 800aefc:	f7f5 fcc6 	bl	800088c <__aeabi_ddiv>
 800af00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af04:	e02b      	b.n	800af5e <_dtoa_r+0x3de>
 800af06:	2502      	movs	r5, #2
 800af08:	e7ef      	b.n	800aeea <_dtoa_r+0x36a>
 800af0a:	f018 0f01 	tst.w	r8, #1
 800af0e:	d008      	beq.n	800af22 <_dtoa_r+0x3a2>
 800af10:	4630      	mov	r0, r6
 800af12:	4639      	mov	r1, r7
 800af14:	e9d9 2300 	ldrd	r2, r3, [r9]
 800af18:	f7f5 fb8e 	bl	8000638 <__aeabi_dmul>
 800af1c:	3501      	adds	r5, #1
 800af1e:	4606      	mov	r6, r0
 800af20:	460f      	mov	r7, r1
 800af22:	ea4f 0868 	mov.w	r8, r8, asr #1
 800af26:	f109 0908 	add.w	r9, r9, #8
 800af2a:	e7e0      	b.n	800aeee <_dtoa_r+0x36e>
 800af2c:	f000 809f 	beq.w	800b06e <_dtoa_r+0x4ee>
 800af30:	f1cb 0600 	rsb	r6, fp, #0
 800af34:	4ba1      	ldr	r3, [pc, #644]	; (800b1bc <_dtoa_r+0x63c>)
 800af36:	4fa2      	ldr	r7, [pc, #648]	; (800b1c0 <_dtoa_r+0x640>)
 800af38:	f006 020f 	and.w	r2, r6, #15
 800af3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af44:	ec51 0b18 	vmov	r0, r1, d8
 800af48:	f7f5 fb76 	bl	8000638 <__aeabi_dmul>
 800af4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af50:	1136      	asrs	r6, r6, #4
 800af52:	2300      	movs	r3, #0
 800af54:	2502      	movs	r5, #2
 800af56:	2e00      	cmp	r6, #0
 800af58:	d17e      	bne.n	800b058 <_dtoa_r+0x4d8>
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d1d0      	bne.n	800af00 <_dtoa_r+0x380>
 800af5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af60:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800af64:	2b00      	cmp	r3, #0
 800af66:	f000 8084 	beq.w	800b072 <_dtoa_r+0x4f2>
 800af6a:	4b96      	ldr	r3, [pc, #600]	; (800b1c4 <_dtoa_r+0x644>)
 800af6c:	2200      	movs	r2, #0
 800af6e:	4640      	mov	r0, r8
 800af70:	4649      	mov	r1, r9
 800af72:	f7f5 fdd3 	bl	8000b1c <__aeabi_dcmplt>
 800af76:	2800      	cmp	r0, #0
 800af78:	d07b      	beq.n	800b072 <_dtoa_r+0x4f2>
 800af7a:	9b04      	ldr	r3, [sp, #16]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d078      	beq.n	800b072 <_dtoa_r+0x4f2>
 800af80:	9b01      	ldr	r3, [sp, #4]
 800af82:	2b00      	cmp	r3, #0
 800af84:	dd39      	ble.n	800affa <_dtoa_r+0x47a>
 800af86:	4b90      	ldr	r3, [pc, #576]	; (800b1c8 <_dtoa_r+0x648>)
 800af88:	2200      	movs	r2, #0
 800af8a:	4640      	mov	r0, r8
 800af8c:	4649      	mov	r1, r9
 800af8e:	f7f5 fb53 	bl	8000638 <__aeabi_dmul>
 800af92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af96:	9e01      	ldr	r6, [sp, #4]
 800af98:	f10b 37ff 	add.w	r7, fp, #4294967295
 800af9c:	3501      	adds	r5, #1
 800af9e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800afa2:	4628      	mov	r0, r5
 800afa4:	f7f5 fade 	bl	8000564 <__aeabi_i2d>
 800afa8:	4642      	mov	r2, r8
 800afaa:	464b      	mov	r3, r9
 800afac:	f7f5 fb44 	bl	8000638 <__aeabi_dmul>
 800afb0:	4b86      	ldr	r3, [pc, #536]	; (800b1cc <_dtoa_r+0x64c>)
 800afb2:	2200      	movs	r2, #0
 800afb4:	f7f5 f98a 	bl	80002cc <__adddf3>
 800afb8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800afbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afc0:	9303      	str	r3, [sp, #12]
 800afc2:	2e00      	cmp	r6, #0
 800afc4:	d158      	bne.n	800b078 <_dtoa_r+0x4f8>
 800afc6:	4b82      	ldr	r3, [pc, #520]	; (800b1d0 <_dtoa_r+0x650>)
 800afc8:	2200      	movs	r2, #0
 800afca:	4640      	mov	r0, r8
 800afcc:	4649      	mov	r1, r9
 800afce:	f7f5 f97b 	bl	80002c8 <__aeabi_dsub>
 800afd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800afd6:	4680      	mov	r8, r0
 800afd8:	4689      	mov	r9, r1
 800afda:	f7f5 fdbd 	bl	8000b58 <__aeabi_dcmpgt>
 800afde:	2800      	cmp	r0, #0
 800afe0:	f040 8296 	bne.w	800b510 <_dtoa_r+0x990>
 800afe4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800afe8:	4640      	mov	r0, r8
 800afea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800afee:	4649      	mov	r1, r9
 800aff0:	f7f5 fd94 	bl	8000b1c <__aeabi_dcmplt>
 800aff4:	2800      	cmp	r0, #0
 800aff6:	f040 8289 	bne.w	800b50c <_dtoa_r+0x98c>
 800affa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800affe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b000:	2b00      	cmp	r3, #0
 800b002:	f2c0 814e 	blt.w	800b2a2 <_dtoa_r+0x722>
 800b006:	f1bb 0f0e 	cmp.w	fp, #14
 800b00a:	f300 814a 	bgt.w	800b2a2 <_dtoa_r+0x722>
 800b00e:	4b6b      	ldr	r3, [pc, #428]	; (800b1bc <_dtoa_r+0x63c>)
 800b010:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b014:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b018:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	f280 80dc 	bge.w	800b1d8 <_dtoa_r+0x658>
 800b020:	9b04      	ldr	r3, [sp, #16]
 800b022:	2b00      	cmp	r3, #0
 800b024:	f300 80d8 	bgt.w	800b1d8 <_dtoa_r+0x658>
 800b028:	f040 826f 	bne.w	800b50a <_dtoa_r+0x98a>
 800b02c:	4b68      	ldr	r3, [pc, #416]	; (800b1d0 <_dtoa_r+0x650>)
 800b02e:	2200      	movs	r2, #0
 800b030:	4640      	mov	r0, r8
 800b032:	4649      	mov	r1, r9
 800b034:	f7f5 fb00 	bl	8000638 <__aeabi_dmul>
 800b038:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b03c:	f7f5 fd82 	bl	8000b44 <__aeabi_dcmpge>
 800b040:	9e04      	ldr	r6, [sp, #16]
 800b042:	4637      	mov	r7, r6
 800b044:	2800      	cmp	r0, #0
 800b046:	f040 8245 	bne.w	800b4d4 <_dtoa_r+0x954>
 800b04a:	9d00      	ldr	r5, [sp, #0]
 800b04c:	2331      	movs	r3, #49	; 0x31
 800b04e:	f805 3b01 	strb.w	r3, [r5], #1
 800b052:	f10b 0b01 	add.w	fp, fp, #1
 800b056:	e241      	b.n	800b4dc <_dtoa_r+0x95c>
 800b058:	07f2      	lsls	r2, r6, #31
 800b05a:	d505      	bpl.n	800b068 <_dtoa_r+0x4e8>
 800b05c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b060:	f7f5 faea 	bl	8000638 <__aeabi_dmul>
 800b064:	3501      	adds	r5, #1
 800b066:	2301      	movs	r3, #1
 800b068:	1076      	asrs	r6, r6, #1
 800b06a:	3708      	adds	r7, #8
 800b06c:	e773      	b.n	800af56 <_dtoa_r+0x3d6>
 800b06e:	2502      	movs	r5, #2
 800b070:	e775      	b.n	800af5e <_dtoa_r+0x3de>
 800b072:	9e04      	ldr	r6, [sp, #16]
 800b074:	465f      	mov	r7, fp
 800b076:	e792      	b.n	800af9e <_dtoa_r+0x41e>
 800b078:	9900      	ldr	r1, [sp, #0]
 800b07a:	4b50      	ldr	r3, [pc, #320]	; (800b1bc <_dtoa_r+0x63c>)
 800b07c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b080:	4431      	add	r1, r6
 800b082:	9102      	str	r1, [sp, #8]
 800b084:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b086:	eeb0 9a47 	vmov.f32	s18, s14
 800b08a:	eef0 9a67 	vmov.f32	s19, s15
 800b08e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b092:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b096:	2900      	cmp	r1, #0
 800b098:	d044      	beq.n	800b124 <_dtoa_r+0x5a4>
 800b09a:	494e      	ldr	r1, [pc, #312]	; (800b1d4 <_dtoa_r+0x654>)
 800b09c:	2000      	movs	r0, #0
 800b09e:	f7f5 fbf5 	bl	800088c <__aeabi_ddiv>
 800b0a2:	ec53 2b19 	vmov	r2, r3, d9
 800b0a6:	f7f5 f90f 	bl	80002c8 <__aeabi_dsub>
 800b0aa:	9d00      	ldr	r5, [sp, #0]
 800b0ac:	ec41 0b19 	vmov	d9, r0, r1
 800b0b0:	4649      	mov	r1, r9
 800b0b2:	4640      	mov	r0, r8
 800b0b4:	f7f5 fd70 	bl	8000b98 <__aeabi_d2iz>
 800b0b8:	4606      	mov	r6, r0
 800b0ba:	f7f5 fa53 	bl	8000564 <__aeabi_i2d>
 800b0be:	4602      	mov	r2, r0
 800b0c0:	460b      	mov	r3, r1
 800b0c2:	4640      	mov	r0, r8
 800b0c4:	4649      	mov	r1, r9
 800b0c6:	f7f5 f8ff 	bl	80002c8 <__aeabi_dsub>
 800b0ca:	3630      	adds	r6, #48	; 0x30
 800b0cc:	f805 6b01 	strb.w	r6, [r5], #1
 800b0d0:	ec53 2b19 	vmov	r2, r3, d9
 800b0d4:	4680      	mov	r8, r0
 800b0d6:	4689      	mov	r9, r1
 800b0d8:	f7f5 fd20 	bl	8000b1c <__aeabi_dcmplt>
 800b0dc:	2800      	cmp	r0, #0
 800b0de:	d164      	bne.n	800b1aa <_dtoa_r+0x62a>
 800b0e0:	4642      	mov	r2, r8
 800b0e2:	464b      	mov	r3, r9
 800b0e4:	4937      	ldr	r1, [pc, #220]	; (800b1c4 <_dtoa_r+0x644>)
 800b0e6:	2000      	movs	r0, #0
 800b0e8:	f7f5 f8ee 	bl	80002c8 <__aeabi_dsub>
 800b0ec:	ec53 2b19 	vmov	r2, r3, d9
 800b0f0:	f7f5 fd14 	bl	8000b1c <__aeabi_dcmplt>
 800b0f4:	2800      	cmp	r0, #0
 800b0f6:	f040 80b6 	bne.w	800b266 <_dtoa_r+0x6e6>
 800b0fa:	9b02      	ldr	r3, [sp, #8]
 800b0fc:	429d      	cmp	r5, r3
 800b0fe:	f43f af7c 	beq.w	800affa <_dtoa_r+0x47a>
 800b102:	4b31      	ldr	r3, [pc, #196]	; (800b1c8 <_dtoa_r+0x648>)
 800b104:	ec51 0b19 	vmov	r0, r1, d9
 800b108:	2200      	movs	r2, #0
 800b10a:	f7f5 fa95 	bl	8000638 <__aeabi_dmul>
 800b10e:	4b2e      	ldr	r3, [pc, #184]	; (800b1c8 <_dtoa_r+0x648>)
 800b110:	ec41 0b19 	vmov	d9, r0, r1
 800b114:	2200      	movs	r2, #0
 800b116:	4640      	mov	r0, r8
 800b118:	4649      	mov	r1, r9
 800b11a:	f7f5 fa8d 	bl	8000638 <__aeabi_dmul>
 800b11e:	4680      	mov	r8, r0
 800b120:	4689      	mov	r9, r1
 800b122:	e7c5      	b.n	800b0b0 <_dtoa_r+0x530>
 800b124:	ec51 0b17 	vmov	r0, r1, d7
 800b128:	f7f5 fa86 	bl	8000638 <__aeabi_dmul>
 800b12c:	9b02      	ldr	r3, [sp, #8]
 800b12e:	9d00      	ldr	r5, [sp, #0]
 800b130:	930f      	str	r3, [sp, #60]	; 0x3c
 800b132:	ec41 0b19 	vmov	d9, r0, r1
 800b136:	4649      	mov	r1, r9
 800b138:	4640      	mov	r0, r8
 800b13a:	f7f5 fd2d 	bl	8000b98 <__aeabi_d2iz>
 800b13e:	4606      	mov	r6, r0
 800b140:	f7f5 fa10 	bl	8000564 <__aeabi_i2d>
 800b144:	3630      	adds	r6, #48	; 0x30
 800b146:	4602      	mov	r2, r0
 800b148:	460b      	mov	r3, r1
 800b14a:	4640      	mov	r0, r8
 800b14c:	4649      	mov	r1, r9
 800b14e:	f7f5 f8bb 	bl	80002c8 <__aeabi_dsub>
 800b152:	f805 6b01 	strb.w	r6, [r5], #1
 800b156:	9b02      	ldr	r3, [sp, #8]
 800b158:	429d      	cmp	r5, r3
 800b15a:	4680      	mov	r8, r0
 800b15c:	4689      	mov	r9, r1
 800b15e:	f04f 0200 	mov.w	r2, #0
 800b162:	d124      	bne.n	800b1ae <_dtoa_r+0x62e>
 800b164:	4b1b      	ldr	r3, [pc, #108]	; (800b1d4 <_dtoa_r+0x654>)
 800b166:	ec51 0b19 	vmov	r0, r1, d9
 800b16a:	f7f5 f8af 	bl	80002cc <__adddf3>
 800b16e:	4602      	mov	r2, r0
 800b170:	460b      	mov	r3, r1
 800b172:	4640      	mov	r0, r8
 800b174:	4649      	mov	r1, r9
 800b176:	f7f5 fcef 	bl	8000b58 <__aeabi_dcmpgt>
 800b17a:	2800      	cmp	r0, #0
 800b17c:	d173      	bne.n	800b266 <_dtoa_r+0x6e6>
 800b17e:	ec53 2b19 	vmov	r2, r3, d9
 800b182:	4914      	ldr	r1, [pc, #80]	; (800b1d4 <_dtoa_r+0x654>)
 800b184:	2000      	movs	r0, #0
 800b186:	f7f5 f89f 	bl	80002c8 <__aeabi_dsub>
 800b18a:	4602      	mov	r2, r0
 800b18c:	460b      	mov	r3, r1
 800b18e:	4640      	mov	r0, r8
 800b190:	4649      	mov	r1, r9
 800b192:	f7f5 fcc3 	bl	8000b1c <__aeabi_dcmplt>
 800b196:	2800      	cmp	r0, #0
 800b198:	f43f af2f 	beq.w	800affa <_dtoa_r+0x47a>
 800b19c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b19e:	1e6b      	subs	r3, r5, #1
 800b1a0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b1a6:	2b30      	cmp	r3, #48	; 0x30
 800b1a8:	d0f8      	beq.n	800b19c <_dtoa_r+0x61c>
 800b1aa:	46bb      	mov	fp, r7
 800b1ac:	e04a      	b.n	800b244 <_dtoa_r+0x6c4>
 800b1ae:	4b06      	ldr	r3, [pc, #24]	; (800b1c8 <_dtoa_r+0x648>)
 800b1b0:	f7f5 fa42 	bl	8000638 <__aeabi_dmul>
 800b1b4:	4680      	mov	r8, r0
 800b1b6:	4689      	mov	r9, r1
 800b1b8:	e7bd      	b.n	800b136 <_dtoa_r+0x5b6>
 800b1ba:	bf00      	nop
 800b1bc:	0800eb98 	.word	0x0800eb98
 800b1c0:	0800eb70 	.word	0x0800eb70
 800b1c4:	3ff00000 	.word	0x3ff00000
 800b1c8:	40240000 	.word	0x40240000
 800b1cc:	401c0000 	.word	0x401c0000
 800b1d0:	40140000 	.word	0x40140000
 800b1d4:	3fe00000 	.word	0x3fe00000
 800b1d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b1dc:	9d00      	ldr	r5, [sp, #0]
 800b1de:	4642      	mov	r2, r8
 800b1e0:	464b      	mov	r3, r9
 800b1e2:	4630      	mov	r0, r6
 800b1e4:	4639      	mov	r1, r7
 800b1e6:	f7f5 fb51 	bl	800088c <__aeabi_ddiv>
 800b1ea:	f7f5 fcd5 	bl	8000b98 <__aeabi_d2iz>
 800b1ee:	9001      	str	r0, [sp, #4]
 800b1f0:	f7f5 f9b8 	bl	8000564 <__aeabi_i2d>
 800b1f4:	4642      	mov	r2, r8
 800b1f6:	464b      	mov	r3, r9
 800b1f8:	f7f5 fa1e 	bl	8000638 <__aeabi_dmul>
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	460b      	mov	r3, r1
 800b200:	4630      	mov	r0, r6
 800b202:	4639      	mov	r1, r7
 800b204:	f7f5 f860 	bl	80002c8 <__aeabi_dsub>
 800b208:	9e01      	ldr	r6, [sp, #4]
 800b20a:	9f04      	ldr	r7, [sp, #16]
 800b20c:	3630      	adds	r6, #48	; 0x30
 800b20e:	f805 6b01 	strb.w	r6, [r5], #1
 800b212:	9e00      	ldr	r6, [sp, #0]
 800b214:	1bae      	subs	r6, r5, r6
 800b216:	42b7      	cmp	r7, r6
 800b218:	4602      	mov	r2, r0
 800b21a:	460b      	mov	r3, r1
 800b21c:	d134      	bne.n	800b288 <_dtoa_r+0x708>
 800b21e:	f7f5 f855 	bl	80002cc <__adddf3>
 800b222:	4642      	mov	r2, r8
 800b224:	464b      	mov	r3, r9
 800b226:	4606      	mov	r6, r0
 800b228:	460f      	mov	r7, r1
 800b22a:	f7f5 fc95 	bl	8000b58 <__aeabi_dcmpgt>
 800b22e:	b9c8      	cbnz	r0, 800b264 <_dtoa_r+0x6e4>
 800b230:	4642      	mov	r2, r8
 800b232:	464b      	mov	r3, r9
 800b234:	4630      	mov	r0, r6
 800b236:	4639      	mov	r1, r7
 800b238:	f7f5 fc66 	bl	8000b08 <__aeabi_dcmpeq>
 800b23c:	b110      	cbz	r0, 800b244 <_dtoa_r+0x6c4>
 800b23e:	9b01      	ldr	r3, [sp, #4]
 800b240:	07db      	lsls	r3, r3, #31
 800b242:	d40f      	bmi.n	800b264 <_dtoa_r+0x6e4>
 800b244:	4651      	mov	r1, sl
 800b246:	4620      	mov	r0, r4
 800b248:	f000 fbcc 	bl	800b9e4 <_Bfree>
 800b24c:	2300      	movs	r3, #0
 800b24e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b250:	702b      	strb	r3, [r5, #0]
 800b252:	f10b 0301 	add.w	r3, fp, #1
 800b256:	6013      	str	r3, [r2, #0]
 800b258:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	f43f ace2 	beq.w	800ac24 <_dtoa_r+0xa4>
 800b260:	601d      	str	r5, [r3, #0]
 800b262:	e4df      	b.n	800ac24 <_dtoa_r+0xa4>
 800b264:	465f      	mov	r7, fp
 800b266:	462b      	mov	r3, r5
 800b268:	461d      	mov	r5, r3
 800b26a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b26e:	2a39      	cmp	r2, #57	; 0x39
 800b270:	d106      	bne.n	800b280 <_dtoa_r+0x700>
 800b272:	9a00      	ldr	r2, [sp, #0]
 800b274:	429a      	cmp	r2, r3
 800b276:	d1f7      	bne.n	800b268 <_dtoa_r+0x6e8>
 800b278:	9900      	ldr	r1, [sp, #0]
 800b27a:	2230      	movs	r2, #48	; 0x30
 800b27c:	3701      	adds	r7, #1
 800b27e:	700a      	strb	r2, [r1, #0]
 800b280:	781a      	ldrb	r2, [r3, #0]
 800b282:	3201      	adds	r2, #1
 800b284:	701a      	strb	r2, [r3, #0]
 800b286:	e790      	b.n	800b1aa <_dtoa_r+0x62a>
 800b288:	4ba3      	ldr	r3, [pc, #652]	; (800b518 <_dtoa_r+0x998>)
 800b28a:	2200      	movs	r2, #0
 800b28c:	f7f5 f9d4 	bl	8000638 <__aeabi_dmul>
 800b290:	2200      	movs	r2, #0
 800b292:	2300      	movs	r3, #0
 800b294:	4606      	mov	r6, r0
 800b296:	460f      	mov	r7, r1
 800b298:	f7f5 fc36 	bl	8000b08 <__aeabi_dcmpeq>
 800b29c:	2800      	cmp	r0, #0
 800b29e:	d09e      	beq.n	800b1de <_dtoa_r+0x65e>
 800b2a0:	e7d0      	b.n	800b244 <_dtoa_r+0x6c4>
 800b2a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2a4:	2a00      	cmp	r2, #0
 800b2a6:	f000 80ca 	beq.w	800b43e <_dtoa_r+0x8be>
 800b2aa:	9a07      	ldr	r2, [sp, #28]
 800b2ac:	2a01      	cmp	r2, #1
 800b2ae:	f300 80ad 	bgt.w	800b40c <_dtoa_r+0x88c>
 800b2b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b2b4:	2a00      	cmp	r2, #0
 800b2b6:	f000 80a5 	beq.w	800b404 <_dtoa_r+0x884>
 800b2ba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b2be:	9e08      	ldr	r6, [sp, #32]
 800b2c0:	9d05      	ldr	r5, [sp, #20]
 800b2c2:	9a05      	ldr	r2, [sp, #20]
 800b2c4:	441a      	add	r2, r3
 800b2c6:	9205      	str	r2, [sp, #20]
 800b2c8:	9a06      	ldr	r2, [sp, #24]
 800b2ca:	2101      	movs	r1, #1
 800b2cc:	441a      	add	r2, r3
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	9206      	str	r2, [sp, #24]
 800b2d2:	f000 fc87 	bl	800bbe4 <__i2b>
 800b2d6:	4607      	mov	r7, r0
 800b2d8:	b165      	cbz	r5, 800b2f4 <_dtoa_r+0x774>
 800b2da:	9b06      	ldr	r3, [sp, #24]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	dd09      	ble.n	800b2f4 <_dtoa_r+0x774>
 800b2e0:	42ab      	cmp	r3, r5
 800b2e2:	9a05      	ldr	r2, [sp, #20]
 800b2e4:	bfa8      	it	ge
 800b2e6:	462b      	movge	r3, r5
 800b2e8:	1ad2      	subs	r2, r2, r3
 800b2ea:	9205      	str	r2, [sp, #20]
 800b2ec:	9a06      	ldr	r2, [sp, #24]
 800b2ee:	1aed      	subs	r5, r5, r3
 800b2f0:	1ad3      	subs	r3, r2, r3
 800b2f2:	9306      	str	r3, [sp, #24]
 800b2f4:	9b08      	ldr	r3, [sp, #32]
 800b2f6:	b1f3      	cbz	r3, 800b336 <_dtoa_r+0x7b6>
 800b2f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	f000 80a3 	beq.w	800b446 <_dtoa_r+0x8c6>
 800b300:	2e00      	cmp	r6, #0
 800b302:	dd10      	ble.n	800b326 <_dtoa_r+0x7a6>
 800b304:	4639      	mov	r1, r7
 800b306:	4632      	mov	r2, r6
 800b308:	4620      	mov	r0, r4
 800b30a:	f000 fd2b 	bl	800bd64 <__pow5mult>
 800b30e:	4652      	mov	r2, sl
 800b310:	4601      	mov	r1, r0
 800b312:	4607      	mov	r7, r0
 800b314:	4620      	mov	r0, r4
 800b316:	f000 fc7b 	bl	800bc10 <__multiply>
 800b31a:	4651      	mov	r1, sl
 800b31c:	4680      	mov	r8, r0
 800b31e:	4620      	mov	r0, r4
 800b320:	f000 fb60 	bl	800b9e4 <_Bfree>
 800b324:	46c2      	mov	sl, r8
 800b326:	9b08      	ldr	r3, [sp, #32]
 800b328:	1b9a      	subs	r2, r3, r6
 800b32a:	d004      	beq.n	800b336 <_dtoa_r+0x7b6>
 800b32c:	4651      	mov	r1, sl
 800b32e:	4620      	mov	r0, r4
 800b330:	f000 fd18 	bl	800bd64 <__pow5mult>
 800b334:	4682      	mov	sl, r0
 800b336:	2101      	movs	r1, #1
 800b338:	4620      	mov	r0, r4
 800b33a:	f000 fc53 	bl	800bbe4 <__i2b>
 800b33e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b340:	2b00      	cmp	r3, #0
 800b342:	4606      	mov	r6, r0
 800b344:	f340 8081 	ble.w	800b44a <_dtoa_r+0x8ca>
 800b348:	461a      	mov	r2, r3
 800b34a:	4601      	mov	r1, r0
 800b34c:	4620      	mov	r0, r4
 800b34e:	f000 fd09 	bl	800bd64 <__pow5mult>
 800b352:	9b07      	ldr	r3, [sp, #28]
 800b354:	2b01      	cmp	r3, #1
 800b356:	4606      	mov	r6, r0
 800b358:	dd7a      	ble.n	800b450 <_dtoa_r+0x8d0>
 800b35a:	f04f 0800 	mov.w	r8, #0
 800b35e:	6933      	ldr	r3, [r6, #16]
 800b360:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b364:	6918      	ldr	r0, [r3, #16]
 800b366:	f000 fbef 	bl	800bb48 <__hi0bits>
 800b36a:	f1c0 0020 	rsb	r0, r0, #32
 800b36e:	9b06      	ldr	r3, [sp, #24]
 800b370:	4418      	add	r0, r3
 800b372:	f010 001f 	ands.w	r0, r0, #31
 800b376:	f000 8094 	beq.w	800b4a2 <_dtoa_r+0x922>
 800b37a:	f1c0 0320 	rsb	r3, r0, #32
 800b37e:	2b04      	cmp	r3, #4
 800b380:	f340 8085 	ble.w	800b48e <_dtoa_r+0x90e>
 800b384:	9b05      	ldr	r3, [sp, #20]
 800b386:	f1c0 001c 	rsb	r0, r0, #28
 800b38a:	4403      	add	r3, r0
 800b38c:	9305      	str	r3, [sp, #20]
 800b38e:	9b06      	ldr	r3, [sp, #24]
 800b390:	4403      	add	r3, r0
 800b392:	4405      	add	r5, r0
 800b394:	9306      	str	r3, [sp, #24]
 800b396:	9b05      	ldr	r3, [sp, #20]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	dd05      	ble.n	800b3a8 <_dtoa_r+0x828>
 800b39c:	4651      	mov	r1, sl
 800b39e:	461a      	mov	r2, r3
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	f000 fd39 	bl	800be18 <__lshift>
 800b3a6:	4682      	mov	sl, r0
 800b3a8:	9b06      	ldr	r3, [sp, #24]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	dd05      	ble.n	800b3ba <_dtoa_r+0x83a>
 800b3ae:	4631      	mov	r1, r6
 800b3b0:	461a      	mov	r2, r3
 800b3b2:	4620      	mov	r0, r4
 800b3b4:	f000 fd30 	bl	800be18 <__lshift>
 800b3b8:	4606      	mov	r6, r0
 800b3ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d072      	beq.n	800b4a6 <_dtoa_r+0x926>
 800b3c0:	4631      	mov	r1, r6
 800b3c2:	4650      	mov	r0, sl
 800b3c4:	f000 fd94 	bl	800bef0 <__mcmp>
 800b3c8:	2800      	cmp	r0, #0
 800b3ca:	da6c      	bge.n	800b4a6 <_dtoa_r+0x926>
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	4651      	mov	r1, sl
 800b3d0:	220a      	movs	r2, #10
 800b3d2:	4620      	mov	r0, r4
 800b3d4:	f000 fb28 	bl	800ba28 <__multadd>
 800b3d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3da:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b3de:	4682      	mov	sl, r0
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	f000 81b0 	beq.w	800b746 <_dtoa_r+0xbc6>
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	4639      	mov	r1, r7
 800b3ea:	220a      	movs	r2, #10
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	f000 fb1b 	bl	800ba28 <__multadd>
 800b3f2:	9b01      	ldr	r3, [sp, #4]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	4607      	mov	r7, r0
 800b3f8:	f300 8096 	bgt.w	800b528 <_dtoa_r+0x9a8>
 800b3fc:	9b07      	ldr	r3, [sp, #28]
 800b3fe:	2b02      	cmp	r3, #2
 800b400:	dc59      	bgt.n	800b4b6 <_dtoa_r+0x936>
 800b402:	e091      	b.n	800b528 <_dtoa_r+0x9a8>
 800b404:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b406:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b40a:	e758      	b.n	800b2be <_dtoa_r+0x73e>
 800b40c:	9b04      	ldr	r3, [sp, #16]
 800b40e:	1e5e      	subs	r6, r3, #1
 800b410:	9b08      	ldr	r3, [sp, #32]
 800b412:	42b3      	cmp	r3, r6
 800b414:	bfbf      	itttt	lt
 800b416:	9b08      	ldrlt	r3, [sp, #32]
 800b418:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b41a:	9608      	strlt	r6, [sp, #32]
 800b41c:	1af3      	sublt	r3, r6, r3
 800b41e:	bfb4      	ite	lt
 800b420:	18d2      	addlt	r2, r2, r3
 800b422:	1b9e      	subge	r6, r3, r6
 800b424:	9b04      	ldr	r3, [sp, #16]
 800b426:	bfbc      	itt	lt
 800b428:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b42a:	2600      	movlt	r6, #0
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	bfb7      	itett	lt
 800b430:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b434:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b438:	1a9d      	sublt	r5, r3, r2
 800b43a:	2300      	movlt	r3, #0
 800b43c:	e741      	b.n	800b2c2 <_dtoa_r+0x742>
 800b43e:	9e08      	ldr	r6, [sp, #32]
 800b440:	9d05      	ldr	r5, [sp, #20]
 800b442:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b444:	e748      	b.n	800b2d8 <_dtoa_r+0x758>
 800b446:	9a08      	ldr	r2, [sp, #32]
 800b448:	e770      	b.n	800b32c <_dtoa_r+0x7ac>
 800b44a:	9b07      	ldr	r3, [sp, #28]
 800b44c:	2b01      	cmp	r3, #1
 800b44e:	dc19      	bgt.n	800b484 <_dtoa_r+0x904>
 800b450:	9b02      	ldr	r3, [sp, #8]
 800b452:	b9bb      	cbnz	r3, 800b484 <_dtoa_r+0x904>
 800b454:	9b03      	ldr	r3, [sp, #12]
 800b456:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b45a:	b99b      	cbnz	r3, 800b484 <_dtoa_r+0x904>
 800b45c:	9b03      	ldr	r3, [sp, #12]
 800b45e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b462:	0d1b      	lsrs	r3, r3, #20
 800b464:	051b      	lsls	r3, r3, #20
 800b466:	b183      	cbz	r3, 800b48a <_dtoa_r+0x90a>
 800b468:	9b05      	ldr	r3, [sp, #20]
 800b46a:	3301      	adds	r3, #1
 800b46c:	9305      	str	r3, [sp, #20]
 800b46e:	9b06      	ldr	r3, [sp, #24]
 800b470:	3301      	adds	r3, #1
 800b472:	9306      	str	r3, [sp, #24]
 800b474:	f04f 0801 	mov.w	r8, #1
 800b478:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	f47f af6f 	bne.w	800b35e <_dtoa_r+0x7de>
 800b480:	2001      	movs	r0, #1
 800b482:	e774      	b.n	800b36e <_dtoa_r+0x7ee>
 800b484:	f04f 0800 	mov.w	r8, #0
 800b488:	e7f6      	b.n	800b478 <_dtoa_r+0x8f8>
 800b48a:	4698      	mov	r8, r3
 800b48c:	e7f4      	b.n	800b478 <_dtoa_r+0x8f8>
 800b48e:	d082      	beq.n	800b396 <_dtoa_r+0x816>
 800b490:	9a05      	ldr	r2, [sp, #20]
 800b492:	331c      	adds	r3, #28
 800b494:	441a      	add	r2, r3
 800b496:	9205      	str	r2, [sp, #20]
 800b498:	9a06      	ldr	r2, [sp, #24]
 800b49a:	441a      	add	r2, r3
 800b49c:	441d      	add	r5, r3
 800b49e:	9206      	str	r2, [sp, #24]
 800b4a0:	e779      	b.n	800b396 <_dtoa_r+0x816>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	e7f4      	b.n	800b490 <_dtoa_r+0x910>
 800b4a6:	9b04      	ldr	r3, [sp, #16]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	dc37      	bgt.n	800b51c <_dtoa_r+0x99c>
 800b4ac:	9b07      	ldr	r3, [sp, #28]
 800b4ae:	2b02      	cmp	r3, #2
 800b4b0:	dd34      	ble.n	800b51c <_dtoa_r+0x99c>
 800b4b2:	9b04      	ldr	r3, [sp, #16]
 800b4b4:	9301      	str	r3, [sp, #4]
 800b4b6:	9b01      	ldr	r3, [sp, #4]
 800b4b8:	b963      	cbnz	r3, 800b4d4 <_dtoa_r+0x954>
 800b4ba:	4631      	mov	r1, r6
 800b4bc:	2205      	movs	r2, #5
 800b4be:	4620      	mov	r0, r4
 800b4c0:	f000 fab2 	bl	800ba28 <__multadd>
 800b4c4:	4601      	mov	r1, r0
 800b4c6:	4606      	mov	r6, r0
 800b4c8:	4650      	mov	r0, sl
 800b4ca:	f000 fd11 	bl	800bef0 <__mcmp>
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	f73f adbb 	bgt.w	800b04a <_dtoa_r+0x4ca>
 800b4d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4d6:	9d00      	ldr	r5, [sp, #0]
 800b4d8:	ea6f 0b03 	mvn.w	fp, r3
 800b4dc:	f04f 0800 	mov.w	r8, #0
 800b4e0:	4631      	mov	r1, r6
 800b4e2:	4620      	mov	r0, r4
 800b4e4:	f000 fa7e 	bl	800b9e4 <_Bfree>
 800b4e8:	2f00      	cmp	r7, #0
 800b4ea:	f43f aeab 	beq.w	800b244 <_dtoa_r+0x6c4>
 800b4ee:	f1b8 0f00 	cmp.w	r8, #0
 800b4f2:	d005      	beq.n	800b500 <_dtoa_r+0x980>
 800b4f4:	45b8      	cmp	r8, r7
 800b4f6:	d003      	beq.n	800b500 <_dtoa_r+0x980>
 800b4f8:	4641      	mov	r1, r8
 800b4fa:	4620      	mov	r0, r4
 800b4fc:	f000 fa72 	bl	800b9e4 <_Bfree>
 800b500:	4639      	mov	r1, r7
 800b502:	4620      	mov	r0, r4
 800b504:	f000 fa6e 	bl	800b9e4 <_Bfree>
 800b508:	e69c      	b.n	800b244 <_dtoa_r+0x6c4>
 800b50a:	2600      	movs	r6, #0
 800b50c:	4637      	mov	r7, r6
 800b50e:	e7e1      	b.n	800b4d4 <_dtoa_r+0x954>
 800b510:	46bb      	mov	fp, r7
 800b512:	4637      	mov	r7, r6
 800b514:	e599      	b.n	800b04a <_dtoa_r+0x4ca>
 800b516:	bf00      	nop
 800b518:	40240000 	.word	0x40240000
 800b51c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b51e:	2b00      	cmp	r3, #0
 800b520:	f000 80c8 	beq.w	800b6b4 <_dtoa_r+0xb34>
 800b524:	9b04      	ldr	r3, [sp, #16]
 800b526:	9301      	str	r3, [sp, #4]
 800b528:	2d00      	cmp	r5, #0
 800b52a:	dd05      	ble.n	800b538 <_dtoa_r+0x9b8>
 800b52c:	4639      	mov	r1, r7
 800b52e:	462a      	mov	r2, r5
 800b530:	4620      	mov	r0, r4
 800b532:	f000 fc71 	bl	800be18 <__lshift>
 800b536:	4607      	mov	r7, r0
 800b538:	f1b8 0f00 	cmp.w	r8, #0
 800b53c:	d05b      	beq.n	800b5f6 <_dtoa_r+0xa76>
 800b53e:	6879      	ldr	r1, [r7, #4]
 800b540:	4620      	mov	r0, r4
 800b542:	f000 fa0f 	bl	800b964 <_Balloc>
 800b546:	4605      	mov	r5, r0
 800b548:	b928      	cbnz	r0, 800b556 <_dtoa_r+0x9d6>
 800b54a:	4b83      	ldr	r3, [pc, #524]	; (800b758 <_dtoa_r+0xbd8>)
 800b54c:	4602      	mov	r2, r0
 800b54e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b552:	f7ff bb2e 	b.w	800abb2 <_dtoa_r+0x32>
 800b556:	693a      	ldr	r2, [r7, #16]
 800b558:	3202      	adds	r2, #2
 800b55a:	0092      	lsls	r2, r2, #2
 800b55c:	f107 010c 	add.w	r1, r7, #12
 800b560:	300c      	adds	r0, #12
 800b562:	f7ff fa6e 	bl	800aa42 <memcpy>
 800b566:	2201      	movs	r2, #1
 800b568:	4629      	mov	r1, r5
 800b56a:	4620      	mov	r0, r4
 800b56c:	f000 fc54 	bl	800be18 <__lshift>
 800b570:	9b00      	ldr	r3, [sp, #0]
 800b572:	3301      	adds	r3, #1
 800b574:	9304      	str	r3, [sp, #16]
 800b576:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b57a:	4413      	add	r3, r2
 800b57c:	9308      	str	r3, [sp, #32]
 800b57e:	9b02      	ldr	r3, [sp, #8]
 800b580:	f003 0301 	and.w	r3, r3, #1
 800b584:	46b8      	mov	r8, r7
 800b586:	9306      	str	r3, [sp, #24]
 800b588:	4607      	mov	r7, r0
 800b58a:	9b04      	ldr	r3, [sp, #16]
 800b58c:	4631      	mov	r1, r6
 800b58e:	3b01      	subs	r3, #1
 800b590:	4650      	mov	r0, sl
 800b592:	9301      	str	r3, [sp, #4]
 800b594:	f7ff fa6a 	bl	800aa6c <quorem>
 800b598:	4641      	mov	r1, r8
 800b59a:	9002      	str	r0, [sp, #8]
 800b59c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b5a0:	4650      	mov	r0, sl
 800b5a2:	f000 fca5 	bl	800bef0 <__mcmp>
 800b5a6:	463a      	mov	r2, r7
 800b5a8:	9005      	str	r0, [sp, #20]
 800b5aa:	4631      	mov	r1, r6
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	f000 fcbb 	bl	800bf28 <__mdiff>
 800b5b2:	68c2      	ldr	r2, [r0, #12]
 800b5b4:	4605      	mov	r5, r0
 800b5b6:	bb02      	cbnz	r2, 800b5fa <_dtoa_r+0xa7a>
 800b5b8:	4601      	mov	r1, r0
 800b5ba:	4650      	mov	r0, sl
 800b5bc:	f000 fc98 	bl	800bef0 <__mcmp>
 800b5c0:	4602      	mov	r2, r0
 800b5c2:	4629      	mov	r1, r5
 800b5c4:	4620      	mov	r0, r4
 800b5c6:	9209      	str	r2, [sp, #36]	; 0x24
 800b5c8:	f000 fa0c 	bl	800b9e4 <_Bfree>
 800b5cc:	9b07      	ldr	r3, [sp, #28]
 800b5ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5d0:	9d04      	ldr	r5, [sp, #16]
 800b5d2:	ea43 0102 	orr.w	r1, r3, r2
 800b5d6:	9b06      	ldr	r3, [sp, #24]
 800b5d8:	4319      	orrs	r1, r3
 800b5da:	d110      	bne.n	800b5fe <_dtoa_r+0xa7e>
 800b5dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b5e0:	d029      	beq.n	800b636 <_dtoa_r+0xab6>
 800b5e2:	9b05      	ldr	r3, [sp, #20]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	dd02      	ble.n	800b5ee <_dtoa_r+0xa6e>
 800b5e8:	9b02      	ldr	r3, [sp, #8]
 800b5ea:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b5ee:	9b01      	ldr	r3, [sp, #4]
 800b5f0:	f883 9000 	strb.w	r9, [r3]
 800b5f4:	e774      	b.n	800b4e0 <_dtoa_r+0x960>
 800b5f6:	4638      	mov	r0, r7
 800b5f8:	e7ba      	b.n	800b570 <_dtoa_r+0x9f0>
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	e7e1      	b.n	800b5c2 <_dtoa_r+0xa42>
 800b5fe:	9b05      	ldr	r3, [sp, #20]
 800b600:	2b00      	cmp	r3, #0
 800b602:	db04      	blt.n	800b60e <_dtoa_r+0xa8e>
 800b604:	9907      	ldr	r1, [sp, #28]
 800b606:	430b      	orrs	r3, r1
 800b608:	9906      	ldr	r1, [sp, #24]
 800b60a:	430b      	orrs	r3, r1
 800b60c:	d120      	bne.n	800b650 <_dtoa_r+0xad0>
 800b60e:	2a00      	cmp	r2, #0
 800b610:	dded      	ble.n	800b5ee <_dtoa_r+0xa6e>
 800b612:	4651      	mov	r1, sl
 800b614:	2201      	movs	r2, #1
 800b616:	4620      	mov	r0, r4
 800b618:	f000 fbfe 	bl	800be18 <__lshift>
 800b61c:	4631      	mov	r1, r6
 800b61e:	4682      	mov	sl, r0
 800b620:	f000 fc66 	bl	800bef0 <__mcmp>
 800b624:	2800      	cmp	r0, #0
 800b626:	dc03      	bgt.n	800b630 <_dtoa_r+0xab0>
 800b628:	d1e1      	bne.n	800b5ee <_dtoa_r+0xa6e>
 800b62a:	f019 0f01 	tst.w	r9, #1
 800b62e:	d0de      	beq.n	800b5ee <_dtoa_r+0xa6e>
 800b630:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b634:	d1d8      	bne.n	800b5e8 <_dtoa_r+0xa68>
 800b636:	9a01      	ldr	r2, [sp, #4]
 800b638:	2339      	movs	r3, #57	; 0x39
 800b63a:	7013      	strb	r3, [r2, #0]
 800b63c:	462b      	mov	r3, r5
 800b63e:	461d      	mov	r5, r3
 800b640:	3b01      	subs	r3, #1
 800b642:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b646:	2a39      	cmp	r2, #57	; 0x39
 800b648:	d06c      	beq.n	800b724 <_dtoa_r+0xba4>
 800b64a:	3201      	adds	r2, #1
 800b64c:	701a      	strb	r2, [r3, #0]
 800b64e:	e747      	b.n	800b4e0 <_dtoa_r+0x960>
 800b650:	2a00      	cmp	r2, #0
 800b652:	dd07      	ble.n	800b664 <_dtoa_r+0xae4>
 800b654:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b658:	d0ed      	beq.n	800b636 <_dtoa_r+0xab6>
 800b65a:	9a01      	ldr	r2, [sp, #4]
 800b65c:	f109 0301 	add.w	r3, r9, #1
 800b660:	7013      	strb	r3, [r2, #0]
 800b662:	e73d      	b.n	800b4e0 <_dtoa_r+0x960>
 800b664:	9b04      	ldr	r3, [sp, #16]
 800b666:	9a08      	ldr	r2, [sp, #32]
 800b668:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d043      	beq.n	800b6f8 <_dtoa_r+0xb78>
 800b670:	4651      	mov	r1, sl
 800b672:	2300      	movs	r3, #0
 800b674:	220a      	movs	r2, #10
 800b676:	4620      	mov	r0, r4
 800b678:	f000 f9d6 	bl	800ba28 <__multadd>
 800b67c:	45b8      	cmp	r8, r7
 800b67e:	4682      	mov	sl, r0
 800b680:	f04f 0300 	mov.w	r3, #0
 800b684:	f04f 020a 	mov.w	r2, #10
 800b688:	4641      	mov	r1, r8
 800b68a:	4620      	mov	r0, r4
 800b68c:	d107      	bne.n	800b69e <_dtoa_r+0xb1e>
 800b68e:	f000 f9cb 	bl	800ba28 <__multadd>
 800b692:	4680      	mov	r8, r0
 800b694:	4607      	mov	r7, r0
 800b696:	9b04      	ldr	r3, [sp, #16]
 800b698:	3301      	adds	r3, #1
 800b69a:	9304      	str	r3, [sp, #16]
 800b69c:	e775      	b.n	800b58a <_dtoa_r+0xa0a>
 800b69e:	f000 f9c3 	bl	800ba28 <__multadd>
 800b6a2:	4639      	mov	r1, r7
 800b6a4:	4680      	mov	r8, r0
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	220a      	movs	r2, #10
 800b6aa:	4620      	mov	r0, r4
 800b6ac:	f000 f9bc 	bl	800ba28 <__multadd>
 800b6b0:	4607      	mov	r7, r0
 800b6b2:	e7f0      	b.n	800b696 <_dtoa_r+0xb16>
 800b6b4:	9b04      	ldr	r3, [sp, #16]
 800b6b6:	9301      	str	r3, [sp, #4]
 800b6b8:	9d00      	ldr	r5, [sp, #0]
 800b6ba:	4631      	mov	r1, r6
 800b6bc:	4650      	mov	r0, sl
 800b6be:	f7ff f9d5 	bl	800aa6c <quorem>
 800b6c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b6c6:	9b00      	ldr	r3, [sp, #0]
 800b6c8:	f805 9b01 	strb.w	r9, [r5], #1
 800b6cc:	1aea      	subs	r2, r5, r3
 800b6ce:	9b01      	ldr	r3, [sp, #4]
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	dd07      	ble.n	800b6e4 <_dtoa_r+0xb64>
 800b6d4:	4651      	mov	r1, sl
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	220a      	movs	r2, #10
 800b6da:	4620      	mov	r0, r4
 800b6dc:	f000 f9a4 	bl	800ba28 <__multadd>
 800b6e0:	4682      	mov	sl, r0
 800b6e2:	e7ea      	b.n	800b6ba <_dtoa_r+0xb3a>
 800b6e4:	9b01      	ldr	r3, [sp, #4]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	bfc8      	it	gt
 800b6ea:	461d      	movgt	r5, r3
 800b6ec:	9b00      	ldr	r3, [sp, #0]
 800b6ee:	bfd8      	it	le
 800b6f0:	2501      	movle	r5, #1
 800b6f2:	441d      	add	r5, r3
 800b6f4:	f04f 0800 	mov.w	r8, #0
 800b6f8:	4651      	mov	r1, sl
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	4620      	mov	r0, r4
 800b6fe:	f000 fb8b 	bl	800be18 <__lshift>
 800b702:	4631      	mov	r1, r6
 800b704:	4682      	mov	sl, r0
 800b706:	f000 fbf3 	bl	800bef0 <__mcmp>
 800b70a:	2800      	cmp	r0, #0
 800b70c:	dc96      	bgt.n	800b63c <_dtoa_r+0xabc>
 800b70e:	d102      	bne.n	800b716 <_dtoa_r+0xb96>
 800b710:	f019 0f01 	tst.w	r9, #1
 800b714:	d192      	bne.n	800b63c <_dtoa_r+0xabc>
 800b716:	462b      	mov	r3, r5
 800b718:	461d      	mov	r5, r3
 800b71a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b71e:	2a30      	cmp	r2, #48	; 0x30
 800b720:	d0fa      	beq.n	800b718 <_dtoa_r+0xb98>
 800b722:	e6dd      	b.n	800b4e0 <_dtoa_r+0x960>
 800b724:	9a00      	ldr	r2, [sp, #0]
 800b726:	429a      	cmp	r2, r3
 800b728:	d189      	bne.n	800b63e <_dtoa_r+0xabe>
 800b72a:	f10b 0b01 	add.w	fp, fp, #1
 800b72e:	2331      	movs	r3, #49	; 0x31
 800b730:	e796      	b.n	800b660 <_dtoa_r+0xae0>
 800b732:	4b0a      	ldr	r3, [pc, #40]	; (800b75c <_dtoa_r+0xbdc>)
 800b734:	f7ff ba99 	b.w	800ac6a <_dtoa_r+0xea>
 800b738:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	f47f aa6d 	bne.w	800ac1a <_dtoa_r+0x9a>
 800b740:	4b07      	ldr	r3, [pc, #28]	; (800b760 <_dtoa_r+0xbe0>)
 800b742:	f7ff ba92 	b.w	800ac6a <_dtoa_r+0xea>
 800b746:	9b01      	ldr	r3, [sp, #4]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	dcb5      	bgt.n	800b6b8 <_dtoa_r+0xb38>
 800b74c:	9b07      	ldr	r3, [sp, #28]
 800b74e:	2b02      	cmp	r3, #2
 800b750:	f73f aeb1 	bgt.w	800b4b6 <_dtoa_r+0x936>
 800b754:	e7b0      	b.n	800b6b8 <_dtoa_r+0xb38>
 800b756:	bf00      	nop
 800b758:	0800eb03 	.word	0x0800eb03
 800b75c:	0800ede8 	.word	0x0800ede8
 800b760:	0800ea87 	.word	0x0800ea87

0800b764 <_free_r>:
 800b764:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b766:	2900      	cmp	r1, #0
 800b768:	d044      	beq.n	800b7f4 <_free_r+0x90>
 800b76a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b76e:	9001      	str	r0, [sp, #4]
 800b770:	2b00      	cmp	r3, #0
 800b772:	f1a1 0404 	sub.w	r4, r1, #4
 800b776:	bfb8      	it	lt
 800b778:	18e4      	addlt	r4, r4, r3
 800b77a:	f000 f8e7 	bl	800b94c <__malloc_lock>
 800b77e:	4a1e      	ldr	r2, [pc, #120]	; (800b7f8 <_free_r+0x94>)
 800b780:	9801      	ldr	r0, [sp, #4]
 800b782:	6813      	ldr	r3, [r2, #0]
 800b784:	b933      	cbnz	r3, 800b794 <_free_r+0x30>
 800b786:	6063      	str	r3, [r4, #4]
 800b788:	6014      	str	r4, [r2, #0]
 800b78a:	b003      	add	sp, #12
 800b78c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b790:	f000 b8e2 	b.w	800b958 <__malloc_unlock>
 800b794:	42a3      	cmp	r3, r4
 800b796:	d908      	bls.n	800b7aa <_free_r+0x46>
 800b798:	6825      	ldr	r5, [r4, #0]
 800b79a:	1961      	adds	r1, r4, r5
 800b79c:	428b      	cmp	r3, r1
 800b79e:	bf01      	itttt	eq
 800b7a0:	6819      	ldreq	r1, [r3, #0]
 800b7a2:	685b      	ldreq	r3, [r3, #4]
 800b7a4:	1949      	addeq	r1, r1, r5
 800b7a6:	6021      	streq	r1, [r4, #0]
 800b7a8:	e7ed      	b.n	800b786 <_free_r+0x22>
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	685b      	ldr	r3, [r3, #4]
 800b7ae:	b10b      	cbz	r3, 800b7b4 <_free_r+0x50>
 800b7b0:	42a3      	cmp	r3, r4
 800b7b2:	d9fa      	bls.n	800b7aa <_free_r+0x46>
 800b7b4:	6811      	ldr	r1, [r2, #0]
 800b7b6:	1855      	adds	r5, r2, r1
 800b7b8:	42a5      	cmp	r5, r4
 800b7ba:	d10b      	bne.n	800b7d4 <_free_r+0x70>
 800b7bc:	6824      	ldr	r4, [r4, #0]
 800b7be:	4421      	add	r1, r4
 800b7c0:	1854      	adds	r4, r2, r1
 800b7c2:	42a3      	cmp	r3, r4
 800b7c4:	6011      	str	r1, [r2, #0]
 800b7c6:	d1e0      	bne.n	800b78a <_free_r+0x26>
 800b7c8:	681c      	ldr	r4, [r3, #0]
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	6053      	str	r3, [r2, #4]
 800b7ce:	440c      	add	r4, r1
 800b7d0:	6014      	str	r4, [r2, #0]
 800b7d2:	e7da      	b.n	800b78a <_free_r+0x26>
 800b7d4:	d902      	bls.n	800b7dc <_free_r+0x78>
 800b7d6:	230c      	movs	r3, #12
 800b7d8:	6003      	str	r3, [r0, #0]
 800b7da:	e7d6      	b.n	800b78a <_free_r+0x26>
 800b7dc:	6825      	ldr	r5, [r4, #0]
 800b7de:	1961      	adds	r1, r4, r5
 800b7e0:	428b      	cmp	r3, r1
 800b7e2:	bf04      	itt	eq
 800b7e4:	6819      	ldreq	r1, [r3, #0]
 800b7e6:	685b      	ldreq	r3, [r3, #4]
 800b7e8:	6063      	str	r3, [r4, #4]
 800b7ea:	bf04      	itt	eq
 800b7ec:	1949      	addeq	r1, r1, r5
 800b7ee:	6021      	streq	r1, [r4, #0]
 800b7f0:	6054      	str	r4, [r2, #4]
 800b7f2:	e7ca      	b.n	800b78a <_free_r+0x26>
 800b7f4:	b003      	add	sp, #12
 800b7f6:	bd30      	pop	{r4, r5, pc}
 800b7f8:	20000730 	.word	0x20000730

0800b7fc <malloc>:
 800b7fc:	4b02      	ldr	r3, [pc, #8]	; (800b808 <malloc+0xc>)
 800b7fe:	4601      	mov	r1, r0
 800b800:	6818      	ldr	r0, [r3, #0]
 800b802:	f000 b823 	b.w	800b84c <_malloc_r>
 800b806:	bf00      	nop
 800b808:	20000064 	.word	0x20000064

0800b80c <sbrk_aligned>:
 800b80c:	b570      	push	{r4, r5, r6, lr}
 800b80e:	4e0e      	ldr	r6, [pc, #56]	; (800b848 <sbrk_aligned+0x3c>)
 800b810:	460c      	mov	r4, r1
 800b812:	6831      	ldr	r1, [r6, #0]
 800b814:	4605      	mov	r5, r0
 800b816:	b911      	cbnz	r1, 800b81e <sbrk_aligned+0x12>
 800b818:	f002 f9ae 	bl	800db78 <_sbrk_r>
 800b81c:	6030      	str	r0, [r6, #0]
 800b81e:	4621      	mov	r1, r4
 800b820:	4628      	mov	r0, r5
 800b822:	f002 f9a9 	bl	800db78 <_sbrk_r>
 800b826:	1c43      	adds	r3, r0, #1
 800b828:	d00a      	beq.n	800b840 <sbrk_aligned+0x34>
 800b82a:	1cc4      	adds	r4, r0, #3
 800b82c:	f024 0403 	bic.w	r4, r4, #3
 800b830:	42a0      	cmp	r0, r4
 800b832:	d007      	beq.n	800b844 <sbrk_aligned+0x38>
 800b834:	1a21      	subs	r1, r4, r0
 800b836:	4628      	mov	r0, r5
 800b838:	f002 f99e 	bl	800db78 <_sbrk_r>
 800b83c:	3001      	adds	r0, #1
 800b83e:	d101      	bne.n	800b844 <sbrk_aligned+0x38>
 800b840:	f04f 34ff 	mov.w	r4, #4294967295
 800b844:	4620      	mov	r0, r4
 800b846:	bd70      	pop	{r4, r5, r6, pc}
 800b848:	20000734 	.word	0x20000734

0800b84c <_malloc_r>:
 800b84c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b850:	1ccd      	adds	r5, r1, #3
 800b852:	f025 0503 	bic.w	r5, r5, #3
 800b856:	3508      	adds	r5, #8
 800b858:	2d0c      	cmp	r5, #12
 800b85a:	bf38      	it	cc
 800b85c:	250c      	movcc	r5, #12
 800b85e:	2d00      	cmp	r5, #0
 800b860:	4607      	mov	r7, r0
 800b862:	db01      	blt.n	800b868 <_malloc_r+0x1c>
 800b864:	42a9      	cmp	r1, r5
 800b866:	d905      	bls.n	800b874 <_malloc_r+0x28>
 800b868:	230c      	movs	r3, #12
 800b86a:	603b      	str	r3, [r7, #0]
 800b86c:	2600      	movs	r6, #0
 800b86e:	4630      	mov	r0, r6
 800b870:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b874:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b948 <_malloc_r+0xfc>
 800b878:	f000 f868 	bl	800b94c <__malloc_lock>
 800b87c:	f8d8 3000 	ldr.w	r3, [r8]
 800b880:	461c      	mov	r4, r3
 800b882:	bb5c      	cbnz	r4, 800b8dc <_malloc_r+0x90>
 800b884:	4629      	mov	r1, r5
 800b886:	4638      	mov	r0, r7
 800b888:	f7ff ffc0 	bl	800b80c <sbrk_aligned>
 800b88c:	1c43      	adds	r3, r0, #1
 800b88e:	4604      	mov	r4, r0
 800b890:	d155      	bne.n	800b93e <_malloc_r+0xf2>
 800b892:	f8d8 4000 	ldr.w	r4, [r8]
 800b896:	4626      	mov	r6, r4
 800b898:	2e00      	cmp	r6, #0
 800b89a:	d145      	bne.n	800b928 <_malloc_r+0xdc>
 800b89c:	2c00      	cmp	r4, #0
 800b89e:	d048      	beq.n	800b932 <_malloc_r+0xe6>
 800b8a0:	6823      	ldr	r3, [r4, #0]
 800b8a2:	4631      	mov	r1, r6
 800b8a4:	4638      	mov	r0, r7
 800b8a6:	eb04 0903 	add.w	r9, r4, r3
 800b8aa:	f002 f965 	bl	800db78 <_sbrk_r>
 800b8ae:	4581      	cmp	r9, r0
 800b8b0:	d13f      	bne.n	800b932 <_malloc_r+0xe6>
 800b8b2:	6821      	ldr	r1, [r4, #0]
 800b8b4:	1a6d      	subs	r5, r5, r1
 800b8b6:	4629      	mov	r1, r5
 800b8b8:	4638      	mov	r0, r7
 800b8ba:	f7ff ffa7 	bl	800b80c <sbrk_aligned>
 800b8be:	3001      	adds	r0, #1
 800b8c0:	d037      	beq.n	800b932 <_malloc_r+0xe6>
 800b8c2:	6823      	ldr	r3, [r4, #0]
 800b8c4:	442b      	add	r3, r5
 800b8c6:	6023      	str	r3, [r4, #0]
 800b8c8:	f8d8 3000 	ldr.w	r3, [r8]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d038      	beq.n	800b942 <_malloc_r+0xf6>
 800b8d0:	685a      	ldr	r2, [r3, #4]
 800b8d2:	42a2      	cmp	r2, r4
 800b8d4:	d12b      	bne.n	800b92e <_malloc_r+0xe2>
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	605a      	str	r2, [r3, #4]
 800b8da:	e00f      	b.n	800b8fc <_malloc_r+0xb0>
 800b8dc:	6822      	ldr	r2, [r4, #0]
 800b8de:	1b52      	subs	r2, r2, r5
 800b8e0:	d41f      	bmi.n	800b922 <_malloc_r+0xd6>
 800b8e2:	2a0b      	cmp	r2, #11
 800b8e4:	d917      	bls.n	800b916 <_malloc_r+0xca>
 800b8e6:	1961      	adds	r1, r4, r5
 800b8e8:	42a3      	cmp	r3, r4
 800b8ea:	6025      	str	r5, [r4, #0]
 800b8ec:	bf18      	it	ne
 800b8ee:	6059      	strne	r1, [r3, #4]
 800b8f0:	6863      	ldr	r3, [r4, #4]
 800b8f2:	bf08      	it	eq
 800b8f4:	f8c8 1000 	streq.w	r1, [r8]
 800b8f8:	5162      	str	r2, [r4, r5]
 800b8fa:	604b      	str	r3, [r1, #4]
 800b8fc:	4638      	mov	r0, r7
 800b8fe:	f104 060b 	add.w	r6, r4, #11
 800b902:	f000 f829 	bl	800b958 <__malloc_unlock>
 800b906:	f026 0607 	bic.w	r6, r6, #7
 800b90a:	1d23      	adds	r3, r4, #4
 800b90c:	1af2      	subs	r2, r6, r3
 800b90e:	d0ae      	beq.n	800b86e <_malloc_r+0x22>
 800b910:	1b9b      	subs	r3, r3, r6
 800b912:	50a3      	str	r3, [r4, r2]
 800b914:	e7ab      	b.n	800b86e <_malloc_r+0x22>
 800b916:	42a3      	cmp	r3, r4
 800b918:	6862      	ldr	r2, [r4, #4]
 800b91a:	d1dd      	bne.n	800b8d8 <_malloc_r+0x8c>
 800b91c:	f8c8 2000 	str.w	r2, [r8]
 800b920:	e7ec      	b.n	800b8fc <_malloc_r+0xb0>
 800b922:	4623      	mov	r3, r4
 800b924:	6864      	ldr	r4, [r4, #4]
 800b926:	e7ac      	b.n	800b882 <_malloc_r+0x36>
 800b928:	4634      	mov	r4, r6
 800b92a:	6876      	ldr	r6, [r6, #4]
 800b92c:	e7b4      	b.n	800b898 <_malloc_r+0x4c>
 800b92e:	4613      	mov	r3, r2
 800b930:	e7cc      	b.n	800b8cc <_malloc_r+0x80>
 800b932:	230c      	movs	r3, #12
 800b934:	603b      	str	r3, [r7, #0]
 800b936:	4638      	mov	r0, r7
 800b938:	f000 f80e 	bl	800b958 <__malloc_unlock>
 800b93c:	e797      	b.n	800b86e <_malloc_r+0x22>
 800b93e:	6025      	str	r5, [r4, #0]
 800b940:	e7dc      	b.n	800b8fc <_malloc_r+0xb0>
 800b942:	605b      	str	r3, [r3, #4]
 800b944:	deff      	udf	#255	; 0xff
 800b946:	bf00      	nop
 800b948:	20000730 	.word	0x20000730

0800b94c <__malloc_lock>:
 800b94c:	4801      	ldr	r0, [pc, #4]	; (800b954 <__malloc_lock+0x8>)
 800b94e:	f7ff b876 	b.w	800aa3e <__retarget_lock_acquire_recursive>
 800b952:	bf00      	nop
 800b954:	2000072c 	.word	0x2000072c

0800b958 <__malloc_unlock>:
 800b958:	4801      	ldr	r0, [pc, #4]	; (800b960 <__malloc_unlock+0x8>)
 800b95a:	f7ff b871 	b.w	800aa40 <__retarget_lock_release_recursive>
 800b95e:	bf00      	nop
 800b960:	2000072c 	.word	0x2000072c

0800b964 <_Balloc>:
 800b964:	b570      	push	{r4, r5, r6, lr}
 800b966:	69c6      	ldr	r6, [r0, #28]
 800b968:	4604      	mov	r4, r0
 800b96a:	460d      	mov	r5, r1
 800b96c:	b976      	cbnz	r6, 800b98c <_Balloc+0x28>
 800b96e:	2010      	movs	r0, #16
 800b970:	f7ff ff44 	bl	800b7fc <malloc>
 800b974:	4602      	mov	r2, r0
 800b976:	61e0      	str	r0, [r4, #28]
 800b978:	b920      	cbnz	r0, 800b984 <_Balloc+0x20>
 800b97a:	4b18      	ldr	r3, [pc, #96]	; (800b9dc <_Balloc+0x78>)
 800b97c:	4818      	ldr	r0, [pc, #96]	; (800b9e0 <_Balloc+0x7c>)
 800b97e:	216b      	movs	r1, #107	; 0x6b
 800b980:	f002 f912 	bl	800dba8 <__assert_func>
 800b984:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b988:	6006      	str	r6, [r0, #0]
 800b98a:	60c6      	str	r6, [r0, #12]
 800b98c:	69e6      	ldr	r6, [r4, #28]
 800b98e:	68f3      	ldr	r3, [r6, #12]
 800b990:	b183      	cbz	r3, 800b9b4 <_Balloc+0x50>
 800b992:	69e3      	ldr	r3, [r4, #28]
 800b994:	68db      	ldr	r3, [r3, #12]
 800b996:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b99a:	b9b8      	cbnz	r0, 800b9cc <_Balloc+0x68>
 800b99c:	2101      	movs	r1, #1
 800b99e:	fa01 f605 	lsl.w	r6, r1, r5
 800b9a2:	1d72      	adds	r2, r6, #5
 800b9a4:	0092      	lsls	r2, r2, #2
 800b9a6:	4620      	mov	r0, r4
 800b9a8:	f002 f91c 	bl	800dbe4 <_calloc_r>
 800b9ac:	b160      	cbz	r0, 800b9c8 <_Balloc+0x64>
 800b9ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b9b2:	e00e      	b.n	800b9d2 <_Balloc+0x6e>
 800b9b4:	2221      	movs	r2, #33	; 0x21
 800b9b6:	2104      	movs	r1, #4
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	f002 f913 	bl	800dbe4 <_calloc_r>
 800b9be:	69e3      	ldr	r3, [r4, #28]
 800b9c0:	60f0      	str	r0, [r6, #12]
 800b9c2:	68db      	ldr	r3, [r3, #12]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d1e4      	bne.n	800b992 <_Balloc+0x2e>
 800b9c8:	2000      	movs	r0, #0
 800b9ca:	bd70      	pop	{r4, r5, r6, pc}
 800b9cc:	6802      	ldr	r2, [r0, #0]
 800b9ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b9d8:	e7f7      	b.n	800b9ca <_Balloc+0x66>
 800b9da:	bf00      	nop
 800b9dc:	0800ea94 	.word	0x0800ea94
 800b9e0:	0800eb14 	.word	0x0800eb14

0800b9e4 <_Bfree>:
 800b9e4:	b570      	push	{r4, r5, r6, lr}
 800b9e6:	69c6      	ldr	r6, [r0, #28]
 800b9e8:	4605      	mov	r5, r0
 800b9ea:	460c      	mov	r4, r1
 800b9ec:	b976      	cbnz	r6, 800ba0c <_Bfree+0x28>
 800b9ee:	2010      	movs	r0, #16
 800b9f0:	f7ff ff04 	bl	800b7fc <malloc>
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	61e8      	str	r0, [r5, #28]
 800b9f8:	b920      	cbnz	r0, 800ba04 <_Bfree+0x20>
 800b9fa:	4b09      	ldr	r3, [pc, #36]	; (800ba20 <_Bfree+0x3c>)
 800b9fc:	4809      	ldr	r0, [pc, #36]	; (800ba24 <_Bfree+0x40>)
 800b9fe:	218f      	movs	r1, #143	; 0x8f
 800ba00:	f002 f8d2 	bl	800dba8 <__assert_func>
 800ba04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba08:	6006      	str	r6, [r0, #0]
 800ba0a:	60c6      	str	r6, [r0, #12]
 800ba0c:	b13c      	cbz	r4, 800ba1e <_Bfree+0x3a>
 800ba0e:	69eb      	ldr	r3, [r5, #28]
 800ba10:	6862      	ldr	r2, [r4, #4]
 800ba12:	68db      	ldr	r3, [r3, #12]
 800ba14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ba18:	6021      	str	r1, [r4, #0]
 800ba1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ba1e:	bd70      	pop	{r4, r5, r6, pc}
 800ba20:	0800ea94 	.word	0x0800ea94
 800ba24:	0800eb14 	.word	0x0800eb14

0800ba28 <__multadd>:
 800ba28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba2c:	690d      	ldr	r5, [r1, #16]
 800ba2e:	4607      	mov	r7, r0
 800ba30:	460c      	mov	r4, r1
 800ba32:	461e      	mov	r6, r3
 800ba34:	f101 0c14 	add.w	ip, r1, #20
 800ba38:	2000      	movs	r0, #0
 800ba3a:	f8dc 3000 	ldr.w	r3, [ip]
 800ba3e:	b299      	uxth	r1, r3
 800ba40:	fb02 6101 	mla	r1, r2, r1, r6
 800ba44:	0c1e      	lsrs	r6, r3, #16
 800ba46:	0c0b      	lsrs	r3, r1, #16
 800ba48:	fb02 3306 	mla	r3, r2, r6, r3
 800ba4c:	b289      	uxth	r1, r1
 800ba4e:	3001      	adds	r0, #1
 800ba50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ba54:	4285      	cmp	r5, r0
 800ba56:	f84c 1b04 	str.w	r1, [ip], #4
 800ba5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ba5e:	dcec      	bgt.n	800ba3a <__multadd+0x12>
 800ba60:	b30e      	cbz	r6, 800baa6 <__multadd+0x7e>
 800ba62:	68a3      	ldr	r3, [r4, #8]
 800ba64:	42ab      	cmp	r3, r5
 800ba66:	dc19      	bgt.n	800ba9c <__multadd+0x74>
 800ba68:	6861      	ldr	r1, [r4, #4]
 800ba6a:	4638      	mov	r0, r7
 800ba6c:	3101      	adds	r1, #1
 800ba6e:	f7ff ff79 	bl	800b964 <_Balloc>
 800ba72:	4680      	mov	r8, r0
 800ba74:	b928      	cbnz	r0, 800ba82 <__multadd+0x5a>
 800ba76:	4602      	mov	r2, r0
 800ba78:	4b0c      	ldr	r3, [pc, #48]	; (800baac <__multadd+0x84>)
 800ba7a:	480d      	ldr	r0, [pc, #52]	; (800bab0 <__multadd+0x88>)
 800ba7c:	21ba      	movs	r1, #186	; 0xba
 800ba7e:	f002 f893 	bl	800dba8 <__assert_func>
 800ba82:	6922      	ldr	r2, [r4, #16]
 800ba84:	3202      	adds	r2, #2
 800ba86:	f104 010c 	add.w	r1, r4, #12
 800ba8a:	0092      	lsls	r2, r2, #2
 800ba8c:	300c      	adds	r0, #12
 800ba8e:	f7fe ffd8 	bl	800aa42 <memcpy>
 800ba92:	4621      	mov	r1, r4
 800ba94:	4638      	mov	r0, r7
 800ba96:	f7ff ffa5 	bl	800b9e4 <_Bfree>
 800ba9a:	4644      	mov	r4, r8
 800ba9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800baa0:	3501      	adds	r5, #1
 800baa2:	615e      	str	r6, [r3, #20]
 800baa4:	6125      	str	r5, [r4, #16]
 800baa6:	4620      	mov	r0, r4
 800baa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baac:	0800eb03 	.word	0x0800eb03
 800bab0:	0800eb14 	.word	0x0800eb14

0800bab4 <__s2b>:
 800bab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bab8:	460c      	mov	r4, r1
 800baba:	4615      	mov	r5, r2
 800babc:	461f      	mov	r7, r3
 800babe:	2209      	movs	r2, #9
 800bac0:	3308      	adds	r3, #8
 800bac2:	4606      	mov	r6, r0
 800bac4:	fb93 f3f2 	sdiv	r3, r3, r2
 800bac8:	2100      	movs	r1, #0
 800baca:	2201      	movs	r2, #1
 800bacc:	429a      	cmp	r2, r3
 800bace:	db09      	blt.n	800bae4 <__s2b+0x30>
 800bad0:	4630      	mov	r0, r6
 800bad2:	f7ff ff47 	bl	800b964 <_Balloc>
 800bad6:	b940      	cbnz	r0, 800baea <__s2b+0x36>
 800bad8:	4602      	mov	r2, r0
 800bada:	4b19      	ldr	r3, [pc, #100]	; (800bb40 <__s2b+0x8c>)
 800badc:	4819      	ldr	r0, [pc, #100]	; (800bb44 <__s2b+0x90>)
 800bade:	21d3      	movs	r1, #211	; 0xd3
 800bae0:	f002 f862 	bl	800dba8 <__assert_func>
 800bae4:	0052      	lsls	r2, r2, #1
 800bae6:	3101      	adds	r1, #1
 800bae8:	e7f0      	b.n	800bacc <__s2b+0x18>
 800baea:	9b08      	ldr	r3, [sp, #32]
 800baec:	6143      	str	r3, [r0, #20]
 800baee:	2d09      	cmp	r5, #9
 800baf0:	f04f 0301 	mov.w	r3, #1
 800baf4:	6103      	str	r3, [r0, #16]
 800baf6:	dd16      	ble.n	800bb26 <__s2b+0x72>
 800baf8:	f104 0909 	add.w	r9, r4, #9
 800bafc:	46c8      	mov	r8, r9
 800bafe:	442c      	add	r4, r5
 800bb00:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bb04:	4601      	mov	r1, r0
 800bb06:	3b30      	subs	r3, #48	; 0x30
 800bb08:	220a      	movs	r2, #10
 800bb0a:	4630      	mov	r0, r6
 800bb0c:	f7ff ff8c 	bl	800ba28 <__multadd>
 800bb10:	45a0      	cmp	r8, r4
 800bb12:	d1f5      	bne.n	800bb00 <__s2b+0x4c>
 800bb14:	f1a5 0408 	sub.w	r4, r5, #8
 800bb18:	444c      	add	r4, r9
 800bb1a:	1b2d      	subs	r5, r5, r4
 800bb1c:	1963      	adds	r3, r4, r5
 800bb1e:	42bb      	cmp	r3, r7
 800bb20:	db04      	blt.n	800bb2c <__s2b+0x78>
 800bb22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb26:	340a      	adds	r4, #10
 800bb28:	2509      	movs	r5, #9
 800bb2a:	e7f6      	b.n	800bb1a <__s2b+0x66>
 800bb2c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bb30:	4601      	mov	r1, r0
 800bb32:	3b30      	subs	r3, #48	; 0x30
 800bb34:	220a      	movs	r2, #10
 800bb36:	4630      	mov	r0, r6
 800bb38:	f7ff ff76 	bl	800ba28 <__multadd>
 800bb3c:	e7ee      	b.n	800bb1c <__s2b+0x68>
 800bb3e:	bf00      	nop
 800bb40:	0800eb03 	.word	0x0800eb03
 800bb44:	0800eb14 	.word	0x0800eb14

0800bb48 <__hi0bits>:
 800bb48:	0c03      	lsrs	r3, r0, #16
 800bb4a:	041b      	lsls	r3, r3, #16
 800bb4c:	b9d3      	cbnz	r3, 800bb84 <__hi0bits+0x3c>
 800bb4e:	0400      	lsls	r0, r0, #16
 800bb50:	2310      	movs	r3, #16
 800bb52:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bb56:	bf04      	itt	eq
 800bb58:	0200      	lsleq	r0, r0, #8
 800bb5a:	3308      	addeq	r3, #8
 800bb5c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bb60:	bf04      	itt	eq
 800bb62:	0100      	lsleq	r0, r0, #4
 800bb64:	3304      	addeq	r3, #4
 800bb66:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bb6a:	bf04      	itt	eq
 800bb6c:	0080      	lsleq	r0, r0, #2
 800bb6e:	3302      	addeq	r3, #2
 800bb70:	2800      	cmp	r0, #0
 800bb72:	db05      	blt.n	800bb80 <__hi0bits+0x38>
 800bb74:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bb78:	f103 0301 	add.w	r3, r3, #1
 800bb7c:	bf08      	it	eq
 800bb7e:	2320      	moveq	r3, #32
 800bb80:	4618      	mov	r0, r3
 800bb82:	4770      	bx	lr
 800bb84:	2300      	movs	r3, #0
 800bb86:	e7e4      	b.n	800bb52 <__hi0bits+0xa>

0800bb88 <__lo0bits>:
 800bb88:	6803      	ldr	r3, [r0, #0]
 800bb8a:	f013 0207 	ands.w	r2, r3, #7
 800bb8e:	d00c      	beq.n	800bbaa <__lo0bits+0x22>
 800bb90:	07d9      	lsls	r1, r3, #31
 800bb92:	d422      	bmi.n	800bbda <__lo0bits+0x52>
 800bb94:	079a      	lsls	r2, r3, #30
 800bb96:	bf49      	itett	mi
 800bb98:	085b      	lsrmi	r3, r3, #1
 800bb9a:	089b      	lsrpl	r3, r3, #2
 800bb9c:	6003      	strmi	r3, [r0, #0]
 800bb9e:	2201      	movmi	r2, #1
 800bba0:	bf5c      	itt	pl
 800bba2:	6003      	strpl	r3, [r0, #0]
 800bba4:	2202      	movpl	r2, #2
 800bba6:	4610      	mov	r0, r2
 800bba8:	4770      	bx	lr
 800bbaa:	b299      	uxth	r1, r3
 800bbac:	b909      	cbnz	r1, 800bbb2 <__lo0bits+0x2a>
 800bbae:	0c1b      	lsrs	r3, r3, #16
 800bbb0:	2210      	movs	r2, #16
 800bbb2:	b2d9      	uxtb	r1, r3
 800bbb4:	b909      	cbnz	r1, 800bbba <__lo0bits+0x32>
 800bbb6:	3208      	adds	r2, #8
 800bbb8:	0a1b      	lsrs	r3, r3, #8
 800bbba:	0719      	lsls	r1, r3, #28
 800bbbc:	bf04      	itt	eq
 800bbbe:	091b      	lsreq	r3, r3, #4
 800bbc0:	3204      	addeq	r2, #4
 800bbc2:	0799      	lsls	r1, r3, #30
 800bbc4:	bf04      	itt	eq
 800bbc6:	089b      	lsreq	r3, r3, #2
 800bbc8:	3202      	addeq	r2, #2
 800bbca:	07d9      	lsls	r1, r3, #31
 800bbcc:	d403      	bmi.n	800bbd6 <__lo0bits+0x4e>
 800bbce:	085b      	lsrs	r3, r3, #1
 800bbd0:	f102 0201 	add.w	r2, r2, #1
 800bbd4:	d003      	beq.n	800bbde <__lo0bits+0x56>
 800bbd6:	6003      	str	r3, [r0, #0]
 800bbd8:	e7e5      	b.n	800bba6 <__lo0bits+0x1e>
 800bbda:	2200      	movs	r2, #0
 800bbdc:	e7e3      	b.n	800bba6 <__lo0bits+0x1e>
 800bbde:	2220      	movs	r2, #32
 800bbe0:	e7e1      	b.n	800bba6 <__lo0bits+0x1e>
	...

0800bbe4 <__i2b>:
 800bbe4:	b510      	push	{r4, lr}
 800bbe6:	460c      	mov	r4, r1
 800bbe8:	2101      	movs	r1, #1
 800bbea:	f7ff febb 	bl	800b964 <_Balloc>
 800bbee:	4602      	mov	r2, r0
 800bbf0:	b928      	cbnz	r0, 800bbfe <__i2b+0x1a>
 800bbf2:	4b05      	ldr	r3, [pc, #20]	; (800bc08 <__i2b+0x24>)
 800bbf4:	4805      	ldr	r0, [pc, #20]	; (800bc0c <__i2b+0x28>)
 800bbf6:	f240 1145 	movw	r1, #325	; 0x145
 800bbfa:	f001 ffd5 	bl	800dba8 <__assert_func>
 800bbfe:	2301      	movs	r3, #1
 800bc00:	6144      	str	r4, [r0, #20]
 800bc02:	6103      	str	r3, [r0, #16]
 800bc04:	bd10      	pop	{r4, pc}
 800bc06:	bf00      	nop
 800bc08:	0800eb03 	.word	0x0800eb03
 800bc0c:	0800eb14 	.word	0x0800eb14

0800bc10 <__multiply>:
 800bc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc14:	4691      	mov	r9, r2
 800bc16:	690a      	ldr	r2, [r1, #16]
 800bc18:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	bfb8      	it	lt
 800bc20:	460b      	movlt	r3, r1
 800bc22:	460c      	mov	r4, r1
 800bc24:	bfbc      	itt	lt
 800bc26:	464c      	movlt	r4, r9
 800bc28:	4699      	movlt	r9, r3
 800bc2a:	6927      	ldr	r7, [r4, #16]
 800bc2c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bc30:	68a3      	ldr	r3, [r4, #8]
 800bc32:	6861      	ldr	r1, [r4, #4]
 800bc34:	eb07 060a 	add.w	r6, r7, sl
 800bc38:	42b3      	cmp	r3, r6
 800bc3a:	b085      	sub	sp, #20
 800bc3c:	bfb8      	it	lt
 800bc3e:	3101      	addlt	r1, #1
 800bc40:	f7ff fe90 	bl	800b964 <_Balloc>
 800bc44:	b930      	cbnz	r0, 800bc54 <__multiply+0x44>
 800bc46:	4602      	mov	r2, r0
 800bc48:	4b44      	ldr	r3, [pc, #272]	; (800bd5c <__multiply+0x14c>)
 800bc4a:	4845      	ldr	r0, [pc, #276]	; (800bd60 <__multiply+0x150>)
 800bc4c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800bc50:	f001 ffaa 	bl	800dba8 <__assert_func>
 800bc54:	f100 0514 	add.w	r5, r0, #20
 800bc58:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bc5c:	462b      	mov	r3, r5
 800bc5e:	2200      	movs	r2, #0
 800bc60:	4543      	cmp	r3, r8
 800bc62:	d321      	bcc.n	800bca8 <__multiply+0x98>
 800bc64:	f104 0314 	add.w	r3, r4, #20
 800bc68:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bc6c:	f109 0314 	add.w	r3, r9, #20
 800bc70:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bc74:	9202      	str	r2, [sp, #8]
 800bc76:	1b3a      	subs	r2, r7, r4
 800bc78:	3a15      	subs	r2, #21
 800bc7a:	f022 0203 	bic.w	r2, r2, #3
 800bc7e:	3204      	adds	r2, #4
 800bc80:	f104 0115 	add.w	r1, r4, #21
 800bc84:	428f      	cmp	r7, r1
 800bc86:	bf38      	it	cc
 800bc88:	2204      	movcc	r2, #4
 800bc8a:	9201      	str	r2, [sp, #4]
 800bc8c:	9a02      	ldr	r2, [sp, #8]
 800bc8e:	9303      	str	r3, [sp, #12]
 800bc90:	429a      	cmp	r2, r3
 800bc92:	d80c      	bhi.n	800bcae <__multiply+0x9e>
 800bc94:	2e00      	cmp	r6, #0
 800bc96:	dd03      	ble.n	800bca0 <__multiply+0x90>
 800bc98:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d05b      	beq.n	800bd58 <__multiply+0x148>
 800bca0:	6106      	str	r6, [r0, #16]
 800bca2:	b005      	add	sp, #20
 800bca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bca8:	f843 2b04 	str.w	r2, [r3], #4
 800bcac:	e7d8      	b.n	800bc60 <__multiply+0x50>
 800bcae:	f8b3 a000 	ldrh.w	sl, [r3]
 800bcb2:	f1ba 0f00 	cmp.w	sl, #0
 800bcb6:	d024      	beq.n	800bd02 <__multiply+0xf2>
 800bcb8:	f104 0e14 	add.w	lr, r4, #20
 800bcbc:	46a9      	mov	r9, r5
 800bcbe:	f04f 0c00 	mov.w	ip, #0
 800bcc2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bcc6:	f8d9 1000 	ldr.w	r1, [r9]
 800bcca:	fa1f fb82 	uxth.w	fp, r2
 800bcce:	b289      	uxth	r1, r1
 800bcd0:	fb0a 110b 	mla	r1, sl, fp, r1
 800bcd4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bcd8:	f8d9 2000 	ldr.w	r2, [r9]
 800bcdc:	4461      	add	r1, ip
 800bcde:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bce2:	fb0a c20b 	mla	r2, sl, fp, ip
 800bce6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bcea:	b289      	uxth	r1, r1
 800bcec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bcf0:	4577      	cmp	r7, lr
 800bcf2:	f849 1b04 	str.w	r1, [r9], #4
 800bcf6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bcfa:	d8e2      	bhi.n	800bcc2 <__multiply+0xb2>
 800bcfc:	9a01      	ldr	r2, [sp, #4]
 800bcfe:	f845 c002 	str.w	ip, [r5, r2]
 800bd02:	9a03      	ldr	r2, [sp, #12]
 800bd04:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bd08:	3304      	adds	r3, #4
 800bd0a:	f1b9 0f00 	cmp.w	r9, #0
 800bd0e:	d021      	beq.n	800bd54 <__multiply+0x144>
 800bd10:	6829      	ldr	r1, [r5, #0]
 800bd12:	f104 0c14 	add.w	ip, r4, #20
 800bd16:	46ae      	mov	lr, r5
 800bd18:	f04f 0a00 	mov.w	sl, #0
 800bd1c:	f8bc b000 	ldrh.w	fp, [ip]
 800bd20:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bd24:	fb09 220b 	mla	r2, r9, fp, r2
 800bd28:	4452      	add	r2, sl
 800bd2a:	b289      	uxth	r1, r1
 800bd2c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bd30:	f84e 1b04 	str.w	r1, [lr], #4
 800bd34:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bd38:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bd3c:	f8be 1000 	ldrh.w	r1, [lr]
 800bd40:	fb09 110a 	mla	r1, r9, sl, r1
 800bd44:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bd48:	4567      	cmp	r7, ip
 800bd4a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bd4e:	d8e5      	bhi.n	800bd1c <__multiply+0x10c>
 800bd50:	9a01      	ldr	r2, [sp, #4]
 800bd52:	50a9      	str	r1, [r5, r2]
 800bd54:	3504      	adds	r5, #4
 800bd56:	e799      	b.n	800bc8c <__multiply+0x7c>
 800bd58:	3e01      	subs	r6, #1
 800bd5a:	e79b      	b.n	800bc94 <__multiply+0x84>
 800bd5c:	0800eb03 	.word	0x0800eb03
 800bd60:	0800eb14 	.word	0x0800eb14

0800bd64 <__pow5mult>:
 800bd64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd68:	4615      	mov	r5, r2
 800bd6a:	f012 0203 	ands.w	r2, r2, #3
 800bd6e:	4606      	mov	r6, r0
 800bd70:	460f      	mov	r7, r1
 800bd72:	d007      	beq.n	800bd84 <__pow5mult+0x20>
 800bd74:	4c25      	ldr	r4, [pc, #148]	; (800be0c <__pow5mult+0xa8>)
 800bd76:	3a01      	subs	r2, #1
 800bd78:	2300      	movs	r3, #0
 800bd7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bd7e:	f7ff fe53 	bl	800ba28 <__multadd>
 800bd82:	4607      	mov	r7, r0
 800bd84:	10ad      	asrs	r5, r5, #2
 800bd86:	d03d      	beq.n	800be04 <__pow5mult+0xa0>
 800bd88:	69f4      	ldr	r4, [r6, #28]
 800bd8a:	b97c      	cbnz	r4, 800bdac <__pow5mult+0x48>
 800bd8c:	2010      	movs	r0, #16
 800bd8e:	f7ff fd35 	bl	800b7fc <malloc>
 800bd92:	4602      	mov	r2, r0
 800bd94:	61f0      	str	r0, [r6, #28]
 800bd96:	b928      	cbnz	r0, 800bda4 <__pow5mult+0x40>
 800bd98:	4b1d      	ldr	r3, [pc, #116]	; (800be10 <__pow5mult+0xac>)
 800bd9a:	481e      	ldr	r0, [pc, #120]	; (800be14 <__pow5mult+0xb0>)
 800bd9c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bda0:	f001 ff02 	bl	800dba8 <__assert_func>
 800bda4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bda8:	6004      	str	r4, [r0, #0]
 800bdaa:	60c4      	str	r4, [r0, #12]
 800bdac:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800bdb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bdb4:	b94c      	cbnz	r4, 800bdca <__pow5mult+0x66>
 800bdb6:	f240 2171 	movw	r1, #625	; 0x271
 800bdba:	4630      	mov	r0, r6
 800bdbc:	f7ff ff12 	bl	800bbe4 <__i2b>
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	f8c8 0008 	str.w	r0, [r8, #8]
 800bdc6:	4604      	mov	r4, r0
 800bdc8:	6003      	str	r3, [r0, #0]
 800bdca:	f04f 0900 	mov.w	r9, #0
 800bdce:	07eb      	lsls	r3, r5, #31
 800bdd0:	d50a      	bpl.n	800bde8 <__pow5mult+0x84>
 800bdd2:	4639      	mov	r1, r7
 800bdd4:	4622      	mov	r2, r4
 800bdd6:	4630      	mov	r0, r6
 800bdd8:	f7ff ff1a 	bl	800bc10 <__multiply>
 800bddc:	4639      	mov	r1, r7
 800bdde:	4680      	mov	r8, r0
 800bde0:	4630      	mov	r0, r6
 800bde2:	f7ff fdff 	bl	800b9e4 <_Bfree>
 800bde6:	4647      	mov	r7, r8
 800bde8:	106d      	asrs	r5, r5, #1
 800bdea:	d00b      	beq.n	800be04 <__pow5mult+0xa0>
 800bdec:	6820      	ldr	r0, [r4, #0]
 800bdee:	b938      	cbnz	r0, 800be00 <__pow5mult+0x9c>
 800bdf0:	4622      	mov	r2, r4
 800bdf2:	4621      	mov	r1, r4
 800bdf4:	4630      	mov	r0, r6
 800bdf6:	f7ff ff0b 	bl	800bc10 <__multiply>
 800bdfa:	6020      	str	r0, [r4, #0]
 800bdfc:	f8c0 9000 	str.w	r9, [r0]
 800be00:	4604      	mov	r4, r0
 800be02:	e7e4      	b.n	800bdce <__pow5mult+0x6a>
 800be04:	4638      	mov	r0, r7
 800be06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be0a:	bf00      	nop
 800be0c:	0800ec60 	.word	0x0800ec60
 800be10:	0800ea94 	.word	0x0800ea94
 800be14:	0800eb14 	.word	0x0800eb14

0800be18 <__lshift>:
 800be18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be1c:	460c      	mov	r4, r1
 800be1e:	6849      	ldr	r1, [r1, #4]
 800be20:	6923      	ldr	r3, [r4, #16]
 800be22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800be26:	68a3      	ldr	r3, [r4, #8]
 800be28:	4607      	mov	r7, r0
 800be2a:	4691      	mov	r9, r2
 800be2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800be30:	f108 0601 	add.w	r6, r8, #1
 800be34:	42b3      	cmp	r3, r6
 800be36:	db0b      	blt.n	800be50 <__lshift+0x38>
 800be38:	4638      	mov	r0, r7
 800be3a:	f7ff fd93 	bl	800b964 <_Balloc>
 800be3e:	4605      	mov	r5, r0
 800be40:	b948      	cbnz	r0, 800be56 <__lshift+0x3e>
 800be42:	4602      	mov	r2, r0
 800be44:	4b28      	ldr	r3, [pc, #160]	; (800bee8 <__lshift+0xd0>)
 800be46:	4829      	ldr	r0, [pc, #164]	; (800beec <__lshift+0xd4>)
 800be48:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800be4c:	f001 feac 	bl	800dba8 <__assert_func>
 800be50:	3101      	adds	r1, #1
 800be52:	005b      	lsls	r3, r3, #1
 800be54:	e7ee      	b.n	800be34 <__lshift+0x1c>
 800be56:	2300      	movs	r3, #0
 800be58:	f100 0114 	add.w	r1, r0, #20
 800be5c:	f100 0210 	add.w	r2, r0, #16
 800be60:	4618      	mov	r0, r3
 800be62:	4553      	cmp	r3, sl
 800be64:	db33      	blt.n	800bece <__lshift+0xb6>
 800be66:	6920      	ldr	r0, [r4, #16]
 800be68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800be6c:	f104 0314 	add.w	r3, r4, #20
 800be70:	f019 091f 	ands.w	r9, r9, #31
 800be74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800be78:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800be7c:	d02b      	beq.n	800bed6 <__lshift+0xbe>
 800be7e:	f1c9 0e20 	rsb	lr, r9, #32
 800be82:	468a      	mov	sl, r1
 800be84:	2200      	movs	r2, #0
 800be86:	6818      	ldr	r0, [r3, #0]
 800be88:	fa00 f009 	lsl.w	r0, r0, r9
 800be8c:	4310      	orrs	r0, r2
 800be8e:	f84a 0b04 	str.w	r0, [sl], #4
 800be92:	f853 2b04 	ldr.w	r2, [r3], #4
 800be96:	459c      	cmp	ip, r3
 800be98:	fa22 f20e 	lsr.w	r2, r2, lr
 800be9c:	d8f3      	bhi.n	800be86 <__lshift+0x6e>
 800be9e:	ebac 0304 	sub.w	r3, ip, r4
 800bea2:	3b15      	subs	r3, #21
 800bea4:	f023 0303 	bic.w	r3, r3, #3
 800bea8:	3304      	adds	r3, #4
 800beaa:	f104 0015 	add.w	r0, r4, #21
 800beae:	4584      	cmp	ip, r0
 800beb0:	bf38      	it	cc
 800beb2:	2304      	movcc	r3, #4
 800beb4:	50ca      	str	r2, [r1, r3]
 800beb6:	b10a      	cbz	r2, 800bebc <__lshift+0xa4>
 800beb8:	f108 0602 	add.w	r6, r8, #2
 800bebc:	3e01      	subs	r6, #1
 800bebe:	4638      	mov	r0, r7
 800bec0:	612e      	str	r6, [r5, #16]
 800bec2:	4621      	mov	r1, r4
 800bec4:	f7ff fd8e 	bl	800b9e4 <_Bfree>
 800bec8:	4628      	mov	r0, r5
 800beca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bece:	f842 0f04 	str.w	r0, [r2, #4]!
 800bed2:	3301      	adds	r3, #1
 800bed4:	e7c5      	b.n	800be62 <__lshift+0x4a>
 800bed6:	3904      	subs	r1, #4
 800bed8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bedc:	f841 2f04 	str.w	r2, [r1, #4]!
 800bee0:	459c      	cmp	ip, r3
 800bee2:	d8f9      	bhi.n	800bed8 <__lshift+0xc0>
 800bee4:	e7ea      	b.n	800bebc <__lshift+0xa4>
 800bee6:	bf00      	nop
 800bee8:	0800eb03 	.word	0x0800eb03
 800beec:	0800eb14 	.word	0x0800eb14

0800bef0 <__mcmp>:
 800bef0:	b530      	push	{r4, r5, lr}
 800bef2:	6902      	ldr	r2, [r0, #16]
 800bef4:	690c      	ldr	r4, [r1, #16]
 800bef6:	1b12      	subs	r2, r2, r4
 800bef8:	d10e      	bne.n	800bf18 <__mcmp+0x28>
 800befa:	f100 0314 	add.w	r3, r0, #20
 800befe:	3114      	adds	r1, #20
 800bf00:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bf04:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bf08:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bf0c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bf10:	42a5      	cmp	r5, r4
 800bf12:	d003      	beq.n	800bf1c <__mcmp+0x2c>
 800bf14:	d305      	bcc.n	800bf22 <__mcmp+0x32>
 800bf16:	2201      	movs	r2, #1
 800bf18:	4610      	mov	r0, r2
 800bf1a:	bd30      	pop	{r4, r5, pc}
 800bf1c:	4283      	cmp	r3, r0
 800bf1e:	d3f3      	bcc.n	800bf08 <__mcmp+0x18>
 800bf20:	e7fa      	b.n	800bf18 <__mcmp+0x28>
 800bf22:	f04f 32ff 	mov.w	r2, #4294967295
 800bf26:	e7f7      	b.n	800bf18 <__mcmp+0x28>

0800bf28 <__mdiff>:
 800bf28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf2c:	460c      	mov	r4, r1
 800bf2e:	4606      	mov	r6, r0
 800bf30:	4611      	mov	r1, r2
 800bf32:	4620      	mov	r0, r4
 800bf34:	4690      	mov	r8, r2
 800bf36:	f7ff ffdb 	bl	800bef0 <__mcmp>
 800bf3a:	1e05      	subs	r5, r0, #0
 800bf3c:	d110      	bne.n	800bf60 <__mdiff+0x38>
 800bf3e:	4629      	mov	r1, r5
 800bf40:	4630      	mov	r0, r6
 800bf42:	f7ff fd0f 	bl	800b964 <_Balloc>
 800bf46:	b930      	cbnz	r0, 800bf56 <__mdiff+0x2e>
 800bf48:	4b3a      	ldr	r3, [pc, #232]	; (800c034 <__mdiff+0x10c>)
 800bf4a:	4602      	mov	r2, r0
 800bf4c:	f240 2137 	movw	r1, #567	; 0x237
 800bf50:	4839      	ldr	r0, [pc, #228]	; (800c038 <__mdiff+0x110>)
 800bf52:	f001 fe29 	bl	800dba8 <__assert_func>
 800bf56:	2301      	movs	r3, #1
 800bf58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bf5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf60:	bfa4      	itt	ge
 800bf62:	4643      	movge	r3, r8
 800bf64:	46a0      	movge	r8, r4
 800bf66:	4630      	mov	r0, r6
 800bf68:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bf6c:	bfa6      	itte	ge
 800bf6e:	461c      	movge	r4, r3
 800bf70:	2500      	movge	r5, #0
 800bf72:	2501      	movlt	r5, #1
 800bf74:	f7ff fcf6 	bl	800b964 <_Balloc>
 800bf78:	b920      	cbnz	r0, 800bf84 <__mdiff+0x5c>
 800bf7a:	4b2e      	ldr	r3, [pc, #184]	; (800c034 <__mdiff+0x10c>)
 800bf7c:	4602      	mov	r2, r0
 800bf7e:	f240 2145 	movw	r1, #581	; 0x245
 800bf82:	e7e5      	b.n	800bf50 <__mdiff+0x28>
 800bf84:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bf88:	6926      	ldr	r6, [r4, #16]
 800bf8a:	60c5      	str	r5, [r0, #12]
 800bf8c:	f104 0914 	add.w	r9, r4, #20
 800bf90:	f108 0514 	add.w	r5, r8, #20
 800bf94:	f100 0e14 	add.w	lr, r0, #20
 800bf98:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bf9c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bfa0:	f108 0210 	add.w	r2, r8, #16
 800bfa4:	46f2      	mov	sl, lr
 800bfa6:	2100      	movs	r1, #0
 800bfa8:	f859 3b04 	ldr.w	r3, [r9], #4
 800bfac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bfb0:	fa11 f88b 	uxtah	r8, r1, fp
 800bfb4:	b299      	uxth	r1, r3
 800bfb6:	0c1b      	lsrs	r3, r3, #16
 800bfb8:	eba8 0801 	sub.w	r8, r8, r1
 800bfbc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bfc0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bfc4:	fa1f f888 	uxth.w	r8, r8
 800bfc8:	1419      	asrs	r1, r3, #16
 800bfca:	454e      	cmp	r6, r9
 800bfcc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bfd0:	f84a 3b04 	str.w	r3, [sl], #4
 800bfd4:	d8e8      	bhi.n	800bfa8 <__mdiff+0x80>
 800bfd6:	1b33      	subs	r3, r6, r4
 800bfd8:	3b15      	subs	r3, #21
 800bfda:	f023 0303 	bic.w	r3, r3, #3
 800bfde:	3304      	adds	r3, #4
 800bfe0:	3415      	adds	r4, #21
 800bfe2:	42a6      	cmp	r6, r4
 800bfe4:	bf38      	it	cc
 800bfe6:	2304      	movcc	r3, #4
 800bfe8:	441d      	add	r5, r3
 800bfea:	4473      	add	r3, lr
 800bfec:	469e      	mov	lr, r3
 800bfee:	462e      	mov	r6, r5
 800bff0:	4566      	cmp	r6, ip
 800bff2:	d30e      	bcc.n	800c012 <__mdiff+0xea>
 800bff4:	f10c 0203 	add.w	r2, ip, #3
 800bff8:	1b52      	subs	r2, r2, r5
 800bffa:	f022 0203 	bic.w	r2, r2, #3
 800bffe:	3d03      	subs	r5, #3
 800c000:	45ac      	cmp	ip, r5
 800c002:	bf38      	it	cc
 800c004:	2200      	movcc	r2, #0
 800c006:	4413      	add	r3, r2
 800c008:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c00c:	b17a      	cbz	r2, 800c02e <__mdiff+0x106>
 800c00e:	6107      	str	r7, [r0, #16]
 800c010:	e7a4      	b.n	800bf5c <__mdiff+0x34>
 800c012:	f856 8b04 	ldr.w	r8, [r6], #4
 800c016:	fa11 f288 	uxtah	r2, r1, r8
 800c01a:	1414      	asrs	r4, r2, #16
 800c01c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c020:	b292      	uxth	r2, r2
 800c022:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c026:	f84e 2b04 	str.w	r2, [lr], #4
 800c02a:	1421      	asrs	r1, r4, #16
 800c02c:	e7e0      	b.n	800bff0 <__mdiff+0xc8>
 800c02e:	3f01      	subs	r7, #1
 800c030:	e7ea      	b.n	800c008 <__mdiff+0xe0>
 800c032:	bf00      	nop
 800c034:	0800eb03 	.word	0x0800eb03
 800c038:	0800eb14 	.word	0x0800eb14

0800c03c <__ulp>:
 800c03c:	b082      	sub	sp, #8
 800c03e:	ed8d 0b00 	vstr	d0, [sp]
 800c042:	9a01      	ldr	r2, [sp, #4]
 800c044:	4b0f      	ldr	r3, [pc, #60]	; (800c084 <__ulp+0x48>)
 800c046:	4013      	ands	r3, r2
 800c048:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	dc08      	bgt.n	800c062 <__ulp+0x26>
 800c050:	425b      	negs	r3, r3
 800c052:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c056:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c05a:	da04      	bge.n	800c066 <__ulp+0x2a>
 800c05c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c060:	4113      	asrs	r3, r2
 800c062:	2200      	movs	r2, #0
 800c064:	e008      	b.n	800c078 <__ulp+0x3c>
 800c066:	f1a2 0314 	sub.w	r3, r2, #20
 800c06a:	2b1e      	cmp	r3, #30
 800c06c:	bfda      	itte	le
 800c06e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c072:	40da      	lsrle	r2, r3
 800c074:	2201      	movgt	r2, #1
 800c076:	2300      	movs	r3, #0
 800c078:	4619      	mov	r1, r3
 800c07a:	4610      	mov	r0, r2
 800c07c:	ec41 0b10 	vmov	d0, r0, r1
 800c080:	b002      	add	sp, #8
 800c082:	4770      	bx	lr
 800c084:	7ff00000 	.word	0x7ff00000

0800c088 <__b2d>:
 800c088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c08c:	6906      	ldr	r6, [r0, #16]
 800c08e:	f100 0814 	add.w	r8, r0, #20
 800c092:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c096:	1f37      	subs	r7, r6, #4
 800c098:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c09c:	4610      	mov	r0, r2
 800c09e:	f7ff fd53 	bl	800bb48 <__hi0bits>
 800c0a2:	f1c0 0320 	rsb	r3, r0, #32
 800c0a6:	280a      	cmp	r0, #10
 800c0a8:	600b      	str	r3, [r1, #0]
 800c0aa:	491b      	ldr	r1, [pc, #108]	; (800c118 <__b2d+0x90>)
 800c0ac:	dc15      	bgt.n	800c0da <__b2d+0x52>
 800c0ae:	f1c0 0c0b 	rsb	ip, r0, #11
 800c0b2:	fa22 f30c 	lsr.w	r3, r2, ip
 800c0b6:	45b8      	cmp	r8, r7
 800c0b8:	ea43 0501 	orr.w	r5, r3, r1
 800c0bc:	bf34      	ite	cc
 800c0be:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c0c2:	2300      	movcs	r3, #0
 800c0c4:	3015      	adds	r0, #21
 800c0c6:	fa02 f000 	lsl.w	r0, r2, r0
 800c0ca:	fa23 f30c 	lsr.w	r3, r3, ip
 800c0ce:	4303      	orrs	r3, r0
 800c0d0:	461c      	mov	r4, r3
 800c0d2:	ec45 4b10 	vmov	d0, r4, r5
 800c0d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0da:	45b8      	cmp	r8, r7
 800c0dc:	bf3a      	itte	cc
 800c0de:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c0e2:	f1a6 0708 	subcc.w	r7, r6, #8
 800c0e6:	2300      	movcs	r3, #0
 800c0e8:	380b      	subs	r0, #11
 800c0ea:	d012      	beq.n	800c112 <__b2d+0x8a>
 800c0ec:	f1c0 0120 	rsb	r1, r0, #32
 800c0f0:	fa23 f401 	lsr.w	r4, r3, r1
 800c0f4:	4082      	lsls	r2, r0
 800c0f6:	4322      	orrs	r2, r4
 800c0f8:	4547      	cmp	r7, r8
 800c0fa:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800c0fe:	bf8c      	ite	hi
 800c100:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c104:	2200      	movls	r2, #0
 800c106:	4083      	lsls	r3, r0
 800c108:	40ca      	lsrs	r2, r1
 800c10a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c10e:	4313      	orrs	r3, r2
 800c110:	e7de      	b.n	800c0d0 <__b2d+0x48>
 800c112:	ea42 0501 	orr.w	r5, r2, r1
 800c116:	e7db      	b.n	800c0d0 <__b2d+0x48>
 800c118:	3ff00000 	.word	0x3ff00000

0800c11c <__d2b>:
 800c11c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c120:	460f      	mov	r7, r1
 800c122:	2101      	movs	r1, #1
 800c124:	ec59 8b10 	vmov	r8, r9, d0
 800c128:	4616      	mov	r6, r2
 800c12a:	f7ff fc1b 	bl	800b964 <_Balloc>
 800c12e:	4604      	mov	r4, r0
 800c130:	b930      	cbnz	r0, 800c140 <__d2b+0x24>
 800c132:	4602      	mov	r2, r0
 800c134:	4b24      	ldr	r3, [pc, #144]	; (800c1c8 <__d2b+0xac>)
 800c136:	4825      	ldr	r0, [pc, #148]	; (800c1cc <__d2b+0xb0>)
 800c138:	f240 310f 	movw	r1, #783	; 0x30f
 800c13c:	f001 fd34 	bl	800dba8 <__assert_func>
 800c140:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c144:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c148:	bb2d      	cbnz	r5, 800c196 <__d2b+0x7a>
 800c14a:	9301      	str	r3, [sp, #4]
 800c14c:	f1b8 0300 	subs.w	r3, r8, #0
 800c150:	d026      	beq.n	800c1a0 <__d2b+0x84>
 800c152:	4668      	mov	r0, sp
 800c154:	9300      	str	r3, [sp, #0]
 800c156:	f7ff fd17 	bl	800bb88 <__lo0bits>
 800c15a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c15e:	b1e8      	cbz	r0, 800c19c <__d2b+0x80>
 800c160:	f1c0 0320 	rsb	r3, r0, #32
 800c164:	fa02 f303 	lsl.w	r3, r2, r3
 800c168:	430b      	orrs	r3, r1
 800c16a:	40c2      	lsrs	r2, r0
 800c16c:	6163      	str	r3, [r4, #20]
 800c16e:	9201      	str	r2, [sp, #4]
 800c170:	9b01      	ldr	r3, [sp, #4]
 800c172:	61a3      	str	r3, [r4, #24]
 800c174:	2b00      	cmp	r3, #0
 800c176:	bf14      	ite	ne
 800c178:	2202      	movne	r2, #2
 800c17a:	2201      	moveq	r2, #1
 800c17c:	6122      	str	r2, [r4, #16]
 800c17e:	b1bd      	cbz	r5, 800c1b0 <__d2b+0x94>
 800c180:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c184:	4405      	add	r5, r0
 800c186:	603d      	str	r5, [r7, #0]
 800c188:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c18c:	6030      	str	r0, [r6, #0]
 800c18e:	4620      	mov	r0, r4
 800c190:	b003      	add	sp, #12
 800c192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c196:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c19a:	e7d6      	b.n	800c14a <__d2b+0x2e>
 800c19c:	6161      	str	r1, [r4, #20]
 800c19e:	e7e7      	b.n	800c170 <__d2b+0x54>
 800c1a0:	a801      	add	r0, sp, #4
 800c1a2:	f7ff fcf1 	bl	800bb88 <__lo0bits>
 800c1a6:	9b01      	ldr	r3, [sp, #4]
 800c1a8:	6163      	str	r3, [r4, #20]
 800c1aa:	3020      	adds	r0, #32
 800c1ac:	2201      	movs	r2, #1
 800c1ae:	e7e5      	b.n	800c17c <__d2b+0x60>
 800c1b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c1b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c1b8:	6038      	str	r0, [r7, #0]
 800c1ba:	6918      	ldr	r0, [r3, #16]
 800c1bc:	f7ff fcc4 	bl	800bb48 <__hi0bits>
 800c1c0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c1c4:	e7e2      	b.n	800c18c <__d2b+0x70>
 800c1c6:	bf00      	nop
 800c1c8:	0800eb03 	.word	0x0800eb03
 800c1cc:	0800eb14 	.word	0x0800eb14

0800c1d0 <__ratio>:
 800c1d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1d4:	4688      	mov	r8, r1
 800c1d6:	4669      	mov	r1, sp
 800c1d8:	4681      	mov	r9, r0
 800c1da:	f7ff ff55 	bl	800c088 <__b2d>
 800c1de:	a901      	add	r1, sp, #4
 800c1e0:	4640      	mov	r0, r8
 800c1e2:	ec55 4b10 	vmov	r4, r5, d0
 800c1e6:	f7ff ff4f 	bl	800c088 <__b2d>
 800c1ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c1ee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c1f2:	eba3 0c02 	sub.w	ip, r3, r2
 800c1f6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c1fa:	1a9b      	subs	r3, r3, r2
 800c1fc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c200:	ec51 0b10 	vmov	r0, r1, d0
 800c204:	2b00      	cmp	r3, #0
 800c206:	bfd6      	itet	le
 800c208:	460a      	movle	r2, r1
 800c20a:	462a      	movgt	r2, r5
 800c20c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c210:	468b      	mov	fp, r1
 800c212:	462f      	mov	r7, r5
 800c214:	bfd4      	ite	le
 800c216:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c21a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c21e:	4620      	mov	r0, r4
 800c220:	ee10 2a10 	vmov	r2, s0
 800c224:	465b      	mov	r3, fp
 800c226:	4639      	mov	r1, r7
 800c228:	f7f4 fb30 	bl	800088c <__aeabi_ddiv>
 800c22c:	ec41 0b10 	vmov	d0, r0, r1
 800c230:	b003      	add	sp, #12
 800c232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c236 <__copybits>:
 800c236:	3901      	subs	r1, #1
 800c238:	b570      	push	{r4, r5, r6, lr}
 800c23a:	1149      	asrs	r1, r1, #5
 800c23c:	6914      	ldr	r4, [r2, #16]
 800c23e:	3101      	adds	r1, #1
 800c240:	f102 0314 	add.w	r3, r2, #20
 800c244:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c248:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c24c:	1f05      	subs	r5, r0, #4
 800c24e:	42a3      	cmp	r3, r4
 800c250:	d30c      	bcc.n	800c26c <__copybits+0x36>
 800c252:	1aa3      	subs	r3, r4, r2
 800c254:	3b11      	subs	r3, #17
 800c256:	f023 0303 	bic.w	r3, r3, #3
 800c25a:	3211      	adds	r2, #17
 800c25c:	42a2      	cmp	r2, r4
 800c25e:	bf88      	it	hi
 800c260:	2300      	movhi	r3, #0
 800c262:	4418      	add	r0, r3
 800c264:	2300      	movs	r3, #0
 800c266:	4288      	cmp	r0, r1
 800c268:	d305      	bcc.n	800c276 <__copybits+0x40>
 800c26a:	bd70      	pop	{r4, r5, r6, pc}
 800c26c:	f853 6b04 	ldr.w	r6, [r3], #4
 800c270:	f845 6f04 	str.w	r6, [r5, #4]!
 800c274:	e7eb      	b.n	800c24e <__copybits+0x18>
 800c276:	f840 3b04 	str.w	r3, [r0], #4
 800c27a:	e7f4      	b.n	800c266 <__copybits+0x30>

0800c27c <__any_on>:
 800c27c:	f100 0214 	add.w	r2, r0, #20
 800c280:	6900      	ldr	r0, [r0, #16]
 800c282:	114b      	asrs	r3, r1, #5
 800c284:	4298      	cmp	r0, r3
 800c286:	b510      	push	{r4, lr}
 800c288:	db11      	blt.n	800c2ae <__any_on+0x32>
 800c28a:	dd0a      	ble.n	800c2a2 <__any_on+0x26>
 800c28c:	f011 011f 	ands.w	r1, r1, #31
 800c290:	d007      	beq.n	800c2a2 <__any_on+0x26>
 800c292:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c296:	fa24 f001 	lsr.w	r0, r4, r1
 800c29a:	fa00 f101 	lsl.w	r1, r0, r1
 800c29e:	428c      	cmp	r4, r1
 800c2a0:	d10b      	bne.n	800c2ba <__any_on+0x3e>
 800c2a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d803      	bhi.n	800c2b2 <__any_on+0x36>
 800c2aa:	2000      	movs	r0, #0
 800c2ac:	bd10      	pop	{r4, pc}
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	e7f7      	b.n	800c2a2 <__any_on+0x26>
 800c2b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c2b6:	2900      	cmp	r1, #0
 800c2b8:	d0f5      	beq.n	800c2a6 <__any_on+0x2a>
 800c2ba:	2001      	movs	r0, #1
 800c2bc:	e7f6      	b.n	800c2ac <__any_on+0x30>

0800c2be <sulp>:
 800c2be:	b570      	push	{r4, r5, r6, lr}
 800c2c0:	4604      	mov	r4, r0
 800c2c2:	460d      	mov	r5, r1
 800c2c4:	ec45 4b10 	vmov	d0, r4, r5
 800c2c8:	4616      	mov	r6, r2
 800c2ca:	f7ff feb7 	bl	800c03c <__ulp>
 800c2ce:	ec51 0b10 	vmov	r0, r1, d0
 800c2d2:	b17e      	cbz	r6, 800c2f4 <sulp+0x36>
 800c2d4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c2d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	dd09      	ble.n	800c2f4 <sulp+0x36>
 800c2e0:	051b      	lsls	r3, r3, #20
 800c2e2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c2e6:	2400      	movs	r4, #0
 800c2e8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c2ec:	4622      	mov	r2, r4
 800c2ee:	462b      	mov	r3, r5
 800c2f0:	f7f4 f9a2 	bl	8000638 <__aeabi_dmul>
 800c2f4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c2f8 <_strtod_l>:
 800c2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2fc:	ed2d 8b02 	vpush	{d8}
 800c300:	b09b      	sub	sp, #108	; 0x6c
 800c302:	4604      	mov	r4, r0
 800c304:	9213      	str	r2, [sp, #76]	; 0x4c
 800c306:	2200      	movs	r2, #0
 800c308:	9216      	str	r2, [sp, #88]	; 0x58
 800c30a:	460d      	mov	r5, r1
 800c30c:	f04f 0800 	mov.w	r8, #0
 800c310:	f04f 0900 	mov.w	r9, #0
 800c314:	460a      	mov	r2, r1
 800c316:	9215      	str	r2, [sp, #84]	; 0x54
 800c318:	7811      	ldrb	r1, [r2, #0]
 800c31a:	292b      	cmp	r1, #43	; 0x2b
 800c31c:	d04c      	beq.n	800c3b8 <_strtod_l+0xc0>
 800c31e:	d83a      	bhi.n	800c396 <_strtod_l+0x9e>
 800c320:	290d      	cmp	r1, #13
 800c322:	d834      	bhi.n	800c38e <_strtod_l+0x96>
 800c324:	2908      	cmp	r1, #8
 800c326:	d834      	bhi.n	800c392 <_strtod_l+0x9a>
 800c328:	2900      	cmp	r1, #0
 800c32a:	d03d      	beq.n	800c3a8 <_strtod_l+0xb0>
 800c32c:	2200      	movs	r2, #0
 800c32e:	920a      	str	r2, [sp, #40]	; 0x28
 800c330:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800c332:	7832      	ldrb	r2, [r6, #0]
 800c334:	2a30      	cmp	r2, #48	; 0x30
 800c336:	f040 80b4 	bne.w	800c4a2 <_strtod_l+0x1aa>
 800c33a:	7872      	ldrb	r2, [r6, #1]
 800c33c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800c340:	2a58      	cmp	r2, #88	; 0x58
 800c342:	d170      	bne.n	800c426 <_strtod_l+0x12e>
 800c344:	9302      	str	r3, [sp, #8]
 800c346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c348:	9301      	str	r3, [sp, #4]
 800c34a:	ab16      	add	r3, sp, #88	; 0x58
 800c34c:	9300      	str	r3, [sp, #0]
 800c34e:	4a8e      	ldr	r2, [pc, #568]	; (800c588 <_strtod_l+0x290>)
 800c350:	ab17      	add	r3, sp, #92	; 0x5c
 800c352:	a915      	add	r1, sp, #84	; 0x54
 800c354:	4620      	mov	r0, r4
 800c356:	f001 fcc3 	bl	800dce0 <__gethex>
 800c35a:	f010 070f 	ands.w	r7, r0, #15
 800c35e:	4605      	mov	r5, r0
 800c360:	d005      	beq.n	800c36e <_strtod_l+0x76>
 800c362:	2f06      	cmp	r7, #6
 800c364:	d12a      	bne.n	800c3bc <_strtod_l+0xc4>
 800c366:	3601      	adds	r6, #1
 800c368:	2300      	movs	r3, #0
 800c36a:	9615      	str	r6, [sp, #84]	; 0x54
 800c36c:	930a      	str	r3, [sp, #40]	; 0x28
 800c36e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c370:	2b00      	cmp	r3, #0
 800c372:	f040 857f 	bne.w	800ce74 <_strtod_l+0xb7c>
 800c376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c378:	b1db      	cbz	r3, 800c3b2 <_strtod_l+0xba>
 800c37a:	4642      	mov	r2, r8
 800c37c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c380:	ec43 2b10 	vmov	d0, r2, r3
 800c384:	b01b      	add	sp, #108	; 0x6c
 800c386:	ecbd 8b02 	vpop	{d8}
 800c38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c38e:	2920      	cmp	r1, #32
 800c390:	d1cc      	bne.n	800c32c <_strtod_l+0x34>
 800c392:	3201      	adds	r2, #1
 800c394:	e7bf      	b.n	800c316 <_strtod_l+0x1e>
 800c396:	292d      	cmp	r1, #45	; 0x2d
 800c398:	d1c8      	bne.n	800c32c <_strtod_l+0x34>
 800c39a:	2101      	movs	r1, #1
 800c39c:	910a      	str	r1, [sp, #40]	; 0x28
 800c39e:	1c51      	adds	r1, r2, #1
 800c3a0:	9115      	str	r1, [sp, #84]	; 0x54
 800c3a2:	7852      	ldrb	r2, [r2, #1]
 800c3a4:	2a00      	cmp	r2, #0
 800c3a6:	d1c3      	bne.n	800c330 <_strtod_l+0x38>
 800c3a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c3aa:	9515      	str	r5, [sp, #84]	; 0x54
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	f040 855f 	bne.w	800ce70 <_strtod_l+0xb78>
 800c3b2:	4642      	mov	r2, r8
 800c3b4:	464b      	mov	r3, r9
 800c3b6:	e7e3      	b.n	800c380 <_strtod_l+0x88>
 800c3b8:	2100      	movs	r1, #0
 800c3ba:	e7ef      	b.n	800c39c <_strtod_l+0xa4>
 800c3bc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c3be:	b13a      	cbz	r2, 800c3d0 <_strtod_l+0xd8>
 800c3c0:	2135      	movs	r1, #53	; 0x35
 800c3c2:	a818      	add	r0, sp, #96	; 0x60
 800c3c4:	f7ff ff37 	bl	800c236 <__copybits>
 800c3c8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c3ca:	4620      	mov	r0, r4
 800c3cc:	f7ff fb0a 	bl	800b9e4 <_Bfree>
 800c3d0:	3f01      	subs	r7, #1
 800c3d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c3d4:	2f04      	cmp	r7, #4
 800c3d6:	d806      	bhi.n	800c3e6 <_strtod_l+0xee>
 800c3d8:	e8df f007 	tbb	[pc, r7]
 800c3dc:	201d0314 	.word	0x201d0314
 800c3e0:	14          	.byte	0x14
 800c3e1:	00          	.byte	0x00
 800c3e2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800c3e6:	05e9      	lsls	r1, r5, #23
 800c3e8:	bf48      	it	mi
 800c3ea:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800c3ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c3f2:	0d1b      	lsrs	r3, r3, #20
 800c3f4:	051b      	lsls	r3, r3, #20
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d1b9      	bne.n	800c36e <_strtod_l+0x76>
 800c3fa:	f7fe faf5 	bl	800a9e8 <__errno>
 800c3fe:	2322      	movs	r3, #34	; 0x22
 800c400:	6003      	str	r3, [r0, #0]
 800c402:	e7b4      	b.n	800c36e <_strtod_l+0x76>
 800c404:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800c408:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c40c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c410:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800c414:	e7e7      	b.n	800c3e6 <_strtod_l+0xee>
 800c416:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800c590 <_strtod_l+0x298>
 800c41a:	e7e4      	b.n	800c3e6 <_strtod_l+0xee>
 800c41c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800c420:	f04f 38ff 	mov.w	r8, #4294967295
 800c424:	e7df      	b.n	800c3e6 <_strtod_l+0xee>
 800c426:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c428:	1c5a      	adds	r2, r3, #1
 800c42a:	9215      	str	r2, [sp, #84]	; 0x54
 800c42c:	785b      	ldrb	r3, [r3, #1]
 800c42e:	2b30      	cmp	r3, #48	; 0x30
 800c430:	d0f9      	beq.n	800c426 <_strtod_l+0x12e>
 800c432:	2b00      	cmp	r3, #0
 800c434:	d09b      	beq.n	800c36e <_strtod_l+0x76>
 800c436:	2301      	movs	r3, #1
 800c438:	f04f 0a00 	mov.w	sl, #0
 800c43c:	9304      	str	r3, [sp, #16]
 800c43e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c440:	930b      	str	r3, [sp, #44]	; 0x2c
 800c442:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800c446:	46d3      	mov	fp, sl
 800c448:	220a      	movs	r2, #10
 800c44a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800c44c:	7806      	ldrb	r6, [r0, #0]
 800c44e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c452:	b2d9      	uxtb	r1, r3
 800c454:	2909      	cmp	r1, #9
 800c456:	d926      	bls.n	800c4a6 <_strtod_l+0x1ae>
 800c458:	494c      	ldr	r1, [pc, #304]	; (800c58c <_strtod_l+0x294>)
 800c45a:	2201      	movs	r2, #1
 800c45c:	f001 fb79 	bl	800db52 <strncmp>
 800c460:	2800      	cmp	r0, #0
 800c462:	d030      	beq.n	800c4c6 <_strtod_l+0x1ce>
 800c464:	2000      	movs	r0, #0
 800c466:	4632      	mov	r2, r6
 800c468:	9005      	str	r0, [sp, #20]
 800c46a:	465e      	mov	r6, fp
 800c46c:	4603      	mov	r3, r0
 800c46e:	2a65      	cmp	r2, #101	; 0x65
 800c470:	d001      	beq.n	800c476 <_strtod_l+0x17e>
 800c472:	2a45      	cmp	r2, #69	; 0x45
 800c474:	d113      	bne.n	800c49e <_strtod_l+0x1a6>
 800c476:	b91e      	cbnz	r6, 800c480 <_strtod_l+0x188>
 800c478:	9a04      	ldr	r2, [sp, #16]
 800c47a:	4302      	orrs	r2, r0
 800c47c:	d094      	beq.n	800c3a8 <_strtod_l+0xb0>
 800c47e:	2600      	movs	r6, #0
 800c480:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800c482:	1c6a      	adds	r2, r5, #1
 800c484:	9215      	str	r2, [sp, #84]	; 0x54
 800c486:	786a      	ldrb	r2, [r5, #1]
 800c488:	2a2b      	cmp	r2, #43	; 0x2b
 800c48a:	d074      	beq.n	800c576 <_strtod_l+0x27e>
 800c48c:	2a2d      	cmp	r2, #45	; 0x2d
 800c48e:	d078      	beq.n	800c582 <_strtod_l+0x28a>
 800c490:	f04f 0c00 	mov.w	ip, #0
 800c494:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c498:	2909      	cmp	r1, #9
 800c49a:	d97f      	bls.n	800c59c <_strtod_l+0x2a4>
 800c49c:	9515      	str	r5, [sp, #84]	; 0x54
 800c49e:	2700      	movs	r7, #0
 800c4a0:	e09e      	b.n	800c5e0 <_strtod_l+0x2e8>
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	e7c8      	b.n	800c438 <_strtod_l+0x140>
 800c4a6:	f1bb 0f08 	cmp.w	fp, #8
 800c4aa:	bfd8      	it	le
 800c4ac:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800c4ae:	f100 0001 	add.w	r0, r0, #1
 800c4b2:	bfda      	itte	le
 800c4b4:	fb02 3301 	mlale	r3, r2, r1, r3
 800c4b8:	9309      	strle	r3, [sp, #36]	; 0x24
 800c4ba:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800c4be:	f10b 0b01 	add.w	fp, fp, #1
 800c4c2:	9015      	str	r0, [sp, #84]	; 0x54
 800c4c4:	e7c1      	b.n	800c44a <_strtod_l+0x152>
 800c4c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c4c8:	1c5a      	adds	r2, r3, #1
 800c4ca:	9215      	str	r2, [sp, #84]	; 0x54
 800c4cc:	785a      	ldrb	r2, [r3, #1]
 800c4ce:	f1bb 0f00 	cmp.w	fp, #0
 800c4d2:	d037      	beq.n	800c544 <_strtod_l+0x24c>
 800c4d4:	9005      	str	r0, [sp, #20]
 800c4d6:	465e      	mov	r6, fp
 800c4d8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c4dc:	2b09      	cmp	r3, #9
 800c4de:	d912      	bls.n	800c506 <_strtod_l+0x20e>
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	e7c4      	b.n	800c46e <_strtod_l+0x176>
 800c4e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c4e6:	1c5a      	adds	r2, r3, #1
 800c4e8:	9215      	str	r2, [sp, #84]	; 0x54
 800c4ea:	785a      	ldrb	r2, [r3, #1]
 800c4ec:	3001      	adds	r0, #1
 800c4ee:	2a30      	cmp	r2, #48	; 0x30
 800c4f0:	d0f8      	beq.n	800c4e4 <_strtod_l+0x1ec>
 800c4f2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c4f6:	2b08      	cmp	r3, #8
 800c4f8:	f200 84c1 	bhi.w	800ce7e <_strtod_l+0xb86>
 800c4fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c4fe:	9005      	str	r0, [sp, #20]
 800c500:	2000      	movs	r0, #0
 800c502:	930b      	str	r3, [sp, #44]	; 0x2c
 800c504:	4606      	mov	r6, r0
 800c506:	3a30      	subs	r2, #48	; 0x30
 800c508:	f100 0301 	add.w	r3, r0, #1
 800c50c:	d014      	beq.n	800c538 <_strtod_l+0x240>
 800c50e:	9905      	ldr	r1, [sp, #20]
 800c510:	4419      	add	r1, r3
 800c512:	9105      	str	r1, [sp, #20]
 800c514:	4633      	mov	r3, r6
 800c516:	eb00 0c06 	add.w	ip, r0, r6
 800c51a:	210a      	movs	r1, #10
 800c51c:	4563      	cmp	r3, ip
 800c51e:	d113      	bne.n	800c548 <_strtod_l+0x250>
 800c520:	1833      	adds	r3, r6, r0
 800c522:	2b08      	cmp	r3, #8
 800c524:	f106 0601 	add.w	r6, r6, #1
 800c528:	4406      	add	r6, r0
 800c52a:	dc1a      	bgt.n	800c562 <_strtod_l+0x26a>
 800c52c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c52e:	230a      	movs	r3, #10
 800c530:	fb03 2301 	mla	r3, r3, r1, r2
 800c534:	9309      	str	r3, [sp, #36]	; 0x24
 800c536:	2300      	movs	r3, #0
 800c538:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c53a:	1c51      	adds	r1, r2, #1
 800c53c:	9115      	str	r1, [sp, #84]	; 0x54
 800c53e:	7852      	ldrb	r2, [r2, #1]
 800c540:	4618      	mov	r0, r3
 800c542:	e7c9      	b.n	800c4d8 <_strtod_l+0x1e0>
 800c544:	4658      	mov	r0, fp
 800c546:	e7d2      	b.n	800c4ee <_strtod_l+0x1f6>
 800c548:	2b08      	cmp	r3, #8
 800c54a:	f103 0301 	add.w	r3, r3, #1
 800c54e:	dc03      	bgt.n	800c558 <_strtod_l+0x260>
 800c550:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c552:	434f      	muls	r7, r1
 800c554:	9709      	str	r7, [sp, #36]	; 0x24
 800c556:	e7e1      	b.n	800c51c <_strtod_l+0x224>
 800c558:	2b10      	cmp	r3, #16
 800c55a:	bfd8      	it	le
 800c55c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800c560:	e7dc      	b.n	800c51c <_strtod_l+0x224>
 800c562:	2e10      	cmp	r6, #16
 800c564:	bfdc      	itt	le
 800c566:	230a      	movle	r3, #10
 800c568:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800c56c:	e7e3      	b.n	800c536 <_strtod_l+0x23e>
 800c56e:	2300      	movs	r3, #0
 800c570:	9305      	str	r3, [sp, #20]
 800c572:	2301      	movs	r3, #1
 800c574:	e780      	b.n	800c478 <_strtod_l+0x180>
 800c576:	f04f 0c00 	mov.w	ip, #0
 800c57a:	1caa      	adds	r2, r5, #2
 800c57c:	9215      	str	r2, [sp, #84]	; 0x54
 800c57e:	78aa      	ldrb	r2, [r5, #2]
 800c580:	e788      	b.n	800c494 <_strtod_l+0x19c>
 800c582:	f04f 0c01 	mov.w	ip, #1
 800c586:	e7f8      	b.n	800c57a <_strtod_l+0x282>
 800c588:	0800ec70 	.word	0x0800ec70
 800c58c:	0800ec6c 	.word	0x0800ec6c
 800c590:	7ff00000 	.word	0x7ff00000
 800c594:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c596:	1c51      	adds	r1, r2, #1
 800c598:	9115      	str	r1, [sp, #84]	; 0x54
 800c59a:	7852      	ldrb	r2, [r2, #1]
 800c59c:	2a30      	cmp	r2, #48	; 0x30
 800c59e:	d0f9      	beq.n	800c594 <_strtod_l+0x29c>
 800c5a0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c5a4:	2908      	cmp	r1, #8
 800c5a6:	f63f af7a 	bhi.w	800c49e <_strtod_l+0x1a6>
 800c5aa:	3a30      	subs	r2, #48	; 0x30
 800c5ac:	9208      	str	r2, [sp, #32]
 800c5ae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c5b0:	920c      	str	r2, [sp, #48]	; 0x30
 800c5b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c5b4:	1c57      	adds	r7, r2, #1
 800c5b6:	9715      	str	r7, [sp, #84]	; 0x54
 800c5b8:	7852      	ldrb	r2, [r2, #1]
 800c5ba:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c5be:	f1be 0f09 	cmp.w	lr, #9
 800c5c2:	d938      	bls.n	800c636 <_strtod_l+0x33e>
 800c5c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c5c6:	1a7f      	subs	r7, r7, r1
 800c5c8:	2f08      	cmp	r7, #8
 800c5ca:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800c5ce:	dc03      	bgt.n	800c5d8 <_strtod_l+0x2e0>
 800c5d0:	9908      	ldr	r1, [sp, #32]
 800c5d2:	428f      	cmp	r7, r1
 800c5d4:	bfa8      	it	ge
 800c5d6:	460f      	movge	r7, r1
 800c5d8:	f1bc 0f00 	cmp.w	ip, #0
 800c5dc:	d000      	beq.n	800c5e0 <_strtod_l+0x2e8>
 800c5de:	427f      	negs	r7, r7
 800c5e0:	2e00      	cmp	r6, #0
 800c5e2:	d14f      	bne.n	800c684 <_strtod_l+0x38c>
 800c5e4:	9904      	ldr	r1, [sp, #16]
 800c5e6:	4301      	orrs	r1, r0
 800c5e8:	f47f aec1 	bne.w	800c36e <_strtod_l+0x76>
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	f47f aedb 	bne.w	800c3a8 <_strtod_l+0xb0>
 800c5f2:	2a69      	cmp	r2, #105	; 0x69
 800c5f4:	d029      	beq.n	800c64a <_strtod_l+0x352>
 800c5f6:	dc26      	bgt.n	800c646 <_strtod_l+0x34e>
 800c5f8:	2a49      	cmp	r2, #73	; 0x49
 800c5fa:	d026      	beq.n	800c64a <_strtod_l+0x352>
 800c5fc:	2a4e      	cmp	r2, #78	; 0x4e
 800c5fe:	f47f aed3 	bne.w	800c3a8 <_strtod_l+0xb0>
 800c602:	499b      	ldr	r1, [pc, #620]	; (800c870 <_strtod_l+0x578>)
 800c604:	a815      	add	r0, sp, #84	; 0x54
 800c606:	f001 fdab 	bl	800e160 <__match>
 800c60a:	2800      	cmp	r0, #0
 800c60c:	f43f aecc 	beq.w	800c3a8 <_strtod_l+0xb0>
 800c610:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c612:	781b      	ldrb	r3, [r3, #0]
 800c614:	2b28      	cmp	r3, #40	; 0x28
 800c616:	d12f      	bne.n	800c678 <_strtod_l+0x380>
 800c618:	4996      	ldr	r1, [pc, #600]	; (800c874 <_strtod_l+0x57c>)
 800c61a:	aa18      	add	r2, sp, #96	; 0x60
 800c61c:	a815      	add	r0, sp, #84	; 0x54
 800c61e:	f001 fdb3 	bl	800e188 <__hexnan>
 800c622:	2805      	cmp	r0, #5
 800c624:	d128      	bne.n	800c678 <_strtod_l+0x380>
 800c626:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c628:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c62c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c630:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c634:	e69b      	b.n	800c36e <_strtod_l+0x76>
 800c636:	9f08      	ldr	r7, [sp, #32]
 800c638:	210a      	movs	r1, #10
 800c63a:	fb01 2107 	mla	r1, r1, r7, r2
 800c63e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800c642:	9208      	str	r2, [sp, #32]
 800c644:	e7b5      	b.n	800c5b2 <_strtod_l+0x2ba>
 800c646:	2a6e      	cmp	r2, #110	; 0x6e
 800c648:	e7d9      	b.n	800c5fe <_strtod_l+0x306>
 800c64a:	498b      	ldr	r1, [pc, #556]	; (800c878 <_strtod_l+0x580>)
 800c64c:	a815      	add	r0, sp, #84	; 0x54
 800c64e:	f001 fd87 	bl	800e160 <__match>
 800c652:	2800      	cmp	r0, #0
 800c654:	f43f aea8 	beq.w	800c3a8 <_strtod_l+0xb0>
 800c658:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c65a:	4988      	ldr	r1, [pc, #544]	; (800c87c <_strtod_l+0x584>)
 800c65c:	3b01      	subs	r3, #1
 800c65e:	a815      	add	r0, sp, #84	; 0x54
 800c660:	9315      	str	r3, [sp, #84]	; 0x54
 800c662:	f001 fd7d 	bl	800e160 <__match>
 800c666:	b910      	cbnz	r0, 800c66e <_strtod_l+0x376>
 800c668:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c66a:	3301      	adds	r3, #1
 800c66c:	9315      	str	r3, [sp, #84]	; 0x54
 800c66e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800c88c <_strtod_l+0x594>
 800c672:	f04f 0800 	mov.w	r8, #0
 800c676:	e67a      	b.n	800c36e <_strtod_l+0x76>
 800c678:	4881      	ldr	r0, [pc, #516]	; (800c880 <_strtod_l+0x588>)
 800c67a:	f001 fa8d 	bl	800db98 <nan>
 800c67e:	ec59 8b10 	vmov	r8, r9, d0
 800c682:	e674      	b.n	800c36e <_strtod_l+0x76>
 800c684:	9b05      	ldr	r3, [sp, #20]
 800c686:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c688:	1afb      	subs	r3, r7, r3
 800c68a:	f1bb 0f00 	cmp.w	fp, #0
 800c68e:	bf08      	it	eq
 800c690:	46b3      	moveq	fp, r6
 800c692:	2e10      	cmp	r6, #16
 800c694:	9308      	str	r3, [sp, #32]
 800c696:	4635      	mov	r5, r6
 800c698:	bfa8      	it	ge
 800c69a:	2510      	movge	r5, #16
 800c69c:	f7f3 ff52 	bl	8000544 <__aeabi_ui2d>
 800c6a0:	2e09      	cmp	r6, #9
 800c6a2:	4680      	mov	r8, r0
 800c6a4:	4689      	mov	r9, r1
 800c6a6:	dd13      	ble.n	800c6d0 <_strtod_l+0x3d8>
 800c6a8:	4b76      	ldr	r3, [pc, #472]	; (800c884 <_strtod_l+0x58c>)
 800c6aa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c6ae:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c6b2:	f7f3 ffc1 	bl	8000638 <__aeabi_dmul>
 800c6b6:	4680      	mov	r8, r0
 800c6b8:	4650      	mov	r0, sl
 800c6ba:	4689      	mov	r9, r1
 800c6bc:	f7f3 ff42 	bl	8000544 <__aeabi_ui2d>
 800c6c0:	4602      	mov	r2, r0
 800c6c2:	460b      	mov	r3, r1
 800c6c4:	4640      	mov	r0, r8
 800c6c6:	4649      	mov	r1, r9
 800c6c8:	f7f3 fe00 	bl	80002cc <__adddf3>
 800c6cc:	4680      	mov	r8, r0
 800c6ce:	4689      	mov	r9, r1
 800c6d0:	2e0f      	cmp	r6, #15
 800c6d2:	dc38      	bgt.n	800c746 <_strtod_l+0x44e>
 800c6d4:	9b08      	ldr	r3, [sp, #32]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	f43f ae49 	beq.w	800c36e <_strtod_l+0x76>
 800c6dc:	dd24      	ble.n	800c728 <_strtod_l+0x430>
 800c6de:	2b16      	cmp	r3, #22
 800c6e0:	dc0b      	bgt.n	800c6fa <_strtod_l+0x402>
 800c6e2:	4968      	ldr	r1, [pc, #416]	; (800c884 <_strtod_l+0x58c>)
 800c6e4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c6e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6ec:	4642      	mov	r2, r8
 800c6ee:	464b      	mov	r3, r9
 800c6f0:	f7f3 ffa2 	bl	8000638 <__aeabi_dmul>
 800c6f4:	4680      	mov	r8, r0
 800c6f6:	4689      	mov	r9, r1
 800c6f8:	e639      	b.n	800c36e <_strtod_l+0x76>
 800c6fa:	9a08      	ldr	r2, [sp, #32]
 800c6fc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800c700:	4293      	cmp	r3, r2
 800c702:	db20      	blt.n	800c746 <_strtod_l+0x44e>
 800c704:	4c5f      	ldr	r4, [pc, #380]	; (800c884 <_strtod_l+0x58c>)
 800c706:	f1c6 060f 	rsb	r6, r6, #15
 800c70a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800c70e:	4642      	mov	r2, r8
 800c710:	464b      	mov	r3, r9
 800c712:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c716:	f7f3 ff8f 	bl	8000638 <__aeabi_dmul>
 800c71a:	9b08      	ldr	r3, [sp, #32]
 800c71c:	1b9e      	subs	r6, r3, r6
 800c71e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800c722:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c726:	e7e3      	b.n	800c6f0 <_strtod_l+0x3f8>
 800c728:	9b08      	ldr	r3, [sp, #32]
 800c72a:	3316      	adds	r3, #22
 800c72c:	db0b      	blt.n	800c746 <_strtod_l+0x44e>
 800c72e:	9b05      	ldr	r3, [sp, #20]
 800c730:	1bdf      	subs	r7, r3, r7
 800c732:	4b54      	ldr	r3, [pc, #336]	; (800c884 <_strtod_l+0x58c>)
 800c734:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c738:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c73c:	4640      	mov	r0, r8
 800c73e:	4649      	mov	r1, r9
 800c740:	f7f4 f8a4 	bl	800088c <__aeabi_ddiv>
 800c744:	e7d6      	b.n	800c6f4 <_strtod_l+0x3fc>
 800c746:	9b08      	ldr	r3, [sp, #32]
 800c748:	1b75      	subs	r5, r6, r5
 800c74a:	441d      	add	r5, r3
 800c74c:	2d00      	cmp	r5, #0
 800c74e:	dd70      	ble.n	800c832 <_strtod_l+0x53a>
 800c750:	f015 030f 	ands.w	r3, r5, #15
 800c754:	d00a      	beq.n	800c76c <_strtod_l+0x474>
 800c756:	494b      	ldr	r1, [pc, #300]	; (800c884 <_strtod_l+0x58c>)
 800c758:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c75c:	4642      	mov	r2, r8
 800c75e:	464b      	mov	r3, r9
 800c760:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c764:	f7f3 ff68 	bl	8000638 <__aeabi_dmul>
 800c768:	4680      	mov	r8, r0
 800c76a:	4689      	mov	r9, r1
 800c76c:	f035 050f 	bics.w	r5, r5, #15
 800c770:	d04d      	beq.n	800c80e <_strtod_l+0x516>
 800c772:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800c776:	dd22      	ble.n	800c7be <_strtod_l+0x4c6>
 800c778:	2500      	movs	r5, #0
 800c77a:	46ab      	mov	fp, r5
 800c77c:	9509      	str	r5, [sp, #36]	; 0x24
 800c77e:	9505      	str	r5, [sp, #20]
 800c780:	2322      	movs	r3, #34	; 0x22
 800c782:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800c88c <_strtod_l+0x594>
 800c786:	6023      	str	r3, [r4, #0]
 800c788:	f04f 0800 	mov.w	r8, #0
 800c78c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c78e:	2b00      	cmp	r3, #0
 800c790:	f43f aded 	beq.w	800c36e <_strtod_l+0x76>
 800c794:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c796:	4620      	mov	r0, r4
 800c798:	f7ff f924 	bl	800b9e4 <_Bfree>
 800c79c:	9905      	ldr	r1, [sp, #20]
 800c79e:	4620      	mov	r0, r4
 800c7a0:	f7ff f920 	bl	800b9e4 <_Bfree>
 800c7a4:	4659      	mov	r1, fp
 800c7a6:	4620      	mov	r0, r4
 800c7a8:	f7ff f91c 	bl	800b9e4 <_Bfree>
 800c7ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c7ae:	4620      	mov	r0, r4
 800c7b0:	f7ff f918 	bl	800b9e4 <_Bfree>
 800c7b4:	4629      	mov	r1, r5
 800c7b6:	4620      	mov	r0, r4
 800c7b8:	f7ff f914 	bl	800b9e4 <_Bfree>
 800c7bc:	e5d7      	b.n	800c36e <_strtod_l+0x76>
 800c7be:	4b32      	ldr	r3, [pc, #200]	; (800c888 <_strtod_l+0x590>)
 800c7c0:	9304      	str	r3, [sp, #16]
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	112d      	asrs	r5, r5, #4
 800c7c6:	4640      	mov	r0, r8
 800c7c8:	4649      	mov	r1, r9
 800c7ca:	469a      	mov	sl, r3
 800c7cc:	2d01      	cmp	r5, #1
 800c7ce:	dc21      	bgt.n	800c814 <_strtod_l+0x51c>
 800c7d0:	b10b      	cbz	r3, 800c7d6 <_strtod_l+0x4de>
 800c7d2:	4680      	mov	r8, r0
 800c7d4:	4689      	mov	r9, r1
 800c7d6:	492c      	ldr	r1, [pc, #176]	; (800c888 <_strtod_l+0x590>)
 800c7d8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c7dc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c7e0:	4642      	mov	r2, r8
 800c7e2:	464b      	mov	r3, r9
 800c7e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7e8:	f7f3 ff26 	bl	8000638 <__aeabi_dmul>
 800c7ec:	4b27      	ldr	r3, [pc, #156]	; (800c88c <_strtod_l+0x594>)
 800c7ee:	460a      	mov	r2, r1
 800c7f0:	400b      	ands	r3, r1
 800c7f2:	4927      	ldr	r1, [pc, #156]	; (800c890 <_strtod_l+0x598>)
 800c7f4:	428b      	cmp	r3, r1
 800c7f6:	4680      	mov	r8, r0
 800c7f8:	d8be      	bhi.n	800c778 <_strtod_l+0x480>
 800c7fa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c7fe:	428b      	cmp	r3, r1
 800c800:	bf86      	itte	hi
 800c802:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800c894 <_strtod_l+0x59c>
 800c806:	f04f 38ff 	movhi.w	r8, #4294967295
 800c80a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800c80e:	2300      	movs	r3, #0
 800c810:	9304      	str	r3, [sp, #16]
 800c812:	e07b      	b.n	800c90c <_strtod_l+0x614>
 800c814:	07ea      	lsls	r2, r5, #31
 800c816:	d505      	bpl.n	800c824 <_strtod_l+0x52c>
 800c818:	9b04      	ldr	r3, [sp, #16]
 800c81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c81e:	f7f3 ff0b 	bl	8000638 <__aeabi_dmul>
 800c822:	2301      	movs	r3, #1
 800c824:	9a04      	ldr	r2, [sp, #16]
 800c826:	3208      	adds	r2, #8
 800c828:	f10a 0a01 	add.w	sl, sl, #1
 800c82c:	106d      	asrs	r5, r5, #1
 800c82e:	9204      	str	r2, [sp, #16]
 800c830:	e7cc      	b.n	800c7cc <_strtod_l+0x4d4>
 800c832:	d0ec      	beq.n	800c80e <_strtod_l+0x516>
 800c834:	426d      	negs	r5, r5
 800c836:	f015 020f 	ands.w	r2, r5, #15
 800c83a:	d00a      	beq.n	800c852 <_strtod_l+0x55a>
 800c83c:	4b11      	ldr	r3, [pc, #68]	; (800c884 <_strtod_l+0x58c>)
 800c83e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c842:	4640      	mov	r0, r8
 800c844:	4649      	mov	r1, r9
 800c846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c84a:	f7f4 f81f 	bl	800088c <__aeabi_ddiv>
 800c84e:	4680      	mov	r8, r0
 800c850:	4689      	mov	r9, r1
 800c852:	112d      	asrs	r5, r5, #4
 800c854:	d0db      	beq.n	800c80e <_strtod_l+0x516>
 800c856:	2d1f      	cmp	r5, #31
 800c858:	dd1e      	ble.n	800c898 <_strtod_l+0x5a0>
 800c85a:	2500      	movs	r5, #0
 800c85c:	46ab      	mov	fp, r5
 800c85e:	9509      	str	r5, [sp, #36]	; 0x24
 800c860:	9505      	str	r5, [sp, #20]
 800c862:	2322      	movs	r3, #34	; 0x22
 800c864:	f04f 0800 	mov.w	r8, #0
 800c868:	f04f 0900 	mov.w	r9, #0
 800c86c:	6023      	str	r3, [r4, #0]
 800c86e:	e78d      	b.n	800c78c <_strtod_l+0x494>
 800c870:	0800ea5d 	.word	0x0800ea5d
 800c874:	0800ec84 	.word	0x0800ec84
 800c878:	0800ea55 	.word	0x0800ea55
 800c87c:	0800ea8a 	.word	0x0800ea8a
 800c880:	0800ee30 	.word	0x0800ee30
 800c884:	0800eb98 	.word	0x0800eb98
 800c888:	0800eb70 	.word	0x0800eb70
 800c88c:	7ff00000 	.word	0x7ff00000
 800c890:	7ca00000 	.word	0x7ca00000
 800c894:	7fefffff 	.word	0x7fefffff
 800c898:	f015 0310 	ands.w	r3, r5, #16
 800c89c:	bf18      	it	ne
 800c89e:	236a      	movne	r3, #106	; 0x6a
 800c8a0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800cc44 <_strtod_l+0x94c>
 800c8a4:	9304      	str	r3, [sp, #16]
 800c8a6:	4640      	mov	r0, r8
 800c8a8:	4649      	mov	r1, r9
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	07ea      	lsls	r2, r5, #31
 800c8ae:	d504      	bpl.n	800c8ba <_strtod_l+0x5c2>
 800c8b0:	e9da 2300 	ldrd	r2, r3, [sl]
 800c8b4:	f7f3 fec0 	bl	8000638 <__aeabi_dmul>
 800c8b8:	2301      	movs	r3, #1
 800c8ba:	106d      	asrs	r5, r5, #1
 800c8bc:	f10a 0a08 	add.w	sl, sl, #8
 800c8c0:	d1f4      	bne.n	800c8ac <_strtod_l+0x5b4>
 800c8c2:	b10b      	cbz	r3, 800c8c8 <_strtod_l+0x5d0>
 800c8c4:	4680      	mov	r8, r0
 800c8c6:	4689      	mov	r9, r1
 800c8c8:	9b04      	ldr	r3, [sp, #16]
 800c8ca:	b1bb      	cbz	r3, 800c8fc <_strtod_l+0x604>
 800c8cc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800c8d0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	4649      	mov	r1, r9
 800c8d8:	dd10      	ble.n	800c8fc <_strtod_l+0x604>
 800c8da:	2b1f      	cmp	r3, #31
 800c8dc:	f340 811e 	ble.w	800cb1c <_strtod_l+0x824>
 800c8e0:	2b34      	cmp	r3, #52	; 0x34
 800c8e2:	bfde      	ittt	le
 800c8e4:	f04f 33ff 	movle.w	r3, #4294967295
 800c8e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c8ec:	4093      	lslle	r3, r2
 800c8ee:	f04f 0800 	mov.w	r8, #0
 800c8f2:	bfcc      	ite	gt
 800c8f4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c8f8:	ea03 0901 	andle.w	r9, r3, r1
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	2300      	movs	r3, #0
 800c900:	4640      	mov	r0, r8
 800c902:	4649      	mov	r1, r9
 800c904:	f7f4 f900 	bl	8000b08 <__aeabi_dcmpeq>
 800c908:	2800      	cmp	r0, #0
 800c90a:	d1a6      	bne.n	800c85a <_strtod_l+0x562>
 800c90c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c90e:	9300      	str	r3, [sp, #0]
 800c910:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c912:	4633      	mov	r3, r6
 800c914:	465a      	mov	r2, fp
 800c916:	4620      	mov	r0, r4
 800c918:	f7ff f8cc 	bl	800bab4 <__s2b>
 800c91c:	9009      	str	r0, [sp, #36]	; 0x24
 800c91e:	2800      	cmp	r0, #0
 800c920:	f43f af2a 	beq.w	800c778 <_strtod_l+0x480>
 800c924:	9a08      	ldr	r2, [sp, #32]
 800c926:	9b05      	ldr	r3, [sp, #20]
 800c928:	2a00      	cmp	r2, #0
 800c92a:	eba3 0307 	sub.w	r3, r3, r7
 800c92e:	bfa8      	it	ge
 800c930:	2300      	movge	r3, #0
 800c932:	930c      	str	r3, [sp, #48]	; 0x30
 800c934:	2500      	movs	r5, #0
 800c936:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c93a:	9312      	str	r3, [sp, #72]	; 0x48
 800c93c:	46ab      	mov	fp, r5
 800c93e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c940:	4620      	mov	r0, r4
 800c942:	6859      	ldr	r1, [r3, #4]
 800c944:	f7ff f80e 	bl	800b964 <_Balloc>
 800c948:	9005      	str	r0, [sp, #20]
 800c94a:	2800      	cmp	r0, #0
 800c94c:	f43f af18 	beq.w	800c780 <_strtod_l+0x488>
 800c950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c952:	691a      	ldr	r2, [r3, #16]
 800c954:	3202      	adds	r2, #2
 800c956:	f103 010c 	add.w	r1, r3, #12
 800c95a:	0092      	lsls	r2, r2, #2
 800c95c:	300c      	adds	r0, #12
 800c95e:	f7fe f870 	bl	800aa42 <memcpy>
 800c962:	ec49 8b10 	vmov	d0, r8, r9
 800c966:	aa18      	add	r2, sp, #96	; 0x60
 800c968:	a917      	add	r1, sp, #92	; 0x5c
 800c96a:	4620      	mov	r0, r4
 800c96c:	f7ff fbd6 	bl	800c11c <__d2b>
 800c970:	ec49 8b18 	vmov	d8, r8, r9
 800c974:	9016      	str	r0, [sp, #88]	; 0x58
 800c976:	2800      	cmp	r0, #0
 800c978:	f43f af02 	beq.w	800c780 <_strtod_l+0x488>
 800c97c:	2101      	movs	r1, #1
 800c97e:	4620      	mov	r0, r4
 800c980:	f7ff f930 	bl	800bbe4 <__i2b>
 800c984:	4683      	mov	fp, r0
 800c986:	2800      	cmp	r0, #0
 800c988:	f43f aefa 	beq.w	800c780 <_strtod_l+0x488>
 800c98c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c98e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c990:	2e00      	cmp	r6, #0
 800c992:	bfab      	itete	ge
 800c994:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800c996:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800c998:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c99a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800c99e:	bfac      	ite	ge
 800c9a0:	eb06 0a03 	addge.w	sl, r6, r3
 800c9a4:	1b9f      	sublt	r7, r3, r6
 800c9a6:	9b04      	ldr	r3, [sp, #16]
 800c9a8:	1af6      	subs	r6, r6, r3
 800c9aa:	4416      	add	r6, r2
 800c9ac:	4ba0      	ldr	r3, [pc, #640]	; (800cc30 <_strtod_l+0x938>)
 800c9ae:	3e01      	subs	r6, #1
 800c9b0:	429e      	cmp	r6, r3
 800c9b2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c9b6:	f280 80c4 	bge.w	800cb42 <_strtod_l+0x84a>
 800c9ba:	1b9b      	subs	r3, r3, r6
 800c9bc:	2b1f      	cmp	r3, #31
 800c9be:	eba2 0203 	sub.w	r2, r2, r3
 800c9c2:	f04f 0101 	mov.w	r1, #1
 800c9c6:	f300 80b0 	bgt.w	800cb2a <_strtod_l+0x832>
 800c9ca:	fa01 f303 	lsl.w	r3, r1, r3
 800c9ce:	930e      	str	r3, [sp, #56]	; 0x38
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	930d      	str	r3, [sp, #52]	; 0x34
 800c9d4:	eb0a 0602 	add.w	r6, sl, r2
 800c9d8:	9b04      	ldr	r3, [sp, #16]
 800c9da:	45b2      	cmp	sl, r6
 800c9dc:	4417      	add	r7, r2
 800c9de:	441f      	add	r7, r3
 800c9e0:	4653      	mov	r3, sl
 800c9e2:	bfa8      	it	ge
 800c9e4:	4633      	movge	r3, r6
 800c9e6:	42bb      	cmp	r3, r7
 800c9e8:	bfa8      	it	ge
 800c9ea:	463b      	movge	r3, r7
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	bfc2      	ittt	gt
 800c9f0:	1af6      	subgt	r6, r6, r3
 800c9f2:	1aff      	subgt	r7, r7, r3
 800c9f4:	ebaa 0a03 	subgt.w	sl, sl, r3
 800c9f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	dd17      	ble.n	800ca2e <_strtod_l+0x736>
 800c9fe:	4659      	mov	r1, fp
 800ca00:	461a      	mov	r2, r3
 800ca02:	4620      	mov	r0, r4
 800ca04:	f7ff f9ae 	bl	800bd64 <__pow5mult>
 800ca08:	4683      	mov	fp, r0
 800ca0a:	2800      	cmp	r0, #0
 800ca0c:	f43f aeb8 	beq.w	800c780 <_strtod_l+0x488>
 800ca10:	4601      	mov	r1, r0
 800ca12:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ca14:	4620      	mov	r0, r4
 800ca16:	f7ff f8fb 	bl	800bc10 <__multiply>
 800ca1a:	900b      	str	r0, [sp, #44]	; 0x2c
 800ca1c:	2800      	cmp	r0, #0
 800ca1e:	f43f aeaf 	beq.w	800c780 <_strtod_l+0x488>
 800ca22:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ca24:	4620      	mov	r0, r4
 800ca26:	f7fe ffdd 	bl	800b9e4 <_Bfree>
 800ca2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca2c:	9316      	str	r3, [sp, #88]	; 0x58
 800ca2e:	2e00      	cmp	r6, #0
 800ca30:	f300 808c 	bgt.w	800cb4c <_strtod_l+0x854>
 800ca34:	9b08      	ldr	r3, [sp, #32]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	dd08      	ble.n	800ca4c <_strtod_l+0x754>
 800ca3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ca3c:	9905      	ldr	r1, [sp, #20]
 800ca3e:	4620      	mov	r0, r4
 800ca40:	f7ff f990 	bl	800bd64 <__pow5mult>
 800ca44:	9005      	str	r0, [sp, #20]
 800ca46:	2800      	cmp	r0, #0
 800ca48:	f43f ae9a 	beq.w	800c780 <_strtod_l+0x488>
 800ca4c:	2f00      	cmp	r7, #0
 800ca4e:	dd08      	ble.n	800ca62 <_strtod_l+0x76a>
 800ca50:	9905      	ldr	r1, [sp, #20]
 800ca52:	463a      	mov	r2, r7
 800ca54:	4620      	mov	r0, r4
 800ca56:	f7ff f9df 	bl	800be18 <__lshift>
 800ca5a:	9005      	str	r0, [sp, #20]
 800ca5c:	2800      	cmp	r0, #0
 800ca5e:	f43f ae8f 	beq.w	800c780 <_strtod_l+0x488>
 800ca62:	f1ba 0f00 	cmp.w	sl, #0
 800ca66:	dd08      	ble.n	800ca7a <_strtod_l+0x782>
 800ca68:	4659      	mov	r1, fp
 800ca6a:	4652      	mov	r2, sl
 800ca6c:	4620      	mov	r0, r4
 800ca6e:	f7ff f9d3 	bl	800be18 <__lshift>
 800ca72:	4683      	mov	fp, r0
 800ca74:	2800      	cmp	r0, #0
 800ca76:	f43f ae83 	beq.w	800c780 <_strtod_l+0x488>
 800ca7a:	9a05      	ldr	r2, [sp, #20]
 800ca7c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ca7e:	4620      	mov	r0, r4
 800ca80:	f7ff fa52 	bl	800bf28 <__mdiff>
 800ca84:	4605      	mov	r5, r0
 800ca86:	2800      	cmp	r0, #0
 800ca88:	f43f ae7a 	beq.w	800c780 <_strtod_l+0x488>
 800ca8c:	68c3      	ldr	r3, [r0, #12]
 800ca8e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca90:	2300      	movs	r3, #0
 800ca92:	60c3      	str	r3, [r0, #12]
 800ca94:	4659      	mov	r1, fp
 800ca96:	f7ff fa2b 	bl	800bef0 <__mcmp>
 800ca9a:	2800      	cmp	r0, #0
 800ca9c:	da60      	bge.n	800cb60 <_strtod_l+0x868>
 800ca9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800caa0:	ea53 0308 	orrs.w	r3, r3, r8
 800caa4:	f040 8084 	bne.w	800cbb0 <_strtod_l+0x8b8>
 800caa8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800caac:	2b00      	cmp	r3, #0
 800caae:	d17f      	bne.n	800cbb0 <_strtod_l+0x8b8>
 800cab0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cab4:	0d1b      	lsrs	r3, r3, #20
 800cab6:	051b      	lsls	r3, r3, #20
 800cab8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800cabc:	d978      	bls.n	800cbb0 <_strtod_l+0x8b8>
 800cabe:	696b      	ldr	r3, [r5, #20]
 800cac0:	b913      	cbnz	r3, 800cac8 <_strtod_l+0x7d0>
 800cac2:	692b      	ldr	r3, [r5, #16]
 800cac4:	2b01      	cmp	r3, #1
 800cac6:	dd73      	ble.n	800cbb0 <_strtod_l+0x8b8>
 800cac8:	4629      	mov	r1, r5
 800caca:	2201      	movs	r2, #1
 800cacc:	4620      	mov	r0, r4
 800cace:	f7ff f9a3 	bl	800be18 <__lshift>
 800cad2:	4659      	mov	r1, fp
 800cad4:	4605      	mov	r5, r0
 800cad6:	f7ff fa0b 	bl	800bef0 <__mcmp>
 800cada:	2800      	cmp	r0, #0
 800cadc:	dd68      	ble.n	800cbb0 <_strtod_l+0x8b8>
 800cade:	9904      	ldr	r1, [sp, #16]
 800cae0:	4a54      	ldr	r2, [pc, #336]	; (800cc34 <_strtod_l+0x93c>)
 800cae2:	464b      	mov	r3, r9
 800cae4:	2900      	cmp	r1, #0
 800cae6:	f000 8084 	beq.w	800cbf2 <_strtod_l+0x8fa>
 800caea:	ea02 0109 	and.w	r1, r2, r9
 800caee:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800caf2:	dc7e      	bgt.n	800cbf2 <_strtod_l+0x8fa>
 800caf4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800caf8:	f77f aeb3 	ble.w	800c862 <_strtod_l+0x56a>
 800cafc:	4b4e      	ldr	r3, [pc, #312]	; (800cc38 <_strtod_l+0x940>)
 800cafe:	4640      	mov	r0, r8
 800cb00:	4649      	mov	r1, r9
 800cb02:	2200      	movs	r2, #0
 800cb04:	f7f3 fd98 	bl	8000638 <__aeabi_dmul>
 800cb08:	4b4a      	ldr	r3, [pc, #296]	; (800cc34 <_strtod_l+0x93c>)
 800cb0a:	400b      	ands	r3, r1
 800cb0c:	4680      	mov	r8, r0
 800cb0e:	4689      	mov	r9, r1
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	f47f ae3f 	bne.w	800c794 <_strtod_l+0x49c>
 800cb16:	2322      	movs	r3, #34	; 0x22
 800cb18:	6023      	str	r3, [r4, #0]
 800cb1a:	e63b      	b.n	800c794 <_strtod_l+0x49c>
 800cb1c:	f04f 32ff 	mov.w	r2, #4294967295
 800cb20:	fa02 f303 	lsl.w	r3, r2, r3
 800cb24:	ea03 0808 	and.w	r8, r3, r8
 800cb28:	e6e8      	b.n	800c8fc <_strtod_l+0x604>
 800cb2a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800cb2e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800cb32:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800cb36:	36e2      	adds	r6, #226	; 0xe2
 800cb38:	fa01 f306 	lsl.w	r3, r1, r6
 800cb3c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800cb40:	e748      	b.n	800c9d4 <_strtod_l+0x6dc>
 800cb42:	2100      	movs	r1, #0
 800cb44:	2301      	movs	r3, #1
 800cb46:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800cb4a:	e743      	b.n	800c9d4 <_strtod_l+0x6dc>
 800cb4c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800cb4e:	4632      	mov	r2, r6
 800cb50:	4620      	mov	r0, r4
 800cb52:	f7ff f961 	bl	800be18 <__lshift>
 800cb56:	9016      	str	r0, [sp, #88]	; 0x58
 800cb58:	2800      	cmp	r0, #0
 800cb5a:	f47f af6b 	bne.w	800ca34 <_strtod_l+0x73c>
 800cb5e:	e60f      	b.n	800c780 <_strtod_l+0x488>
 800cb60:	46ca      	mov	sl, r9
 800cb62:	d171      	bne.n	800cc48 <_strtod_l+0x950>
 800cb64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cb66:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cb6a:	b352      	cbz	r2, 800cbc2 <_strtod_l+0x8ca>
 800cb6c:	4a33      	ldr	r2, [pc, #204]	; (800cc3c <_strtod_l+0x944>)
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	d12a      	bne.n	800cbc8 <_strtod_l+0x8d0>
 800cb72:	9b04      	ldr	r3, [sp, #16]
 800cb74:	4641      	mov	r1, r8
 800cb76:	b1fb      	cbz	r3, 800cbb8 <_strtod_l+0x8c0>
 800cb78:	4b2e      	ldr	r3, [pc, #184]	; (800cc34 <_strtod_l+0x93c>)
 800cb7a:	ea09 0303 	and.w	r3, r9, r3
 800cb7e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cb82:	f04f 32ff 	mov.w	r2, #4294967295
 800cb86:	d81a      	bhi.n	800cbbe <_strtod_l+0x8c6>
 800cb88:	0d1b      	lsrs	r3, r3, #20
 800cb8a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cb8e:	fa02 f303 	lsl.w	r3, r2, r3
 800cb92:	4299      	cmp	r1, r3
 800cb94:	d118      	bne.n	800cbc8 <_strtod_l+0x8d0>
 800cb96:	4b2a      	ldr	r3, [pc, #168]	; (800cc40 <_strtod_l+0x948>)
 800cb98:	459a      	cmp	sl, r3
 800cb9a:	d102      	bne.n	800cba2 <_strtod_l+0x8aa>
 800cb9c:	3101      	adds	r1, #1
 800cb9e:	f43f adef 	beq.w	800c780 <_strtod_l+0x488>
 800cba2:	4b24      	ldr	r3, [pc, #144]	; (800cc34 <_strtod_l+0x93c>)
 800cba4:	ea0a 0303 	and.w	r3, sl, r3
 800cba8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800cbac:	f04f 0800 	mov.w	r8, #0
 800cbb0:	9b04      	ldr	r3, [sp, #16]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d1a2      	bne.n	800cafc <_strtod_l+0x804>
 800cbb6:	e5ed      	b.n	800c794 <_strtod_l+0x49c>
 800cbb8:	f04f 33ff 	mov.w	r3, #4294967295
 800cbbc:	e7e9      	b.n	800cb92 <_strtod_l+0x89a>
 800cbbe:	4613      	mov	r3, r2
 800cbc0:	e7e7      	b.n	800cb92 <_strtod_l+0x89a>
 800cbc2:	ea53 0308 	orrs.w	r3, r3, r8
 800cbc6:	d08a      	beq.n	800cade <_strtod_l+0x7e6>
 800cbc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cbca:	b1e3      	cbz	r3, 800cc06 <_strtod_l+0x90e>
 800cbcc:	ea13 0f0a 	tst.w	r3, sl
 800cbd0:	d0ee      	beq.n	800cbb0 <_strtod_l+0x8b8>
 800cbd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbd4:	9a04      	ldr	r2, [sp, #16]
 800cbd6:	4640      	mov	r0, r8
 800cbd8:	4649      	mov	r1, r9
 800cbda:	b1c3      	cbz	r3, 800cc0e <_strtod_l+0x916>
 800cbdc:	f7ff fb6f 	bl	800c2be <sulp>
 800cbe0:	4602      	mov	r2, r0
 800cbe2:	460b      	mov	r3, r1
 800cbe4:	ec51 0b18 	vmov	r0, r1, d8
 800cbe8:	f7f3 fb70 	bl	80002cc <__adddf3>
 800cbec:	4680      	mov	r8, r0
 800cbee:	4689      	mov	r9, r1
 800cbf0:	e7de      	b.n	800cbb0 <_strtod_l+0x8b8>
 800cbf2:	4013      	ands	r3, r2
 800cbf4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cbf8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800cbfc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800cc00:	f04f 38ff 	mov.w	r8, #4294967295
 800cc04:	e7d4      	b.n	800cbb0 <_strtod_l+0x8b8>
 800cc06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc08:	ea13 0f08 	tst.w	r3, r8
 800cc0c:	e7e0      	b.n	800cbd0 <_strtod_l+0x8d8>
 800cc0e:	f7ff fb56 	bl	800c2be <sulp>
 800cc12:	4602      	mov	r2, r0
 800cc14:	460b      	mov	r3, r1
 800cc16:	ec51 0b18 	vmov	r0, r1, d8
 800cc1a:	f7f3 fb55 	bl	80002c8 <__aeabi_dsub>
 800cc1e:	2200      	movs	r2, #0
 800cc20:	2300      	movs	r3, #0
 800cc22:	4680      	mov	r8, r0
 800cc24:	4689      	mov	r9, r1
 800cc26:	f7f3 ff6f 	bl	8000b08 <__aeabi_dcmpeq>
 800cc2a:	2800      	cmp	r0, #0
 800cc2c:	d0c0      	beq.n	800cbb0 <_strtod_l+0x8b8>
 800cc2e:	e618      	b.n	800c862 <_strtod_l+0x56a>
 800cc30:	fffffc02 	.word	0xfffffc02
 800cc34:	7ff00000 	.word	0x7ff00000
 800cc38:	39500000 	.word	0x39500000
 800cc3c:	000fffff 	.word	0x000fffff
 800cc40:	7fefffff 	.word	0x7fefffff
 800cc44:	0800ec98 	.word	0x0800ec98
 800cc48:	4659      	mov	r1, fp
 800cc4a:	4628      	mov	r0, r5
 800cc4c:	f7ff fac0 	bl	800c1d0 <__ratio>
 800cc50:	ec57 6b10 	vmov	r6, r7, d0
 800cc54:	ee10 0a10 	vmov	r0, s0
 800cc58:	2200      	movs	r2, #0
 800cc5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cc5e:	4639      	mov	r1, r7
 800cc60:	f7f3 ff66 	bl	8000b30 <__aeabi_dcmple>
 800cc64:	2800      	cmp	r0, #0
 800cc66:	d071      	beq.n	800cd4c <_strtod_l+0xa54>
 800cc68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d17c      	bne.n	800cd68 <_strtod_l+0xa70>
 800cc6e:	f1b8 0f00 	cmp.w	r8, #0
 800cc72:	d15a      	bne.n	800cd2a <_strtod_l+0xa32>
 800cc74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d15d      	bne.n	800cd38 <_strtod_l+0xa40>
 800cc7c:	4b90      	ldr	r3, [pc, #576]	; (800cec0 <_strtod_l+0xbc8>)
 800cc7e:	2200      	movs	r2, #0
 800cc80:	4630      	mov	r0, r6
 800cc82:	4639      	mov	r1, r7
 800cc84:	f7f3 ff4a 	bl	8000b1c <__aeabi_dcmplt>
 800cc88:	2800      	cmp	r0, #0
 800cc8a:	d15c      	bne.n	800cd46 <_strtod_l+0xa4e>
 800cc8c:	4630      	mov	r0, r6
 800cc8e:	4639      	mov	r1, r7
 800cc90:	4b8c      	ldr	r3, [pc, #560]	; (800cec4 <_strtod_l+0xbcc>)
 800cc92:	2200      	movs	r2, #0
 800cc94:	f7f3 fcd0 	bl	8000638 <__aeabi_dmul>
 800cc98:	4606      	mov	r6, r0
 800cc9a:	460f      	mov	r7, r1
 800cc9c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800cca0:	9606      	str	r6, [sp, #24]
 800cca2:	9307      	str	r3, [sp, #28]
 800cca4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cca8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ccac:	4b86      	ldr	r3, [pc, #536]	; (800cec8 <_strtod_l+0xbd0>)
 800ccae:	ea0a 0303 	and.w	r3, sl, r3
 800ccb2:	930d      	str	r3, [sp, #52]	; 0x34
 800ccb4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ccb6:	4b85      	ldr	r3, [pc, #532]	; (800cecc <_strtod_l+0xbd4>)
 800ccb8:	429a      	cmp	r2, r3
 800ccba:	f040 8090 	bne.w	800cdde <_strtod_l+0xae6>
 800ccbe:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800ccc2:	ec49 8b10 	vmov	d0, r8, r9
 800ccc6:	f7ff f9b9 	bl	800c03c <__ulp>
 800ccca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ccce:	ec51 0b10 	vmov	r0, r1, d0
 800ccd2:	f7f3 fcb1 	bl	8000638 <__aeabi_dmul>
 800ccd6:	4642      	mov	r2, r8
 800ccd8:	464b      	mov	r3, r9
 800ccda:	f7f3 faf7 	bl	80002cc <__adddf3>
 800ccde:	460b      	mov	r3, r1
 800cce0:	4979      	ldr	r1, [pc, #484]	; (800cec8 <_strtod_l+0xbd0>)
 800cce2:	4a7b      	ldr	r2, [pc, #492]	; (800ced0 <_strtod_l+0xbd8>)
 800cce4:	4019      	ands	r1, r3
 800cce6:	4291      	cmp	r1, r2
 800cce8:	4680      	mov	r8, r0
 800ccea:	d944      	bls.n	800cd76 <_strtod_l+0xa7e>
 800ccec:	ee18 2a90 	vmov	r2, s17
 800ccf0:	4b78      	ldr	r3, [pc, #480]	; (800ced4 <_strtod_l+0xbdc>)
 800ccf2:	429a      	cmp	r2, r3
 800ccf4:	d104      	bne.n	800cd00 <_strtod_l+0xa08>
 800ccf6:	ee18 3a10 	vmov	r3, s16
 800ccfa:	3301      	adds	r3, #1
 800ccfc:	f43f ad40 	beq.w	800c780 <_strtod_l+0x488>
 800cd00:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800ced4 <_strtod_l+0xbdc>
 800cd04:	f04f 38ff 	mov.w	r8, #4294967295
 800cd08:	9916      	ldr	r1, [sp, #88]	; 0x58
 800cd0a:	4620      	mov	r0, r4
 800cd0c:	f7fe fe6a 	bl	800b9e4 <_Bfree>
 800cd10:	9905      	ldr	r1, [sp, #20]
 800cd12:	4620      	mov	r0, r4
 800cd14:	f7fe fe66 	bl	800b9e4 <_Bfree>
 800cd18:	4659      	mov	r1, fp
 800cd1a:	4620      	mov	r0, r4
 800cd1c:	f7fe fe62 	bl	800b9e4 <_Bfree>
 800cd20:	4629      	mov	r1, r5
 800cd22:	4620      	mov	r0, r4
 800cd24:	f7fe fe5e 	bl	800b9e4 <_Bfree>
 800cd28:	e609      	b.n	800c93e <_strtod_l+0x646>
 800cd2a:	f1b8 0f01 	cmp.w	r8, #1
 800cd2e:	d103      	bne.n	800cd38 <_strtod_l+0xa40>
 800cd30:	f1b9 0f00 	cmp.w	r9, #0
 800cd34:	f43f ad95 	beq.w	800c862 <_strtod_l+0x56a>
 800cd38:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800ce90 <_strtod_l+0xb98>
 800cd3c:	4f60      	ldr	r7, [pc, #384]	; (800cec0 <_strtod_l+0xbc8>)
 800cd3e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cd42:	2600      	movs	r6, #0
 800cd44:	e7ae      	b.n	800cca4 <_strtod_l+0x9ac>
 800cd46:	4f5f      	ldr	r7, [pc, #380]	; (800cec4 <_strtod_l+0xbcc>)
 800cd48:	2600      	movs	r6, #0
 800cd4a:	e7a7      	b.n	800cc9c <_strtod_l+0x9a4>
 800cd4c:	4b5d      	ldr	r3, [pc, #372]	; (800cec4 <_strtod_l+0xbcc>)
 800cd4e:	4630      	mov	r0, r6
 800cd50:	4639      	mov	r1, r7
 800cd52:	2200      	movs	r2, #0
 800cd54:	f7f3 fc70 	bl	8000638 <__aeabi_dmul>
 800cd58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd5a:	4606      	mov	r6, r0
 800cd5c:	460f      	mov	r7, r1
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d09c      	beq.n	800cc9c <_strtod_l+0x9a4>
 800cd62:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cd66:	e79d      	b.n	800cca4 <_strtod_l+0x9ac>
 800cd68:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800ce98 <_strtod_l+0xba0>
 800cd6c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cd70:	ec57 6b17 	vmov	r6, r7, d7
 800cd74:	e796      	b.n	800cca4 <_strtod_l+0x9ac>
 800cd76:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800cd7a:	9b04      	ldr	r3, [sp, #16]
 800cd7c:	46ca      	mov	sl, r9
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d1c2      	bne.n	800cd08 <_strtod_l+0xa10>
 800cd82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cd86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cd88:	0d1b      	lsrs	r3, r3, #20
 800cd8a:	051b      	lsls	r3, r3, #20
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	d1bb      	bne.n	800cd08 <_strtod_l+0xa10>
 800cd90:	4630      	mov	r0, r6
 800cd92:	4639      	mov	r1, r7
 800cd94:	f7f4 f800 	bl	8000d98 <__aeabi_d2lz>
 800cd98:	f7f3 fc20 	bl	80005dc <__aeabi_l2d>
 800cd9c:	4602      	mov	r2, r0
 800cd9e:	460b      	mov	r3, r1
 800cda0:	4630      	mov	r0, r6
 800cda2:	4639      	mov	r1, r7
 800cda4:	f7f3 fa90 	bl	80002c8 <__aeabi_dsub>
 800cda8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cdaa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cdae:	ea43 0308 	orr.w	r3, r3, r8
 800cdb2:	4313      	orrs	r3, r2
 800cdb4:	4606      	mov	r6, r0
 800cdb6:	460f      	mov	r7, r1
 800cdb8:	d054      	beq.n	800ce64 <_strtod_l+0xb6c>
 800cdba:	a339      	add	r3, pc, #228	; (adr r3, 800cea0 <_strtod_l+0xba8>)
 800cdbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdc0:	f7f3 feac 	bl	8000b1c <__aeabi_dcmplt>
 800cdc4:	2800      	cmp	r0, #0
 800cdc6:	f47f ace5 	bne.w	800c794 <_strtod_l+0x49c>
 800cdca:	a337      	add	r3, pc, #220	; (adr r3, 800cea8 <_strtod_l+0xbb0>)
 800cdcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd0:	4630      	mov	r0, r6
 800cdd2:	4639      	mov	r1, r7
 800cdd4:	f7f3 fec0 	bl	8000b58 <__aeabi_dcmpgt>
 800cdd8:	2800      	cmp	r0, #0
 800cdda:	d095      	beq.n	800cd08 <_strtod_l+0xa10>
 800cddc:	e4da      	b.n	800c794 <_strtod_l+0x49c>
 800cdde:	9b04      	ldr	r3, [sp, #16]
 800cde0:	b333      	cbz	r3, 800ce30 <_strtod_l+0xb38>
 800cde2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cde4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cde8:	d822      	bhi.n	800ce30 <_strtod_l+0xb38>
 800cdea:	a331      	add	r3, pc, #196	; (adr r3, 800ceb0 <_strtod_l+0xbb8>)
 800cdec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdf0:	4630      	mov	r0, r6
 800cdf2:	4639      	mov	r1, r7
 800cdf4:	f7f3 fe9c 	bl	8000b30 <__aeabi_dcmple>
 800cdf8:	b1a0      	cbz	r0, 800ce24 <_strtod_l+0xb2c>
 800cdfa:	4639      	mov	r1, r7
 800cdfc:	4630      	mov	r0, r6
 800cdfe:	f7f3 fef3 	bl	8000be8 <__aeabi_d2uiz>
 800ce02:	2801      	cmp	r0, #1
 800ce04:	bf38      	it	cc
 800ce06:	2001      	movcc	r0, #1
 800ce08:	f7f3 fb9c 	bl	8000544 <__aeabi_ui2d>
 800ce0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce0e:	4606      	mov	r6, r0
 800ce10:	460f      	mov	r7, r1
 800ce12:	bb23      	cbnz	r3, 800ce5e <_strtod_l+0xb66>
 800ce14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ce18:	9010      	str	r0, [sp, #64]	; 0x40
 800ce1a:	9311      	str	r3, [sp, #68]	; 0x44
 800ce1c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ce20:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ce24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ce28:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ce2c:	1a9b      	subs	r3, r3, r2
 800ce2e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ce30:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ce34:	eeb0 0a48 	vmov.f32	s0, s16
 800ce38:	eef0 0a68 	vmov.f32	s1, s17
 800ce3c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800ce40:	f7ff f8fc 	bl	800c03c <__ulp>
 800ce44:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ce48:	ec53 2b10 	vmov	r2, r3, d0
 800ce4c:	f7f3 fbf4 	bl	8000638 <__aeabi_dmul>
 800ce50:	ec53 2b18 	vmov	r2, r3, d8
 800ce54:	f7f3 fa3a 	bl	80002cc <__adddf3>
 800ce58:	4680      	mov	r8, r0
 800ce5a:	4689      	mov	r9, r1
 800ce5c:	e78d      	b.n	800cd7a <_strtod_l+0xa82>
 800ce5e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800ce62:	e7db      	b.n	800ce1c <_strtod_l+0xb24>
 800ce64:	a314      	add	r3, pc, #80	; (adr r3, 800ceb8 <_strtod_l+0xbc0>)
 800ce66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce6a:	f7f3 fe57 	bl	8000b1c <__aeabi_dcmplt>
 800ce6e:	e7b3      	b.n	800cdd8 <_strtod_l+0xae0>
 800ce70:	2300      	movs	r3, #0
 800ce72:	930a      	str	r3, [sp, #40]	; 0x28
 800ce74:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ce76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ce78:	6013      	str	r3, [r2, #0]
 800ce7a:	f7ff ba7c 	b.w	800c376 <_strtod_l+0x7e>
 800ce7e:	2a65      	cmp	r2, #101	; 0x65
 800ce80:	f43f ab75 	beq.w	800c56e <_strtod_l+0x276>
 800ce84:	2a45      	cmp	r2, #69	; 0x45
 800ce86:	f43f ab72 	beq.w	800c56e <_strtod_l+0x276>
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	f7ff bbaa 	b.w	800c5e4 <_strtod_l+0x2ec>
 800ce90:	00000000 	.word	0x00000000
 800ce94:	bff00000 	.word	0xbff00000
 800ce98:	00000000 	.word	0x00000000
 800ce9c:	3ff00000 	.word	0x3ff00000
 800cea0:	94a03595 	.word	0x94a03595
 800cea4:	3fdfffff 	.word	0x3fdfffff
 800cea8:	35afe535 	.word	0x35afe535
 800ceac:	3fe00000 	.word	0x3fe00000
 800ceb0:	ffc00000 	.word	0xffc00000
 800ceb4:	41dfffff 	.word	0x41dfffff
 800ceb8:	94a03595 	.word	0x94a03595
 800cebc:	3fcfffff 	.word	0x3fcfffff
 800cec0:	3ff00000 	.word	0x3ff00000
 800cec4:	3fe00000 	.word	0x3fe00000
 800cec8:	7ff00000 	.word	0x7ff00000
 800cecc:	7fe00000 	.word	0x7fe00000
 800ced0:	7c9fffff 	.word	0x7c9fffff
 800ced4:	7fefffff 	.word	0x7fefffff

0800ced8 <_strtod_r>:
 800ced8:	4b01      	ldr	r3, [pc, #4]	; (800cee0 <_strtod_r+0x8>)
 800ceda:	f7ff ba0d 	b.w	800c2f8 <_strtod_l>
 800cede:	bf00      	nop
 800cee0:	20000068 	.word	0x20000068

0800cee4 <_strtol_l.constprop.0>:
 800cee4:	2b01      	cmp	r3, #1
 800cee6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ceea:	d001      	beq.n	800cef0 <_strtol_l.constprop.0+0xc>
 800ceec:	2b24      	cmp	r3, #36	; 0x24
 800ceee:	d906      	bls.n	800cefe <_strtol_l.constprop.0+0x1a>
 800cef0:	f7fd fd7a 	bl	800a9e8 <__errno>
 800cef4:	2316      	movs	r3, #22
 800cef6:	6003      	str	r3, [r0, #0]
 800cef8:	2000      	movs	r0, #0
 800cefa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cefe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cfe4 <_strtol_l.constprop.0+0x100>
 800cf02:	460d      	mov	r5, r1
 800cf04:	462e      	mov	r6, r5
 800cf06:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf0a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800cf0e:	f017 0708 	ands.w	r7, r7, #8
 800cf12:	d1f7      	bne.n	800cf04 <_strtol_l.constprop.0+0x20>
 800cf14:	2c2d      	cmp	r4, #45	; 0x2d
 800cf16:	d132      	bne.n	800cf7e <_strtol_l.constprop.0+0x9a>
 800cf18:	782c      	ldrb	r4, [r5, #0]
 800cf1a:	2701      	movs	r7, #1
 800cf1c:	1cb5      	adds	r5, r6, #2
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d05b      	beq.n	800cfda <_strtol_l.constprop.0+0xf6>
 800cf22:	2b10      	cmp	r3, #16
 800cf24:	d109      	bne.n	800cf3a <_strtol_l.constprop.0+0x56>
 800cf26:	2c30      	cmp	r4, #48	; 0x30
 800cf28:	d107      	bne.n	800cf3a <_strtol_l.constprop.0+0x56>
 800cf2a:	782c      	ldrb	r4, [r5, #0]
 800cf2c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800cf30:	2c58      	cmp	r4, #88	; 0x58
 800cf32:	d14d      	bne.n	800cfd0 <_strtol_l.constprop.0+0xec>
 800cf34:	786c      	ldrb	r4, [r5, #1]
 800cf36:	2310      	movs	r3, #16
 800cf38:	3502      	adds	r5, #2
 800cf3a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800cf3e:	f108 38ff 	add.w	r8, r8, #4294967295
 800cf42:	f04f 0e00 	mov.w	lr, #0
 800cf46:	fbb8 f9f3 	udiv	r9, r8, r3
 800cf4a:	4676      	mov	r6, lr
 800cf4c:	fb03 8a19 	mls	sl, r3, r9, r8
 800cf50:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cf54:	f1bc 0f09 	cmp.w	ip, #9
 800cf58:	d816      	bhi.n	800cf88 <_strtol_l.constprop.0+0xa4>
 800cf5a:	4664      	mov	r4, ip
 800cf5c:	42a3      	cmp	r3, r4
 800cf5e:	dd24      	ble.n	800cfaa <_strtol_l.constprop.0+0xc6>
 800cf60:	f1be 3fff 	cmp.w	lr, #4294967295
 800cf64:	d008      	beq.n	800cf78 <_strtol_l.constprop.0+0x94>
 800cf66:	45b1      	cmp	r9, r6
 800cf68:	d31c      	bcc.n	800cfa4 <_strtol_l.constprop.0+0xc0>
 800cf6a:	d101      	bne.n	800cf70 <_strtol_l.constprop.0+0x8c>
 800cf6c:	45a2      	cmp	sl, r4
 800cf6e:	db19      	blt.n	800cfa4 <_strtol_l.constprop.0+0xc0>
 800cf70:	fb06 4603 	mla	r6, r6, r3, r4
 800cf74:	f04f 0e01 	mov.w	lr, #1
 800cf78:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf7c:	e7e8      	b.n	800cf50 <_strtol_l.constprop.0+0x6c>
 800cf7e:	2c2b      	cmp	r4, #43	; 0x2b
 800cf80:	bf04      	itt	eq
 800cf82:	782c      	ldrbeq	r4, [r5, #0]
 800cf84:	1cb5      	addeq	r5, r6, #2
 800cf86:	e7ca      	b.n	800cf1e <_strtol_l.constprop.0+0x3a>
 800cf88:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cf8c:	f1bc 0f19 	cmp.w	ip, #25
 800cf90:	d801      	bhi.n	800cf96 <_strtol_l.constprop.0+0xb2>
 800cf92:	3c37      	subs	r4, #55	; 0x37
 800cf94:	e7e2      	b.n	800cf5c <_strtol_l.constprop.0+0x78>
 800cf96:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cf9a:	f1bc 0f19 	cmp.w	ip, #25
 800cf9e:	d804      	bhi.n	800cfaa <_strtol_l.constprop.0+0xc6>
 800cfa0:	3c57      	subs	r4, #87	; 0x57
 800cfa2:	e7db      	b.n	800cf5c <_strtol_l.constprop.0+0x78>
 800cfa4:	f04f 3eff 	mov.w	lr, #4294967295
 800cfa8:	e7e6      	b.n	800cf78 <_strtol_l.constprop.0+0x94>
 800cfaa:	f1be 3fff 	cmp.w	lr, #4294967295
 800cfae:	d105      	bne.n	800cfbc <_strtol_l.constprop.0+0xd8>
 800cfb0:	2322      	movs	r3, #34	; 0x22
 800cfb2:	6003      	str	r3, [r0, #0]
 800cfb4:	4646      	mov	r6, r8
 800cfb6:	b942      	cbnz	r2, 800cfca <_strtol_l.constprop.0+0xe6>
 800cfb8:	4630      	mov	r0, r6
 800cfba:	e79e      	b.n	800cefa <_strtol_l.constprop.0+0x16>
 800cfbc:	b107      	cbz	r7, 800cfc0 <_strtol_l.constprop.0+0xdc>
 800cfbe:	4276      	negs	r6, r6
 800cfc0:	2a00      	cmp	r2, #0
 800cfc2:	d0f9      	beq.n	800cfb8 <_strtol_l.constprop.0+0xd4>
 800cfc4:	f1be 0f00 	cmp.w	lr, #0
 800cfc8:	d000      	beq.n	800cfcc <_strtol_l.constprop.0+0xe8>
 800cfca:	1e69      	subs	r1, r5, #1
 800cfcc:	6011      	str	r1, [r2, #0]
 800cfce:	e7f3      	b.n	800cfb8 <_strtol_l.constprop.0+0xd4>
 800cfd0:	2430      	movs	r4, #48	; 0x30
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d1b1      	bne.n	800cf3a <_strtol_l.constprop.0+0x56>
 800cfd6:	2308      	movs	r3, #8
 800cfd8:	e7af      	b.n	800cf3a <_strtol_l.constprop.0+0x56>
 800cfda:	2c30      	cmp	r4, #48	; 0x30
 800cfdc:	d0a5      	beq.n	800cf2a <_strtol_l.constprop.0+0x46>
 800cfde:	230a      	movs	r3, #10
 800cfe0:	e7ab      	b.n	800cf3a <_strtol_l.constprop.0+0x56>
 800cfe2:	bf00      	nop
 800cfe4:	0800ecc1 	.word	0x0800ecc1

0800cfe8 <_strtol_r>:
 800cfe8:	f7ff bf7c 	b.w	800cee4 <_strtol_l.constprop.0>

0800cfec <__ssputs_r>:
 800cfec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cff0:	688e      	ldr	r6, [r1, #8]
 800cff2:	461f      	mov	r7, r3
 800cff4:	42be      	cmp	r6, r7
 800cff6:	680b      	ldr	r3, [r1, #0]
 800cff8:	4682      	mov	sl, r0
 800cffa:	460c      	mov	r4, r1
 800cffc:	4690      	mov	r8, r2
 800cffe:	d82c      	bhi.n	800d05a <__ssputs_r+0x6e>
 800d000:	898a      	ldrh	r2, [r1, #12]
 800d002:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d006:	d026      	beq.n	800d056 <__ssputs_r+0x6a>
 800d008:	6965      	ldr	r5, [r4, #20]
 800d00a:	6909      	ldr	r1, [r1, #16]
 800d00c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d010:	eba3 0901 	sub.w	r9, r3, r1
 800d014:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d018:	1c7b      	adds	r3, r7, #1
 800d01a:	444b      	add	r3, r9
 800d01c:	106d      	asrs	r5, r5, #1
 800d01e:	429d      	cmp	r5, r3
 800d020:	bf38      	it	cc
 800d022:	461d      	movcc	r5, r3
 800d024:	0553      	lsls	r3, r2, #21
 800d026:	d527      	bpl.n	800d078 <__ssputs_r+0x8c>
 800d028:	4629      	mov	r1, r5
 800d02a:	f7fe fc0f 	bl	800b84c <_malloc_r>
 800d02e:	4606      	mov	r6, r0
 800d030:	b360      	cbz	r0, 800d08c <__ssputs_r+0xa0>
 800d032:	6921      	ldr	r1, [r4, #16]
 800d034:	464a      	mov	r2, r9
 800d036:	f7fd fd04 	bl	800aa42 <memcpy>
 800d03a:	89a3      	ldrh	r3, [r4, #12]
 800d03c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d044:	81a3      	strh	r3, [r4, #12]
 800d046:	6126      	str	r6, [r4, #16]
 800d048:	6165      	str	r5, [r4, #20]
 800d04a:	444e      	add	r6, r9
 800d04c:	eba5 0509 	sub.w	r5, r5, r9
 800d050:	6026      	str	r6, [r4, #0]
 800d052:	60a5      	str	r5, [r4, #8]
 800d054:	463e      	mov	r6, r7
 800d056:	42be      	cmp	r6, r7
 800d058:	d900      	bls.n	800d05c <__ssputs_r+0x70>
 800d05a:	463e      	mov	r6, r7
 800d05c:	6820      	ldr	r0, [r4, #0]
 800d05e:	4632      	mov	r2, r6
 800d060:	4641      	mov	r1, r8
 800d062:	f000 fd5c 	bl	800db1e <memmove>
 800d066:	68a3      	ldr	r3, [r4, #8]
 800d068:	1b9b      	subs	r3, r3, r6
 800d06a:	60a3      	str	r3, [r4, #8]
 800d06c:	6823      	ldr	r3, [r4, #0]
 800d06e:	4433      	add	r3, r6
 800d070:	6023      	str	r3, [r4, #0]
 800d072:	2000      	movs	r0, #0
 800d074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d078:	462a      	mov	r2, r5
 800d07a:	f001 f932 	bl	800e2e2 <_realloc_r>
 800d07e:	4606      	mov	r6, r0
 800d080:	2800      	cmp	r0, #0
 800d082:	d1e0      	bne.n	800d046 <__ssputs_r+0x5a>
 800d084:	6921      	ldr	r1, [r4, #16]
 800d086:	4650      	mov	r0, sl
 800d088:	f7fe fb6c 	bl	800b764 <_free_r>
 800d08c:	230c      	movs	r3, #12
 800d08e:	f8ca 3000 	str.w	r3, [sl]
 800d092:	89a3      	ldrh	r3, [r4, #12]
 800d094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d098:	81a3      	strh	r3, [r4, #12]
 800d09a:	f04f 30ff 	mov.w	r0, #4294967295
 800d09e:	e7e9      	b.n	800d074 <__ssputs_r+0x88>

0800d0a0 <_svfiprintf_r>:
 800d0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0a4:	4698      	mov	r8, r3
 800d0a6:	898b      	ldrh	r3, [r1, #12]
 800d0a8:	061b      	lsls	r3, r3, #24
 800d0aa:	b09d      	sub	sp, #116	; 0x74
 800d0ac:	4607      	mov	r7, r0
 800d0ae:	460d      	mov	r5, r1
 800d0b0:	4614      	mov	r4, r2
 800d0b2:	d50e      	bpl.n	800d0d2 <_svfiprintf_r+0x32>
 800d0b4:	690b      	ldr	r3, [r1, #16]
 800d0b6:	b963      	cbnz	r3, 800d0d2 <_svfiprintf_r+0x32>
 800d0b8:	2140      	movs	r1, #64	; 0x40
 800d0ba:	f7fe fbc7 	bl	800b84c <_malloc_r>
 800d0be:	6028      	str	r0, [r5, #0]
 800d0c0:	6128      	str	r0, [r5, #16]
 800d0c2:	b920      	cbnz	r0, 800d0ce <_svfiprintf_r+0x2e>
 800d0c4:	230c      	movs	r3, #12
 800d0c6:	603b      	str	r3, [r7, #0]
 800d0c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d0cc:	e0d0      	b.n	800d270 <_svfiprintf_r+0x1d0>
 800d0ce:	2340      	movs	r3, #64	; 0x40
 800d0d0:	616b      	str	r3, [r5, #20]
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	9309      	str	r3, [sp, #36]	; 0x24
 800d0d6:	2320      	movs	r3, #32
 800d0d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d0dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d0e0:	2330      	movs	r3, #48	; 0x30
 800d0e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d288 <_svfiprintf_r+0x1e8>
 800d0e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d0ea:	f04f 0901 	mov.w	r9, #1
 800d0ee:	4623      	mov	r3, r4
 800d0f0:	469a      	mov	sl, r3
 800d0f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d0f6:	b10a      	cbz	r2, 800d0fc <_svfiprintf_r+0x5c>
 800d0f8:	2a25      	cmp	r2, #37	; 0x25
 800d0fa:	d1f9      	bne.n	800d0f0 <_svfiprintf_r+0x50>
 800d0fc:	ebba 0b04 	subs.w	fp, sl, r4
 800d100:	d00b      	beq.n	800d11a <_svfiprintf_r+0x7a>
 800d102:	465b      	mov	r3, fp
 800d104:	4622      	mov	r2, r4
 800d106:	4629      	mov	r1, r5
 800d108:	4638      	mov	r0, r7
 800d10a:	f7ff ff6f 	bl	800cfec <__ssputs_r>
 800d10e:	3001      	adds	r0, #1
 800d110:	f000 80a9 	beq.w	800d266 <_svfiprintf_r+0x1c6>
 800d114:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d116:	445a      	add	r2, fp
 800d118:	9209      	str	r2, [sp, #36]	; 0x24
 800d11a:	f89a 3000 	ldrb.w	r3, [sl]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	f000 80a1 	beq.w	800d266 <_svfiprintf_r+0x1c6>
 800d124:	2300      	movs	r3, #0
 800d126:	f04f 32ff 	mov.w	r2, #4294967295
 800d12a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d12e:	f10a 0a01 	add.w	sl, sl, #1
 800d132:	9304      	str	r3, [sp, #16]
 800d134:	9307      	str	r3, [sp, #28]
 800d136:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d13a:	931a      	str	r3, [sp, #104]	; 0x68
 800d13c:	4654      	mov	r4, sl
 800d13e:	2205      	movs	r2, #5
 800d140:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d144:	4850      	ldr	r0, [pc, #320]	; (800d288 <_svfiprintf_r+0x1e8>)
 800d146:	f7f3 f863 	bl	8000210 <memchr>
 800d14a:	9a04      	ldr	r2, [sp, #16]
 800d14c:	b9d8      	cbnz	r0, 800d186 <_svfiprintf_r+0xe6>
 800d14e:	06d0      	lsls	r0, r2, #27
 800d150:	bf44      	itt	mi
 800d152:	2320      	movmi	r3, #32
 800d154:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d158:	0711      	lsls	r1, r2, #28
 800d15a:	bf44      	itt	mi
 800d15c:	232b      	movmi	r3, #43	; 0x2b
 800d15e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d162:	f89a 3000 	ldrb.w	r3, [sl]
 800d166:	2b2a      	cmp	r3, #42	; 0x2a
 800d168:	d015      	beq.n	800d196 <_svfiprintf_r+0xf6>
 800d16a:	9a07      	ldr	r2, [sp, #28]
 800d16c:	4654      	mov	r4, sl
 800d16e:	2000      	movs	r0, #0
 800d170:	f04f 0c0a 	mov.w	ip, #10
 800d174:	4621      	mov	r1, r4
 800d176:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d17a:	3b30      	subs	r3, #48	; 0x30
 800d17c:	2b09      	cmp	r3, #9
 800d17e:	d94d      	bls.n	800d21c <_svfiprintf_r+0x17c>
 800d180:	b1b0      	cbz	r0, 800d1b0 <_svfiprintf_r+0x110>
 800d182:	9207      	str	r2, [sp, #28]
 800d184:	e014      	b.n	800d1b0 <_svfiprintf_r+0x110>
 800d186:	eba0 0308 	sub.w	r3, r0, r8
 800d18a:	fa09 f303 	lsl.w	r3, r9, r3
 800d18e:	4313      	orrs	r3, r2
 800d190:	9304      	str	r3, [sp, #16]
 800d192:	46a2      	mov	sl, r4
 800d194:	e7d2      	b.n	800d13c <_svfiprintf_r+0x9c>
 800d196:	9b03      	ldr	r3, [sp, #12]
 800d198:	1d19      	adds	r1, r3, #4
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	9103      	str	r1, [sp, #12]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	bfbb      	ittet	lt
 800d1a2:	425b      	neglt	r3, r3
 800d1a4:	f042 0202 	orrlt.w	r2, r2, #2
 800d1a8:	9307      	strge	r3, [sp, #28]
 800d1aa:	9307      	strlt	r3, [sp, #28]
 800d1ac:	bfb8      	it	lt
 800d1ae:	9204      	strlt	r2, [sp, #16]
 800d1b0:	7823      	ldrb	r3, [r4, #0]
 800d1b2:	2b2e      	cmp	r3, #46	; 0x2e
 800d1b4:	d10c      	bne.n	800d1d0 <_svfiprintf_r+0x130>
 800d1b6:	7863      	ldrb	r3, [r4, #1]
 800d1b8:	2b2a      	cmp	r3, #42	; 0x2a
 800d1ba:	d134      	bne.n	800d226 <_svfiprintf_r+0x186>
 800d1bc:	9b03      	ldr	r3, [sp, #12]
 800d1be:	1d1a      	adds	r2, r3, #4
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	9203      	str	r2, [sp, #12]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	bfb8      	it	lt
 800d1c8:	f04f 33ff 	movlt.w	r3, #4294967295
 800d1cc:	3402      	adds	r4, #2
 800d1ce:	9305      	str	r3, [sp, #20]
 800d1d0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d298 <_svfiprintf_r+0x1f8>
 800d1d4:	7821      	ldrb	r1, [r4, #0]
 800d1d6:	2203      	movs	r2, #3
 800d1d8:	4650      	mov	r0, sl
 800d1da:	f7f3 f819 	bl	8000210 <memchr>
 800d1de:	b138      	cbz	r0, 800d1f0 <_svfiprintf_r+0x150>
 800d1e0:	9b04      	ldr	r3, [sp, #16]
 800d1e2:	eba0 000a 	sub.w	r0, r0, sl
 800d1e6:	2240      	movs	r2, #64	; 0x40
 800d1e8:	4082      	lsls	r2, r0
 800d1ea:	4313      	orrs	r3, r2
 800d1ec:	3401      	adds	r4, #1
 800d1ee:	9304      	str	r3, [sp, #16]
 800d1f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1f4:	4825      	ldr	r0, [pc, #148]	; (800d28c <_svfiprintf_r+0x1ec>)
 800d1f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d1fa:	2206      	movs	r2, #6
 800d1fc:	f7f3 f808 	bl	8000210 <memchr>
 800d200:	2800      	cmp	r0, #0
 800d202:	d038      	beq.n	800d276 <_svfiprintf_r+0x1d6>
 800d204:	4b22      	ldr	r3, [pc, #136]	; (800d290 <_svfiprintf_r+0x1f0>)
 800d206:	bb1b      	cbnz	r3, 800d250 <_svfiprintf_r+0x1b0>
 800d208:	9b03      	ldr	r3, [sp, #12]
 800d20a:	3307      	adds	r3, #7
 800d20c:	f023 0307 	bic.w	r3, r3, #7
 800d210:	3308      	adds	r3, #8
 800d212:	9303      	str	r3, [sp, #12]
 800d214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d216:	4433      	add	r3, r6
 800d218:	9309      	str	r3, [sp, #36]	; 0x24
 800d21a:	e768      	b.n	800d0ee <_svfiprintf_r+0x4e>
 800d21c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d220:	460c      	mov	r4, r1
 800d222:	2001      	movs	r0, #1
 800d224:	e7a6      	b.n	800d174 <_svfiprintf_r+0xd4>
 800d226:	2300      	movs	r3, #0
 800d228:	3401      	adds	r4, #1
 800d22a:	9305      	str	r3, [sp, #20]
 800d22c:	4619      	mov	r1, r3
 800d22e:	f04f 0c0a 	mov.w	ip, #10
 800d232:	4620      	mov	r0, r4
 800d234:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d238:	3a30      	subs	r2, #48	; 0x30
 800d23a:	2a09      	cmp	r2, #9
 800d23c:	d903      	bls.n	800d246 <_svfiprintf_r+0x1a6>
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d0c6      	beq.n	800d1d0 <_svfiprintf_r+0x130>
 800d242:	9105      	str	r1, [sp, #20]
 800d244:	e7c4      	b.n	800d1d0 <_svfiprintf_r+0x130>
 800d246:	fb0c 2101 	mla	r1, ip, r1, r2
 800d24a:	4604      	mov	r4, r0
 800d24c:	2301      	movs	r3, #1
 800d24e:	e7f0      	b.n	800d232 <_svfiprintf_r+0x192>
 800d250:	ab03      	add	r3, sp, #12
 800d252:	9300      	str	r3, [sp, #0]
 800d254:	462a      	mov	r2, r5
 800d256:	4b0f      	ldr	r3, [pc, #60]	; (800d294 <_svfiprintf_r+0x1f4>)
 800d258:	a904      	add	r1, sp, #16
 800d25a:	4638      	mov	r0, r7
 800d25c:	f7fc fc48 	bl	8009af0 <_printf_float>
 800d260:	1c42      	adds	r2, r0, #1
 800d262:	4606      	mov	r6, r0
 800d264:	d1d6      	bne.n	800d214 <_svfiprintf_r+0x174>
 800d266:	89ab      	ldrh	r3, [r5, #12]
 800d268:	065b      	lsls	r3, r3, #25
 800d26a:	f53f af2d 	bmi.w	800d0c8 <_svfiprintf_r+0x28>
 800d26e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d270:	b01d      	add	sp, #116	; 0x74
 800d272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d276:	ab03      	add	r3, sp, #12
 800d278:	9300      	str	r3, [sp, #0]
 800d27a:	462a      	mov	r2, r5
 800d27c:	4b05      	ldr	r3, [pc, #20]	; (800d294 <_svfiprintf_r+0x1f4>)
 800d27e:	a904      	add	r1, sp, #16
 800d280:	4638      	mov	r0, r7
 800d282:	f7fc fed9 	bl	800a038 <_printf_i>
 800d286:	e7eb      	b.n	800d260 <_svfiprintf_r+0x1c0>
 800d288:	0800edc1 	.word	0x0800edc1
 800d28c:	0800edcb 	.word	0x0800edcb
 800d290:	08009af1 	.word	0x08009af1
 800d294:	0800cfed 	.word	0x0800cfed
 800d298:	0800edc7 	.word	0x0800edc7

0800d29c <_sungetc_r>:
 800d29c:	b538      	push	{r3, r4, r5, lr}
 800d29e:	1c4b      	adds	r3, r1, #1
 800d2a0:	4614      	mov	r4, r2
 800d2a2:	d103      	bne.n	800d2ac <_sungetc_r+0x10>
 800d2a4:	f04f 35ff 	mov.w	r5, #4294967295
 800d2a8:	4628      	mov	r0, r5
 800d2aa:	bd38      	pop	{r3, r4, r5, pc}
 800d2ac:	8993      	ldrh	r3, [r2, #12]
 800d2ae:	f023 0320 	bic.w	r3, r3, #32
 800d2b2:	8193      	strh	r3, [r2, #12]
 800d2b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d2b6:	6852      	ldr	r2, [r2, #4]
 800d2b8:	b2cd      	uxtb	r5, r1
 800d2ba:	b18b      	cbz	r3, 800d2e0 <_sungetc_r+0x44>
 800d2bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	dd08      	ble.n	800d2d4 <_sungetc_r+0x38>
 800d2c2:	6823      	ldr	r3, [r4, #0]
 800d2c4:	1e5a      	subs	r2, r3, #1
 800d2c6:	6022      	str	r2, [r4, #0]
 800d2c8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d2cc:	6863      	ldr	r3, [r4, #4]
 800d2ce:	3301      	adds	r3, #1
 800d2d0:	6063      	str	r3, [r4, #4]
 800d2d2:	e7e9      	b.n	800d2a8 <_sungetc_r+0xc>
 800d2d4:	4621      	mov	r1, r4
 800d2d6:	f000 fbe8 	bl	800daaa <__submore>
 800d2da:	2800      	cmp	r0, #0
 800d2dc:	d0f1      	beq.n	800d2c2 <_sungetc_r+0x26>
 800d2de:	e7e1      	b.n	800d2a4 <_sungetc_r+0x8>
 800d2e0:	6921      	ldr	r1, [r4, #16]
 800d2e2:	6823      	ldr	r3, [r4, #0]
 800d2e4:	b151      	cbz	r1, 800d2fc <_sungetc_r+0x60>
 800d2e6:	4299      	cmp	r1, r3
 800d2e8:	d208      	bcs.n	800d2fc <_sungetc_r+0x60>
 800d2ea:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800d2ee:	42a9      	cmp	r1, r5
 800d2f0:	d104      	bne.n	800d2fc <_sungetc_r+0x60>
 800d2f2:	3b01      	subs	r3, #1
 800d2f4:	3201      	adds	r2, #1
 800d2f6:	6023      	str	r3, [r4, #0]
 800d2f8:	6062      	str	r2, [r4, #4]
 800d2fa:	e7d5      	b.n	800d2a8 <_sungetc_r+0xc>
 800d2fc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800d300:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d304:	6363      	str	r3, [r4, #52]	; 0x34
 800d306:	2303      	movs	r3, #3
 800d308:	63a3      	str	r3, [r4, #56]	; 0x38
 800d30a:	4623      	mov	r3, r4
 800d30c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d310:	6023      	str	r3, [r4, #0]
 800d312:	2301      	movs	r3, #1
 800d314:	e7dc      	b.n	800d2d0 <_sungetc_r+0x34>

0800d316 <__ssrefill_r>:
 800d316:	b510      	push	{r4, lr}
 800d318:	460c      	mov	r4, r1
 800d31a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d31c:	b169      	cbz	r1, 800d33a <__ssrefill_r+0x24>
 800d31e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d322:	4299      	cmp	r1, r3
 800d324:	d001      	beq.n	800d32a <__ssrefill_r+0x14>
 800d326:	f7fe fa1d 	bl	800b764 <_free_r>
 800d32a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d32c:	6063      	str	r3, [r4, #4]
 800d32e:	2000      	movs	r0, #0
 800d330:	6360      	str	r0, [r4, #52]	; 0x34
 800d332:	b113      	cbz	r3, 800d33a <__ssrefill_r+0x24>
 800d334:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d336:	6023      	str	r3, [r4, #0]
 800d338:	bd10      	pop	{r4, pc}
 800d33a:	6923      	ldr	r3, [r4, #16]
 800d33c:	6023      	str	r3, [r4, #0]
 800d33e:	2300      	movs	r3, #0
 800d340:	6063      	str	r3, [r4, #4]
 800d342:	89a3      	ldrh	r3, [r4, #12]
 800d344:	f043 0320 	orr.w	r3, r3, #32
 800d348:	81a3      	strh	r3, [r4, #12]
 800d34a:	f04f 30ff 	mov.w	r0, #4294967295
 800d34e:	e7f3      	b.n	800d338 <__ssrefill_r+0x22>

0800d350 <__ssvfiscanf_r>:
 800d350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d354:	460c      	mov	r4, r1
 800d356:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800d35a:	2100      	movs	r1, #0
 800d35c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800d360:	49a6      	ldr	r1, [pc, #664]	; (800d5fc <__ssvfiscanf_r+0x2ac>)
 800d362:	91a0      	str	r1, [sp, #640]	; 0x280
 800d364:	f10d 0804 	add.w	r8, sp, #4
 800d368:	49a5      	ldr	r1, [pc, #660]	; (800d600 <__ssvfiscanf_r+0x2b0>)
 800d36a:	4fa6      	ldr	r7, [pc, #664]	; (800d604 <__ssvfiscanf_r+0x2b4>)
 800d36c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800d608 <__ssvfiscanf_r+0x2b8>
 800d370:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800d374:	4606      	mov	r6, r0
 800d376:	91a1      	str	r1, [sp, #644]	; 0x284
 800d378:	9300      	str	r3, [sp, #0]
 800d37a:	7813      	ldrb	r3, [r2, #0]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	f000 815a 	beq.w	800d636 <__ssvfiscanf_r+0x2e6>
 800d382:	5cf9      	ldrb	r1, [r7, r3]
 800d384:	f011 0108 	ands.w	r1, r1, #8
 800d388:	f102 0501 	add.w	r5, r2, #1
 800d38c:	d019      	beq.n	800d3c2 <__ssvfiscanf_r+0x72>
 800d38e:	6863      	ldr	r3, [r4, #4]
 800d390:	2b00      	cmp	r3, #0
 800d392:	dd0f      	ble.n	800d3b4 <__ssvfiscanf_r+0x64>
 800d394:	6823      	ldr	r3, [r4, #0]
 800d396:	781a      	ldrb	r2, [r3, #0]
 800d398:	5cba      	ldrb	r2, [r7, r2]
 800d39a:	0712      	lsls	r2, r2, #28
 800d39c:	d401      	bmi.n	800d3a2 <__ssvfiscanf_r+0x52>
 800d39e:	462a      	mov	r2, r5
 800d3a0:	e7eb      	b.n	800d37a <__ssvfiscanf_r+0x2a>
 800d3a2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d3a4:	3201      	adds	r2, #1
 800d3a6:	9245      	str	r2, [sp, #276]	; 0x114
 800d3a8:	6862      	ldr	r2, [r4, #4]
 800d3aa:	3301      	adds	r3, #1
 800d3ac:	3a01      	subs	r2, #1
 800d3ae:	6062      	str	r2, [r4, #4]
 800d3b0:	6023      	str	r3, [r4, #0]
 800d3b2:	e7ec      	b.n	800d38e <__ssvfiscanf_r+0x3e>
 800d3b4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d3b6:	4621      	mov	r1, r4
 800d3b8:	4630      	mov	r0, r6
 800d3ba:	4798      	blx	r3
 800d3bc:	2800      	cmp	r0, #0
 800d3be:	d0e9      	beq.n	800d394 <__ssvfiscanf_r+0x44>
 800d3c0:	e7ed      	b.n	800d39e <__ssvfiscanf_r+0x4e>
 800d3c2:	2b25      	cmp	r3, #37	; 0x25
 800d3c4:	d012      	beq.n	800d3ec <__ssvfiscanf_r+0x9c>
 800d3c6:	469a      	mov	sl, r3
 800d3c8:	6863      	ldr	r3, [r4, #4]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	f340 8091 	ble.w	800d4f2 <__ssvfiscanf_r+0x1a2>
 800d3d0:	6822      	ldr	r2, [r4, #0]
 800d3d2:	7813      	ldrb	r3, [r2, #0]
 800d3d4:	4553      	cmp	r3, sl
 800d3d6:	f040 812e 	bne.w	800d636 <__ssvfiscanf_r+0x2e6>
 800d3da:	6863      	ldr	r3, [r4, #4]
 800d3dc:	3b01      	subs	r3, #1
 800d3de:	6063      	str	r3, [r4, #4]
 800d3e0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800d3e2:	3201      	adds	r2, #1
 800d3e4:	3301      	adds	r3, #1
 800d3e6:	6022      	str	r2, [r4, #0]
 800d3e8:	9345      	str	r3, [sp, #276]	; 0x114
 800d3ea:	e7d8      	b.n	800d39e <__ssvfiscanf_r+0x4e>
 800d3ec:	9141      	str	r1, [sp, #260]	; 0x104
 800d3ee:	9143      	str	r1, [sp, #268]	; 0x10c
 800d3f0:	7853      	ldrb	r3, [r2, #1]
 800d3f2:	2b2a      	cmp	r3, #42	; 0x2a
 800d3f4:	bf02      	ittt	eq
 800d3f6:	2310      	moveq	r3, #16
 800d3f8:	1c95      	addeq	r5, r2, #2
 800d3fa:	9341      	streq	r3, [sp, #260]	; 0x104
 800d3fc:	220a      	movs	r2, #10
 800d3fe:	46aa      	mov	sl, r5
 800d400:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800d404:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800d408:	2b09      	cmp	r3, #9
 800d40a:	d91c      	bls.n	800d446 <__ssvfiscanf_r+0xf6>
 800d40c:	487e      	ldr	r0, [pc, #504]	; (800d608 <__ssvfiscanf_r+0x2b8>)
 800d40e:	2203      	movs	r2, #3
 800d410:	f7f2 fefe 	bl	8000210 <memchr>
 800d414:	b138      	cbz	r0, 800d426 <__ssvfiscanf_r+0xd6>
 800d416:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d418:	eba0 0009 	sub.w	r0, r0, r9
 800d41c:	2301      	movs	r3, #1
 800d41e:	4083      	lsls	r3, r0
 800d420:	4313      	orrs	r3, r2
 800d422:	9341      	str	r3, [sp, #260]	; 0x104
 800d424:	4655      	mov	r5, sl
 800d426:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d42a:	2b78      	cmp	r3, #120	; 0x78
 800d42c:	d806      	bhi.n	800d43c <__ssvfiscanf_r+0xec>
 800d42e:	2b57      	cmp	r3, #87	; 0x57
 800d430:	d810      	bhi.n	800d454 <__ssvfiscanf_r+0x104>
 800d432:	2b25      	cmp	r3, #37	; 0x25
 800d434:	d0c7      	beq.n	800d3c6 <__ssvfiscanf_r+0x76>
 800d436:	d857      	bhi.n	800d4e8 <__ssvfiscanf_r+0x198>
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d065      	beq.n	800d508 <__ssvfiscanf_r+0x1b8>
 800d43c:	2303      	movs	r3, #3
 800d43e:	9347      	str	r3, [sp, #284]	; 0x11c
 800d440:	230a      	movs	r3, #10
 800d442:	9342      	str	r3, [sp, #264]	; 0x108
 800d444:	e076      	b.n	800d534 <__ssvfiscanf_r+0x1e4>
 800d446:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800d448:	fb02 1103 	mla	r1, r2, r3, r1
 800d44c:	3930      	subs	r1, #48	; 0x30
 800d44e:	9143      	str	r1, [sp, #268]	; 0x10c
 800d450:	4655      	mov	r5, sl
 800d452:	e7d4      	b.n	800d3fe <__ssvfiscanf_r+0xae>
 800d454:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800d458:	2a20      	cmp	r2, #32
 800d45a:	d8ef      	bhi.n	800d43c <__ssvfiscanf_r+0xec>
 800d45c:	a101      	add	r1, pc, #4	; (adr r1, 800d464 <__ssvfiscanf_r+0x114>)
 800d45e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d462:	bf00      	nop
 800d464:	0800d517 	.word	0x0800d517
 800d468:	0800d43d 	.word	0x0800d43d
 800d46c:	0800d43d 	.word	0x0800d43d
 800d470:	0800d575 	.word	0x0800d575
 800d474:	0800d43d 	.word	0x0800d43d
 800d478:	0800d43d 	.word	0x0800d43d
 800d47c:	0800d43d 	.word	0x0800d43d
 800d480:	0800d43d 	.word	0x0800d43d
 800d484:	0800d43d 	.word	0x0800d43d
 800d488:	0800d43d 	.word	0x0800d43d
 800d48c:	0800d43d 	.word	0x0800d43d
 800d490:	0800d58b 	.word	0x0800d58b
 800d494:	0800d571 	.word	0x0800d571
 800d498:	0800d4ef 	.word	0x0800d4ef
 800d49c:	0800d4ef 	.word	0x0800d4ef
 800d4a0:	0800d4ef 	.word	0x0800d4ef
 800d4a4:	0800d43d 	.word	0x0800d43d
 800d4a8:	0800d52d 	.word	0x0800d52d
 800d4ac:	0800d43d 	.word	0x0800d43d
 800d4b0:	0800d43d 	.word	0x0800d43d
 800d4b4:	0800d43d 	.word	0x0800d43d
 800d4b8:	0800d43d 	.word	0x0800d43d
 800d4bc:	0800d59b 	.word	0x0800d59b
 800d4c0:	0800d569 	.word	0x0800d569
 800d4c4:	0800d50f 	.word	0x0800d50f
 800d4c8:	0800d43d 	.word	0x0800d43d
 800d4cc:	0800d43d 	.word	0x0800d43d
 800d4d0:	0800d597 	.word	0x0800d597
 800d4d4:	0800d43d 	.word	0x0800d43d
 800d4d8:	0800d571 	.word	0x0800d571
 800d4dc:	0800d43d 	.word	0x0800d43d
 800d4e0:	0800d43d 	.word	0x0800d43d
 800d4e4:	0800d517 	.word	0x0800d517
 800d4e8:	3b45      	subs	r3, #69	; 0x45
 800d4ea:	2b02      	cmp	r3, #2
 800d4ec:	d8a6      	bhi.n	800d43c <__ssvfiscanf_r+0xec>
 800d4ee:	2305      	movs	r3, #5
 800d4f0:	e01f      	b.n	800d532 <__ssvfiscanf_r+0x1e2>
 800d4f2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d4f4:	4621      	mov	r1, r4
 800d4f6:	4630      	mov	r0, r6
 800d4f8:	4798      	blx	r3
 800d4fa:	2800      	cmp	r0, #0
 800d4fc:	f43f af68 	beq.w	800d3d0 <__ssvfiscanf_r+0x80>
 800d500:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d502:	2800      	cmp	r0, #0
 800d504:	f040 808d 	bne.w	800d622 <__ssvfiscanf_r+0x2d2>
 800d508:	f04f 30ff 	mov.w	r0, #4294967295
 800d50c:	e08f      	b.n	800d62e <__ssvfiscanf_r+0x2de>
 800d50e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d510:	f042 0220 	orr.w	r2, r2, #32
 800d514:	9241      	str	r2, [sp, #260]	; 0x104
 800d516:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d518:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d51c:	9241      	str	r2, [sp, #260]	; 0x104
 800d51e:	2210      	movs	r2, #16
 800d520:	2b6f      	cmp	r3, #111	; 0x6f
 800d522:	9242      	str	r2, [sp, #264]	; 0x108
 800d524:	bf34      	ite	cc
 800d526:	2303      	movcc	r3, #3
 800d528:	2304      	movcs	r3, #4
 800d52a:	e002      	b.n	800d532 <__ssvfiscanf_r+0x1e2>
 800d52c:	2300      	movs	r3, #0
 800d52e:	9342      	str	r3, [sp, #264]	; 0x108
 800d530:	2303      	movs	r3, #3
 800d532:	9347      	str	r3, [sp, #284]	; 0x11c
 800d534:	6863      	ldr	r3, [r4, #4]
 800d536:	2b00      	cmp	r3, #0
 800d538:	dd3d      	ble.n	800d5b6 <__ssvfiscanf_r+0x266>
 800d53a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d53c:	0659      	lsls	r1, r3, #25
 800d53e:	d404      	bmi.n	800d54a <__ssvfiscanf_r+0x1fa>
 800d540:	6823      	ldr	r3, [r4, #0]
 800d542:	781a      	ldrb	r2, [r3, #0]
 800d544:	5cba      	ldrb	r2, [r7, r2]
 800d546:	0712      	lsls	r2, r2, #28
 800d548:	d43c      	bmi.n	800d5c4 <__ssvfiscanf_r+0x274>
 800d54a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800d54c:	2b02      	cmp	r3, #2
 800d54e:	dc4b      	bgt.n	800d5e8 <__ssvfiscanf_r+0x298>
 800d550:	466b      	mov	r3, sp
 800d552:	4622      	mov	r2, r4
 800d554:	a941      	add	r1, sp, #260	; 0x104
 800d556:	4630      	mov	r0, r6
 800d558:	f000 f872 	bl	800d640 <_scanf_chars>
 800d55c:	2801      	cmp	r0, #1
 800d55e:	d06a      	beq.n	800d636 <__ssvfiscanf_r+0x2e6>
 800d560:	2802      	cmp	r0, #2
 800d562:	f47f af1c 	bne.w	800d39e <__ssvfiscanf_r+0x4e>
 800d566:	e7cb      	b.n	800d500 <__ssvfiscanf_r+0x1b0>
 800d568:	2308      	movs	r3, #8
 800d56a:	9342      	str	r3, [sp, #264]	; 0x108
 800d56c:	2304      	movs	r3, #4
 800d56e:	e7e0      	b.n	800d532 <__ssvfiscanf_r+0x1e2>
 800d570:	220a      	movs	r2, #10
 800d572:	e7d5      	b.n	800d520 <__ssvfiscanf_r+0x1d0>
 800d574:	4629      	mov	r1, r5
 800d576:	4640      	mov	r0, r8
 800d578:	f000 fa5e 	bl	800da38 <__sccl>
 800d57c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d57e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d582:	9341      	str	r3, [sp, #260]	; 0x104
 800d584:	4605      	mov	r5, r0
 800d586:	2301      	movs	r3, #1
 800d588:	e7d3      	b.n	800d532 <__ssvfiscanf_r+0x1e2>
 800d58a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d58c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d590:	9341      	str	r3, [sp, #260]	; 0x104
 800d592:	2300      	movs	r3, #0
 800d594:	e7cd      	b.n	800d532 <__ssvfiscanf_r+0x1e2>
 800d596:	2302      	movs	r3, #2
 800d598:	e7cb      	b.n	800d532 <__ssvfiscanf_r+0x1e2>
 800d59a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800d59c:	06c3      	lsls	r3, r0, #27
 800d59e:	f53f aefe 	bmi.w	800d39e <__ssvfiscanf_r+0x4e>
 800d5a2:	9b00      	ldr	r3, [sp, #0]
 800d5a4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d5a6:	1d19      	adds	r1, r3, #4
 800d5a8:	9100      	str	r1, [sp, #0]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	07c0      	lsls	r0, r0, #31
 800d5ae:	bf4c      	ite	mi
 800d5b0:	801a      	strhmi	r2, [r3, #0]
 800d5b2:	601a      	strpl	r2, [r3, #0]
 800d5b4:	e6f3      	b.n	800d39e <__ssvfiscanf_r+0x4e>
 800d5b6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d5b8:	4621      	mov	r1, r4
 800d5ba:	4630      	mov	r0, r6
 800d5bc:	4798      	blx	r3
 800d5be:	2800      	cmp	r0, #0
 800d5c0:	d0bb      	beq.n	800d53a <__ssvfiscanf_r+0x1ea>
 800d5c2:	e79d      	b.n	800d500 <__ssvfiscanf_r+0x1b0>
 800d5c4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d5c6:	3201      	adds	r2, #1
 800d5c8:	9245      	str	r2, [sp, #276]	; 0x114
 800d5ca:	6862      	ldr	r2, [r4, #4]
 800d5cc:	3a01      	subs	r2, #1
 800d5ce:	2a00      	cmp	r2, #0
 800d5d0:	6062      	str	r2, [r4, #4]
 800d5d2:	dd02      	ble.n	800d5da <__ssvfiscanf_r+0x28a>
 800d5d4:	3301      	adds	r3, #1
 800d5d6:	6023      	str	r3, [r4, #0]
 800d5d8:	e7b2      	b.n	800d540 <__ssvfiscanf_r+0x1f0>
 800d5da:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d5dc:	4621      	mov	r1, r4
 800d5de:	4630      	mov	r0, r6
 800d5e0:	4798      	blx	r3
 800d5e2:	2800      	cmp	r0, #0
 800d5e4:	d0ac      	beq.n	800d540 <__ssvfiscanf_r+0x1f0>
 800d5e6:	e78b      	b.n	800d500 <__ssvfiscanf_r+0x1b0>
 800d5e8:	2b04      	cmp	r3, #4
 800d5ea:	dc0f      	bgt.n	800d60c <__ssvfiscanf_r+0x2bc>
 800d5ec:	466b      	mov	r3, sp
 800d5ee:	4622      	mov	r2, r4
 800d5f0:	a941      	add	r1, sp, #260	; 0x104
 800d5f2:	4630      	mov	r0, r6
 800d5f4:	f000 f87e 	bl	800d6f4 <_scanf_i>
 800d5f8:	e7b0      	b.n	800d55c <__ssvfiscanf_r+0x20c>
 800d5fa:	bf00      	nop
 800d5fc:	0800d29d 	.word	0x0800d29d
 800d600:	0800d317 	.word	0x0800d317
 800d604:	0800ecc1 	.word	0x0800ecc1
 800d608:	0800edc7 	.word	0x0800edc7
 800d60c:	4b0b      	ldr	r3, [pc, #44]	; (800d63c <__ssvfiscanf_r+0x2ec>)
 800d60e:	2b00      	cmp	r3, #0
 800d610:	f43f aec5 	beq.w	800d39e <__ssvfiscanf_r+0x4e>
 800d614:	466b      	mov	r3, sp
 800d616:	4622      	mov	r2, r4
 800d618:	a941      	add	r1, sp, #260	; 0x104
 800d61a:	4630      	mov	r0, r6
 800d61c:	f7fc fe2e 	bl	800a27c <_scanf_float>
 800d620:	e79c      	b.n	800d55c <__ssvfiscanf_r+0x20c>
 800d622:	89a3      	ldrh	r3, [r4, #12]
 800d624:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d628:	bf18      	it	ne
 800d62a:	f04f 30ff 	movne.w	r0, #4294967295
 800d62e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800d632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d636:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d638:	e7f9      	b.n	800d62e <__ssvfiscanf_r+0x2de>
 800d63a:	bf00      	nop
 800d63c:	0800a27d 	.word	0x0800a27d

0800d640 <_scanf_chars>:
 800d640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d644:	4615      	mov	r5, r2
 800d646:	688a      	ldr	r2, [r1, #8]
 800d648:	4680      	mov	r8, r0
 800d64a:	460c      	mov	r4, r1
 800d64c:	b932      	cbnz	r2, 800d65c <_scanf_chars+0x1c>
 800d64e:	698a      	ldr	r2, [r1, #24]
 800d650:	2a00      	cmp	r2, #0
 800d652:	bf0c      	ite	eq
 800d654:	2201      	moveq	r2, #1
 800d656:	f04f 32ff 	movne.w	r2, #4294967295
 800d65a:	608a      	str	r2, [r1, #8]
 800d65c:	6822      	ldr	r2, [r4, #0]
 800d65e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800d6f0 <_scanf_chars+0xb0>
 800d662:	06d1      	lsls	r1, r2, #27
 800d664:	bf5f      	itttt	pl
 800d666:	681a      	ldrpl	r2, [r3, #0]
 800d668:	1d11      	addpl	r1, r2, #4
 800d66a:	6019      	strpl	r1, [r3, #0]
 800d66c:	6816      	ldrpl	r6, [r2, #0]
 800d66e:	2700      	movs	r7, #0
 800d670:	69a0      	ldr	r0, [r4, #24]
 800d672:	b188      	cbz	r0, 800d698 <_scanf_chars+0x58>
 800d674:	2801      	cmp	r0, #1
 800d676:	d107      	bne.n	800d688 <_scanf_chars+0x48>
 800d678:	682a      	ldr	r2, [r5, #0]
 800d67a:	7811      	ldrb	r1, [r2, #0]
 800d67c:	6962      	ldr	r2, [r4, #20]
 800d67e:	5c52      	ldrb	r2, [r2, r1]
 800d680:	b952      	cbnz	r2, 800d698 <_scanf_chars+0x58>
 800d682:	2f00      	cmp	r7, #0
 800d684:	d031      	beq.n	800d6ea <_scanf_chars+0xaa>
 800d686:	e022      	b.n	800d6ce <_scanf_chars+0x8e>
 800d688:	2802      	cmp	r0, #2
 800d68a:	d120      	bne.n	800d6ce <_scanf_chars+0x8e>
 800d68c:	682b      	ldr	r3, [r5, #0]
 800d68e:	781b      	ldrb	r3, [r3, #0]
 800d690:	f819 3003 	ldrb.w	r3, [r9, r3]
 800d694:	071b      	lsls	r3, r3, #28
 800d696:	d41a      	bmi.n	800d6ce <_scanf_chars+0x8e>
 800d698:	6823      	ldr	r3, [r4, #0]
 800d69a:	06da      	lsls	r2, r3, #27
 800d69c:	bf5e      	ittt	pl
 800d69e:	682b      	ldrpl	r3, [r5, #0]
 800d6a0:	781b      	ldrbpl	r3, [r3, #0]
 800d6a2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800d6a6:	682a      	ldr	r2, [r5, #0]
 800d6a8:	686b      	ldr	r3, [r5, #4]
 800d6aa:	3201      	adds	r2, #1
 800d6ac:	602a      	str	r2, [r5, #0]
 800d6ae:	68a2      	ldr	r2, [r4, #8]
 800d6b0:	3b01      	subs	r3, #1
 800d6b2:	3a01      	subs	r2, #1
 800d6b4:	606b      	str	r3, [r5, #4]
 800d6b6:	3701      	adds	r7, #1
 800d6b8:	60a2      	str	r2, [r4, #8]
 800d6ba:	b142      	cbz	r2, 800d6ce <_scanf_chars+0x8e>
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	dcd7      	bgt.n	800d670 <_scanf_chars+0x30>
 800d6c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d6c4:	4629      	mov	r1, r5
 800d6c6:	4640      	mov	r0, r8
 800d6c8:	4798      	blx	r3
 800d6ca:	2800      	cmp	r0, #0
 800d6cc:	d0d0      	beq.n	800d670 <_scanf_chars+0x30>
 800d6ce:	6823      	ldr	r3, [r4, #0]
 800d6d0:	f013 0310 	ands.w	r3, r3, #16
 800d6d4:	d105      	bne.n	800d6e2 <_scanf_chars+0xa2>
 800d6d6:	68e2      	ldr	r2, [r4, #12]
 800d6d8:	3201      	adds	r2, #1
 800d6da:	60e2      	str	r2, [r4, #12]
 800d6dc:	69a2      	ldr	r2, [r4, #24]
 800d6de:	b102      	cbz	r2, 800d6e2 <_scanf_chars+0xa2>
 800d6e0:	7033      	strb	r3, [r6, #0]
 800d6e2:	6923      	ldr	r3, [r4, #16]
 800d6e4:	443b      	add	r3, r7
 800d6e6:	6123      	str	r3, [r4, #16]
 800d6e8:	2000      	movs	r0, #0
 800d6ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6ee:	bf00      	nop
 800d6f0:	0800ecc1 	.word	0x0800ecc1

0800d6f4 <_scanf_i>:
 800d6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6f8:	4698      	mov	r8, r3
 800d6fa:	4b74      	ldr	r3, [pc, #464]	; (800d8cc <_scanf_i+0x1d8>)
 800d6fc:	460c      	mov	r4, r1
 800d6fe:	4682      	mov	sl, r0
 800d700:	4616      	mov	r6, r2
 800d702:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d706:	b087      	sub	sp, #28
 800d708:	ab03      	add	r3, sp, #12
 800d70a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d70e:	4b70      	ldr	r3, [pc, #448]	; (800d8d0 <_scanf_i+0x1dc>)
 800d710:	69a1      	ldr	r1, [r4, #24]
 800d712:	4a70      	ldr	r2, [pc, #448]	; (800d8d4 <_scanf_i+0x1e0>)
 800d714:	2903      	cmp	r1, #3
 800d716:	bf18      	it	ne
 800d718:	461a      	movne	r2, r3
 800d71a:	68a3      	ldr	r3, [r4, #8]
 800d71c:	9201      	str	r2, [sp, #4]
 800d71e:	1e5a      	subs	r2, r3, #1
 800d720:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d724:	bf88      	it	hi
 800d726:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d72a:	4627      	mov	r7, r4
 800d72c:	bf82      	ittt	hi
 800d72e:	eb03 0905 	addhi.w	r9, r3, r5
 800d732:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d736:	60a3      	strhi	r3, [r4, #8]
 800d738:	f857 3b1c 	ldr.w	r3, [r7], #28
 800d73c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800d740:	bf98      	it	ls
 800d742:	f04f 0900 	movls.w	r9, #0
 800d746:	6023      	str	r3, [r4, #0]
 800d748:	463d      	mov	r5, r7
 800d74a:	f04f 0b00 	mov.w	fp, #0
 800d74e:	6831      	ldr	r1, [r6, #0]
 800d750:	ab03      	add	r3, sp, #12
 800d752:	7809      	ldrb	r1, [r1, #0]
 800d754:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800d758:	2202      	movs	r2, #2
 800d75a:	f7f2 fd59 	bl	8000210 <memchr>
 800d75e:	b328      	cbz	r0, 800d7ac <_scanf_i+0xb8>
 800d760:	f1bb 0f01 	cmp.w	fp, #1
 800d764:	d159      	bne.n	800d81a <_scanf_i+0x126>
 800d766:	6862      	ldr	r2, [r4, #4]
 800d768:	b92a      	cbnz	r2, 800d776 <_scanf_i+0x82>
 800d76a:	6822      	ldr	r2, [r4, #0]
 800d76c:	2308      	movs	r3, #8
 800d76e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d772:	6063      	str	r3, [r4, #4]
 800d774:	6022      	str	r2, [r4, #0]
 800d776:	6822      	ldr	r2, [r4, #0]
 800d778:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800d77c:	6022      	str	r2, [r4, #0]
 800d77e:	68a2      	ldr	r2, [r4, #8]
 800d780:	1e51      	subs	r1, r2, #1
 800d782:	60a1      	str	r1, [r4, #8]
 800d784:	b192      	cbz	r2, 800d7ac <_scanf_i+0xb8>
 800d786:	6832      	ldr	r2, [r6, #0]
 800d788:	1c51      	adds	r1, r2, #1
 800d78a:	6031      	str	r1, [r6, #0]
 800d78c:	7812      	ldrb	r2, [r2, #0]
 800d78e:	f805 2b01 	strb.w	r2, [r5], #1
 800d792:	6872      	ldr	r2, [r6, #4]
 800d794:	3a01      	subs	r2, #1
 800d796:	2a00      	cmp	r2, #0
 800d798:	6072      	str	r2, [r6, #4]
 800d79a:	dc07      	bgt.n	800d7ac <_scanf_i+0xb8>
 800d79c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800d7a0:	4631      	mov	r1, r6
 800d7a2:	4650      	mov	r0, sl
 800d7a4:	4790      	blx	r2
 800d7a6:	2800      	cmp	r0, #0
 800d7a8:	f040 8085 	bne.w	800d8b6 <_scanf_i+0x1c2>
 800d7ac:	f10b 0b01 	add.w	fp, fp, #1
 800d7b0:	f1bb 0f03 	cmp.w	fp, #3
 800d7b4:	d1cb      	bne.n	800d74e <_scanf_i+0x5a>
 800d7b6:	6863      	ldr	r3, [r4, #4]
 800d7b8:	b90b      	cbnz	r3, 800d7be <_scanf_i+0xca>
 800d7ba:	230a      	movs	r3, #10
 800d7bc:	6063      	str	r3, [r4, #4]
 800d7be:	6863      	ldr	r3, [r4, #4]
 800d7c0:	4945      	ldr	r1, [pc, #276]	; (800d8d8 <_scanf_i+0x1e4>)
 800d7c2:	6960      	ldr	r0, [r4, #20]
 800d7c4:	1ac9      	subs	r1, r1, r3
 800d7c6:	f000 f937 	bl	800da38 <__sccl>
 800d7ca:	f04f 0b00 	mov.w	fp, #0
 800d7ce:	68a3      	ldr	r3, [r4, #8]
 800d7d0:	6822      	ldr	r2, [r4, #0]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d03d      	beq.n	800d852 <_scanf_i+0x15e>
 800d7d6:	6831      	ldr	r1, [r6, #0]
 800d7d8:	6960      	ldr	r0, [r4, #20]
 800d7da:	f891 c000 	ldrb.w	ip, [r1]
 800d7de:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d7e2:	2800      	cmp	r0, #0
 800d7e4:	d035      	beq.n	800d852 <_scanf_i+0x15e>
 800d7e6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800d7ea:	d124      	bne.n	800d836 <_scanf_i+0x142>
 800d7ec:	0510      	lsls	r0, r2, #20
 800d7ee:	d522      	bpl.n	800d836 <_scanf_i+0x142>
 800d7f0:	f10b 0b01 	add.w	fp, fp, #1
 800d7f4:	f1b9 0f00 	cmp.w	r9, #0
 800d7f8:	d003      	beq.n	800d802 <_scanf_i+0x10e>
 800d7fa:	3301      	adds	r3, #1
 800d7fc:	f109 39ff 	add.w	r9, r9, #4294967295
 800d800:	60a3      	str	r3, [r4, #8]
 800d802:	6873      	ldr	r3, [r6, #4]
 800d804:	3b01      	subs	r3, #1
 800d806:	2b00      	cmp	r3, #0
 800d808:	6073      	str	r3, [r6, #4]
 800d80a:	dd1b      	ble.n	800d844 <_scanf_i+0x150>
 800d80c:	6833      	ldr	r3, [r6, #0]
 800d80e:	3301      	adds	r3, #1
 800d810:	6033      	str	r3, [r6, #0]
 800d812:	68a3      	ldr	r3, [r4, #8]
 800d814:	3b01      	subs	r3, #1
 800d816:	60a3      	str	r3, [r4, #8]
 800d818:	e7d9      	b.n	800d7ce <_scanf_i+0xda>
 800d81a:	f1bb 0f02 	cmp.w	fp, #2
 800d81e:	d1ae      	bne.n	800d77e <_scanf_i+0x8a>
 800d820:	6822      	ldr	r2, [r4, #0]
 800d822:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800d826:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800d82a:	d1bf      	bne.n	800d7ac <_scanf_i+0xb8>
 800d82c:	2310      	movs	r3, #16
 800d82e:	6063      	str	r3, [r4, #4]
 800d830:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d834:	e7a2      	b.n	800d77c <_scanf_i+0x88>
 800d836:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800d83a:	6022      	str	r2, [r4, #0]
 800d83c:	780b      	ldrb	r3, [r1, #0]
 800d83e:	f805 3b01 	strb.w	r3, [r5], #1
 800d842:	e7de      	b.n	800d802 <_scanf_i+0x10e>
 800d844:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d848:	4631      	mov	r1, r6
 800d84a:	4650      	mov	r0, sl
 800d84c:	4798      	blx	r3
 800d84e:	2800      	cmp	r0, #0
 800d850:	d0df      	beq.n	800d812 <_scanf_i+0x11e>
 800d852:	6823      	ldr	r3, [r4, #0]
 800d854:	05d9      	lsls	r1, r3, #23
 800d856:	d50d      	bpl.n	800d874 <_scanf_i+0x180>
 800d858:	42bd      	cmp	r5, r7
 800d85a:	d909      	bls.n	800d870 <_scanf_i+0x17c>
 800d85c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d860:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d864:	4632      	mov	r2, r6
 800d866:	4650      	mov	r0, sl
 800d868:	4798      	blx	r3
 800d86a:	f105 39ff 	add.w	r9, r5, #4294967295
 800d86e:	464d      	mov	r5, r9
 800d870:	42bd      	cmp	r5, r7
 800d872:	d028      	beq.n	800d8c6 <_scanf_i+0x1d2>
 800d874:	6822      	ldr	r2, [r4, #0]
 800d876:	f012 0210 	ands.w	r2, r2, #16
 800d87a:	d113      	bne.n	800d8a4 <_scanf_i+0x1b0>
 800d87c:	702a      	strb	r2, [r5, #0]
 800d87e:	6863      	ldr	r3, [r4, #4]
 800d880:	9e01      	ldr	r6, [sp, #4]
 800d882:	4639      	mov	r1, r7
 800d884:	4650      	mov	r0, sl
 800d886:	47b0      	blx	r6
 800d888:	f8d8 3000 	ldr.w	r3, [r8]
 800d88c:	6821      	ldr	r1, [r4, #0]
 800d88e:	1d1a      	adds	r2, r3, #4
 800d890:	f8c8 2000 	str.w	r2, [r8]
 800d894:	f011 0f20 	tst.w	r1, #32
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	d00f      	beq.n	800d8bc <_scanf_i+0x1c8>
 800d89c:	6018      	str	r0, [r3, #0]
 800d89e:	68e3      	ldr	r3, [r4, #12]
 800d8a0:	3301      	adds	r3, #1
 800d8a2:	60e3      	str	r3, [r4, #12]
 800d8a4:	6923      	ldr	r3, [r4, #16]
 800d8a6:	1bed      	subs	r5, r5, r7
 800d8a8:	445d      	add	r5, fp
 800d8aa:	442b      	add	r3, r5
 800d8ac:	6123      	str	r3, [r4, #16]
 800d8ae:	2000      	movs	r0, #0
 800d8b0:	b007      	add	sp, #28
 800d8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8b6:	f04f 0b00 	mov.w	fp, #0
 800d8ba:	e7ca      	b.n	800d852 <_scanf_i+0x15e>
 800d8bc:	07ca      	lsls	r2, r1, #31
 800d8be:	bf4c      	ite	mi
 800d8c0:	8018      	strhmi	r0, [r3, #0]
 800d8c2:	6018      	strpl	r0, [r3, #0]
 800d8c4:	e7eb      	b.n	800d89e <_scanf_i+0x1aa>
 800d8c6:	2001      	movs	r0, #1
 800d8c8:	e7f2      	b.n	800d8b0 <_scanf_i+0x1bc>
 800d8ca:	bf00      	nop
 800d8cc:	0800ea24 	.word	0x0800ea24
 800d8d0:	0800e425 	.word	0x0800e425
 800d8d4:	0800cfe9 	.word	0x0800cfe9
 800d8d8:	0800ede2 	.word	0x0800ede2

0800d8dc <__sflush_r>:
 800d8dc:	898a      	ldrh	r2, [r1, #12]
 800d8de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8e2:	4605      	mov	r5, r0
 800d8e4:	0710      	lsls	r0, r2, #28
 800d8e6:	460c      	mov	r4, r1
 800d8e8:	d458      	bmi.n	800d99c <__sflush_r+0xc0>
 800d8ea:	684b      	ldr	r3, [r1, #4]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	dc05      	bgt.n	800d8fc <__sflush_r+0x20>
 800d8f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	dc02      	bgt.n	800d8fc <__sflush_r+0x20>
 800d8f6:	2000      	movs	r0, #0
 800d8f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d8fe:	2e00      	cmp	r6, #0
 800d900:	d0f9      	beq.n	800d8f6 <__sflush_r+0x1a>
 800d902:	2300      	movs	r3, #0
 800d904:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d908:	682f      	ldr	r7, [r5, #0]
 800d90a:	6a21      	ldr	r1, [r4, #32]
 800d90c:	602b      	str	r3, [r5, #0]
 800d90e:	d032      	beq.n	800d976 <__sflush_r+0x9a>
 800d910:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d912:	89a3      	ldrh	r3, [r4, #12]
 800d914:	075a      	lsls	r2, r3, #29
 800d916:	d505      	bpl.n	800d924 <__sflush_r+0x48>
 800d918:	6863      	ldr	r3, [r4, #4]
 800d91a:	1ac0      	subs	r0, r0, r3
 800d91c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d91e:	b10b      	cbz	r3, 800d924 <__sflush_r+0x48>
 800d920:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d922:	1ac0      	subs	r0, r0, r3
 800d924:	2300      	movs	r3, #0
 800d926:	4602      	mov	r2, r0
 800d928:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d92a:	6a21      	ldr	r1, [r4, #32]
 800d92c:	4628      	mov	r0, r5
 800d92e:	47b0      	blx	r6
 800d930:	1c43      	adds	r3, r0, #1
 800d932:	89a3      	ldrh	r3, [r4, #12]
 800d934:	d106      	bne.n	800d944 <__sflush_r+0x68>
 800d936:	6829      	ldr	r1, [r5, #0]
 800d938:	291d      	cmp	r1, #29
 800d93a:	d82b      	bhi.n	800d994 <__sflush_r+0xb8>
 800d93c:	4a29      	ldr	r2, [pc, #164]	; (800d9e4 <__sflush_r+0x108>)
 800d93e:	410a      	asrs	r2, r1
 800d940:	07d6      	lsls	r6, r2, #31
 800d942:	d427      	bmi.n	800d994 <__sflush_r+0xb8>
 800d944:	2200      	movs	r2, #0
 800d946:	6062      	str	r2, [r4, #4]
 800d948:	04d9      	lsls	r1, r3, #19
 800d94a:	6922      	ldr	r2, [r4, #16]
 800d94c:	6022      	str	r2, [r4, #0]
 800d94e:	d504      	bpl.n	800d95a <__sflush_r+0x7e>
 800d950:	1c42      	adds	r2, r0, #1
 800d952:	d101      	bne.n	800d958 <__sflush_r+0x7c>
 800d954:	682b      	ldr	r3, [r5, #0]
 800d956:	b903      	cbnz	r3, 800d95a <__sflush_r+0x7e>
 800d958:	6560      	str	r0, [r4, #84]	; 0x54
 800d95a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d95c:	602f      	str	r7, [r5, #0]
 800d95e:	2900      	cmp	r1, #0
 800d960:	d0c9      	beq.n	800d8f6 <__sflush_r+0x1a>
 800d962:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d966:	4299      	cmp	r1, r3
 800d968:	d002      	beq.n	800d970 <__sflush_r+0x94>
 800d96a:	4628      	mov	r0, r5
 800d96c:	f7fd fefa 	bl	800b764 <_free_r>
 800d970:	2000      	movs	r0, #0
 800d972:	6360      	str	r0, [r4, #52]	; 0x34
 800d974:	e7c0      	b.n	800d8f8 <__sflush_r+0x1c>
 800d976:	2301      	movs	r3, #1
 800d978:	4628      	mov	r0, r5
 800d97a:	47b0      	blx	r6
 800d97c:	1c41      	adds	r1, r0, #1
 800d97e:	d1c8      	bne.n	800d912 <__sflush_r+0x36>
 800d980:	682b      	ldr	r3, [r5, #0]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d0c5      	beq.n	800d912 <__sflush_r+0x36>
 800d986:	2b1d      	cmp	r3, #29
 800d988:	d001      	beq.n	800d98e <__sflush_r+0xb2>
 800d98a:	2b16      	cmp	r3, #22
 800d98c:	d101      	bne.n	800d992 <__sflush_r+0xb6>
 800d98e:	602f      	str	r7, [r5, #0]
 800d990:	e7b1      	b.n	800d8f6 <__sflush_r+0x1a>
 800d992:	89a3      	ldrh	r3, [r4, #12]
 800d994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d998:	81a3      	strh	r3, [r4, #12]
 800d99a:	e7ad      	b.n	800d8f8 <__sflush_r+0x1c>
 800d99c:	690f      	ldr	r7, [r1, #16]
 800d99e:	2f00      	cmp	r7, #0
 800d9a0:	d0a9      	beq.n	800d8f6 <__sflush_r+0x1a>
 800d9a2:	0793      	lsls	r3, r2, #30
 800d9a4:	680e      	ldr	r6, [r1, #0]
 800d9a6:	bf08      	it	eq
 800d9a8:	694b      	ldreq	r3, [r1, #20]
 800d9aa:	600f      	str	r7, [r1, #0]
 800d9ac:	bf18      	it	ne
 800d9ae:	2300      	movne	r3, #0
 800d9b0:	eba6 0807 	sub.w	r8, r6, r7
 800d9b4:	608b      	str	r3, [r1, #8]
 800d9b6:	f1b8 0f00 	cmp.w	r8, #0
 800d9ba:	dd9c      	ble.n	800d8f6 <__sflush_r+0x1a>
 800d9bc:	6a21      	ldr	r1, [r4, #32]
 800d9be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d9c0:	4643      	mov	r3, r8
 800d9c2:	463a      	mov	r2, r7
 800d9c4:	4628      	mov	r0, r5
 800d9c6:	47b0      	blx	r6
 800d9c8:	2800      	cmp	r0, #0
 800d9ca:	dc06      	bgt.n	800d9da <__sflush_r+0xfe>
 800d9cc:	89a3      	ldrh	r3, [r4, #12]
 800d9ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9d2:	81a3      	strh	r3, [r4, #12]
 800d9d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d9d8:	e78e      	b.n	800d8f8 <__sflush_r+0x1c>
 800d9da:	4407      	add	r7, r0
 800d9dc:	eba8 0800 	sub.w	r8, r8, r0
 800d9e0:	e7e9      	b.n	800d9b6 <__sflush_r+0xda>
 800d9e2:	bf00      	nop
 800d9e4:	dfbffffe 	.word	0xdfbffffe

0800d9e8 <_fflush_r>:
 800d9e8:	b538      	push	{r3, r4, r5, lr}
 800d9ea:	690b      	ldr	r3, [r1, #16]
 800d9ec:	4605      	mov	r5, r0
 800d9ee:	460c      	mov	r4, r1
 800d9f0:	b913      	cbnz	r3, 800d9f8 <_fflush_r+0x10>
 800d9f2:	2500      	movs	r5, #0
 800d9f4:	4628      	mov	r0, r5
 800d9f6:	bd38      	pop	{r3, r4, r5, pc}
 800d9f8:	b118      	cbz	r0, 800da02 <_fflush_r+0x1a>
 800d9fa:	6a03      	ldr	r3, [r0, #32]
 800d9fc:	b90b      	cbnz	r3, 800da02 <_fflush_r+0x1a>
 800d9fe:	f7fc fed9 	bl	800a7b4 <__sinit>
 800da02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d0f3      	beq.n	800d9f2 <_fflush_r+0xa>
 800da0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800da0c:	07d0      	lsls	r0, r2, #31
 800da0e:	d404      	bmi.n	800da1a <_fflush_r+0x32>
 800da10:	0599      	lsls	r1, r3, #22
 800da12:	d402      	bmi.n	800da1a <_fflush_r+0x32>
 800da14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da16:	f7fd f812 	bl	800aa3e <__retarget_lock_acquire_recursive>
 800da1a:	4628      	mov	r0, r5
 800da1c:	4621      	mov	r1, r4
 800da1e:	f7ff ff5d 	bl	800d8dc <__sflush_r>
 800da22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da24:	07da      	lsls	r2, r3, #31
 800da26:	4605      	mov	r5, r0
 800da28:	d4e4      	bmi.n	800d9f4 <_fflush_r+0xc>
 800da2a:	89a3      	ldrh	r3, [r4, #12]
 800da2c:	059b      	lsls	r3, r3, #22
 800da2e:	d4e1      	bmi.n	800d9f4 <_fflush_r+0xc>
 800da30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da32:	f7fd f805 	bl	800aa40 <__retarget_lock_release_recursive>
 800da36:	e7dd      	b.n	800d9f4 <_fflush_r+0xc>

0800da38 <__sccl>:
 800da38:	b570      	push	{r4, r5, r6, lr}
 800da3a:	780b      	ldrb	r3, [r1, #0]
 800da3c:	4604      	mov	r4, r0
 800da3e:	2b5e      	cmp	r3, #94	; 0x5e
 800da40:	bf0b      	itete	eq
 800da42:	784b      	ldrbeq	r3, [r1, #1]
 800da44:	1c4a      	addne	r2, r1, #1
 800da46:	1c8a      	addeq	r2, r1, #2
 800da48:	2100      	movne	r1, #0
 800da4a:	bf08      	it	eq
 800da4c:	2101      	moveq	r1, #1
 800da4e:	3801      	subs	r0, #1
 800da50:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800da54:	f800 1f01 	strb.w	r1, [r0, #1]!
 800da58:	42a8      	cmp	r0, r5
 800da5a:	d1fb      	bne.n	800da54 <__sccl+0x1c>
 800da5c:	b90b      	cbnz	r3, 800da62 <__sccl+0x2a>
 800da5e:	1e50      	subs	r0, r2, #1
 800da60:	bd70      	pop	{r4, r5, r6, pc}
 800da62:	f081 0101 	eor.w	r1, r1, #1
 800da66:	54e1      	strb	r1, [r4, r3]
 800da68:	4610      	mov	r0, r2
 800da6a:	4602      	mov	r2, r0
 800da6c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800da70:	2d2d      	cmp	r5, #45	; 0x2d
 800da72:	d005      	beq.n	800da80 <__sccl+0x48>
 800da74:	2d5d      	cmp	r5, #93	; 0x5d
 800da76:	d016      	beq.n	800daa6 <__sccl+0x6e>
 800da78:	2d00      	cmp	r5, #0
 800da7a:	d0f1      	beq.n	800da60 <__sccl+0x28>
 800da7c:	462b      	mov	r3, r5
 800da7e:	e7f2      	b.n	800da66 <__sccl+0x2e>
 800da80:	7846      	ldrb	r6, [r0, #1]
 800da82:	2e5d      	cmp	r6, #93	; 0x5d
 800da84:	d0fa      	beq.n	800da7c <__sccl+0x44>
 800da86:	42b3      	cmp	r3, r6
 800da88:	dcf8      	bgt.n	800da7c <__sccl+0x44>
 800da8a:	3002      	adds	r0, #2
 800da8c:	461a      	mov	r2, r3
 800da8e:	3201      	adds	r2, #1
 800da90:	4296      	cmp	r6, r2
 800da92:	54a1      	strb	r1, [r4, r2]
 800da94:	dcfb      	bgt.n	800da8e <__sccl+0x56>
 800da96:	1af2      	subs	r2, r6, r3
 800da98:	3a01      	subs	r2, #1
 800da9a:	1c5d      	adds	r5, r3, #1
 800da9c:	42b3      	cmp	r3, r6
 800da9e:	bfa8      	it	ge
 800daa0:	2200      	movge	r2, #0
 800daa2:	18ab      	adds	r3, r5, r2
 800daa4:	e7e1      	b.n	800da6a <__sccl+0x32>
 800daa6:	4610      	mov	r0, r2
 800daa8:	e7da      	b.n	800da60 <__sccl+0x28>

0800daaa <__submore>:
 800daaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daae:	460c      	mov	r4, r1
 800dab0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800dab2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dab6:	4299      	cmp	r1, r3
 800dab8:	d11d      	bne.n	800daf6 <__submore+0x4c>
 800daba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800dabe:	f7fd fec5 	bl	800b84c <_malloc_r>
 800dac2:	b918      	cbnz	r0, 800dacc <__submore+0x22>
 800dac4:	f04f 30ff 	mov.w	r0, #4294967295
 800dac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dacc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dad0:	63a3      	str	r3, [r4, #56]	; 0x38
 800dad2:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800dad6:	6360      	str	r0, [r4, #52]	; 0x34
 800dad8:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800dadc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800dae0:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800dae4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800dae8:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800daec:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800daf0:	6020      	str	r0, [r4, #0]
 800daf2:	2000      	movs	r0, #0
 800daf4:	e7e8      	b.n	800dac8 <__submore+0x1e>
 800daf6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800daf8:	0077      	lsls	r7, r6, #1
 800dafa:	463a      	mov	r2, r7
 800dafc:	f000 fbf1 	bl	800e2e2 <_realloc_r>
 800db00:	4605      	mov	r5, r0
 800db02:	2800      	cmp	r0, #0
 800db04:	d0de      	beq.n	800dac4 <__submore+0x1a>
 800db06:	eb00 0806 	add.w	r8, r0, r6
 800db0a:	4601      	mov	r1, r0
 800db0c:	4632      	mov	r2, r6
 800db0e:	4640      	mov	r0, r8
 800db10:	f7fc ff97 	bl	800aa42 <memcpy>
 800db14:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800db18:	f8c4 8000 	str.w	r8, [r4]
 800db1c:	e7e9      	b.n	800daf2 <__submore+0x48>

0800db1e <memmove>:
 800db1e:	4288      	cmp	r0, r1
 800db20:	b510      	push	{r4, lr}
 800db22:	eb01 0402 	add.w	r4, r1, r2
 800db26:	d902      	bls.n	800db2e <memmove+0x10>
 800db28:	4284      	cmp	r4, r0
 800db2a:	4623      	mov	r3, r4
 800db2c:	d807      	bhi.n	800db3e <memmove+0x20>
 800db2e:	1e43      	subs	r3, r0, #1
 800db30:	42a1      	cmp	r1, r4
 800db32:	d008      	beq.n	800db46 <memmove+0x28>
 800db34:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db38:	f803 2f01 	strb.w	r2, [r3, #1]!
 800db3c:	e7f8      	b.n	800db30 <memmove+0x12>
 800db3e:	4402      	add	r2, r0
 800db40:	4601      	mov	r1, r0
 800db42:	428a      	cmp	r2, r1
 800db44:	d100      	bne.n	800db48 <memmove+0x2a>
 800db46:	bd10      	pop	{r4, pc}
 800db48:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db4c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800db50:	e7f7      	b.n	800db42 <memmove+0x24>

0800db52 <strncmp>:
 800db52:	b510      	push	{r4, lr}
 800db54:	b16a      	cbz	r2, 800db72 <strncmp+0x20>
 800db56:	3901      	subs	r1, #1
 800db58:	1884      	adds	r4, r0, r2
 800db5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db5e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800db62:	429a      	cmp	r2, r3
 800db64:	d103      	bne.n	800db6e <strncmp+0x1c>
 800db66:	42a0      	cmp	r0, r4
 800db68:	d001      	beq.n	800db6e <strncmp+0x1c>
 800db6a:	2a00      	cmp	r2, #0
 800db6c:	d1f5      	bne.n	800db5a <strncmp+0x8>
 800db6e:	1ad0      	subs	r0, r2, r3
 800db70:	bd10      	pop	{r4, pc}
 800db72:	4610      	mov	r0, r2
 800db74:	e7fc      	b.n	800db70 <strncmp+0x1e>
	...

0800db78 <_sbrk_r>:
 800db78:	b538      	push	{r3, r4, r5, lr}
 800db7a:	4d06      	ldr	r5, [pc, #24]	; (800db94 <_sbrk_r+0x1c>)
 800db7c:	2300      	movs	r3, #0
 800db7e:	4604      	mov	r4, r0
 800db80:	4608      	mov	r0, r1
 800db82:	602b      	str	r3, [r5, #0]
 800db84:	f7f4 ffdc 	bl	8002b40 <_sbrk>
 800db88:	1c43      	adds	r3, r0, #1
 800db8a:	d102      	bne.n	800db92 <_sbrk_r+0x1a>
 800db8c:	682b      	ldr	r3, [r5, #0]
 800db8e:	b103      	cbz	r3, 800db92 <_sbrk_r+0x1a>
 800db90:	6023      	str	r3, [r4, #0]
 800db92:	bd38      	pop	{r3, r4, r5, pc}
 800db94:	20000728 	.word	0x20000728

0800db98 <nan>:
 800db98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800dba0 <nan+0x8>
 800db9c:	4770      	bx	lr
 800db9e:	bf00      	nop
 800dba0:	00000000 	.word	0x00000000
 800dba4:	7ff80000 	.word	0x7ff80000

0800dba8 <__assert_func>:
 800dba8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dbaa:	4614      	mov	r4, r2
 800dbac:	461a      	mov	r2, r3
 800dbae:	4b09      	ldr	r3, [pc, #36]	; (800dbd4 <__assert_func+0x2c>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	4605      	mov	r5, r0
 800dbb4:	68d8      	ldr	r0, [r3, #12]
 800dbb6:	b14c      	cbz	r4, 800dbcc <__assert_func+0x24>
 800dbb8:	4b07      	ldr	r3, [pc, #28]	; (800dbd8 <__assert_func+0x30>)
 800dbba:	9100      	str	r1, [sp, #0]
 800dbbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dbc0:	4906      	ldr	r1, [pc, #24]	; (800dbdc <__assert_func+0x34>)
 800dbc2:	462b      	mov	r3, r5
 800dbc4:	f000 fc3e 	bl	800e444 <fiprintf>
 800dbc8:	f000 fc4e 	bl	800e468 <abort>
 800dbcc:	4b04      	ldr	r3, [pc, #16]	; (800dbe0 <__assert_func+0x38>)
 800dbce:	461c      	mov	r4, r3
 800dbd0:	e7f3      	b.n	800dbba <__assert_func+0x12>
 800dbd2:	bf00      	nop
 800dbd4:	20000064 	.word	0x20000064
 800dbd8:	0800edf5 	.word	0x0800edf5
 800dbdc:	0800ee02 	.word	0x0800ee02
 800dbe0:	0800ee30 	.word	0x0800ee30

0800dbe4 <_calloc_r>:
 800dbe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dbe6:	fba1 2402 	umull	r2, r4, r1, r2
 800dbea:	b94c      	cbnz	r4, 800dc00 <_calloc_r+0x1c>
 800dbec:	4611      	mov	r1, r2
 800dbee:	9201      	str	r2, [sp, #4]
 800dbf0:	f7fd fe2c 	bl	800b84c <_malloc_r>
 800dbf4:	9a01      	ldr	r2, [sp, #4]
 800dbf6:	4605      	mov	r5, r0
 800dbf8:	b930      	cbnz	r0, 800dc08 <_calloc_r+0x24>
 800dbfa:	4628      	mov	r0, r5
 800dbfc:	b003      	add	sp, #12
 800dbfe:	bd30      	pop	{r4, r5, pc}
 800dc00:	220c      	movs	r2, #12
 800dc02:	6002      	str	r2, [r0, #0]
 800dc04:	2500      	movs	r5, #0
 800dc06:	e7f8      	b.n	800dbfa <_calloc_r+0x16>
 800dc08:	4621      	mov	r1, r4
 800dc0a:	f7fc fe9a 	bl	800a942 <memset>
 800dc0e:	e7f4      	b.n	800dbfa <_calloc_r+0x16>

0800dc10 <rshift>:
 800dc10:	6903      	ldr	r3, [r0, #16]
 800dc12:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dc16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc1a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dc1e:	f100 0414 	add.w	r4, r0, #20
 800dc22:	dd45      	ble.n	800dcb0 <rshift+0xa0>
 800dc24:	f011 011f 	ands.w	r1, r1, #31
 800dc28:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dc2c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dc30:	d10c      	bne.n	800dc4c <rshift+0x3c>
 800dc32:	f100 0710 	add.w	r7, r0, #16
 800dc36:	4629      	mov	r1, r5
 800dc38:	42b1      	cmp	r1, r6
 800dc3a:	d334      	bcc.n	800dca6 <rshift+0x96>
 800dc3c:	1a9b      	subs	r3, r3, r2
 800dc3e:	009b      	lsls	r3, r3, #2
 800dc40:	1eea      	subs	r2, r5, #3
 800dc42:	4296      	cmp	r6, r2
 800dc44:	bf38      	it	cc
 800dc46:	2300      	movcc	r3, #0
 800dc48:	4423      	add	r3, r4
 800dc4a:	e015      	b.n	800dc78 <rshift+0x68>
 800dc4c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dc50:	f1c1 0820 	rsb	r8, r1, #32
 800dc54:	40cf      	lsrs	r7, r1
 800dc56:	f105 0e04 	add.w	lr, r5, #4
 800dc5a:	46a1      	mov	r9, r4
 800dc5c:	4576      	cmp	r6, lr
 800dc5e:	46f4      	mov	ip, lr
 800dc60:	d815      	bhi.n	800dc8e <rshift+0x7e>
 800dc62:	1a9a      	subs	r2, r3, r2
 800dc64:	0092      	lsls	r2, r2, #2
 800dc66:	3a04      	subs	r2, #4
 800dc68:	3501      	adds	r5, #1
 800dc6a:	42ae      	cmp	r6, r5
 800dc6c:	bf38      	it	cc
 800dc6e:	2200      	movcc	r2, #0
 800dc70:	18a3      	adds	r3, r4, r2
 800dc72:	50a7      	str	r7, [r4, r2]
 800dc74:	b107      	cbz	r7, 800dc78 <rshift+0x68>
 800dc76:	3304      	adds	r3, #4
 800dc78:	1b1a      	subs	r2, r3, r4
 800dc7a:	42a3      	cmp	r3, r4
 800dc7c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dc80:	bf08      	it	eq
 800dc82:	2300      	moveq	r3, #0
 800dc84:	6102      	str	r2, [r0, #16]
 800dc86:	bf08      	it	eq
 800dc88:	6143      	streq	r3, [r0, #20]
 800dc8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc8e:	f8dc c000 	ldr.w	ip, [ip]
 800dc92:	fa0c fc08 	lsl.w	ip, ip, r8
 800dc96:	ea4c 0707 	orr.w	r7, ip, r7
 800dc9a:	f849 7b04 	str.w	r7, [r9], #4
 800dc9e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dca2:	40cf      	lsrs	r7, r1
 800dca4:	e7da      	b.n	800dc5c <rshift+0x4c>
 800dca6:	f851 cb04 	ldr.w	ip, [r1], #4
 800dcaa:	f847 cf04 	str.w	ip, [r7, #4]!
 800dcae:	e7c3      	b.n	800dc38 <rshift+0x28>
 800dcb0:	4623      	mov	r3, r4
 800dcb2:	e7e1      	b.n	800dc78 <rshift+0x68>

0800dcb4 <__hexdig_fun>:
 800dcb4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800dcb8:	2b09      	cmp	r3, #9
 800dcba:	d802      	bhi.n	800dcc2 <__hexdig_fun+0xe>
 800dcbc:	3820      	subs	r0, #32
 800dcbe:	b2c0      	uxtb	r0, r0
 800dcc0:	4770      	bx	lr
 800dcc2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800dcc6:	2b05      	cmp	r3, #5
 800dcc8:	d801      	bhi.n	800dcce <__hexdig_fun+0x1a>
 800dcca:	3847      	subs	r0, #71	; 0x47
 800dccc:	e7f7      	b.n	800dcbe <__hexdig_fun+0xa>
 800dcce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800dcd2:	2b05      	cmp	r3, #5
 800dcd4:	d801      	bhi.n	800dcda <__hexdig_fun+0x26>
 800dcd6:	3827      	subs	r0, #39	; 0x27
 800dcd8:	e7f1      	b.n	800dcbe <__hexdig_fun+0xa>
 800dcda:	2000      	movs	r0, #0
 800dcdc:	4770      	bx	lr
	...

0800dce0 <__gethex>:
 800dce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dce4:	4617      	mov	r7, r2
 800dce6:	680a      	ldr	r2, [r1, #0]
 800dce8:	b085      	sub	sp, #20
 800dcea:	f102 0b02 	add.w	fp, r2, #2
 800dcee:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800dcf2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800dcf6:	4681      	mov	r9, r0
 800dcf8:	468a      	mov	sl, r1
 800dcfa:	9302      	str	r3, [sp, #8]
 800dcfc:	32fe      	adds	r2, #254	; 0xfe
 800dcfe:	eb02 030b 	add.w	r3, r2, fp
 800dd02:	46d8      	mov	r8, fp
 800dd04:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800dd08:	9301      	str	r3, [sp, #4]
 800dd0a:	2830      	cmp	r0, #48	; 0x30
 800dd0c:	d0f7      	beq.n	800dcfe <__gethex+0x1e>
 800dd0e:	f7ff ffd1 	bl	800dcb4 <__hexdig_fun>
 800dd12:	4604      	mov	r4, r0
 800dd14:	2800      	cmp	r0, #0
 800dd16:	d138      	bne.n	800dd8a <__gethex+0xaa>
 800dd18:	49a7      	ldr	r1, [pc, #668]	; (800dfb8 <__gethex+0x2d8>)
 800dd1a:	2201      	movs	r2, #1
 800dd1c:	4640      	mov	r0, r8
 800dd1e:	f7ff ff18 	bl	800db52 <strncmp>
 800dd22:	4606      	mov	r6, r0
 800dd24:	2800      	cmp	r0, #0
 800dd26:	d169      	bne.n	800ddfc <__gethex+0x11c>
 800dd28:	f898 0001 	ldrb.w	r0, [r8, #1]
 800dd2c:	465d      	mov	r5, fp
 800dd2e:	f7ff ffc1 	bl	800dcb4 <__hexdig_fun>
 800dd32:	2800      	cmp	r0, #0
 800dd34:	d064      	beq.n	800de00 <__gethex+0x120>
 800dd36:	465a      	mov	r2, fp
 800dd38:	7810      	ldrb	r0, [r2, #0]
 800dd3a:	2830      	cmp	r0, #48	; 0x30
 800dd3c:	4690      	mov	r8, r2
 800dd3e:	f102 0201 	add.w	r2, r2, #1
 800dd42:	d0f9      	beq.n	800dd38 <__gethex+0x58>
 800dd44:	f7ff ffb6 	bl	800dcb4 <__hexdig_fun>
 800dd48:	2301      	movs	r3, #1
 800dd4a:	fab0 f480 	clz	r4, r0
 800dd4e:	0964      	lsrs	r4, r4, #5
 800dd50:	465e      	mov	r6, fp
 800dd52:	9301      	str	r3, [sp, #4]
 800dd54:	4642      	mov	r2, r8
 800dd56:	4615      	mov	r5, r2
 800dd58:	3201      	adds	r2, #1
 800dd5a:	7828      	ldrb	r0, [r5, #0]
 800dd5c:	f7ff ffaa 	bl	800dcb4 <__hexdig_fun>
 800dd60:	2800      	cmp	r0, #0
 800dd62:	d1f8      	bne.n	800dd56 <__gethex+0x76>
 800dd64:	4994      	ldr	r1, [pc, #592]	; (800dfb8 <__gethex+0x2d8>)
 800dd66:	2201      	movs	r2, #1
 800dd68:	4628      	mov	r0, r5
 800dd6a:	f7ff fef2 	bl	800db52 <strncmp>
 800dd6e:	b978      	cbnz	r0, 800dd90 <__gethex+0xb0>
 800dd70:	b946      	cbnz	r6, 800dd84 <__gethex+0xa4>
 800dd72:	1c6e      	adds	r6, r5, #1
 800dd74:	4632      	mov	r2, r6
 800dd76:	4615      	mov	r5, r2
 800dd78:	3201      	adds	r2, #1
 800dd7a:	7828      	ldrb	r0, [r5, #0]
 800dd7c:	f7ff ff9a 	bl	800dcb4 <__hexdig_fun>
 800dd80:	2800      	cmp	r0, #0
 800dd82:	d1f8      	bne.n	800dd76 <__gethex+0x96>
 800dd84:	1b73      	subs	r3, r6, r5
 800dd86:	009e      	lsls	r6, r3, #2
 800dd88:	e004      	b.n	800dd94 <__gethex+0xb4>
 800dd8a:	2400      	movs	r4, #0
 800dd8c:	4626      	mov	r6, r4
 800dd8e:	e7e1      	b.n	800dd54 <__gethex+0x74>
 800dd90:	2e00      	cmp	r6, #0
 800dd92:	d1f7      	bne.n	800dd84 <__gethex+0xa4>
 800dd94:	782b      	ldrb	r3, [r5, #0]
 800dd96:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dd9a:	2b50      	cmp	r3, #80	; 0x50
 800dd9c:	d13d      	bne.n	800de1a <__gethex+0x13a>
 800dd9e:	786b      	ldrb	r3, [r5, #1]
 800dda0:	2b2b      	cmp	r3, #43	; 0x2b
 800dda2:	d02f      	beq.n	800de04 <__gethex+0x124>
 800dda4:	2b2d      	cmp	r3, #45	; 0x2d
 800dda6:	d031      	beq.n	800de0c <__gethex+0x12c>
 800dda8:	1c69      	adds	r1, r5, #1
 800ddaa:	f04f 0b00 	mov.w	fp, #0
 800ddae:	7808      	ldrb	r0, [r1, #0]
 800ddb0:	f7ff ff80 	bl	800dcb4 <__hexdig_fun>
 800ddb4:	1e42      	subs	r2, r0, #1
 800ddb6:	b2d2      	uxtb	r2, r2
 800ddb8:	2a18      	cmp	r2, #24
 800ddba:	d82e      	bhi.n	800de1a <__gethex+0x13a>
 800ddbc:	f1a0 0210 	sub.w	r2, r0, #16
 800ddc0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ddc4:	f7ff ff76 	bl	800dcb4 <__hexdig_fun>
 800ddc8:	f100 3cff 	add.w	ip, r0, #4294967295
 800ddcc:	fa5f fc8c 	uxtb.w	ip, ip
 800ddd0:	f1bc 0f18 	cmp.w	ip, #24
 800ddd4:	d91d      	bls.n	800de12 <__gethex+0x132>
 800ddd6:	f1bb 0f00 	cmp.w	fp, #0
 800ddda:	d000      	beq.n	800ddde <__gethex+0xfe>
 800dddc:	4252      	negs	r2, r2
 800ddde:	4416      	add	r6, r2
 800dde0:	f8ca 1000 	str.w	r1, [sl]
 800dde4:	b1dc      	cbz	r4, 800de1e <__gethex+0x13e>
 800dde6:	9b01      	ldr	r3, [sp, #4]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	bf14      	ite	ne
 800ddec:	f04f 0800 	movne.w	r8, #0
 800ddf0:	f04f 0806 	moveq.w	r8, #6
 800ddf4:	4640      	mov	r0, r8
 800ddf6:	b005      	add	sp, #20
 800ddf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddfc:	4645      	mov	r5, r8
 800ddfe:	4626      	mov	r6, r4
 800de00:	2401      	movs	r4, #1
 800de02:	e7c7      	b.n	800dd94 <__gethex+0xb4>
 800de04:	f04f 0b00 	mov.w	fp, #0
 800de08:	1ca9      	adds	r1, r5, #2
 800de0a:	e7d0      	b.n	800ddae <__gethex+0xce>
 800de0c:	f04f 0b01 	mov.w	fp, #1
 800de10:	e7fa      	b.n	800de08 <__gethex+0x128>
 800de12:	230a      	movs	r3, #10
 800de14:	fb03 0002 	mla	r0, r3, r2, r0
 800de18:	e7d0      	b.n	800ddbc <__gethex+0xdc>
 800de1a:	4629      	mov	r1, r5
 800de1c:	e7e0      	b.n	800dde0 <__gethex+0x100>
 800de1e:	eba5 0308 	sub.w	r3, r5, r8
 800de22:	3b01      	subs	r3, #1
 800de24:	4621      	mov	r1, r4
 800de26:	2b07      	cmp	r3, #7
 800de28:	dc0a      	bgt.n	800de40 <__gethex+0x160>
 800de2a:	4648      	mov	r0, r9
 800de2c:	f7fd fd9a 	bl	800b964 <_Balloc>
 800de30:	4604      	mov	r4, r0
 800de32:	b940      	cbnz	r0, 800de46 <__gethex+0x166>
 800de34:	4b61      	ldr	r3, [pc, #388]	; (800dfbc <__gethex+0x2dc>)
 800de36:	4602      	mov	r2, r0
 800de38:	21e4      	movs	r1, #228	; 0xe4
 800de3a:	4861      	ldr	r0, [pc, #388]	; (800dfc0 <__gethex+0x2e0>)
 800de3c:	f7ff feb4 	bl	800dba8 <__assert_func>
 800de40:	3101      	adds	r1, #1
 800de42:	105b      	asrs	r3, r3, #1
 800de44:	e7ef      	b.n	800de26 <__gethex+0x146>
 800de46:	f100 0a14 	add.w	sl, r0, #20
 800de4a:	2300      	movs	r3, #0
 800de4c:	495a      	ldr	r1, [pc, #360]	; (800dfb8 <__gethex+0x2d8>)
 800de4e:	f8cd a004 	str.w	sl, [sp, #4]
 800de52:	469b      	mov	fp, r3
 800de54:	45a8      	cmp	r8, r5
 800de56:	d342      	bcc.n	800dede <__gethex+0x1fe>
 800de58:	9801      	ldr	r0, [sp, #4]
 800de5a:	f840 bb04 	str.w	fp, [r0], #4
 800de5e:	eba0 000a 	sub.w	r0, r0, sl
 800de62:	1080      	asrs	r0, r0, #2
 800de64:	6120      	str	r0, [r4, #16]
 800de66:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800de6a:	4658      	mov	r0, fp
 800de6c:	f7fd fe6c 	bl	800bb48 <__hi0bits>
 800de70:	683d      	ldr	r5, [r7, #0]
 800de72:	eba8 0000 	sub.w	r0, r8, r0
 800de76:	42a8      	cmp	r0, r5
 800de78:	dd59      	ble.n	800df2e <__gethex+0x24e>
 800de7a:	eba0 0805 	sub.w	r8, r0, r5
 800de7e:	4641      	mov	r1, r8
 800de80:	4620      	mov	r0, r4
 800de82:	f7fe f9fb 	bl	800c27c <__any_on>
 800de86:	4683      	mov	fp, r0
 800de88:	b1b8      	cbz	r0, 800deba <__gethex+0x1da>
 800de8a:	f108 33ff 	add.w	r3, r8, #4294967295
 800de8e:	1159      	asrs	r1, r3, #5
 800de90:	f003 021f 	and.w	r2, r3, #31
 800de94:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800de98:	f04f 0b01 	mov.w	fp, #1
 800de9c:	fa0b f202 	lsl.w	r2, fp, r2
 800dea0:	420a      	tst	r2, r1
 800dea2:	d00a      	beq.n	800deba <__gethex+0x1da>
 800dea4:	455b      	cmp	r3, fp
 800dea6:	dd06      	ble.n	800deb6 <__gethex+0x1d6>
 800dea8:	f1a8 0102 	sub.w	r1, r8, #2
 800deac:	4620      	mov	r0, r4
 800deae:	f7fe f9e5 	bl	800c27c <__any_on>
 800deb2:	2800      	cmp	r0, #0
 800deb4:	d138      	bne.n	800df28 <__gethex+0x248>
 800deb6:	f04f 0b02 	mov.w	fp, #2
 800deba:	4641      	mov	r1, r8
 800debc:	4620      	mov	r0, r4
 800debe:	f7ff fea7 	bl	800dc10 <rshift>
 800dec2:	4446      	add	r6, r8
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	42b3      	cmp	r3, r6
 800dec8:	da41      	bge.n	800df4e <__gethex+0x26e>
 800deca:	4621      	mov	r1, r4
 800decc:	4648      	mov	r0, r9
 800dece:	f7fd fd89 	bl	800b9e4 <_Bfree>
 800ded2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ded4:	2300      	movs	r3, #0
 800ded6:	6013      	str	r3, [r2, #0]
 800ded8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800dedc:	e78a      	b.n	800ddf4 <__gethex+0x114>
 800dede:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800dee2:	2a2e      	cmp	r2, #46	; 0x2e
 800dee4:	d014      	beq.n	800df10 <__gethex+0x230>
 800dee6:	2b20      	cmp	r3, #32
 800dee8:	d106      	bne.n	800def8 <__gethex+0x218>
 800deea:	9b01      	ldr	r3, [sp, #4]
 800deec:	f843 bb04 	str.w	fp, [r3], #4
 800def0:	f04f 0b00 	mov.w	fp, #0
 800def4:	9301      	str	r3, [sp, #4]
 800def6:	465b      	mov	r3, fp
 800def8:	7828      	ldrb	r0, [r5, #0]
 800defa:	9303      	str	r3, [sp, #12]
 800defc:	f7ff feda 	bl	800dcb4 <__hexdig_fun>
 800df00:	9b03      	ldr	r3, [sp, #12]
 800df02:	f000 000f 	and.w	r0, r0, #15
 800df06:	4098      	lsls	r0, r3
 800df08:	ea4b 0b00 	orr.w	fp, fp, r0
 800df0c:	3304      	adds	r3, #4
 800df0e:	e7a1      	b.n	800de54 <__gethex+0x174>
 800df10:	45a8      	cmp	r8, r5
 800df12:	d8e8      	bhi.n	800dee6 <__gethex+0x206>
 800df14:	2201      	movs	r2, #1
 800df16:	4628      	mov	r0, r5
 800df18:	9303      	str	r3, [sp, #12]
 800df1a:	f7ff fe1a 	bl	800db52 <strncmp>
 800df1e:	4926      	ldr	r1, [pc, #152]	; (800dfb8 <__gethex+0x2d8>)
 800df20:	9b03      	ldr	r3, [sp, #12]
 800df22:	2800      	cmp	r0, #0
 800df24:	d1df      	bne.n	800dee6 <__gethex+0x206>
 800df26:	e795      	b.n	800de54 <__gethex+0x174>
 800df28:	f04f 0b03 	mov.w	fp, #3
 800df2c:	e7c5      	b.n	800deba <__gethex+0x1da>
 800df2e:	da0b      	bge.n	800df48 <__gethex+0x268>
 800df30:	eba5 0800 	sub.w	r8, r5, r0
 800df34:	4621      	mov	r1, r4
 800df36:	4642      	mov	r2, r8
 800df38:	4648      	mov	r0, r9
 800df3a:	f7fd ff6d 	bl	800be18 <__lshift>
 800df3e:	eba6 0608 	sub.w	r6, r6, r8
 800df42:	4604      	mov	r4, r0
 800df44:	f100 0a14 	add.w	sl, r0, #20
 800df48:	f04f 0b00 	mov.w	fp, #0
 800df4c:	e7ba      	b.n	800dec4 <__gethex+0x1e4>
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	42b3      	cmp	r3, r6
 800df52:	dd73      	ble.n	800e03c <__gethex+0x35c>
 800df54:	1b9e      	subs	r6, r3, r6
 800df56:	42b5      	cmp	r5, r6
 800df58:	dc34      	bgt.n	800dfc4 <__gethex+0x2e4>
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	2b02      	cmp	r3, #2
 800df5e:	d023      	beq.n	800dfa8 <__gethex+0x2c8>
 800df60:	2b03      	cmp	r3, #3
 800df62:	d025      	beq.n	800dfb0 <__gethex+0x2d0>
 800df64:	2b01      	cmp	r3, #1
 800df66:	d115      	bne.n	800df94 <__gethex+0x2b4>
 800df68:	42b5      	cmp	r5, r6
 800df6a:	d113      	bne.n	800df94 <__gethex+0x2b4>
 800df6c:	2d01      	cmp	r5, #1
 800df6e:	d10b      	bne.n	800df88 <__gethex+0x2a8>
 800df70:	9a02      	ldr	r2, [sp, #8]
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6013      	str	r3, [r2, #0]
 800df76:	2301      	movs	r3, #1
 800df78:	6123      	str	r3, [r4, #16]
 800df7a:	f8ca 3000 	str.w	r3, [sl]
 800df7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df80:	f04f 0862 	mov.w	r8, #98	; 0x62
 800df84:	601c      	str	r4, [r3, #0]
 800df86:	e735      	b.n	800ddf4 <__gethex+0x114>
 800df88:	1e69      	subs	r1, r5, #1
 800df8a:	4620      	mov	r0, r4
 800df8c:	f7fe f976 	bl	800c27c <__any_on>
 800df90:	2800      	cmp	r0, #0
 800df92:	d1ed      	bne.n	800df70 <__gethex+0x290>
 800df94:	4621      	mov	r1, r4
 800df96:	4648      	mov	r0, r9
 800df98:	f7fd fd24 	bl	800b9e4 <_Bfree>
 800df9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800df9e:	2300      	movs	r3, #0
 800dfa0:	6013      	str	r3, [r2, #0]
 800dfa2:	f04f 0850 	mov.w	r8, #80	; 0x50
 800dfa6:	e725      	b.n	800ddf4 <__gethex+0x114>
 800dfa8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d1f2      	bne.n	800df94 <__gethex+0x2b4>
 800dfae:	e7df      	b.n	800df70 <__gethex+0x290>
 800dfb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d1dc      	bne.n	800df70 <__gethex+0x290>
 800dfb6:	e7ed      	b.n	800df94 <__gethex+0x2b4>
 800dfb8:	0800ec6c 	.word	0x0800ec6c
 800dfbc:	0800eb03 	.word	0x0800eb03
 800dfc0:	0800ee31 	.word	0x0800ee31
 800dfc4:	f106 38ff 	add.w	r8, r6, #4294967295
 800dfc8:	f1bb 0f00 	cmp.w	fp, #0
 800dfcc:	d133      	bne.n	800e036 <__gethex+0x356>
 800dfce:	f1b8 0f00 	cmp.w	r8, #0
 800dfd2:	d004      	beq.n	800dfde <__gethex+0x2fe>
 800dfd4:	4641      	mov	r1, r8
 800dfd6:	4620      	mov	r0, r4
 800dfd8:	f7fe f950 	bl	800c27c <__any_on>
 800dfdc:	4683      	mov	fp, r0
 800dfde:	ea4f 1268 	mov.w	r2, r8, asr #5
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800dfe8:	f008 081f 	and.w	r8, r8, #31
 800dfec:	fa03 f308 	lsl.w	r3, r3, r8
 800dff0:	4213      	tst	r3, r2
 800dff2:	4631      	mov	r1, r6
 800dff4:	4620      	mov	r0, r4
 800dff6:	bf18      	it	ne
 800dff8:	f04b 0b02 	orrne.w	fp, fp, #2
 800dffc:	1bad      	subs	r5, r5, r6
 800dffe:	f7ff fe07 	bl	800dc10 <rshift>
 800e002:	687e      	ldr	r6, [r7, #4]
 800e004:	f04f 0802 	mov.w	r8, #2
 800e008:	f1bb 0f00 	cmp.w	fp, #0
 800e00c:	d04a      	beq.n	800e0a4 <__gethex+0x3c4>
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	2b02      	cmp	r3, #2
 800e012:	d016      	beq.n	800e042 <__gethex+0x362>
 800e014:	2b03      	cmp	r3, #3
 800e016:	d018      	beq.n	800e04a <__gethex+0x36a>
 800e018:	2b01      	cmp	r3, #1
 800e01a:	d109      	bne.n	800e030 <__gethex+0x350>
 800e01c:	f01b 0f02 	tst.w	fp, #2
 800e020:	d006      	beq.n	800e030 <__gethex+0x350>
 800e022:	f8da 3000 	ldr.w	r3, [sl]
 800e026:	ea4b 0b03 	orr.w	fp, fp, r3
 800e02a:	f01b 0f01 	tst.w	fp, #1
 800e02e:	d10f      	bne.n	800e050 <__gethex+0x370>
 800e030:	f048 0810 	orr.w	r8, r8, #16
 800e034:	e036      	b.n	800e0a4 <__gethex+0x3c4>
 800e036:	f04f 0b01 	mov.w	fp, #1
 800e03a:	e7d0      	b.n	800dfde <__gethex+0x2fe>
 800e03c:	f04f 0801 	mov.w	r8, #1
 800e040:	e7e2      	b.n	800e008 <__gethex+0x328>
 800e042:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e044:	f1c3 0301 	rsb	r3, r3, #1
 800e048:	930f      	str	r3, [sp, #60]	; 0x3c
 800e04a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d0ef      	beq.n	800e030 <__gethex+0x350>
 800e050:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e054:	f104 0214 	add.w	r2, r4, #20
 800e058:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800e05c:	9301      	str	r3, [sp, #4]
 800e05e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800e062:	2300      	movs	r3, #0
 800e064:	4694      	mov	ip, r2
 800e066:	f852 1b04 	ldr.w	r1, [r2], #4
 800e06a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800e06e:	d01e      	beq.n	800e0ae <__gethex+0x3ce>
 800e070:	3101      	adds	r1, #1
 800e072:	f8cc 1000 	str.w	r1, [ip]
 800e076:	f1b8 0f02 	cmp.w	r8, #2
 800e07a:	f104 0214 	add.w	r2, r4, #20
 800e07e:	d13d      	bne.n	800e0fc <__gethex+0x41c>
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	3b01      	subs	r3, #1
 800e084:	42ab      	cmp	r3, r5
 800e086:	d10b      	bne.n	800e0a0 <__gethex+0x3c0>
 800e088:	1169      	asrs	r1, r5, #5
 800e08a:	2301      	movs	r3, #1
 800e08c:	f005 051f 	and.w	r5, r5, #31
 800e090:	fa03 f505 	lsl.w	r5, r3, r5
 800e094:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e098:	421d      	tst	r5, r3
 800e09a:	bf18      	it	ne
 800e09c:	f04f 0801 	movne.w	r8, #1
 800e0a0:	f048 0820 	orr.w	r8, r8, #32
 800e0a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e0a6:	601c      	str	r4, [r3, #0]
 800e0a8:	9b02      	ldr	r3, [sp, #8]
 800e0aa:	601e      	str	r6, [r3, #0]
 800e0ac:	e6a2      	b.n	800ddf4 <__gethex+0x114>
 800e0ae:	4290      	cmp	r0, r2
 800e0b0:	f842 3c04 	str.w	r3, [r2, #-4]
 800e0b4:	d8d6      	bhi.n	800e064 <__gethex+0x384>
 800e0b6:	68a2      	ldr	r2, [r4, #8]
 800e0b8:	4593      	cmp	fp, r2
 800e0ba:	db17      	blt.n	800e0ec <__gethex+0x40c>
 800e0bc:	6861      	ldr	r1, [r4, #4]
 800e0be:	4648      	mov	r0, r9
 800e0c0:	3101      	adds	r1, #1
 800e0c2:	f7fd fc4f 	bl	800b964 <_Balloc>
 800e0c6:	4682      	mov	sl, r0
 800e0c8:	b918      	cbnz	r0, 800e0d2 <__gethex+0x3f2>
 800e0ca:	4b1b      	ldr	r3, [pc, #108]	; (800e138 <__gethex+0x458>)
 800e0cc:	4602      	mov	r2, r0
 800e0ce:	2184      	movs	r1, #132	; 0x84
 800e0d0:	e6b3      	b.n	800de3a <__gethex+0x15a>
 800e0d2:	6922      	ldr	r2, [r4, #16]
 800e0d4:	3202      	adds	r2, #2
 800e0d6:	f104 010c 	add.w	r1, r4, #12
 800e0da:	0092      	lsls	r2, r2, #2
 800e0dc:	300c      	adds	r0, #12
 800e0de:	f7fc fcb0 	bl	800aa42 <memcpy>
 800e0e2:	4621      	mov	r1, r4
 800e0e4:	4648      	mov	r0, r9
 800e0e6:	f7fd fc7d 	bl	800b9e4 <_Bfree>
 800e0ea:	4654      	mov	r4, sl
 800e0ec:	6922      	ldr	r2, [r4, #16]
 800e0ee:	1c51      	adds	r1, r2, #1
 800e0f0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e0f4:	6121      	str	r1, [r4, #16]
 800e0f6:	2101      	movs	r1, #1
 800e0f8:	6151      	str	r1, [r2, #20]
 800e0fa:	e7bc      	b.n	800e076 <__gethex+0x396>
 800e0fc:	6921      	ldr	r1, [r4, #16]
 800e0fe:	4559      	cmp	r1, fp
 800e100:	dd0b      	ble.n	800e11a <__gethex+0x43a>
 800e102:	2101      	movs	r1, #1
 800e104:	4620      	mov	r0, r4
 800e106:	f7ff fd83 	bl	800dc10 <rshift>
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	3601      	adds	r6, #1
 800e10e:	42b3      	cmp	r3, r6
 800e110:	f6ff aedb 	blt.w	800deca <__gethex+0x1ea>
 800e114:	f04f 0801 	mov.w	r8, #1
 800e118:	e7c2      	b.n	800e0a0 <__gethex+0x3c0>
 800e11a:	f015 051f 	ands.w	r5, r5, #31
 800e11e:	d0f9      	beq.n	800e114 <__gethex+0x434>
 800e120:	9b01      	ldr	r3, [sp, #4]
 800e122:	441a      	add	r2, r3
 800e124:	f1c5 0520 	rsb	r5, r5, #32
 800e128:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800e12c:	f7fd fd0c 	bl	800bb48 <__hi0bits>
 800e130:	42a8      	cmp	r0, r5
 800e132:	dbe6      	blt.n	800e102 <__gethex+0x422>
 800e134:	e7ee      	b.n	800e114 <__gethex+0x434>
 800e136:	bf00      	nop
 800e138:	0800eb03 	.word	0x0800eb03

0800e13c <L_shift>:
 800e13c:	f1c2 0208 	rsb	r2, r2, #8
 800e140:	0092      	lsls	r2, r2, #2
 800e142:	b570      	push	{r4, r5, r6, lr}
 800e144:	f1c2 0620 	rsb	r6, r2, #32
 800e148:	6843      	ldr	r3, [r0, #4]
 800e14a:	6804      	ldr	r4, [r0, #0]
 800e14c:	fa03 f506 	lsl.w	r5, r3, r6
 800e150:	432c      	orrs	r4, r5
 800e152:	40d3      	lsrs	r3, r2
 800e154:	6004      	str	r4, [r0, #0]
 800e156:	f840 3f04 	str.w	r3, [r0, #4]!
 800e15a:	4288      	cmp	r0, r1
 800e15c:	d3f4      	bcc.n	800e148 <L_shift+0xc>
 800e15e:	bd70      	pop	{r4, r5, r6, pc}

0800e160 <__match>:
 800e160:	b530      	push	{r4, r5, lr}
 800e162:	6803      	ldr	r3, [r0, #0]
 800e164:	3301      	adds	r3, #1
 800e166:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e16a:	b914      	cbnz	r4, 800e172 <__match+0x12>
 800e16c:	6003      	str	r3, [r0, #0]
 800e16e:	2001      	movs	r0, #1
 800e170:	bd30      	pop	{r4, r5, pc}
 800e172:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e176:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e17a:	2d19      	cmp	r5, #25
 800e17c:	bf98      	it	ls
 800e17e:	3220      	addls	r2, #32
 800e180:	42a2      	cmp	r2, r4
 800e182:	d0f0      	beq.n	800e166 <__match+0x6>
 800e184:	2000      	movs	r0, #0
 800e186:	e7f3      	b.n	800e170 <__match+0x10>

0800e188 <__hexnan>:
 800e188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e18c:	680b      	ldr	r3, [r1, #0]
 800e18e:	6801      	ldr	r1, [r0, #0]
 800e190:	115e      	asrs	r6, r3, #5
 800e192:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e196:	f013 031f 	ands.w	r3, r3, #31
 800e19a:	b087      	sub	sp, #28
 800e19c:	bf18      	it	ne
 800e19e:	3604      	addne	r6, #4
 800e1a0:	2500      	movs	r5, #0
 800e1a2:	1f37      	subs	r7, r6, #4
 800e1a4:	4682      	mov	sl, r0
 800e1a6:	4690      	mov	r8, r2
 800e1a8:	9301      	str	r3, [sp, #4]
 800e1aa:	f846 5c04 	str.w	r5, [r6, #-4]
 800e1ae:	46b9      	mov	r9, r7
 800e1b0:	463c      	mov	r4, r7
 800e1b2:	9502      	str	r5, [sp, #8]
 800e1b4:	46ab      	mov	fp, r5
 800e1b6:	784a      	ldrb	r2, [r1, #1]
 800e1b8:	1c4b      	adds	r3, r1, #1
 800e1ba:	9303      	str	r3, [sp, #12]
 800e1bc:	b342      	cbz	r2, 800e210 <__hexnan+0x88>
 800e1be:	4610      	mov	r0, r2
 800e1c0:	9105      	str	r1, [sp, #20]
 800e1c2:	9204      	str	r2, [sp, #16]
 800e1c4:	f7ff fd76 	bl	800dcb4 <__hexdig_fun>
 800e1c8:	2800      	cmp	r0, #0
 800e1ca:	d14f      	bne.n	800e26c <__hexnan+0xe4>
 800e1cc:	9a04      	ldr	r2, [sp, #16]
 800e1ce:	9905      	ldr	r1, [sp, #20]
 800e1d0:	2a20      	cmp	r2, #32
 800e1d2:	d818      	bhi.n	800e206 <__hexnan+0x7e>
 800e1d4:	9b02      	ldr	r3, [sp, #8]
 800e1d6:	459b      	cmp	fp, r3
 800e1d8:	dd13      	ble.n	800e202 <__hexnan+0x7a>
 800e1da:	454c      	cmp	r4, r9
 800e1dc:	d206      	bcs.n	800e1ec <__hexnan+0x64>
 800e1de:	2d07      	cmp	r5, #7
 800e1e0:	dc04      	bgt.n	800e1ec <__hexnan+0x64>
 800e1e2:	462a      	mov	r2, r5
 800e1e4:	4649      	mov	r1, r9
 800e1e6:	4620      	mov	r0, r4
 800e1e8:	f7ff ffa8 	bl	800e13c <L_shift>
 800e1ec:	4544      	cmp	r4, r8
 800e1ee:	d950      	bls.n	800e292 <__hexnan+0x10a>
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	f1a4 0904 	sub.w	r9, r4, #4
 800e1f6:	f844 3c04 	str.w	r3, [r4, #-4]
 800e1fa:	f8cd b008 	str.w	fp, [sp, #8]
 800e1fe:	464c      	mov	r4, r9
 800e200:	461d      	mov	r5, r3
 800e202:	9903      	ldr	r1, [sp, #12]
 800e204:	e7d7      	b.n	800e1b6 <__hexnan+0x2e>
 800e206:	2a29      	cmp	r2, #41	; 0x29
 800e208:	d155      	bne.n	800e2b6 <__hexnan+0x12e>
 800e20a:	3102      	adds	r1, #2
 800e20c:	f8ca 1000 	str.w	r1, [sl]
 800e210:	f1bb 0f00 	cmp.w	fp, #0
 800e214:	d04f      	beq.n	800e2b6 <__hexnan+0x12e>
 800e216:	454c      	cmp	r4, r9
 800e218:	d206      	bcs.n	800e228 <__hexnan+0xa0>
 800e21a:	2d07      	cmp	r5, #7
 800e21c:	dc04      	bgt.n	800e228 <__hexnan+0xa0>
 800e21e:	462a      	mov	r2, r5
 800e220:	4649      	mov	r1, r9
 800e222:	4620      	mov	r0, r4
 800e224:	f7ff ff8a 	bl	800e13c <L_shift>
 800e228:	4544      	cmp	r4, r8
 800e22a:	d934      	bls.n	800e296 <__hexnan+0x10e>
 800e22c:	f1a8 0204 	sub.w	r2, r8, #4
 800e230:	4623      	mov	r3, r4
 800e232:	f853 1b04 	ldr.w	r1, [r3], #4
 800e236:	f842 1f04 	str.w	r1, [r2, #4]!
 800e23a:	429f      	cmp	r7, r3
 800e23c:	d2f9      	bcs.n	800e232 <__hexnan+0xaa>
 800e23e:	1b3b      	subs	r3, r7, r4
 800e240:	f023 0303 	bic.w	r3, r3, #3
 800e244:	3304      	adds	r3, #4
 800e246:	3e03      	subs	r6, #3
 800e248:	3401      	adds	r4, #1
 800e24a:	42a6      	cmp	r6, r4
 800e24c:	bf38      	it	cc
 800e24e:	2304      	movcc	r3, #4
 800e250:	4443      	add	r3, r8
 800e252:	2200      	movs	r2, #0
 800e254:	f843 2b04 	str.w	r2, [r3], #4
 800e258:	429f      	cmp	r7, r3
 800e25a:	d2fb      	bcs.n	800e254 <__hexnan+0xcc>
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	b91b      	cbnz	r3, 800e268 <__hexnan+0xe0>
 800e260:	4547      	cmp	r7, r8
 800e262:	d126      	bne.n	800e2b2 <__hexnan+0x12a>
 800e264:	2301      	movs	r3, #1
 800e266:	603b      	str	r3, [r7, #0]
 800e268:	2005      	movs	r0, #5
 800e26a:	e025      	b.n	800e2b8 <__hexnan+0x130>
 800e26c:	3501      	adds	r5, #1
 800e26e:	2d08      	cmp	r5, #8
 800e270:	f10b 0b01 	add.w	fp, fp, #1
 800e274:	dd06      	ble.n	800e284 <__hexnan+0xfc>
 800e276:	4544      	cmp	r4, r8
 800e278:	d9c3      	bls.n	800e202 <__hexnan+0x7a>
 800e27a:	2300      	movs	r3, #0
 800e27c:	f844 3c04 	str.w	r3, [r4, #-4]
 800e280:	2501      	movs	r5, #1
 800e282:	3c04      	subs	r4, #4
 800e284:	6822      	ldr	r2, [r4, #0]
 800e286:	f000 000f 	and.w	r0, r0, #15
 800e28a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e28e:	6020      	str	r0, [r4, #0]
 800e290:	e7b7      	b.n	800e202 <__hexnan+0x7a>
 800e292:	2508      	movs	r5, #8
 800e294:	e7b5      	b.n	800e202 <__hexnan+0x7a>
 800e296:	9b01      	ldr	r3, [sp, #4]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d0df      	beq.n	800e25c <__hexnan+0xd4>
 800e29c:	f1c3 0320 	rsb	r3, r3, #32
 800e2a0:	f04f 32ff 	mov.w	r2, #4294967295
 800e2a4:	40da      	lsrs	r2, r3
 800e2a6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e2aa:	4013      	ands	r3, r2
 800e2ac:	f846 3c04 	str.w	r3, [r6, #-4]
 800e2b0:	e7d4      	b.n	800e25c <__hexnan+0xd4>
 800e2b2:	3f04      	subs	r7, #4
 800e2b4:	e7d2      	b.n	800e25c <__hexnan+0xd4>
 800e2b6:	2004      	movs	r0, #4
 800e2b8:	b007      	add	sp, #28
 800e2ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e2be <__ascii_mbtowc>:
 800e2be:	b082      	sub	sp, #8
 800e2c0:	b901      	cbnz	r1, 800e2c4 <__ascii_mbtowc+0x6>
 800e2c2:	a901      	add	r1, sp, #4
 800e2c4:	b142      	cbz	r2, 800e2d8 <__ascii_mbtowc+0x1a>
 800e2c6:	b14b      	cbz	r3, 800e2dc <__ascii_mbtowc+0x1e>
 800e2c8:	7813      	ldrb	r3, [r2, #0]
 800e2ca:	600b      	str	r3, [r1, #0]
 800e2cc:	7812      	ldrb	r2, [r2, #0]
 800e2ce:	1e10      	subs	r0, r2, #0
 800e2d0:	bf18      	it	ne
 800e2d2:	2001      	movne	r0, #1
 800e2d4:	b002      	add	sp, #8
 800e2d6:	4770      	bx	lr
 800e2d8:	4610      	mov	r0, r2
 800e2da:	e7fb      	b.n	800e2d4 <__ascii_mbtowc+0x16>
 800e2dc:	f06f 0001 	mvn.w	r0, #1
 800e2e0:	e7f8      	b.n	800e2d4 <__ascii_mbtowc+0x16>

0800e2e2 <_realloc_r>:
 800e2e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2e6:	4680      	mov	r8, r0
 800e2e8:	4614      	mov	r4, r2
 800e2ea:	460e      	mov	r6, r1
 800e2ec:	b921      	cbnz	r1, 800e2f8 <_realloc_r+0x16>
 800e2ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2f2:	4611      	mov	r1, r2
 800e2f4:	f7fd baaa 	b.w	800b84c <_malloc_r>
 800e2f8:	b92a      	cbnz	r2, 800e306 <_realloc_r+0x24>
 800e2fa:	f7fd fa33 	bl	800b764 <_free_r>
 800e2fe:	4625      	mov	r5, r4
 800e300:	4628      	mov	r0, r5
 800e302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e306:	f000 f8b6 	bl	800e476 <_malloc_usable_size_r>
 800e30a:	4284      	cmp	r4, r0
 800e30c:	4607      	mov	r7, r0
 800e30e:	d802      	bhi.n	800e316 <_realloc_r+0x34>
 800e310:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e314:	d812      	bhi.n	800e33c <_realloc_r+0x5a>
 800e316:	4621      	mov	r1, r4
 800e318:	4640      	mov	r0, r8
 800e31a:	f7fd fa97 	bl	800b84c <_malloc_r>
 800e31e:	4605      	mov	r5, r0
 800e320:	2800      	cmp	r0, #0
 800e322:	d0ed      	beq.n	800e300 <_realloc_r+0x1e>
 800e324:	42bc      	cmp	r4, r7
 800e326:	4622      	mov	r2, r4
 800e328:	4631      	mov	r1, r6
 800e32a:	bf28      	it	cs
 800e32c:	463a      	movcs	r2, r7
 800e32e:	f7fc fb88 	bl	800aa42 <memcpy>
 800e332:	4631      	mov	r1, r6
 800e334:	4640      	mov	r0, r8
 800e336:	f7fd fa15 	bl	800b764 <_free_r>
 800e33a:	e7e1      	b.n	800e300 <_realloc_r+0x1e>
 800e33c:	4635      	mov	r5, r6
 800e33e:	e7df      	b.n	800e300 <_realloc_r+0x1e>

0800e340 <_strtoul_l.constprop.0>:
 800e340:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e344:	4f36      	ldr	r7, [pc, #216]	; (800e420 <_strtoul_l.constprop.0+0xe0>)
 800e346:	4686      	mov	lr, r0
 800e348:	460d      	mov	r5, r1
 800e34a:	4628      	mov	r0, r5
 800e34c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e350:	5d3e      	ldrb	r6, [r7, r4]
 800e352:	f016 0608 	ands.w	r6, r6, #8
 800e356:	d1f8      	bne.n	800e34a <_strtoul_l.constprop.0+0xa>
 800e358:	2c2d      	cmp	r4, #45	; 0x2d
 800e35a:	d130      	bne.n	800e3be <_strtoul_l.constprop.0+0x7e>
 800e35c:	782c      	ldrb	r4, [r5, #0]
 800e35e:	2601      	movs	r6, #1
 800e360:	1c85      	adds	r5, r0, #2
 800e362:	2b00      	cmp	r3, #0
 800e364:	d057      	beq.n	800e416 <_strtoul_l.constprop.0+0xd6>
 800e366:	2b10      	cmp	r3, #16
 800e368:	d109      	bne.n	800e37e <_strtoul_l.constprop.0+0x3e>
 800e36a:	2c30      	cmp	r4, #48	; 0x30
 800e36c:	d107      	bne.n	800e37e <_strtoul_l.constprop.0+0x3e>
 800e36e:	7828      	ldrb	r0, [r5, #0]
 800e370:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800e374:	2858      	cmp	r0, #88	; 0x58
 800e376:	d149      	bne.n	800e40c <_strtoul_l.constprop.0+0xcc>
 800e378:	786c      	ldrb	r4, [r5, #1]
 800e37a:	2310      	movs	r3, #16
 800e37c:	3502      	adds	r5, #2
 800e37e:	f04f 38ff 	mov.w	r8, #4294967295
 800e382:	2700      	movs	r7, #0
 800e384:	fbb8 f8f3 	udiv	r8, r8, r3
 800e388:	fb03 f908 	mul.w	r9, r3, r8
 800e38c:	ea6f 0909 	mvn.w	r9, r9
 800e390:	4638      	mov	r0, r7
 800e392:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e396:	f1bc 0f09 	cmp.w	ip, #9
 800e39a:	d815      	bhi.n	800e3c8 <_strtoul_l.constprop.0+0x88>
 800e39c:	4664      	mov	r4, ip
 800e39e:	42a3      	cmp	r3, r4
 800e3a0:	dd23      	ble.n	800e3ea <_strtoul_l.constprop.0+0xaa>
 800e3a2:	f1b7 3fff 	cmp.w	r7, #4294967295
 800e3a6:	d007      	beq.n	800e3b8 <_strtoul_l.constprop.0+0x78>
 800e3a8:	4580      	cmp	r8, r0
 800e3aa:	d31b      	bcc.n	800e3e4 <_strtoul_l.constprop.0+0xa4>
 800e3ac:	d101      	bne.n	800e3b2 <_strtoul_l.constprop.0+0x72>
 800e3ae:	45a1      	cmp	r9, r4
 800e3b0:	db18      	blt.n	800e3e4 <_strtoul_l.constprop.0+0xa4>
 800e3b2:	fb00 4003 	mla	r0, r0, r3, r4
 800e3b6:	2701      	movs	r7, #1
 800e3b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e3bc:	e7e9      	b.n	800e392 <_strtoul_l.constprop.0+0x52>
 800e3be:	2c2b      	cmp	r4, #43	; 0x2b
 800e3c0:	bf04      	itt	eq
 800e3c2:	782c      	ldrbeq	r4, [r5, #0]
 800e3c4:	1c85      	addeq	r5, r0, #2
 800e3c6:	e7cc      	b.n	800e362 <_strtoul_l.constprop.0+0x22>
 800e3c8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e3cc:	f1bc 0f19 	cmp.w	ip, #25
 800e3d0:	d801      	bhi.n	800e3d6 <_strtoul_l.constprop.0+0x96>
 800e3d2:	3c37      	subs	r4, #55	; 0x37
 800e3d4:	e7e3      	b.n	800e39e <_strtoul_l.constprop.0+0x5e>
 800e3d6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e3da:	f1bc 0f19 	cmp.w	ip, #25
 800e3de:	d804      	bhi.n	800e3ea <_strtoul_l.constprop.0+0xaa>
 800e3e0:	3c57      	subs	r4, #87	; 0x57
 800e3e2:	e7dc      	b.n	800e39e <_strtoul_l.constprop.0+0x5e>
 800e3e4:	f04f 37ff 	mov.w	r7, #4294967295
 800e3e8:	e7e6      	b.n	800e3b8 <_strtoul_l.constprop.0+0x78>
 800e3ea:	1c7b      	adds	r3, r7, #1
 800e3ec:	d106      	bne.n	800e3fc <_strtoul_l.constprop.0+0xbc>
 800e3ee:	2322      	movs	r3, #34	; 0x22
 800e3f0:	f8ce 3000 	str.w	r3, [lr]
 800e3f4:	4638      	mov	r0, r7
 800e3f6:	b932      	cbnz	r2, 800e406 <_strtoul_l.constprop.0+0xc6>
 800e3f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e3fc:	b106      	cbz	r6, 800e400 <_strtoul_l.constprop.0+0xc0>
 800e3fe:	4240      	negs	r0, r0
 800e400:	2a00      	cmp	r2, #0
 800e402:	d0f9      	beq.n	800e3f8 <_strtoul_l.constprop.0+0xb8>
 800e404:	b107      	cbz	r7, 800e408 <_strtoul_l.constprop.0+0xc8>
 800e406:	1e69      	subs	r1, r5, #1
 800e408:	6011      	str	r1, [r2, #0]
 800e40a:	e7f5      	b.n	800e3f8 <_strtoul_l.constprop.0+0xb8>
 800e40c:	2430      	movs	r4, #48	; 0x30
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d1b5      	bne.n	800e37e <_strtoul_l.constprop.0+0x3e>
 800e412:	2308      	movs	r3, #8
 800e414:	e7b3      	b.n	800e37e <_strtoul_l.constprop.0+0x3e>
 800e416:	2c30      	cmp	r4, #48	; 0x30
 800e418:	d0a9      	beq.n	800e36e <_strtoul_l.constprop.0+0x2e>
 800e41a:	230a      	movs	r3, #10
 800e41c:	e7af      	b.n	800e37e <_strtoul_l.constprop.0+0x3e>
 800e41e:	bf00      	nop
 800e420:	0800ecc1 	.word	0x0800ecc1

0800e424 <_strtoul_r>:
 800e424:	f7ff bf8c 	b.w	800e340 <_strtoul_l.constprop.0>

0800e428 <__ascii_wctomb>:
 800e428:	b149      	cbz	r1, 800e43e <__ascii_wctomb+0x16>
 800e42a:	2aff      	cmp	r2, #255	; 0xff
 800e42c:	bf85      	ittet	hi
 800e42e:	238a      	movhi	r3, #138	; 0x8a
 800e430:	6003      	strhi	r3, [r0, #0]
 800e432:	700a      	strbls	r2, [r1, #0]
 800e434:	f04f 30ff 	movhi.w	r0, #4294967295
 800e438:	bf98      	it	ls
 800e43a:	2001      	movls	r0, #1
 800e43c:	4770      	bx	lr
 800e43e:	4608      	mov	r0, r1
 800e440:	4770      	bx	lr
	...

0800e444 <fiprintf>:
 800e444:	b40e      	push	{r1, r2, r3}
 800e446:	b503      	push	{r0, r1, lr}
 800e448:	4601      	mov	r1, r0
 800e44a:	ab03      	add	r3, sp, #12
 800e44c:	4805      	ldr	r0, [pc, #20]	; (800e464 <fiprintf+0x20>)
 800e44e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e452:	6800      	ldr	r0, [r0, #0]
 800e454:	9301      	str	r3, [sp, #4]
 800e456:	f000 f83f 	bl	800e4d8 <_vfiprintf_r>
 800e45a:	b002      	add	sp, #8
 800e45c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e460:	b003      	add	sp, #12
 800e462:	4770      	bx	lr
 800e464:	20000064 	.word	0x20000064

0800e468 <abort>:
 800e468:	b508      	push	{r3, lr}
 800e46a:	2006      	movs	r0, #6
 800e46c:	f000 fa0c 	bl	800e888 <raise>
 800e470:	2001      	movs	r0, #1
 800e472:	f7f4 faed 	bl	8002a50 <_exit>

0800e476 <_malloc_usable_size_r>:
 800e476:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e47a:	1f18      	subs	r0, r3, #4
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	bfbc      	itt	lt
 800e480:	580b      	ldrlt	r3, [r1, r0]
 800e482:	18c0      	addlt	r0, r0, r3
 800e484:	4770      	bx	lr

0800e486 <__sfputc_r>:
 800e486:	6893      	ldr	r3, [r2, #8]
 800e488:	3b01      	subs	r3, #1
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	b410      	push	{r4}
 800e48e:	6093      	str	r3, [r2, #8]
 800e490:	da08      	bge.n	800e4a4 <__sfputc_r+0x1e>
 800e492:	6994      	ldr	r4, [r2, #24]
 800e494:	42a3      	cmp	r3, r4
 800e496:	db01      	blt.n	800e49c <__sfputc_r+0x16>
 800e498:	290a      	cmp	r1, #10
 800e49a:	d103      	bne.n	800e4a4 <__sfputc_r+0x1e>
 800e49c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4a0:	f000 b934 	b.w	800e70c <__swbuf_r>
 800e4a4:	6813      	ldr	r3, [r2, #0]
 800e4a6:	1c58      	adds	r0, r3, #1
 800e4a8:	6010      	str	r0, [r2, #0]
 800e4aa:	7019      	strb	r1, [r3, #0]
 800e4ac:	4608      	mov	r0, r1
 800e4ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4b2:	4770      	bx	lr

0800e4b4 <__sfputs_r>:
 800e4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4b6:	4606      	mov	r6, r0
 800e4b8:	460f      	mov	r7, r1
 800e4ba:	4614      	mov	r4, r2
 800e4bc:	18d5      	adds	r5, r2, r3
 800e4be:	42ac      	cmp	r4, r5
 800e4c0:	d101      	bne.n	800e4c6 <__sfputs_r+0x12>
 800e4c2:	2000      	movs	r0, #0
 800e4c4:	e007      	b.n	800e4d6 <__sfputs_r+0x22>
 800e4c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4ca:	463a      	mov	r2, r7
 800e4cc:	4630      	mov	r0, r6
 800e4ce:	f7ff ffda 	bl	800e486 <__sfputc_r>
 800e4d2:	1c43      	adds	r3, r0, #1
 800e4d4:	d1f3      	bne.n	800e4be <__sfputs_r+0xa>
 800e4d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e4d8 <_vfiprintf_r>:
 800e4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4dc:	460d      	mov	r5, r1
 800e4de:	b09d      	sub	sp, #116	; 0x74
 800e4e0:	4614      	mov	r4, r2
 800e4e2:	4698      	mov	r8, r3
 800e4e4:	4606      	mov	r6, r0
 800e4e6:	b118      	cbz	r0, 800e4f0 <_vfiprintf_r+0x18>
 800e4e8:	6a03      	ldr	r3, [r0, #32]
 800e4ea:	b90b      	cbnz	r3, 800e4f0 <_vfiprintf_r+0x18>
 800e4ec:	f7fc f962 	bl	800a7b4 <__sinit>
 800e4f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e4f2:	07d9      	lsls	r1, r3, #31
 800e4f4:	d405      	bmi.n	800e502 <_vfiprintf_r+0x2a>
 800e4f6:	89ab      	ldrh	r3, [r5, #12]
 800e4f8:	059a      	lsls	r2, r3, #22
 800e4fa:	d402      	bmi.n	800e502 <_vfiprintf_r+0x2a>
 800e4fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e4fe:	f7fc fa9e 	bl	800aa3e <__retarget_lock_acquire_recursive>
 800e502:	89ab      	ldrh	r3, [r5, #12]
 800e504:	071b      	lsls	r3, r3, #28
 800e506:	d501      	bpl.n	800e50c <_vfiprintf_r+0x34>
 800e508:	692b      	ldr	r3, [r5, #16]
 800e50a:	b99b      	cbnz	r3, 800e534 <_vfiprintf_r+0x5c>
 800e50c:	4629      	mov	r1, r5
 800e50e:	4630      	mov	r0, r6
 800e510:	f000 f93a 	bl	800e788 <__swsetup_r>
 800e514:	b170      	cbz	r0, 800e534 <_vfiprintf_r+0x5c>
 800e516:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e518:	07dc      	lsls	r4, r3, #31
 800e51a:	d504      	bpl.n	800e526 <_vfiprintf_r+0x4e>
 800e51c:	f04f 30ff 	mov.w	r0, #4294967295
 800e520:	b01d      	add	sp, #116	; 0x74
 800e522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e526:	89ab      	ldrh	r3, [r5, #12]
 800e528:	0598      	lsls	r0, r3, #22
 800e52a:	d4f7      	bmi.n	800e51c <_vfiprintf_r+0x44>
 800e52c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e52e:	f7fc fa87 	bl	800aa40 <__retarget_lock_release_recursive>
 800e532:	e7f3      	b.n	800e51c <_vfiprintf_r+0x44>
 800e534:	2300      	movs	r3, #0
 800e536:	9309      	str	r3, [sp, #36]	; 0x24
 800e538:	2320      	movs	r3, #32
 800e53a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e53e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e542:	2330      	movs	r3, #48	; 0x30
 800e544:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e6f8 <_vfiprintf_r+0x220>
 800e548:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e54c:	f04f 0901 	mov.w	r9, #1
 800e550:	4623      	mov	r3, r4
 800e552:	469a      	mov	sl, r3
 800e554:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e558:	b10a      	cbz	r2, 800e55e <_vfiprintf_r+0x86>
 800e55a:	2a25      	cmp	r2, #37	; 0x25
 800e55c:	d1f9      	bne.n	800e552 <_vfiprintf_r+0x7a>
 800e55e:	ebba 0b04 	subs.w	fp, sl, r4
 800e562:	d00b      	beq.n	800e57c <_vfiprintf_r+0xa4>
 800e564:	465b      	mov	r3, fp
 800e566:	4622      	mov	r2, r4
 800e568:	4629      	mov	r1, r5
 800e56a:	4630      	mov	r0, r6
 800e56c:	f7ff ffa2 	bl	800e4b4 <__sfputs_r>
 800e570:	3001      	adds	r0, #1
 800e572:	f000 80a9 	beq.w	800e6c8 <_vfiprintf_r+0x1f0>
 800e576:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e578:	445a      	add	r2, fp
 800e57a:	9209      	str	r2, [sp, #36]	; 0x24
 800e57c:	f89a 3000 	ldrb.w	r3, [sl]
 800e580:	2b00      	cmp	r3, #0
 800e582:	f000 80a1 	beq.w	800e6c8 <_vfiprintf_r+0x1f0>
 800e586:	2300      	movs	r3, #0
 800e588:	f04f 32ff 	mov.w	r2, #4294967295
 800e58c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e590:	f10a 0a01 	add.w	sl, sl, #1
 800e594:	9304      	str	r3, [sp, #16]
 800e596:	9307      	str	r3, [sp, #28]
 800e598:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e59c:	931a      	str	r3, [sp, #104]	; 0x68
 800e59e:	4654      	mov	r4, sl
 800e5a0:	2205      	movs	r2, #5
 800e5a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5a6:	4854      	ldr	r0, [pc, #336]	; (800e6f8 <_vfiprintf_r+0x220>)
 800e5a8:	f7f1 fe32 	bl	8000210 <memchr>
 800e5ac:	9a04      	ldr	r2, [sp, #16]
 800e5ae:	b9d8      	cbnz	r0, 800e5e8 <_vfiprintf_r+0x110>
 800e5b0:	06d1      	lsls	r1, r2, #27
 800e5b2:	bf44      	itt	mi
 800e5b4:	2320      	movmi	r3, #32
 800e5b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5ba:	0713      	lsls	r3, r2, #28
 800e5bc:	bf44      	itt	mi
 800e5be:	232b      	movmi	r3, #43	; 0x2b
 800e5c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5c4:	f89a 3000 	ldrb.w	r3, [sl]
 800e5c8:	2b2a      	cmp	r3, #42	; 0x2a
 800e5ca:	d015      	beq.n	800e5f8 <_vfiprintf_r+0x120>
 800e5cc:	9a07      	ldr	r2, [sp, #28]
 800e5ce:	4654      	mov	r4, sl
 800e5d0:	2000      	movs	r0, #0
 800e5d2:	f04f 0c0a 	mov.w	ip, #10
 800e5d6:	4621      	mov	r1, r4
 800e5d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e5dc:	3b30      	subs	r3, #48	; 0x30
 800e5de:	2b09      	cmp	r3, #9
 800e5e0:	d94d      	bls.n	800e67e <_vfiprintf_r+0x1a6>
 800e5e2:	b1b0      	cbz	r0, 800e612 <_vfiprintf_r+0x13a>
 800e5e4:	9207      	str	r2, [sp, #28]
 800e5e6:	e014      	b.n	800e612 <_vfiprintf_r+0x13a>
 800e5e8:	eba0 0308 	sub.w	r3, r0, r8
 800e5ec:	fa09 f303 	lsl.w	r3, r9, r3
 800e5f0:	4313      	orrs	r3, r2
 800e5f2:	9304      	str	r3, [sp, #16]
 800e5f4:	46a2      	mov	sl, r4
 800e5f6:	e7d2      	b.n	800e59e <_vfiprintf_r+0xc6>
 800e5f8:	9b03      	ldr	r3, [sp, #12]
 800e5fa:	1d19      	adds	r1, r3, #4
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	9103      	str	r1, [sp, #12]
 800e600:	2b00      	cmp	r3, #0
 800e602:	bfbb      	ittet	lt
 800e604:	425b      	neglt	r3, r3
 800e606:	f042 0202 	orrlt.w	r2, r2, #2
 800e60a:	9307      	strge	r3, [sp, #28]
 800e60c:	9307      	strlt	r3, [sp, #28]
 800e60e:	bfb8      	it	lt
 800e610:	9204      	strlt	r2, [sp, #16]
 800e612:	7823      	ldrb	r3, [r4, #0]
 800e614:	2b2e      	cmp	r3, #46	; 0x2e
 800e616:	d10c      	bne.n	800e632 <_vfiprintf_r+0x15a>
 800e618:	7863      	ldrb	r3, [r4, #1]
 800e61a:	2b2a      	cmp	r3, #42	; 0x2a
 800e61c:	d134      	bne.n	800e688 <_vfiprintf_r+0x1b0>
 800e61e:	9b03      	ldr	r3, [sp, #12]
 800e620:	1d1a      	adds	r2, r3, #4
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	9203      	str	r2, [sp, #12]
 800e626:	2b00      	cmp	r3, #0
 800e628:	bfb8      	it	lt
 800e62a:	f04f 33ff 	movlt.w	r3, #4294967295
 800e62e:	3402      	adds	r4, #2
 800e630:	9305      	str	r3, [sp, #20]
 800e632:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e708 <_vfiprintf_r+0x230>
 800e636:	7821      	ldrb	r1, [r4, #0]
 800e638:	2203      	movs	r2, #3
 800e63a:	4650      	mov	r0, sl
 800e63c:	f7f1 fde8 	bl	8000210 <memchr>
 800e640:	b138      	cbz	r0, 800e652 <_vfiprintf_r+0x17a>
 800e642:	9b04      	ldr	r3, [sp, #16]
 800e644:	eba0 000a 	sub.w	r0, r0, sl
 800e648:	2240      	movs	r2, #64	; 0x40
 800e64a:	4082      	lsls	r2, r0
 800e64c:	4313      	orrs	r3, r2
 800e64e:	3401      	adds	r4, #1
 800e650:	9304      	str	r3, [sp, #16]
 800e652:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e656:	4829      	ldr	r0, [pc, #164]	; (800e6fc <_vfiprintf_r+0x224>)
 800e658:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e65c:	2206      	movs	r2, #6
 800e65e:	f7f1 fdd7 	bl	8000210 <memchr>
 800e662:	2800      	cmp	r0, #0
 800e664:	d03f      	beq.n	800e6e6 <_vfiprintf_r+0x20e>
 800e666:	4b26      	ldr	r3, [pc, #152]	; (800e700 <_vfiprintf_r+0x228>)
 800e668:	bb1b      	cbnz	r3, 800e6b2 <_vfiprintf_r+0x1da>
 800e66a:	9b03      	ldr	r3, [sp, #12]
 800e66c:	3307      	adds	r3, #7
 800e66e:	f023 0307 	bic.w	r3, r3, #7
 800e672:	3308      	adds	r3, #8
 800e674:	9303      	str	r3, [sp, #12]
 800e676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e678:	443b      	add	r3, r7
 800e67a:	9309      	str	r3, [sp, #36]	; 0x24
 800e67c:	e768      	b.n	800e550 <_vfiprintf_r+0x78>
 800e67e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e682:	460c      	mov	r4, r1
 800e684:	2001      	movs	r0, #1
 800e686:	e7a6      	b.n	800e5d6 <_vfiprintf_r+0xfe>
 800e688:	2300      	movs	r3, #0
 800e68a:	3401      	adds	r4, #1
 800e68c:	9305      	str	r3, [sp, #20]
 800e68e:	4619      	mov	r1, r3
 800e690:	f04f 0c0a 	mov.w	ip, #10
 800e694:	4620      	mov	r0, r4
 800e696:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e69a:	3a30      	subs	r2, #48	; 0x30
 800e69c:	2a09      	cmp	r2, #9
 800e69e:	d903      	bls.n	800e6a8 <_vfiprintf_r+0x1d0>
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d0c6      	beq.n	800e632 <_vfiprintf_r+0x15a>
 800e6a4:	9105      	str	r1, [sp, #20]
 800e6a6:	e7c4      	b.n	800e632 <_vfiprintf_r+0x15a>
 800e6a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800e6ac:	4604      	mov	r4, r0
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	e7f0      	b.n	800e694 <_vfiprintf_r+0x1bc>
 800e6b2:	ab03      	add	r3, sp, #12
 800e6b4:	9300      	str	r3, [sp, #0]
 800e6b6:	462a      	mov	r2, r5
 800e6b8:	4b12      	ldr	r3, [pc, #72]	; (800e704 <_vfiprintf_r+0x22c>)
 800e6ba:	a904      	add	r1, sp, #16
 800e6bc:	4630      	mov	r0, r6
 800e6be:	f7fb fa17 	bl	8009af0 <_printf_float>
 800e6c2:	4607      	mov	r7, r0
 800e6c4:	1c78      	adds	r0, r7, #1
 800e6c6:	d1d6      	bne.n	800e676 <_vfiprintf_r+0x19e>
 800e6c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e6ca:	07d9      	lsls	r1, r3, #31
 800e6cc:	d405      	bmi.n	800e6da <_vfiprintf_r+0x202>
 800e6ce:	89ab      	ldrh	r3, [r5, #12]
 800e6d0:	059a      	lsls	r2, r3, #22
 800e6d2:	d402      	bmi.n	800e6da <_vfiprintf_r+0x202>
 800e6d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e6d6:	f7fc f9b3 	bl	800aa40 <__retarget_lock_release_recursive>
 800e6da:	89ab      	ldrh	r3, [r5, #12]
 800e6dc:	065b      	lsls	r3, r3, #25
 800e6de:	f53f af1d 	bmi.w	800e51c <_vfiprintf_r+0x44>
 800e6e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e6e4:	e71c      	b.n	800e520 <_vfiprintf_r+0x48>
 800e6e6:	ab03      	add	r3, sp, #12
 800e6e8:	9300      	str	r3, [sp, #0]
 800e6ea:	462a      	mov	r2, r5
 800e6ec:	4b05      	ldr	r3, [pc, #20]	; (800e704 <_vfiprintf_r+0x22c>)
 800e6ee:	a904      	add	r1, sp, #16
 800e6f0:	4630      	mov	r0, r6
 800e6f2:	f7fb fca1 	bl	800a038 <_printf_i>
 800e6f6:	e7e4      	b.n	800e6c2 <_vfiprintf_r+0x1ea>
 800e6f8:	0800edc1 	.word	0x0800edc1
 800e6fc:	0800edcb 	.word	0x0800edcb
 800e700:	08009af1 	.word	0x08009af1
 800e704:	0800e4b5 	.word	0x0800e4b5
 800e708:	0800edc7 	.word	0x0800edc7

0800e70c <__swbuf_r>:
 800e70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e70e:	460e      	mov	r6, r1
 800e710:	4614      	mov	r4, r2
 800e712:	4605      	mov	r5, r0
 800e714:	b118      	cbz	r0, 800e71e <__swbuf_r+0x12>
 800e716:	6a03      	ldr	r3, [r0, #32]
 800e718:	b90b      	cbnz	r3, 800e71e <__swbuf_r+0x12>
 800e71a:	f7fc f84b 	bl	800a7b4 <__sinit>
 800e71e:	69a3      	ldr	r3, [r4, #24]
 800e720:	60a3      	str	r3, [r4, #8]
 800e722:	89a3      	ldrh	r3, [r4, #12]
 800e724:	071a      	lsls	r2, r3, #28
 800e726:	d525      	bpl.n	800e774 <__swbuf_r+0x68>
 800e728:	6923      	ldr	r3, [r4, #16]
 800e72a:	b31b      	cbz	r3, 800e774 <__swbuf_r+0x68>
 800e72c:	6823      	ldr	r3, [r4, #0]
 800e72e:	6922      	ldr	r2, [r4, #16]
 800e730:	1a98      	subs	r0, r3, r2
 800e732:	6963      	ldr	r3, [r4, #20]
 800e734:	b2f6      	uxtb	r6, r6
 800e736:	4283      	cmp	r3, r0
 800e738:	4637      	mov	r7, r6
 800e73a:	dc04      	bgt.n	800e746 <__swbuf_r+0x3a>
 800e73c:	4621      	mov	r1, r4
 800e73e:	4628      	mov	r0, r5
 800e740:	f7ff f952 	bl	800d9e8 <_fflush_r>
 800e744:	b9e0      	cbnz	r0, 800e780 <__swbuf_r+0x74>
 800e746:	68a3      	ldr	r3, [r4, #8]
 800e748:	3b01      	subs	r3, #1
 800e74a:	60a3      	str	r3, [r4, #8]
 800e74c:	6823      	ldr	r3, [r4, #0]
 800e74e:	1c5a      	adds	r2, r3, #1
 800e750:	6022      	str	r2, [r4, #0]
 800e752:	701e      	strb	r6, [r3, #0]
 800e754:	6962      	ldr	r2, [r4, #20]
 800e756:	1c43      	adds	r3, r0, #1
 800e758:	429a      	cmp	r2, r3
 800e75a:	d004      	beq.n	800e766 <__swbuf_r+0x5a>
 800e75c:	89a3      	ldrh	r3, [r4, #12]
 800e75e:	07db      	lsls	r3, r3, #31
 800e760:	d506      	bpl.n	800e770 <__swbuf_r+0x64>
 800e762:	2e0a      	cmp	r6, #10
 800e764:	d104      	bne.n	800e770 <__swbuf_r+0x64>
 800e766:	4621      	mov	r1, r4
 800e768:	4628      	mov	r0, r5
 800e76a:	f7ff f93d 	bl	800d9e8 <_fflush_r>
 800e76e:	b938      	cbnz	r0, 800e780 <__swbuf_r+0x74>
 800e770:	4638      	mov	r0, r7
 800e772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e774:	4621      	mov	r1, r4
 800e776:	4628      	mov	r0, r5
 800e778:	f000 f806 	bl	800e788 <__swsetup_r>
 800e77c:	2800      	cmp	r0, #0
 800e77e:	d0d5      	beq.n	800e72c <__swbuf_r+0x20>
 800e780:	f04f 37ff 	mov.w	r7, #4294967295
 800e784:	e7f4      	b.n	800e770 <__swbuf_r+0x64>
	...

0800e788 <__swsetup_r>:
 800e788:	b538      	push	{r3, r4, r5, lr}
 800e78a:	4b2a      	ldr	r3, [pc, #168]	; (800e834 <__swsetup_r+0xac>)
 800e78c:	4605      	mov	r5, r0
 800e78e:	6818      	ldr	r0, [r3, #0]
 800e790:	460c      	mov	r4, r1
 800e792:	b118      	cbz	r0, 800e79c <__swsetup_r+0x14>
 800e794:	6a03      	ldr	r3, [r0, #32]
 800e796:	b90b      	cbnz	r3, 800e79c <__swsetup_r+0x14>
 800e798:	f7fc f80c 	bl	800a7b4 <__sinit>
 800e79c:	89a3      	ldrh	r3, [r4, #12]
 800e79e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e7a2:	0718      	lsls	r0, r3, #28
 800e7a4:	d422      	bmi.n	800e7ec <__swsetup_r+0x64>
 800e7a6:	06d9      	lsls	r1, r3, #27
 800e7a8:	d407      	bmi.n	800e7ba <__swsetup_r+0x32>
 800e7aa:	2309      	movs	r3, #9
 800e7ac:	602b      	str	r3, [r5, #0]
 800e7ae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e7b2:	81a3      	strh	r3, [r4, #12]
 800e7b4:	f04f 30ff 	mov.w	r0, #4294967295
 800e7b8:	e034      	b.n	800e824 <__swsetup_r+0x9c>
 800e7ba:	0758      	lsls	r0, r3, #29
 800e7bc:	d512      	bpl.n	800e7e4 <__swsetup_r+0x5c>
 800e7be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e7c0:	b141      	cbz	r1, 800e7d4 <__swsetup_r+0x4c>
 800e7c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e7c6:	4299      	cmp	r1, r3
 800e7c8:	d002      	beq.n	800e7d0 <__swsetup_r+0x48>
 800e7ca:	4628      	mov	r0, r5
 800e7cc:	f7fc ffca 	bl	800b764 <_free_r>
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	6363      	str	r3, [r4, #52]	; 0x34
 800e7d4:	89a3      	ldrh	r3, [r4, #12]
 800e7d6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e7da:	81a3      	strh	r3, [r4, #12]
 800e7dc:	2300      	movs	r3, #0
 800e7de:	6063      	str	r3, [r4, #4]
 800e7e0:	6923      	ldr	r3, [r4, #16]
 800e7e2:	6023      	str	r3, [r4, #0]
 800e7e4:	89a3      	ldrh	r3, [r4, #12]
 800e7e6:	f043 0308 	orr.w	r3, r3, #8
 800e7ea:	81a3      	strh	r3, [r4, #12]
 800e7ec:	6923      	ldr	r3, [r4, #16]
 800e7ee:	b94b      	cbnz	r3, 800e804 <__swsetup_r+0x7c>
 800e7f0:	89a3      	ldrh	r3, [r4, #12]
 800e7f2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e7f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e7fa:	d003      	beq.n	800e804 <__swsetup_r+0x7c>
 800e7fc:	4621      	mov	r1, r4
 800e7fe:	4628      	mov	r0, r5
 800e800:	f000 f884 	bl	800e90c <__smakebuf_r>
 800e804:	89a0      	ldrh	r0, [r4, #12]
 800e806:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e80a:	f010 0301 	ands.w	r3, r0, #1
 800e80e:	d00a      	beq.n	800e826 <__swsetup_r+0x9e>
 800e810:	2300      	movs	r3, #0
 800e812:	60a3      	str	r3, [r4, #8]
 800e814:	6963      	ldr	r3, [r4, #20]
 800e816:	425b      	negs	r3, r3
 800e818:	61a3      	str	r3, [r4, #24]
 800e81a:	6923      	ldr	r3, [r4, #16]
 800e81c:	b943      	cbnz	r3, 800e830 <__swsetup_r+0xa8>
 800e81e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e822:	d1c4      	bne.n	800e7ae <__swsetup_r+0x26>
 800e824:	bd38      	pop	{r3, r4, r5, pc}
 800e826:	0781      	lsls	r1, r0, #30
 800e828:	bf58      	it	pl
 800e82a:	6963      	ldrpl	r3, [r4, #20]
 800e82c:	60a3      	str	r3, [r4, #8]
 800e82e:	e7f4      	b.n	800e81a <__swsetup_r+0x92>
 800e830:	2000      	movs	r0, #0
 800e832:	e7f7      	b.n	800e824 <__swsetup_r+0x9c>
 800e834:	20000064 	.word	0x20000064

0800e838 <_raise_r>:
 800e838:	291f      	cmp	r1, #31
 800e83a:	b538      	push	{r3, r4, r5, lr}
 800e83c:	4604      	mov	r4, r0
 800e83e:	460d      	mov	r5, r1
 800e840:	d904      	bls.n	800e84c <_raise_r+0x14>
 800e842:	2316      	movs	r3, #22
 800e844:	6003      	str	r3, [r0, #0]
 800e846:	f04f 30ff 	mov.w	r0, #4294967295
 800e84a:	bd38      	pop	{r3, r4, r5, pc}
 800e84c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e84e:	b112      	cbz	r2, 800e856 <_raise_r+0x1e>
 800e850:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e854:	b94b      	cbnz	r3, 800e86a <_raise_r+0x32>
 800e856:	4620      	mov	r0, r4
 800e858:	f000 f830 	bl	800e8bc <_getpid_r>
 800e85c:	462a      	mov	r2, r5
 800e85e:	4601      	mov	r1, r0
 800e860:	4620      	mov	r0, r4
 800e862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e866:	f000 b817 	b.w	800e898 <_kill_r>
 800e86a:	2b01      	cmp	r3, #1
 800e86c:	d00a      	beq.n	800e884 <_raise_r+0x4c>
 800e86e:	1c59      	adds	r1, r3, #1
 800e870:	d103      	bne.n	800e87a <_raise_r+0x42>
 800e872:	2316      	movs	r3, #22
 800e874:	6003      	str	r3, [r0, #0]
 800e876:	2001      	movs	r0, #1
 800e878:	e7e7      	b.n	800e84a <_raise_r+0x12>
 800e87a:	2400      	movs	r4, #0
 800e87c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e880:	4628      	mov	r0, r5
 800e882:	4798      	blx	r3
 800e884:	2000      	movs	r0, #0
 800e886:	e7e0      	b.n	800e84a <_raise_r+0x12>

0800e888 <raise>:
 800e888:	4b02      	ldr	r3, [pc, #8]	; (800e894 <raise+0xc>)
 800e88a:	4601      	mov	r1, r0
 800e88c:	6818      	ldr	r0, [r3, #0]
 800e88e:	f7ff bfd3 	b.w	800e838 <_raise_r>
 800e892:	bf00      	nop
 800e894:	20000064 	.word	0x20000064

0800e898 <_kill_r>:
 800e898:	b538      	push	{r3, r4, r5, lr}
 800e89a:	4d07      	ldr	r5, [pc, #28]	; (800e8b8 <_kill_r+0x20>)
 800e89c:	2300      	movs	r3, #0
 800e89e:	4604      	mov	r4, r0
 800e8a0:	4608      	mov	r0, r1
 800e8a2:	4611      	mov	r1, r2
 800e8a4:	602b      	str	r3, [r5, #0]
 800e8a6:	f7f4 f8c3 	bl	8002a30 <_kill>
 800e8aa:	1c43      	adds	r3, r0, #1
 800e8ac:	d102      	bne.n	800e8b4 <_kill_r+0x1c>
 800e8ae:	682b      	ldr	r3, [r5, #0]
 800e8b0:	b103      	cbz	r3, 800e8b4 <_kill_r+0x1c>
 800e8b2:	6023      	str	r3, [r4, #0]
 800e8b4:	bd38      	pop	{r3, r4, r5, pc}
 800e8b6:	bf00      	nop
 800e8b8:	20000728 	.word	0x20000728

0800e8bc <_getpid_r>:
 800e8bc:	f7f4 b8b0 	b.w	8002a20 <_getpid>

0800e8c0 <__swhatbuf_r>:
 800e8c0:	b570      	push	{r4, r5, r6, lr}
 800e8c2:	460c      	mov	r4, r1
 800e8c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8c8:	2900      	cmp	r1, #0
 800e8ca:	b096      	sub	sp, #88	; 0x58
 800e8cc:	4615      	mov	r5, r2
 800e8ce:	461e      	mov	r6, r3
 800e8d0:	da0d      	bge.n	800e8ee <__swhatbuf_r+0x2e>
 800e8d2:	89a3      	ldrh	r3, [r4, #12]
 800e8d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e8d8:	f04f 0100 	mov.w	r1, #0
 800e8dc:	bf0c      	ite	eq
 800e8de:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e8e2:	2340      	movne	r3, #64	; 0x40
 800e8e4:	2000      	movs	r0, #0
 800e8e6:	6031      	str	r1, [r6, #0]
 800e8e8:	602b      	str	r3, [r5, #0]
 800e8ea:	b016      	add	sp, #88	; 0x58
 800e8ec:	bd70      	pop	{r4, r5, r6, pc}
 800e8ee:	466a      	mov	r2, sp
 800e8f0:	f000 f848 	bl	800e984 <_fstat_r>
 800e8f4:	2800      	cmp	r0, #0
 800e8f6:	dbec      	blt.n	800e8d2 <__swhatbuf_r+0x12>
 800e8f8:	9901      	ldr	r1, [sp, #4]
 800e8fa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e8fe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e902:	4259      	negs	r1, r3
 800e904:	4159      	adcs	r1, r3
 800e906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e90a:	e7eb      	b.n	800e8e4 <__swhatbuf_r+0x24>

0800e90c <__smakebuf_r>:
 800e90c:	898b      	ldrh	r3, [r1, #12]
 800e90e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e910:	079d      	lsls	r5, r3, #30
 800e912:	4606      	mov	r6, r0
 800e914:	460c      	mov	r4, r1
 800e916:	d507      	bpl.n	800e928 <__smakebuf_r+0x1c>
 800e918:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e91c:	6023      	str	r3, [r4, #0]
 800e91e:	6123      	str	r3, [r4, #16]
 800e920:	2301      	movs	r3, #1
 800e922:	6163      	str	r3, [r4, #20]
 800e924:	b002      	add	sp, #8
 800e926:	bd70      	pop	{r4, r5, r6, pc}
 800e928:	ab01      	add	r3, sp, #4
 800e92a:	466a      	mov	r2, sp
 800e92c:	f7ff ffc8 	bl	800e8c0 <__swhatbuf_r>
 800e930:	9900      	ldr	r1, [sp, #0]
 800e932:	4605      	mov	r5, r0
 800e934:	4630      	mov	r0, r6
 800e936:	f7fc ff89 	bl	800b84c <_malloc_r>
 800e93a:	b948      	cbnz	r0, 800e950 <__smakebuf_r+0x44>
 800e93c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e940:	059a      	lsls	r2, r3, #22
 800e942:	d4ef      	bmi.n	800e924 <__smakebuf_r+0x18>
 800e944:	f023 0303 	bic.w	r3, r3, #3
 800e948:	f043 0302 	orr.w	r3, r3, #2
 800e94c:	81a3      	strh	r3, [r4, #12]
 800e94e:	e7e3      	b.n	800e918 <__smakebuf_r+0xc>
 800e950:	89a3      	ldrh	r3, [r4, #12]
 800e952:	6020      	str	r0, [r4, #0]
 800e954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e958:	81a3      	strh	r3, [r4, #12]
 800e95a:	9b00      	ldr	r3, [sp, #0]
 800e95c:	6163      	str	r3, [r4, #20]
 800e95e:	9b01      	ldr	r3, [sp, #4]
 800e960:	6120      	str	r0, [r4, #16]
 800e962:	b15b      	cbz	r3, 800e97c <__smakebuf_r+0x70>
 800e964:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e968:	4630      	mov	r0, r6
 800e96a:	f000 f81d 	bl	800e9a8 <_isatty_r>
 800e96e:	b128      	cbz	r0, 800e97c <__smakebuf_r+0x70>
 800e970:	89a3      	ldrh	r3, [r4, #12]
 800e972:	f023 0303 	bic.w	r3, r3, #3
 800e976:	f043 0301 	orr.w	r3, r3, #1
 800e97a:	81a3      	strh	r3, [r4, #12]
 800e97c:	89a3      	ldrh	r3, [r4, #12]
 800e97e:	431d      	orrs	r5, r3
 800e980:	81a5      	strh	r5, [r4, #12]
 800e982:	e7cf      	b.n	800e924 <__smakebuf_r+0x18>

0800e984 <_fstat_r>:
 800e984:	b538      	push	{r3, r4, r5, lr}
 800e986:	4d07      	ldr	r5, [pc, #28]	; (800e9a4 <_fstat_r+0x20>)
 800e988:	2300      	movs	r3, #0
 800e98a:	4604      	mov	r4, r0
 800e98c:	4608      	mov	r0, r1
 800e98e:	4611      	mov	r1, r2
 800e990:	602b      	str	r3, [r5, #0]
 800e992:	f7f4 f8ac 	bl	8002aee <_fstat>
 800e996:	1c43      	adds	r3, r0, #1
 800e998:	d102      	bne.n	800e9a0 <_fstat_r+0x1c>
 800e99a:	682b      	ldr	r3, [r5, #0]
 800e99c:	b103      	cbz	r3, 800e9a0 <_fstat_r+0x1c>
 800e99e:	6023      	str	r3, [r4, #0]
 800e9a0:	bd38      	pop	{r3, r4, r5, pc}
 800e9a2:	bf00      	nop
 800e9a4:	20000728 	.word	0x20000728

0800e9a8 <_isatty_r>:
 800e9a8:	b538      	push	{r3, r4, r5, lr}
 800e9aa:	4d06      	ldr	r5, [pc, #24]	; (800e9c4 <_isatty_r+0x1c>)
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	4604      	mov	r4, r0
 800e9b0:	4608      	mov	r0, r1
 800e9b2:	602b      	str	r3, [r5, #0]
 800e9b4:	f7f4 f8ab 	bl	8002b0e <_isatty>
 800e9b8:	1c43      	adds	r3, r0, #1
 800e9ba:	d102      	bne.n	800e9c2 <_isatty_r+0x1a>
 800e9bc:	682b      	ldr	r3, [r5, #0]
 800e9be:	b103      	cbz	r3, 800e9c2 <_isatty_r+0x1a>
 800e9c0:	6023      	str	r3, [r4, #0]
 800e9c2:	bd38      	pop	{r3, r4, r5, pc}
 800e9c4:	20000728 	.word	0x20000728

0800e9c8 <_init>:
 800e9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9ca:	bf00      	nop
 800e9cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9ce:	bc08      	pop	{r3}
 800e9d0:	469e      	mov	lr, r3
 800e9d2:	4770      	bx	lr

0800e9d4 <_fini>:
 800e9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9d6:	bf00      	nop
 800e9d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9da:	bc08      	pop	{r3}
 800e9dc:	469e      	mov	lr, r3
 800e9de:	4770      	bx	lr
