
STM32_PROJEKT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db60  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  0800dd30  0800dd30  0001dd30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e1c4  0800e1c4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e1c4  0800e1c4  0001e1c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e1cc  0800e1cc  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e1cc  0800e1cc  0001e1cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e1d0  0800e1d0  0001e1d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800e1d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000041c  200001d4  0800e3a8  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f0  0800e3a8  000205f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      000000bc  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   000174cc  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003502  00000000  00000000  0003778c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001290  00000000  00000000  0003ac90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e57  00000000  00000000  0003bf20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000288bd  00000000  00000000  0003cd77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000197c2  00000000  00000000  00065634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f56d9  00000000  00000000  0007edf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006400  00000000  00000000  001744d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0017a8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00000010  00000000  00000000  0017a934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800dd18 	.word	0x0800dd18

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	0800dd18 	.word	0x0800dd18

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9f1 	b.w	80010cc <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9a6 	b.w	80010cc <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9e08      	ldr	r6, [sp, #32]
 8000e0a:	460d      	mov	r5, r1
 8000e0c:	4604      	mov	r4, r0
 8000e0e:	460f      	mov	r7, r1
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d14a      	bne.n	8000eaa <__udivmoddi4+0xa6>
 8000e14:	428a      	cmp	r2, r1
 8000e16:	4694      	mov	ip, r2
 8000e18:	d965      	bls.n	8000ee6 <__udivmoddi4+0xe2>
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	b143      	cbz	r3, 8000e32 <__udivmoddi4+0x2e>
 8000e20:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e24:	f1c3 0220 	rsb	r2, r3, #32
 8000e28:	409f      	lsls	r7, r3
 8000e2a:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2e:	4317      	orrs	r7, r2
 8000e30:	409c      	lsls	r4, r3
 8000e32:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e36:	fa1f f58c 	uxth.w	r5, ip
 8000e3a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e3e:	0c22      	lsrs	r2, r4, #16
 8000e40:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e44:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e48:	fb01 f005 	mul.w	r0, r1, r5
 8000e4c:	4290      	cmp	r0, r2
 8000e4e:	d90a      	bls.n	8000e66 <__udivmoddi4+0x62>
 8000e50:	eb1c 0202 	adds.w	r2, ip, r2
 8000e54:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e58:	f080 811c 	bcs.w	8001094 <__udivmoddi4+0x290>
 8000e5c:	4290      	cmp	r0, r2
 8000e5e:	f240 8119 	bls.w	8001094 <__udivmoddi4+0x290>
 8000e62:	3902      	subs	r1, #2
 8000e64:	4462      	add	r2, ip
 8000e66:	1a12      	subs	r2, r2, r0
 8000e68:	b2a4      	uxth	r4, r4
 8000e6a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e6e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e72:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e76:	fb00 f505 	mul.w	r5, r0, r5
 8000e7a:	42a5      	cmp	r5, r4
 8000e7c:	d90a      	bls.n	8000e94 <__udivmoddi4+0x90>
 8000e7e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e82:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e86:	f080 8107 	bcs.w	8001098 <__udivmoddi4+0x294>
 8000e8a:	42a5      	cmp	r5, r4
 8000e8c:	f240 8104 	bls.w	8001098 <__udivmoddi4+0x294>
 8000e90:	4464      	add	r4, ip
 8000e92:	3802      	subs	r0, #2
 8000e94:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e98:	1b64      	subs	r4, r4, r5
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	b11e      	cbz	r6, 8000ea6 <__udivmoddi4+0xa2>
 8000e9e:	40dc      	lsrs	r4, r3
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0xbc>
 8000eae:	2e00      	cmp	r6, #0
 8000eb0:	f000 80ed 	beq.w	800108e <__udivmoddi4+0x28a>
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	e9c6 0500 	strd	r0, r5, [r6]
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec0:	fab3 f183 	clz	r1, r3
 8000ec4:	2900      	cmp	r1, #0
 8000ec6:	d149      	bne.n	8000f5c <__udivmoddi4+0x158>
 8000ec8:	42ab      	cmp	r3, r5
 8000eca:	d302      	bcc.n	8000ed2 <__udivmoddi4+0xce>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	f200 80f8 	bhi.w	80010c2 <__udivmoddi4+0x2be>
 8000ed2:	1a84      	subs	r4, r0, r2
 8000ed4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ed8:	2001      	movs	r0, #1
 8000eda:	4617      	mov	r7, r2
 8000edc:	2e00      	cmp	r6, #0
 8000ede:	d0e2      	beq.n	8000ea6 <__udivmoddi4+0xa2>
 8000ee0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ee4:	e7df      	b.n	8000ea6 <__udivmoddi4+0xa2>
 8000ee6:	b902      	cbnz	r2, 8000eea <__udivmoddi4+0xe6>
 8000ee8:	deff      	udf	#255	; 0xff
 8000eea:	fab2 f382 	clz	r3, r2
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f040 8090 	bne.w	8001014 <__udivmoddi4+0x210>
 8000ef4:	1a8a      	subs	r2, r1, r2
 8000ef6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000efa:	fa1f fe8c 	uxth.w	lr, ip
 8000efe:	2101      	movs	r1, #1
 8000f00:	fbb2 f5f7 	udiv	r5, r2, r7
 8000f04:	fb07 2015 	mls	r0, r7, r5, r2
 8000f08:	0c22      	lsrs	r2, r4, #16
 8000f0a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f0e:	fb0e f005 	mul.w	r0, lr, r5
 8000f12:	4290      	cmp	r0, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x124>
 8000f16:	eb1c 0202 	adds.w	r2, ip, r2
 8000f1a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f1e:	d202      	bcs.n	8000f26 <__udivmoddi4+0x122>
 8000f20:	4290      	cmp	r0, r2
 8000f22:	f200 80cb 	bhi.w	80010bc <__udivmoddi4+0x2b8>
 8000f26:	4645      	mov	r5, r8
 8000f28:	1a12      	subs	r2, r2, r0
 8000f2a:	b2a4      	uxth	r4, r4
 8000f2c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f30:	fb07 2210 	mls	r2, r7, r0, r2
 8000f34:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f38:	fb0e fe00 	mul.w	lr, lr, r0
 8000f3c:	45a6      	cmp	lr, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x14e>
 8000f40:	eb1c 0404 	adds.w	r4, ip, r4
 8000f44:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f48:	d202      	bcs.n	8000f50 <__udivmoddi4+0x14c>
 8000f4a:	45a6      	cmp	lr, r4
 8000f4c:	f200 80bb 	bhi.w	80010c6 <__udivmoddi4+0x2c2>
 8000f50:	4610      	mov	r0, r2
 8000f52:	eba4 040e 	sub.w	r4, r4, lr
 8000f56:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f5a:	e79f      	b.n	8000e9c <__udivmoddi4+0x98>
 8000f5c:	f1c1 0720 	rsb	r7, r1, #32
 8000f60:	408b      	lsls	r3, r1
 8000f62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f6a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f6e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f72:	40fd      	lsrs	r5, r7
 8000f74:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f78:	4323      	orrs	r3, r4
 8000f7a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f7e:	fa1f fe8c 	uxth.w	lr, ip
 8000f82:	fb09 5518 	mls	r5, r9, r8, r5
 8000f86:	0c1c      	lsrs	r4, r3, #16
 8000f88:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f8c:	fb08 f50e 	mul.w	r5, r8, lr
 8000f90:	42a5      	cmp	r5, r4
 8000f92:	fa02 f201 	lsl.w	r2, r2, r1
 8000f96:	fa00 f001 	lsl.w	r0, r0, r1
 8000f9a:	d90b      	bls.n	8000fb4 <__udivmoddi4+0x1b0>
 8000f9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000fa0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fa4:	f080 8088 	bcs.w	80010b8 <__udivmoddi4+0x2b4>
 8000fa8:	42a5      	cmp	r5, r4
 8000faa:	f240 8085 	bls.w	80010b8 <__udivmoddi4+0x2b4>
 8000fae:	f1a8 0802 	sub.w	r8, r8, #2
 8000fb2:	4464      	add	r4, ip
 8000fb4:	1b64      	subs	r4, r4, r5
 8000fb6:	b29d      	uxth	r5, r3
 8000fb8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fbc:	fb09 4413 	mls	r4, r9, r3, r4
 8000fc0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000fc4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000fc8:	45a6      	cmp	lr, r4
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x1da>
 8000fcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fd0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000fd4:	d26c      	bcs.n	80010b0 <__udivmoddi4+0x2ac>
 8000fd6:	45a6      	cmp	lr, r4
 8000fd8:	d96a      	bls.n	80010b0 <__udivmoddi4+0x2ac>
 8000fda:	3b02      	subs	r3, #2
 8000fdc:	4464      	add	r4, ip
 8000fde:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fe2:	fba3 9502 	umull	r9, r5, r3, r2
 8000fe6:	eba4 040e 	sub.w	r4, r4, lr
 8000fea:	42ac      	cmp	r4, r5
 8000fec:	46c8      	mov	r8, r9
 8000fee:	46ae      	mov	lr, r5
 8000ff0:	d356      	bcc.n	80010a0 <__udivmoddi4+0x29c>
 8000ff2:	d053      	beq.n	800109c <__udivmoddi4+0x298>
 8000ff4:	b156      	cbz	r6, 800100c <__udivmoddi4+0x208>
 8000ff6:	ebb0 0208 	subs.w	r2, r0, r8
 8000ffa:	eb64 040e 	sbc.w	r4, r4, lr
 8000ffe:	fa04 f707 	lsl.w	r7, r4, r7
 8001002:	40ca      	lsrs	r2, r1
 8001004:	40cc      	lsrs	r4, r1
 8001006:	4317      	orrs	r7, r2
 8001008:	e9c6 7400 	strd	r7, r4, [r6]
 800100c:	4618      	mov	r0, r3
 800100e:	2100      	movs	r1, #0
 8001010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001014:	f1c3 0120 	rsb	r1, r3, #32
 8001018:	fa02 fc03 	lsl.w	ip, r2, r3
 800101c:	fa20 f201 	lsr.w	r2, r0, r1
 8001020:	fa25 f101 	lsr.w	r1, r5, r1
 8001024:	409d      	lsls	r5, r3
 8001026:	432a      	orrs	r2, r5
 8001028:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800102c:	fa1f fe8c 	uxth.w	lr, ip
 8001030:	fbb1 f0f7 	udiv	r0, r1, r7
 8001034:	fb07 1510 	mls	r5, r7, r0, r1
 8001038:	0c11      	lsrs	r1, r2, #16
 800103a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800103e:	fb00 f50e 	mul.w	r5, r0, lr
 8001042:	428d      	cmp	r5, r1
 8001044:	fa04 f403 	lsl.w	r4, r4, r3
 8001048:	d908      	bls.n	800105c <__udivmoddi4+0x258>
 800104a:	eb1c 0101 	adds.w	r1, ip, r1
 800104e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001052:	d22f      	bcs.n	80010b4 <__udivmoddi4+0x2b0>
 8001054:	428d      	cmp	r5, r1
 8001056:	d92d      	bls.n	80010b4 <__udivmoddi4+0x2b0>
 8001058:	3802      	subs	r0, #2
 800105a:	4461      	add	r1, ip
 800105c:	1b49      	subs	r1, r1, r5
 800105e:	b292      	uxth	r2, r2
 8001060:	fbb1 f5f7 	udiv	r5, r1, r7
 8001064:	fb07 1115 	mls	r1, r7, r5, r1
 8001068:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800106c:	fb05 f10e 	mul.w	r1, r5, lr
 8001070:	4291      	cmp	r1, r2
 8001072:	d908      	bls.n	8001086 <__udivmoddi4+0x282>
 8001074:	eb1c 0202 	adds.w	r2, ip, r2
 8001078:	f105 38ff 	add.w	r8, r5, #4294967295
 800107c:	d216      	bcs.n	80010ac <__udivmoddi4+0x2a8>
 800107e:	4291      	cmp	r1, r2
 8001080:	d914      	bls.n	80010ac <__udivmoddi4+0x2a8>
 8001082:	3d02      	subs	r5, #2
 8001084:	4462      	add	r2, ip
 8001086:	1a52      	subs	r2, r2, r1
 8001088:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800108c:	e738      	b.n	8000f00 <__udivmoddi4+0xfc>
 800108e:	4631      	mov	r1, r6
 8001090:	4630      	mov	r0, r6
 8001092:	e708      	b.n	8000ea6 <__udivmoddi4+0xa2>
 8001094:	4639      	mov	r1, r7
 8001096:	e6e6      	b.n	8000e66 <__udivmoddi4+0x62>
 8001098:	4610      	mov	r0, r2
 800109a:	e6fb      	b.n	8000e94 <__udivmoddi4+0x90>
 800109c:	4548      	cmp	r0, r9
 800109e:	d2a9      	bcs.n	8000ff4 <__udivmoddi4+0x1f0>
 80010a0:	ebb9 0802 	subs.w	r8, r9, r2
 80010a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80010a8:	3b01      	subs	r3, #1
 80010aa:	e7a3      	b.n	8000ff4 <__udivmoddi4+0x1f0>
 80010ac:	4645      	mov	r5, r8
 80010ae:	e7ea      	b.n	8001086 <__udivmoddi4+0x282>
 80010b0:	462b      	mov	r3, r5
 80010b2:	e794      	b.n	8000fde <__udivmoddi4+0x1da>
 80010b4:	4640      	mov	r0, r8
 80010b6:	e7d1      	b.n	800105c <__udivmoddi4+0x258>
 80010b8:	46d0      	mov	r8, sl
 80010ba:	e77b      	b.n	8000fb4 <__udivmoddi4+0x1b0>
 80010bc:	3d02      	subs	r5, #2
 80010be:	4462      	add	r2, ip
 80010c0:	e732      	b.n	8000f28 <__udivmoddi4+0x124>
 80010c2:	4608      	mov	r0, r1
 80010c4:	e70a      	b.n	8000edc <__udivmoddi4+0xd8>
 80010c6:	4464      	add	r4, ip
 80010c8:	3802      	subs	r0, #2
 80010ca:	e742      	b.n	8000f52 <__udivmoddi4+0x14e>

080010cc <__aeabi_idiv0>:
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop

080010d0 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08c      	sub	sp, #48	; 0x30
 80010d4:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
 80010da:	9302      	str	r3, [sp, #8]
 80010dc:	2319      	movs	r3, #25
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	463b      	mov	r3, r7
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2301      	movs	r3, #1
 80010e6:	2288      	movs	r2, #136	; 0x88
 80010e8:	21ec      	movs	r1, #236	; 0xec
 80010ea:	4857      	ldr	r0, [pc, #348]	; (8001248 <TrimRead+0x178>)
 80010ec:	f002 fea4 	bl	8003e38 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 80010f0:	463b      	mov	r3, r7
 80010f2:	3319      	adds	r3, #25
 80010f4:	f04f 32ff 	mov.w	r2, #4294967295
 80010f8:	9202      	str	r2, [sp, #8]
 80010fa:	2207      	movs	r2, #7
 80010fc:	9201      	str	r2, [sp, #4]
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	2301      	movs	r3, #1
 8001102:	22e1      	movs	r2, #225	; 0xe1
 8001104:	21ec      	movs	r1, #236	; 0xec
 8001106:	4850      	ldr	r0, [pc, #320]	; (8001248 <TrimRead+0x178>)
 8001108:	f002 fe96 	bl	8003e38 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 800110c:	787b      	ldrb	r3, [r7, #1]
 800110e:	021b      	lsls	r3, r3, #8
 8001110:	b21a      	sxth	r2, r3
 8001112:	783b      	ldrb	r3, [r7, #0]
 8001114:	b21b      	sxth	r3, r3
 8001116:	4313      	orrs	r3, r2
 8001118:	b21b      	sxth	r3, r3
 800111a:	b29a      	uxth	r2, r3
 800111c:	4b4b      	ldr	r3, [pc, #300]	; (800124c <TrimRead+0x17c>)
 800111e:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8001120:	78fb      	ldrb	r3, [r7, #3]
 8001122:	021b      	lsls	r3, r3, #8
 8001124:	b21a      	sxth	r2, r3
 8001126:	78bb      	ldrb	r3, [r7, #2]
 8001128:	b21b      	sxth	r3, r3
 800112a:	4313      	orrs	r3, r2
 800112c:	b21a      	sxth	r2, r3
 800112e:	4b48      	ldr	r3, [pc, #288]	; (8001250 <TrimRead+0x180>)
 8001130:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8001132:	797b      	ldrb	r3, [r7, #5]
 8001134:	021b      	lsls	r3, r3, #8
 8001136:	b21a      	sxth	r2, r3
 8001138:	793b      	ldrb	r3, [r7, #4]
 800113a:	b21b      	sxth	r3, r3
 800113c:	4313      	orrs	r3, r2
 800113e:	b21a      	sxth	r2, r3
 8001140:	4b44      	ldr	r3, [pc, #272]	; (8001254 <TrimRead+0x184>)
 8001142:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	021b      	lsls	r3, r3, #8
 8001148:	b21a      	sxth	r2, r3
 800114a:	797b      	ldrb	r3, [r7, #5]
 800114c:	b21b      	sxth	r3, r3
 800114e:	4313      	orrs	r3, r2
 8001150:	b21b      	sxth	r3, r3
 8001152:	b29a      	uxth	r2, r3
 8001154:	4b40      	ldr	r3, [pc, #256]	; (8001258 <TrimRead+0x188>)
 8001156:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001158:	7a7b      	ldrb	r3, [r7, #9]
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	b21a      	sxth	r2, r3
 800115e:	79bb      	ldrb	r3, [r7, #6]
 8001160:	b21b      	sxth	r3, r3
 8001162:	4313      	orrs	r3, r2
 8001164:	b21a      	sxth	r2, r3
 8001166:	4b3d      	ldr	r3, [pc, #244]	; (800125c <TrimRead+0x18c>)
 8001168:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 800116a:	7afb      	ldrb	r3, [r7, #11]
 800116c:	021b      	lsls	r3, r3, #8
 800116e:	b21a      	sxth	r2, r3
 8001170:	7abb      	ldrb	r3, [r7, #10]
 8001172:	b21b      	sxth	r3, r3
 8001174:	4313      	orrs	r3, r2
 8001176:	b21a      	sxth	r2, r3
 8001178:	4b39      	ldr	r3, [pc, #228]	; (8001260 <TrimRead+0x190>)
 800117a:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 800117c:	7b7b      	ldrb	r3, [r7, #13]
 800117e:	021b      	lsls	r3, r3, #8
 8001180:	b21a      	sxth	r2, r3
 8001182:	7b3b      	ldrb	r3, [r7, #12]
 8001184:	b21b      	sxth	r3, r3
 8001186:	4313      	orrs	r3, r2
 8001188:	b21a      	sxth	r2, r3
 800118a:	4b36      	ldr	r3, [pc, #216]	; (8001264 <TrimRead+0x194>)
 800118c:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	021b      	lsls	r3, r3, #8
 8001192:	b21a      	sxth	r2, r3
 8001194:	7bbb      	ldrb	r3, [r7, #14]
 8001196:	b21b      	sxth	r3, r3
 8001198:	4313      	orrs	r3, r2
 800119a:	b21a      	sxth	r2, r3
 800119c:	4b32      	ldr	r3, [pc, #200]	; (8001268 <TrimRead+0x198>)
 800119e:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 80011a0:	7c7b      	ldrb	r3, [r7, #17]
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	b21a      	sxth	r2, r3
 80011a6:	7c3b      	ldrb	r3, [r7, #16]
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b21a      	sxth	r2, r3
 80011ae:	4b2f      	ldr	r3, [pc, #188]	; (800126c <TrimRead+0x19c>)
 80011b0:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80011b2:	7cfb      	ldrb	r3, [r7, #19]
 80011b4:	021b      	lsls	r3, r3, #8
 80011b6:	b21a      	sxth	r2, r3
 80011b8:	7cbb      	ldrb	r3, [r7, #18]
 80011ba:	b21b      	sxth	r3, r3
 80011bc:	4313      	orrs	r3, r2
 80011be:	b21a      	sxth	r2, r3
 80011c0:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <TrimRead+0x1a0>)
 80011c2:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 80011c4:	7d7b      	ldrb	r3, [r7, #21]
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	b21a      	sxth	r2, r3
 80011ca:	7d3b      	ldrb	r3, [r7, #20]
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	4313      	orrs	r3, r2
 80011d0:	b21a      	sxth	r2, r3
 80011d2:	4b28      	ldr	r3, [pc, #160]	; (8001274 <TrimRead+0x1a4>)
 80011d4:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80011d6:	7dfb      	ldrb	r3, [r7, #23]
 80011d8:	021b      	lsls	r3, r3, #8
 80011da:	b21a      	sxth	r2, r3
 80011dc:	7dbb      	ldrb	r3, [r7, #22]
 80011de:	b21b      	sxth	r3, r3
 80011e0:	4313      	orrs	r3, r2
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	4b24      	ldr	r3, [pc, #144]	; (8001278 <TrimRead+0x1a8>)
 80011e6:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 80011e8:	7e3b      	ldrb	r3, [r7, #24]
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	4b23      	ldr	r3, [pc, #140]	; (800127c <TrimRead+0x1ac>)
 80011ee:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 80011f0:	7ebb      	ldrb	r3, [r7, #26]
 80011f2:	021b      	lsls	r3, r3, #8
 80011f4:	b21a      	sxth	r2, r3
 80011f6:	7e7b      	ldrb	r3, [r7, #25]
 80011f8:	b21b      	sxth	r3, r3
 80011fa:	4313      	orrs	r3, r2
 80011fc:	b21a      	sxth	r2, r3
 80011fe:	4b20      	ldr	r3, [pc, #128]	; (8001280 <TrimRead+0x1b0>)
 8001200:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 8001202:	7efb      	ldrb	r3, [r7, #27]
 8001204:	b29a      	uxth	r2, r3
 8001206:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <TrimRead+0x1b4>)
 8001208:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 800120a:	7f3b      	ldrb	r3, [r7, #28]
 800120c:	011b      	lsls	r3, r3, #4
 800120e:	b21a      	sxth	r2, r3
 8001210:	7f7b      	ldrb	r3, [r7, #29]
 8001212:	b21b      	sxth	r3, r3
 8001214:	f003 030f 	and.w	r3, r3, #15
 8001218:	b21b      	sxth	r3, r3
 800121a:	4313      	orrs	r3, r2
 800121c:	b21a      	sxth	r2, r3
 800121e:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <TrimRead+0x1b8>)
 8001220:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 8001222:	7fbb      	ldrb	r3, [r7, #30]
 8001224:	011b      	lsls	r3, r3, #4
 8001226:	b21a      	sxth	r2, r3
 8001228:	7f7b      	ldrb	r3, [r7, #29]
 800122a:	091b      	lsrs	r3, r3, #4
 800122c:	b2db      	uxtb	r3, r3
 800122e:	b21b      	sxth	r3, r3
 8001230:	4313      	orrs	r3, r2
 8001232:	b21a      	sxth	r2, r3
 8001234:	4b15      	ldr	r3, [pc, #84]	; (800128c <TrimRead+0x1bc>)
 8001236:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8001238:	7ffb      	ldrb	r3, [r7, #31]
 800123a:	b21a      	sxth	r2, r3
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <TrimRead+0x1c0>)
 800123e:	801a      	strh	r2, [r3, #0]
}
 8001240:	bf00      	nop
 8001242:	3720      	adds	r7, #32
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000228 	.word	0x20000228
 800124c:	20000200 	.word	0x20000200
 8001250:	20000208 	.word	0x20000208
 8001254:	2000020a 	.word	0x2000020a
 8001258:	20000202 	.word	0x20000202
 800125c:	2000020c 	.word	0x2000020c
 8001260:	2000020e 	.word	0x2000020e
 8001264:	20000210 	.word	0x20000210
 8001268:	20000212 	.word	0x20000212
 800126c:	20000214 	.word	0x20000214
 8001270:	20000216 	.word	0x20000216
 8001274:	20000218 	.word	0x20000218
 8001278:	2000021a 	.word	0x2000021a
 800127c:	20000204 	.word	0x20000204
 8001280:	2000021c 	.word	0x2000021c
 8001284:	20000206 	.word	0x20000206
 8001288:	2000021e 	.word	0x2000021e
 800128c:	20000220 	.word	0x20000220
 8001290:	20000222 	.word	0x20000222

08001294 <BMP280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BMP280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8001294:	b590      	push	{r4, r7, lr}
 8001296:	b089      	sub	sp, #36	; 0x24
 8001298:	af04      	add	r7, sp, #16
 800129a:	4604      	mov	r4, r0
 800129c:	4608      	mov	r0, r1
 800129e:	4611      	mov	r1, r2
 80012a0:	461a      	mov	r2, r3
 80012a2:	4623      	mov	r3, r4
 80012a4:	71fb      	strb	r3, [r7, #7]
 80012a6:	4603      	mov	r3, r0
 80012a8:	71bb      	strb	r3, [r7, #6]
 80012aa:	460b      	mov	r3, r1
 80012ac:	717b      	strb	r3, [r7, #5]
 80012ae:	4613      	mov	r3, r2
 80012b0:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 80012b2:	f7ff ff0d 	bl	80010d0 <TrimRead>

	uint8_t datatowrite = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 80012be:	23b6      	movs	r3, #182	; 0xb6
 80012c0:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80012c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c6:	9302      	str	r3, [sp, #8]
 80012c8:	2301      	movs	r3, #1
 80012ca:	9301      	str	r3, [sp, #4]
 80012cc:	f107 030f 	add.w	r3, r7, #15
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2301      	movs	r3, #1
 80012d4:	22e0      	movs	r2, #224	; 0xe0
 80012d6:	21ec      	movs	r1, #236	; 0xec
 80012d8:	4858      	ldr	r0, [pc, #352]	; (800143c <BMP280_Config+0x1a8>)
 80012da:	f002 fc99 	bl	8003c10 <HAL_I2C_Mem_Write>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d002      	beq.n	80012ea <BMP280_Config+0x56>
	{
		return -1;
 80012e4:	f04f 33ff 	mov.w	r3, #4294967295
 80012e8:	e0a3      	b.n	8001432 <BMP280_Config+0x19e>
	}

	HAL_Delay (100);
 80012ea:	2064      	movs	r0, #100	; 0x64
 80012ec:	f001 fcd2 	bl	8002c94 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 80012f0:	797b      	ldrb	r3, [r7, #5]
 80012f2:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80012f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f8:	9302      	str	r3, [sp, #8]
 80012fa:	2301      	movs	r3, #1
 80012fc:	9301      	str	r3, [sp, #4]
 80012fe:	f107 030f 	add.w	r3, r7, #15
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	2301      	movs	r3, #1
 8001306:	22f2      	movs	r2, #242	; 0xf2
 8001308:	21ec      	movs	r1, #236	; 0xec
 800130a:	484c      	ldr	r0, [pc, #304]	; (800143c <BMP280_Config+0x1a8>)
 800130c:	f002 fc80 	bl	8003c10 <HAL_I2C_Mem_Write>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d002      	beq.n	800131c <BMP280_Config+0x88>
	{
		return -2;
 8001316:	f06f 0301 	mvn.w	r3, #1
 800131a:	e08a      	b.n	8001432 <BMP280_Config+0x19e>
	}
	HAL_Delay (100);
 800131c:	2064      	movs	r0, #100	; 0x64
 800131e:	f001 fcb9 	bl	8002c94 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 8001322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001326:	9302      	str	r3, [sp, #8]
 8001328:	2301      	movs	r3, #1
 800132a:	9301      	str	r3, [sp, #4]
 800132c:	f107 030e 	add.w	r3, r7, #14
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	2301      	movs	r3, #1
 8001334:	22f2      	movs	r2, #242	; 0xf2
 8001336:	21ec      	movs	r1, #236	; 0xec
 8001338:	4840      	ldr	r0, [pc, #256]	; (800143c <BMP280_Config+0x1a8>)
 800133a:	f002 fd7d 	bl	8003e38 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800133e:	7bba      	ldrb	r2, [r7, #14]
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	429a      	cmp	r2, r3
 8001344:	d002      	beq.n	800134c <BMP280_Config+0xb8>
	{
		return -3;
 8001346:	f06f 0302 	mvn.w	r3, #2
 800134a:	e072      	b.n	8001432 <BMP280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 800134c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001350:	015b      	lsls	r3, r3, #5
 8001352:	b25a      	sxtb	r2, r3
 8001354:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	b25b      	sxtb	r3, r3
 800135c:	4313      	orrs	r3, r2
 800135e:	b25b      	sxtb	r3, r3
 8001360:	b2db      	uxtb	r3, r3
 8001362:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001364:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001368:	9302      	str	r3, [sp, #8]
 800136a:	2301      	movs	r3, #1
 800136c:	9301      	str	r3, [sp, #4]
 800136e:	f107 030f 	add.w	r3, r7, #15
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	2301      	movs	r3, #1
 8001376:	22f5      	movs	r2, #245	; 0xf5
 8001378:	21ec      	movs	r1, #236	; 0xec
 800137a:	4830      	ldr	r0, [pc, #192]	; (800143c <BMP280_Config+0x1a8>)
 800137c:	f002 fc48 	bl	8003c10 <HAL_I2C_Mem_Write>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d002      	beq.n	800138c <BMP280_Config+0xf8>
	{
		return -4;
 8001386:	f06f 0303 	mvn.w	r3, #3
 800138a:	e052      	b.n	8001432 <BMP280_Config+0x19e>
	}
	HAL_Delay (100);
 800138c:	2064      	movs	r0, #100	; 0x64
 800138e:	f001 fc81 	bl	8002c94 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 8001392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001396:	9302      	str	r3, [sp, #8]
 8001398:	2301      	movs	r3, #1
 800139a:	9301      	str	r3, [sp, #4]
 800139c:	f107 030e 	add.w	r3, r7, #14
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	2301      	movs	r3, #1
 80013a4:	22f5      	movs	r2, #245	; 0xf5
 80013a6:	21ec      	movs	r1, #236	; 0xec
 80013a8:	4824      	ldr	r0, [pc, #144]	; (800143c <BMP280_Config+0x1a8>)
 80013aa:	f002 fd45 	bl	8003e38 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80013ae:	7bba      	ldrb	r2, [r7, #14]
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d002      	beq.n	80013bc <BMP280_Config+0x128>
	{
		return -5;
 80013b6:	f06f 0304 	mvn.w	r3, #4
 80013ba:	e03a      	b.n	8001432 <BMP280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	015b      	lsls	r3, r3, #5
 80013c0:	b25a      	sxtb	r2, r3
 80013c2:	79bb      	ldrb	r3, [r7, #6]
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	b25b      	sxtb	r3, r3
 80013c8:	4313      	orrs	r3, r2
 80013ca:	b25a      	sxtb	r2, r3
 80013cc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	b25b      	sxtb	r3, r3
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80013d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013dc:	9302      	str	r3, [sp, #8]
 80013de:	2301      	movs	r3, #1
 80013e0:	9301      	str	r3, [sp, #4]
 80013e2:	f107 030f 	add.w	r3, r7, #15
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	2301      	movs	r3, #1
 80013ea:	22f4      	movs	r2, #244	; 0xf4
 80013ec:	21ec      	movs	r1, #236	; 0xec
 80013ee:	4813      	ldr	r0, [pc, #76]	; (800143c <BMP280_Config+0x1a8>)
 80013f0:	f002 fc0e 	bl	8003c10 <HAL_I2C_Mem_Write>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d002      	beq.n	8001400 <BMP280_Config+0x16c>
	{
		return -6;
 80013fa:	f06f 0305 	mvn.w	r3, #5
 80013fe:	e018      	b.n	8001432 <BMP280_Config+0x19e>
	}
	HAL_Delay (100);
 8001400:	2064      	movs	r0, #100	; 0x64
 8001402:	f001 fc47 	bl	8002c94 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 8001406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140a:	9302      	str	r3, [sp, #8]
 800140c:	2301      	movs	r3, #1
 800140e:	9301      	str	r3, [sp, #4]
 8001410:	f107 030e 	add.w	r3, r7, #14
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	2301      	movs	r3, #1
 8001418:	22f4      	movs	r2, #244	; 0xf4
 800141a:	21ec      	movs	r1, #236	; 0xec
 800141c:	4807      	ldr	r0, [pc, #28]	; (800143c <BMP280_Config+0x1a8>)
 800141e:	f002 fd0b 	bl	8003e38 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001422:	7bba      	ldrb	r2, [r7, #14]
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	429a      	cmp	r2, r3
 8001428:	d002      	beq.n	8001430 <BMP280_Config+0x19c>
	{
		return -7;
 800142a:	f06f 0306 	mvn.w	r3, #6
 800142e:	e000      	b.n	8001432 <BMP280_Config+0x19e>
	}

	return 0;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	bd90      	pop	{r4, r7, pc}
 800143a:	bf00      	nop
 800143c:	20000228 	.word	0x20000228

08001440 <BMPReadRaw>:


int BMPReadRaw(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af04      	add	r7, sp, #16
	uint8_t RawData[6];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BMP280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 8001446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144a:	9302      	str	r3, [sp, #8]
 800144c:	2301      	movs	r3, #1
 800144e:	9301      	str	r3, [sp, #4]
 8001450:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <BMPReadRaw+0x84>)
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	2301      	movs	r3, #1
 8001456:	22d0      	movs	r2, #208	; 0xd0
 8001458:	21ec      	movs	r1, #236	; 0xec
 800145a:	481b      	ldr	r0, [pc, #108]	; (80014c8 <BMPReadRaw+0x88>)
 800145c:	f002 fcec 	bl	8003e38 <HAL_I2C_Mem_Read>

	if (chipID == 0x58)
 8001460:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <BMPReadRaw+0x84>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b58      	cmp	r3, #88	; 0x58
 8001466:	d127      	bne.n	80014b8 <BMPReadRaw+0x78>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, PRESS_MSB_REG, 1, RawData, 6, HAL_MAX_DELAY);
 8001468:	f04f 33ff 	mov.w	r3, #4294967295
 800146c:	9302      	str	r3, [sp, #8]
 800146e:	2306      	movs	r3, #6
 8001470:	9301      	str	r3, [sp, #4]
 8001472:	463b      	mov	r3, r7
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	2301      	movs	r3, #1
 8001478:	22f7      	movs	r2, #247	; 0xf7
 800147a:	21ec      	movs	r1, #236	; 0xec
 800147c:	4812      	ldr	r0, [pc, #72]	; (80014c8 <BMPReadRaw+0x88>)
 800147e:	f002 fcdb 	bl	8003e38 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 8001482:	783b      	ldrb	r3, [r7, #0]
 8001484:	031a      	lsls	r2, r3, #12
 8001486:	787b      	ldrb	r3, [r7, #1]
 8001488:	011b      	lsls	r3, r3, #4
 800148a:	4313      	orrs	r3, r2
 800148c:	78ba      	ldrb	r2, [r7, #2]
 800148e:	0912      	lsrs	r2, r2, #4
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	4313      	orrs	r3, r2
 8001494:	4a0d      	ldr	r2, [pc, #52]	; (80014cc <BMPReadRaw+0x8c>)
 8001496:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8001498:	78fb      	ldrb	r3, [r7, #3]
 800149a:	031a      	lsls	r2, r3, #12
 800149c:	793b      	ldrb	r3, [r7, #4]
 800149e:	011b      	lsls	r3, r3, #4
 80014a0:	4313      	orrs	r3, r2
 80014a2:	797a      	ldrb	r2, [r7, #5]
 80014a4:	0912      	lsrs	r2, r2, #4
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	4313      	orrs	r3, r2
 80014aa:	4a09      	ldr	r2, [pc, #36]	; (80014d0 <BMPReadRaw+0x90>)
 80014ac:	6013      	str	r3, [r2, #0]
		hRaw = 0;
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <BMPReadRaw+0x94>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]

		return 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	e001      	b.n	80014bc <BMPReadRaw+0x7c>
	}

	else return -1;
 80014b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	200001f0 	.word	0x200001f0
 80014c8:	20000228 	.word	0x20000228
 80014cc:	200001f8 	.word	0x200001f8
 80014d0:	200001f4 	.word	0x200001f4
 80014d4:	200001fc 	.word	0x200001fc

080014d8 <BMP280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BMP280_compensate_T_int32(int32_t adc_T)
{
 80014d8:	b480      	push	{r7}
 80014da:	b087      	sub	sp, #28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	10da      	asrs	r2, r3, #3
 80014e4:	4b19      	ldr	r3, [pc, #100]	; (800154c <BMP280_compensate_T_int32+0x74>)
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	4a18      	ldr	r2, [pc, #96]	; (8001550 <BMP280_compensate_T_int32+0x78>)
 80014ee:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014f2:	fb02 f303 	mul.w	r3, r2, r3
 80014f6:	12db      	asrs	r3, r3, #11
 80014f8:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	111b      	asrs	r3, r3, #4
 80014fe:	4a13      	ldr	r2, [pc, #76]	; (800154c <BMP280_compensate_T_int32+0x74>)
 8001500:	8812      	ldrh	r2, [r2, #0]
 8001502:	1a9b      	subs	r3, r3, r2
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	1112      	asrs	r2, r2, #4
 8001508:	4910      	ldr	r1, [pc, #64]	; (800154c <BMP280_compensate_T_int32+0x74>)
 800150a:	8809      	ldrh	r1, [r1, #0]
 800150c:	1a52      	subs	r2, r2, r1
 800150e:	fb02 f303 	mul.w	r3, r2, r3
 8001512:	131b      	asrs	r3, r3, #12
 8001514:	4a0f      	ldr	r2, [pc, #60]	; (8001554 <BMP280_compensate_T_int32+0x7c>)
 8001516:	f9b2 2000 	ldrsh.w	r2, [r2]
 800151a:	fb02 f303 	mul.w	r3, r2, r3
 800151e:	139b      	asrs	r3, r3, #14
 8001520:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	4413      	add	r3, r2
 8001528:	4a0b      	ldr	r2, [pc, #44]	; (8001558 <BMP280_compensate_T_int32+0x80>)
 800152a:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800152c:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <BMP280_compensate_T_int32+0x80>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4613      	mov	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	3380      	adds	r3, #128	; 0x80
 8001538:	121b      	asrs	r3, r3, #8
 800153a:	60fb      	str	r3, [r7, #12]
	return T;
 800153c:	68fb      	ldr	r3, [r7, #12]
}
 800153e:	4618      	mov	r0, r3
 8001540:	371c      	adds	r7, #28
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	20000200 	.word	0x20000200
 8001550:	20000208 	.word	0x20000208
 8001554:	2000020a 	.word	0x2000020a
 8001558:	20000224 	.word	0x20000224

0800155c <BMP280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BMP280_compensate_P_int64(int32_t adc_P)
{
 800155c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001560:	b0ca      	sub	sp, #296	; 0x128
 8001562:	af00      	add	r7, sp, #0
 8001564:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001568:	4baf      	ldr	r3, [pc, #700]	; (8001828 <BMP280_compensate_P_int64+0x2cc>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	17da      	asrs	r2, r3, #31
 800156e:	461c      	mov	r4, r3
 8001570:	4615      	mov	r5, r2
 8001572:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8001576:	f145 3bff 	adc.w	fp, r5, #4294967295
 800157a:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 800157e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001582:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001586:	fb03 f102 	mul.w	r1, r3, r2
 800158a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800158e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001592:	fb02 f303 	mul.w	r3, r2, r3
 8001596:	18ca      	adds	r2, r1, r3
 8001598:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800159c:	fba3 8903 	umull	r8, r9, r3, r3
 80015a0:	eb02 0309 	add.w	r3, r2, r9
 80015a4:	4699      	mov	r9, r3
 80015a6:	4ba1      	ldr	r3, [pc, #644]	; (800182c <BMP280_compensate_P_int64+0x2d0>)
 80015a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	17da      	asrs	r2, r3, #31
 80015b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80015b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80015b8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80015bc:	4603      	mov	r3, r0
 80015be:	fb03 f209 	mul.w	r2, r3, r9
 80015c2:	460b      	mov	r3, r1
 80015c4:	fb08 f303 	mul.w	r3, r8, r3
 80015c8:	4413      	add	r3, r2
 80015ca:	4602      	mov	r2, r0
 80015cc:	fba8 1202 	umull	r1, r2, r8, r2
 80015d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80015d4:	460a      	mov	r2, r1
 80015d6:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80015da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80015de:	4413      	add	r3, r2
 80015e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80015e4:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80015e8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80015ec:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80015f0:	4b8f      	ldr	r3, [pc, #572]	; (8001830 <BMP280_compensate_P_int64+0x2d4>)
 80015f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f6:	b21b      	sxth	r3, r3
 80015f8:	17da      	asrs	r2, r3, #31
 80015fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80015fe:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001602:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001606:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800160a:	462a      	mov	r2, r5
 800160c:	fb02 f203 	mul.w	r2, r2, r3
 8001610:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001614:	4621      	mov	r1, r4
 8001616:	fb01 f303 	mul.w	r3, r1, r3
 800161a:	441a      	add	r2, r3
 800161c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001620:	4621      	mov	r1, r4
 8001622:	fba3 1301 	umull	r1, r3, r3, r1
 8001626:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800162a:	460b      	mov	r3, r1
 800162c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001630:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001634:	18d3      	adds	r3, r2, r3
 8001636:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800163a:	f04f 0000 	mov.w	r0, #0
 800163e:	f04f 0100 	mov.w	r1, #0
 8001642:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001646:	462b      	mov	r3, r5
 8001648:	0459      	lsls	r1, r3, #17
 800164a:	4623      	mov	r3, r4
 800164c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001650:	4623      	mov	r3, r4
 8001652:	0458      	lsls	r0, r3, #17
 8001654:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001658:	1814      	adds	r4, r2, r0
 800165a:	643c      	str	r4, [r7, #64]	; 0x40
 800165c:	414b      	adcs	r3, r1
 800165e:	647b      	str	r3, [r7, #68]	; 0x44
 8001660:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001664:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001668:	4b72      	ldr	r3, [pc, #456]	; (8001834 <BMP280_compensate_P_int64+0x2d8>)
 800166a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800166e:	b21b      	sxth	r3, r3
 8001670:	17da      	asrs	r2, r3, #31
 8001672:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001676:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800167a:	f04f 0000 	mov.w	r0, #0
 800167e:	f04f 0100 	mov.w	r1, #0
 8001682:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001686:	00d9      	lsls	r1, r3, #3
 8001688:	2000      	movs	r0, #0
 800168a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800168e:	1814      	adds	r4, r2, r0
 8001690:	63bc      	str	r4, [r7, #56]	; 0x38
 8001692:	414b      	adcs	r3, r1
 8001694:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001696:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800169a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 800169e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80016a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016a6:	fb03 f102 	mul.w	r1, r3, r2
 80016aa:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80016ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016b2:	fb02 f303 	mul.w	r3, r2, r3
 80016b6:	18ca      	adds	r2, r1, r3
 80016b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016bc:	fba3 1303 	umull	r1, r3, r3, r3
 80016c0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80016c4:	460b      	mov	r3, r1
 80016c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80016ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80016ce:	18d3      	adds	r3, r2, r3
 80016d0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80016d4:	4b58      	ldr	r3, [pc, #352]	; (8001838 <BMP280_compensate_P_int64+0x2dc>)
 80016d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016da:	b21b      	sxth	r3, r3
 80016dc:	17da      	asrs	r2, r3, #31
 80016de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80016e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80016e6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80016ea:	462b      	mov	r3, r5
 80016ec:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80016f0:	4642      	mov	r2, r8
 80016f2:	fb02 f203 	mul.w	r2, r2, r3
 80016f6:	464b      	mov	r3, r9
 80016f8:	4621      	mov	r1, r4
 80016fa:	fb01 f303 	mul.w	r3, r1, r3
 80016fe:	4413      	add	r3, r2
 8001700:	4622      	mov	r2, r4
 8001702:	4641      	mov	r1, r8
 8001704:	fba2 1201 	umull	r1, r2, r2, r1
 8001708:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800170c:	460a      	mov	r2, r1
 800170e:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001712:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001716:	4413      	add	r3, r2
 8001718:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800171c:	f04f 0000 	mov.w	r0, #0
 8001720:	f04f 0100 	mov.w	r1, #0
 8001724:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001728:	4623      	mov	r3, r4
 800172a:	0a18      	lsrs	r0, r3, #8
 800172c:	462b      	mov	r3, r5
 800172e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001732:	462b      	mov	r3, r5
 8001734:	1219      	asrs	r1, r3, #8
 8001736:	4b41      	ldr	r3, [pc, #260]	; (800183c <BMP280_compensate_P_int64+0x2e0>)
 8001738:	f9b3 3000 	ldrsh.w	r3, [r3]
 800173c:	b21b      	sxth	r3, r3
 800173e:	17da      	asrs	r2, r3, #31
 8001740:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001744:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001748:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800174c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001750:	464a      	mov	r2, r9
 8001752:	fb02 f203 	mul.w	r2, r2, r3
 8001756:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800175a:	4644      	mov	r4, r8
 800175c:	fb04 f303 	mul.w	r3, r4, r3
 8001760:	441a      	add	r2, r3
 8001762:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001766:	4644      	mov	r4, r8
 8001768:	fba3 4304 	umull	r4, r3, r3, r4
 800176c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001770:	4623      	mov	r3, r4
 8001772:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001776:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800177a:	18d3      	adds	r3, r2, r3
 800177c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	f04f 0300 	mov.w	r3, #0
 8001788:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800178c:	464c      	mov	r4, r9
 800178e:	0323      	lsls	r3, r4, #12
 8001790:	4644      	mov	r4, r8
 8001792:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001796:	4644      	mov	r4, r8
 8001798:	0322      	lsls	r2, r4, #12
 800179a:	1884      	adds	r4, r0, r2
 800179c:	633c      	str	r4, [r7, #48]	; 0x30
 800179e:	eb41 0303 	adc.w	r3, r1, r3
 80017a2:	637b      	str	r3, [r7, #52]	; 0x34
 80017a4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80017a8:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80017ac:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80017b0:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80017b4:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80017b8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80017bc:	4b20      	ldr	r3, [pc, #128]	; (8001840 <BMP280_compensate_P_int64+0x2e4>)
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	2200      	movs	r2, #0
 80017c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80017c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80017cc:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80017d0:	462b      	mov	r3, r5
 80017d2:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80017d6:	4642      	mov	r2, r8
 80017d8:	fb02 f203 	mul.w	r2, r2, r3
 80017dc:	464b      	mov	r3, r9
 80017de:	4621      	mov	r1, r4
 80017e0:	fb01 f303 	mul.w	r3, r1, r3
 80017e4:	4413      	add	r3, r2
 80017e6:	4622      	mov	r2, r4
 80017e8:	4641      	mov	r1, r8
 80017ea:	fba2 1201 	umull	r1, r2, r2, r1
 80017ee:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80017f2:	460a      	mov	r2, r1
 80017f4:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80017f8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80017fc:	4413      	add	r3, r2
 80017fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	f04f 0300 	mov.w	r3, #0
 800180a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800180e:	4629      	mov	r1, r5
 8001810:	104a      	asrs	r2, r1, #1
 8001812:	4629      	mov	r1, r5
 8001814:	17cb      	asrs	r3, r1, #31
 8001816:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 800181a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800181e:	4313      	orrs	r3, r2
 8001820:	d110      	bne.n	8001844 <BMP280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 8001822:	2300      	movs	r3, #0
 8001824:	e154      	b.n	8001ad0 <BMP280_compensate_P_int64+0x574>
 8001826:	bf00      	nop
 8001828:	20000224 	.word	0x20000224
 800182c:	20000214 	.word	0x20000214
 8001830:	20000212 	.word	0x20000212
 8001834:	20000210 	.word	0x20000210
 8001838:	2000020e 	.word	0x2000020e
 800183c:	2000020c 	.word	0x2000020c
 8001840:	20000202 	.word	0x20000202
	}
	p = 1048576-adc_P;
 8001844:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001848:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800184c:	17da      	asrs	r2, r3, #31
 800184e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001850:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001852:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001856:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800185a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800185e:	105b      	asrs	r3, r3, #1
 8001860:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001864:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001868:	07db      	lsls	r3, r3, #31
 800186a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800186e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001872:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001876:	4621      	mov	r1, r4
 8001878:	1a89      	subs	r1, r1, r2
 800187a:	67b9      	str	r1, [r7, #120]	; 0x78
 800187c:	4629      	mov	r1, r5
 800187e:	eb61 0303 	sbc.w	r3, r1, r3
 8001882:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001884:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001888:	4622      	mov	r2, r4
 800188a:	462b      	mov	r3, r5
 800188c:	1891      	adds	r1, r2, r2
 800188e:	6239      	str	r1, [r7, #32]
 8001890:	415b      	adcs	r3, r3
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
 8001894:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001898:	4621      	mov	r1, r4
 800189a:	1851      	adds	r1, r2, r1
 800189c:	61b9      	str	r1, [r7, #24]
 800189e:	4629      	mov	r1, r5
 80018a0:	414b      	adcs	r3, r1
 80018a2:	61fb      	str	r3, [r7, #28]
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80018b0:	4649      	mov	r1, r9
 80018b2:	018b      	lsls	r3, r1, #6
 80018b4:	4641      	mov	r1, r8
 80018b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018ba:	4641      	mov	r1, r8
 80018bc:	018a      	lsls	r2, r1, #6
 80018be:	4641      	mov	r1, r8
 80018c0:	1889      	adds	r1, r1, r2
 80018c2:	6139      	str	r1, [r7, #16]
 80018c4:	4649      	mov	r1, r9
 80018c6:	eb43 0101 	adc.w	r1, r3, r1
 80018ca:	6179      	str	r1, [r7, #20]
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	f04f 0300 	mov.w	r3, #0
 80018d4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80018d8:	4649      	mov	r1, r9
 80018da:	008b      	lsls	r3, r1, #2
 80018dc:	4641      	mov	r1, r8
 80018de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018e2:	4641      	mov	r1, r8
 80018e4:	008a      	lsls	r2, r1, #2
 80018e6:	4610      	mov	r0, r2
 80018e8:	4619      	mov	r1, r3
 80018ea:	4603      	mov	r3, r0
 80018ec:	4622      	mov	r2, r4
 80018ee:	189b      	adds	r3, r3, r2
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	460b      	mov	r3, r1
 80018f4:	462a      	mov	r2, r5
 80018f6:	eb42 0303 	adc.w	r3, r2, r3
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	f04f 0200 	mov.w	r2, #0
 8001900:	f04f 0300 	mov.w	r3, #0
 8001904:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001908:	4649      	mov	r1, r9
 800190a:	008b      	lsls	r3, r1, #2
 800190c:	4641      	mov	r1, r8
 800190e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001912:	4641      	mov	r1, r8
 8001914:	008a      	lsls	r2, r1, #2
 8001916:	4610      	mov	r0, r2
 8001918:	4619      	mov	r1, r3
 800191a:	4603      	mov	r3, r0
 800191c:	4622      	mov	r2, r4
 800191e:	189b      	adds	r3, r3, r2
 8001920:	673b      	str	r3, [r7, #112]	; 0x70
 8001922:	462b      	mov	r3, r5
 8001924:	460a      	mov	r2, r1
 8001926:	eb42 0303 	adc.w	r3, r2, r3
 800192a:	677b      	str	r3, [r7, #116]	; 0x74
 800192c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001930:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001934:	f7ff f9c8 	bl	8000cc8 <__aeabi_ldivmod>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001940:	4b66      	ldr	r3, [pc, #408]	; (8001adc <BMP280_compensate_P_int64+0x580>)
 8001942:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001946:	b21b      	sxth	r3, r3
 8001948:	17da      	asrs	r2, r3, #31
 800194a:	66bb      	str	r3, [r7, #104]	; 0x68
 800194c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800194e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001952:	f04f 0000 	mov.w	r0, #0
 8001956:	f04f 0100 	mov.w	r1, #0
 800195a:	0b50      	lsrs	r0, r2, #13
 800195c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001960:	1359      	asrs	r1, r3, #13
 8001962:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001966:	462b      	mov	r3, r5
 8001968:	fb00 f203 	mul.w	r2, r0, r3
 800196c:	4623      	mov	r3, r4
 800196e:	fb03 f301 	mul.w	r3, r3, r1
 8001972:	4413      	add	r3, r2
 8001974:	4622      	mov	r2, r4
 8001976:	fba2 1200 	umull	r1, r2, r2, r0
 800197a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800197e:	460a      	mov	r2, r1
 8001980:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001984:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001988:	4413      	add	r3, r2
 800198a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800198e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001992:	f04f 0000 	mov.w	r0, #0
 8001996:	f04f 0100 	mov.w	r1, #0
 800199a:	0b50      	lsrs	r0, r2, #13
 800199c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80019a0:	1359      	asrs	r1, r3, #13
 80019a2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80019a6:	462b      	mov	r3, r5
 80019a8:	fb00 f203 	mul.w	r2, r0, r3
 80019ac:	4623      	mov	r3, r4
 80019ae:	fb03 f301 	mul.w	r3, r3, r1
 80019b2:	4413      	add	r3, r2
 80019b4:	4622      	mov	r2, r4
 80019b6:	fba2 1200 	umull	r1, r2, r2, r0
 80019ba:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80019be:	460a      	mov	r2, r1
 80019c0:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80019c4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80019c8:	4413      	add	r3, r2
 80019ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	f04f 0300 	mov.w	r3, #0
 80019d6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80019da:	4621      	mov	r1, r4
 80019dc:	0e4a      	lsrs	r2, r1, #25
 80019de:	4629      	mov	r1, r5
 80019e0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80019e4:	4629      	mov	r1, r5
 80019e6:	164b      	asrs	r3, r1, #25
 80019e8:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80019ec:	4b3c      	ldr	r3, [pc, #240]	; (8001ae0 <BMP280_compensate_P_int64+0x584>)
 80019ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019f2:	b21b      	sxth	r3, r3
 80019f4:	17da      	asrs	r2, r3, #31
 80019f6:	663b      	str	r3, [r7, #96]	; 0x60
 80019f8:	667a      	str	r2, [r7, #100]	; 0x64
 80019fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80019fe:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001a02:	462a      	mov	r2, r5
 8001a04:	fb02 f203 	mul.w	r2, r2, r3
 8001a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a0c:	4621      	mov	r1, r4
 8001a0e:	fb01 f303 	mul.w	r3, r1, r3
 8001a12:	4413      	add	r3, r2
 8001a14:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001a18:	4621      	mov	r1, r4
 8001a1a:	fba2 1201 	umull	r1, r2, r2, r1
 8001a1e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001a22:	460a      	mov	r2, r1
 8001a24:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001a28:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001a2c:	4413      	add	r3, r2
 8001a2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	f04f 0300 	mov.w	r3, #0
 8001a3a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001a3e:	4621      	mov	r1, r4
 8001a40:	0cca      	lsrs	r2, r1, #19
 8001a42:	4629      	mov	r1, r5
 8001a44:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001a48:	4629      	mov	r1, r5
 8001a4a:	14cb      	asrs	r3, r1, #19
 8001a4c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001a50:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001a54:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001a58:	1884      	adds	r4, r0, r2
 8001a5a:	65bc      	str	r4, [r7, #88]	; 0x58
 8001a5c:	eb41 0303 	adc.w	r3, r1, r3
 8001a60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a62:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001a66:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001a6a:	4621      	mov	r1, r4
 8001a6c:	1889      	adds	r1, r1, r2
 8001a6e:	6539      	str	r1, [r7, #80]	; 0x50
 8001a70:	4629      	mov	r1, r5
 8001a72:	eb43 0101 	adc.w	r1, r3, r1
 8001a76:	6579      	str	r1, [r7, #84]	; 0x54
 8001a78:	f04f 0000 	mov.w	r0, #0
 8001a7c:	f04f 0100 	mov.w	r1, #0
 8001a80:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001a84:	4623      	mov	r3, r4
 8001a86:	0a18      	lsrs	r0, r3, #8
 8001a88:	462b      	mov	r3, r5
 8001a8a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a8e:	462b      	mov	r3, r5
 8001a90:	1219      	asrs	r1, r3, #8
 8001a92:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <BMP280_compensate_P_int64+0x588>)
 8001a94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a98:	b21b      	sxth	r3, r3
 8001a9a:	17da      	asrs	r2, r3, #31
 8001a9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a9e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001aac:	464c      	mov	r4, r9
 8001aae:	0123      	lsls	r3, r4, #4
 8001ab0:	4644      	mov	r4, r8
 8001ab2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001ab6:	4644      	mov	r4, r8
 8001ab8:	0122      	lsls	r2, r4, #4
 8001aba:	1884      	adds	r4, r0, r2
 8001abc:	603c      	str	r4, [r7, #0]
 8001abe:	eb41 0303 	adc.w	r3, r1, r3
 8001ac2:	607b      	str	r3, [r7, #4]
 8001ac4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001ac8:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 8001acc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001adc:	2000021a 	.word	0x2000021a
 8001ae0:	20000218 	.word	0x20000218
 8001ae4:	20000216 	.word	0x20000216

08001ae8 <BMP280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t BMP280_compensate_H_int32(int32_t adc_H)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001af0:	4b2c      	ldr	r3, [pc, #176]	; (8001ba4 <BMP280_compensate_H_int32+0xbc>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001af8:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	039a      	lsls	r2, r3, #14
 8001afe:	4b2a      	ldr	r3, [pc, #168]	; (8001ba8 <BMP280_compensate_H_int32+0xc0>)
 8001b00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b04:	051b      	lsls	r3, r3, #20
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	4b28      	ldr	r3, [pc, #160]	; (8001bac <BMP280_compensate_H_int32+0xc4>)
 8001b0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	fb01 f303 	mul.w	r3, r1, r3
 8001b16:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001b18:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001b1c:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001b1e:	4a24      	ldr	r2, [pc, #144]	; (8001bb0 <BMP280_compensate_H_int32+0xc8>)
 8001b20:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001b24:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001b2c:	1292      	asrs	r2, r2, #10
 8001b2e:	4921      	ldr	r1, [pc, #132]	; (8001bb4 <BMP280_compensate_H_int32+0xcc>)
 8001b30:	8809      	ldrh	r1, [r1, #0]
 8001b32:	4608      	mov	r0, r1
 8001b34:	68f9      	ldr	r1, [r7, #12]
 8001b36:	fb00 f101 	mul.w	r1, r0, r1
 8001b3a:	12c9      	asrs	r1, r1, #11
 8001b3c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001b40:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001b44:	1292      	asrs	r2, r2, #10
 8001b46:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8001b4a:	491b      	ldr	r1, [pc, #108]	; (8001bb8 <BMP280_compensate_H_int32+0xd0>)
 8001b4c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001b50:	fb01 f202 	mul.w	r2, r1, r2
 8001b54:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 8001b58:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001b5a:	fb02 f303 	mul.w	r3, r2, r3
 8001b5e:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	13db      	asrs	r3, r3, #15
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	13d2      	asrs	r2, r2, #15
 8001b68:	fb02 f303 	mul.w	r3, r2, r3
 8001b6c:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001b6e:	4a13      	ldr	r2, [pc, #76]	; (8001bbc <BMP280_compensate_H_int32+0xd4>)
 8001b70:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b72:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001b76:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001b84:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001b8c:	bfa8      	it	ge
 8001b8e:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001b92:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	131b      	asrs	r3, r3, #12
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	20000224 	.word	0x20000224
 8001ba8:	2000021e 	.word	0x2000021e
 8001bac:	20000220 	.word	0x20000220
 8001bb0:	20000222 	.word	0x20000222
 8001bb4:	20000206 	.word	0x20000206
 8001bb8:	2000021c 	.word	0x2000021c
 8001bbc:	20000204 	.word	0x20000204

08001bc0 <BMP280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BMP280_Measure (void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
	if (BMPReadRaw() == 0)
 8001bc4:	f7ff fc3c 	bl	8001440 <BMPReadRaw>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d163      	bne.n	8001c96 <BMP280_Measure+0xd6>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 8001bce:	4b39      	ldr	r3, [pc, #228]	; (8001cb4 <BMP280_Measure+0xf4>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001bd6:	d104      	bne.n	8001be2 <BMP280_Measure+0x22>
 8001bd8:	4b37      	ldr	r3, [pc, #220]	; (8001cb8 <BMP280_Measure+0xf8>)
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	e016      	b.n	8001c10 <BMP280_Measure+0x50>
		  else
		  {
			  Temperature = (BMP280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001be2:	4b34      	ldr	r3, [pc, #208]	; (8001cb4 <BMP280_Measure+0xf4>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff fc76 	bl	80014d8 <BMP280_compensate_T_int32>
 8001bec:	4603      	mov	r3, r0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fcb8 	bl	8000564 <__aeabi_i2d>
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	4b30      	ldr	r3, [pc, #192]	; (8001cbc <BMP280_Measure+0xfc>)
 8001bfa:	f7fe fe47 	bl	800088c <__aeabi_ddiv>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	4610      	mov	r0, r2
 8001c04:	4619      	mov	r1, r3
 8001c06:	f7ff f80f 	bl	8000c28 <__aeabi_d2f>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	4a2a      	ldr	r2, [pc, #168]	; (8001cb8 <BMP280_Measure+0xf8>)
 8001c0e:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 8001c10:	4b2b      	ldr	r3, [pc, #172]	; (8001cc0 <BMP280_Measure+0x100>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001c18:	d104      	bne.n	8001c24 <BMP280_Measure+0x64>
 8001c1a:	4b2a      	ldr	r3, [pc, #168]	; (8001cc4 <BMP280_Measure+0x104>)
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	e016      	b.n	8001c52 <BMP280_Measure+0x92>
		  else
		  {
#if SUPPORT_64BIT
			  Pressure = (BMP280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001c24:	4b26      	ldr	r3, [pc, #152]	; (8001cc0 <BMP280_Measure+0x100>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff fc97 	bl	800155c <BMP280_compensate_P_int64>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7fe fc87 	bl	8000544 <__aeabi_ui2d>
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	4b23      	ldr	r3, [pc, #140]	; (8001cc8 <BMP280_Measure+0x108>)
 8001c3c:	f7fe fe26 	bl	800088c <__aeabi_ddiv>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4610      	mov	r0, r2
 8001c46:	4619      	mov	r1, r3
 8001c48:	f7fe ffee 	bl	8000c28 <__aeabi_d2f>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	4a1d      	ldr	r2, [pc, #116]	; (8001cc4 <BMP280_Measure+0x104>)
 8001c50:	6013      	str	r3, [r2, #0]
			  Pressure = (BMP280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 8001c52:	4b1e      	ldr	r3, [pc, #120]	; (8001ccc <BMP280_Measure+0x10c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c5a:	d104      	bne.n	8001c66 <BMP280_Measure+0xa6>
 8001c5c:	4b1c      	ldr	r3, [pc, #112]	; (8001cd0 <BMP280_Measure+0x110>)
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
	}
}
 8001c64:	e023      	b.n	8001cae <BMP280_Measure+0xee>
			  Humidity = (BMP280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001c66:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <BMP280_Measure+0x10c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff ff3c 	bl	8001ae8 <BMP280_compensate_H_int32>
 8001c70:	4603      	mov	r3, r0
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe fc66 	bl	8000544 <__aeabi_ui2d>
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <BMP280_Measure+0x114>)
 8001c7e:	f7fe fe05 	bl	800088c <__aeabi_ddiv>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4610      	mov	r0, r2
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f7fe ffcd 	bl	8000c28 <__aeabi_d2f>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	4a0f      	ldr	r2, [pc, #60]	; (8001cd0 <BMP280_Measure+0x110>)
 8001c92:	6013      	str	r3, [r2, #0]
}
 8001c94:	e00b      	b.n	8001cae <BMP280_Measure+0xee>
		Temperature = Pressure = Humidity = 0;
 8001c96:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <BMP280_Measure+0x110>)
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <BMP280_Measure+0x110>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a08      	ldr	r2, [pc, #32]	; (8001cc4 <BMP280_Measure+0x104>)
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <BMP280_Measure+0x104>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a03      	ldr	r2, [pc, #12]	; (8001cb8 <BMP280_Measure+0xf8>)
 8001cac:	6013      	str	r3, [r2, #0]
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	200001f4 	.word	0x200001f4
 8001cb8:	20000348 	.word	0x20000348
 8001cbc:	40590000 	.word	0x40590000
 8001cc0:	200001f8 	.word	0x200001f8
 8001cc4:	2000034c 	.word	0x2000034c
 8001cc8:	40700000 	.word	0x40700000
 8001ccc:	200001fc 	.word	0x200001fc
 8001cd0:	20000350 	.word	0x20000350
 8001cd4:	40900000 	.word	0x40900000

08001cd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cde:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <MX_DMA_Init+0x38>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a0b      	ldr	r2, [pc, #44]	; (8001d10 <MX_DMA_Init+0x38>)
 8001ce4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <MX_DMA_Init+0x38>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	200c      	movs	r0, #12
 8001cfc:	f001 f8c9 	bl	8002e92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001d00:	200c      	movs	r0, #12
 8001d02:	f001 f8e2 	bl	8002eca <HAL_NVIC_EnableIRQ>

}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40023800 	.word	0x40023800

08001d14 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08c      	sub	sp, #48	; 0x30
 8001d18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1a:	f107 031c 	add.w	r3, r7, #28
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	60da      	str	r2, [r3, #12]
 8001d28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d2a:	4b77      	ldr	r3, [pc, #476]	; (8001f08 <MX_GPIO_Init+0x1f4>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	4a76      	ldr	r2, [pc, #472]	; (8001f08 <MX_GPIO_Init+0x1f4>)
 8001d30:	f043 0304 	orr.w	r3, r3, #4
 8001d34:	6313      	str	r3, [r2, #48]	; 0x30
 8001d36:	4b74      	ldr	r3, [pc, #464]	; (8001f08 <MX_GPIO_Init+0x1f4>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	f003 0304 	and.w	r3, r3, #4
 8001d3e:	61bb      	str	r3, [r7, #24]
 8001d40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d42:	4b71      	ldr	r3, [pc, #452]	; (8001f08 <MX_GPIO_Init+0x1f4>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4a70      	ldr	r2, [pc, #448]	; (8001f08 <MX_GPIO_Init+0x1f4>)
 8001d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b6e      	ldr	r3, [pc, #440]	; (8001f08 <MX_GPIO_Init+0x1f4>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5a:	4b6b      	ldr	r3, [pc, #428]	; (8001f08 <MX_GPIO_Init+0x1f4>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a6a      	ldr	r2, [pc, #424]	; (8001f08 <MX_GPIO_Init+0x1f4>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b68      	ldr	r3, [pc, #416]	; (8001f08 <MX_GPIO_Init+0x1f4>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d72:	4b65      	ldr	r3, [pc, #404]	; (8001f08 <MX_GPIO_Init+0x1f4>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	4a64      	ldr	r2, [pc, #400]	; (8001f08 <MX_GPIO_Init+0x1f4>)
 8001d78:	f043 0302 	orr.w	r3, r3, #2
 8001d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7e:	4b62      	ldr	r3, [pc, #392]	; (8001f08 <MX_GPIO_Init+0x1f4>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d8a:	4b5f      	ldr	r3, [pc, #380]	; (8001f08 <MX_GPIO_Init+0x1f4>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	4a5e      	ldr	r2, [pc, #376]	; (8001f08 <MX_GPIO_Init+0x1f4>)
 8001d90:	f043 0308 	orr.w	r3, r3, #8
 8001d94:	6313      	str	r3, [r2, #48]	; 0x30
 8001d96:	4b5c      	ldr	r3, [pc, #368]	; (8001f08 <MX_GPIO_Init+0x1f4>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001da2:	4b59      	ldr	r3, [pc, #356]	; (8001f08 <MX_GPIO_Init+0x1f4>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	4a58      	ldr	r2, [pc, #352]	; (8001f08 <MX_GPIO_Init+0x1f4>)
 8001da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dac:	6313      	str	r3, [r2, #48]	; 0x30
 8001dae:	4b56      	ldr	r3, [pc, #344]	; (8001f08 <MX_GPIO_Init+0x1f4>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db6:	607b      	str	r3, [r7, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f244 0181 	movw	r1, #16513	; 0x4081
 8001dc0:	4852      	ldr	r0, [pc, #328]	; (8001f0c <MX_GPIO_Init+0x1f8>)
 8001dc2:	f001 fe61 	bl	8003a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2140      	movs	r1, #64	; 0x40
 8001dca:	4851      	ldr	r0, [pc, #324]	; (8001f10 <MX_GPIO_Init+0x1fc>)
 8001dcc:	f001 fe5c 	bl	8003a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001dd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dd6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001dda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001de0:	f107 031c 	add.w	r3, r7, #28
 8001de4:	4619      	mov	r1, r3
 8001de6:	484b      	ldr	r0, [pc, #300]	; (8001f14 <MX_GPIO_Init+0x200>)
 8001de8:	f001 fca2 	bl	8003730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001dec:	2332      	movs	r3, #50	; 0x32
 8001dee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df0:	2302      	movs	r3, #2
 8001df2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001dfc:	230b      	movs	r3, #11
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e00:	f107 031c 	add.w	r3, r7, #28
 8001e04:	4619      	mov	r1, r3
 8001e06:	4843      	ldr	r0, [pc, #268]	; (8001f14 <MX_GPIO_Init+0x200>)
 8001e08:	f001 fc92 	bl	8003730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001e0c:	2386      	movs	r3, #134	; 0x86
 8001e0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e10:	2302      	movs	r3, #2
 8001e12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e1c:	230b      	movs	r3, #11
 8001e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e20:	f107 031c 	add.w	r3, r7, #28
 8001e24:	4619      	mov	r1, r3
 8001e26:	483c      	ldr	r0, [pc, #240]	; (8001f18 <MX_GPIO_Init+0x204>)
 8001e28:	f001 fc82 	bl	8003730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001e2c:	f244 0381 	movw	r3, #16513	; 0x4081
 8001e30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e32:	2301      	movs	r3, #1
 8001e34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e3e:	f107 031c 	add.w	r3, r7, #28
 8001e42:	4619      	mov	r1, r3
 8001e44:	4831      	ldr	r0, [pc, #196]	; (8001f0c <MX_GPIO_Init+0x1f8>)
 8001e46:	f001 fc73 	bl	8003730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001e4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e50:	2302      	movs	r3, #2
 8001e52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e5c:	230b      	movs	r3, #11
 8001e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001e60:	f107 031c 	add.w	r3, r7, #28
 8001e64:	4619      	mov	r1, r3
 8001e66:	4829      	ldr	r0, [pc, #164]	; (8001f0c <MX_GPIO_Init+0x1f8>)
 8001e68:	f001 fc62 	bl	8003730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001e6c:	2340      	movs	r3, #64	; 0x40
 8001e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e70:	2301      	movs	r3, #1
 8001e72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001e7c:	f107 031c 	add.w	r3, r7, #28
 8001e80:	4619      	mov	r1, r3
 8001e82:	4823      	ldr	r0, [pc, #140]	; (8001f10 <MX_GPIO_Init+0x1fc>)
 8001e84:	f001 fc54 	bl	8003730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001e88:	2380      	movs	r3, #128	; 0x80
 8001e8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e94:	f107 031c 	add.w	r3, r7, #28
 8001e98:	4619      	mov	r1, r3
 8001e9a:	481d      	ldr	r0, [pc, #116]	; (8001f10 <MX_GPIO_Init+0x1fc>)
 8001e9c:	f001 fc48 	bl	8003730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001ea0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001ea4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001eb2:	230a      	movs	r3, #10
 8001eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb6:	f107 031c 	add.w	r3, r7, #28
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4816      	ldr	r0, [pc, #88]	; (8001f18 <MX_GPIO_Init+0x204>)
 8001ebe:	f001 fc37 	bl	8003730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001ec2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ec6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ed0:	f107 031c 	add.w	r3, r7, #28
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4810      	ldr	r0, [pc, #64]	; (8001f18 <MX_GPIO_Init+0x204>)
 8001ed8:	f001 fc2a 	bl	8003730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001edc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001ee0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eea:	2303      	movs	r3, #3
 8001eec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001eee:	230b      	movs	r3, #11
 8001ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ef2:	f107 031c 	add.w	r3, r7, #28
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4805      	ldr	r0, [pc, #20]	; (8001f10 <MX_GPIO_Init+0x1fc>)
 8001efa:	f001 fc19 	bl	8003730 <HAL_GPIO_Init>

}
 8001efe:	bf00      	nop
 8001f00:	3730      	adds	r7, #48	; 0x30
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40020400 	.word	0x40020400
 8001f10:	40021800 	.word	0x40021800
 8001f14:	40020800 	.word	0x40020800
 8001f18:	40020000 	.word	0x40020000

08001f1c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f20:	4b1b      	ldr	r3, [pc, #108]	; (8001f90 <MX_I2C1_Init+0x74>)
 8001f22:	4a1c      	ldr	r2, [pc, #112]	; (8001f94 <MX_I2C1_Init+0x78>)
 8001f24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8001f26:	4b1a      	ldr	r3, [pc, #104]	; (8001f90 <MX_I2C1_Init+0x74>)
 8001f28:	4a1b      	ldr	r2, [pc, #108]	; (8001f98 <MX_I2C1_Init+0x7c>)
 8001f2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001f2c:	4b18      	ldr	r3, [pc, #96]	; (8001f90 <MX_I2C1_Init+0x74>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f32:	4b17      	ldr	r3, [pc, #92]	; (8001f90 <MX_I2C1_Init+0x74>)
 8001f34:	2201      	movs	r2, #1
 8001f36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f38:	4b15      	ldr	r3, [pc, #84]	; (8001f90 <MX_I2C1_Init+0x74>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f3e:	4b14      	ldr	r3, [pc, #80]	; (8001f90 <MX_I2C1_Init+0x74>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f44:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <MX_I2C1_Init+0x74>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f4a:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <MX_I2C1_Init+0x74>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f50:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <MX_I2C1_Init+0x74>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f56:	480e      	ldr	r0, [pc, #56]	; (8001f90 <MX_I2C1_Init+0x74>)
 8001f58:	f001 fdca 	bl	8003af0 <HAL_I2C_Init>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001f62:	f000 fb8b 	bl	800267c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f66:	2100      	movs	r1, #0
 8001f68:	4809      	ldr	r0, [pc, #36]	; (8001f90 <MX_I2C1_Init+0x74>)
 8001f6a:	f003 f875 	bl	8005058 <HAL_I2CEx_ConfigAnalogFilter>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001f74:	f000 fb82 	bl	800267c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001f78:	2100      	movs	r1, #0
 8001f7a:	4805      	ldr	r0, [pc, #20]	; (8001f90 <MX_I2C1_Init+0x74>)
 8001f7c:	f003 f8b7 	bl	80050ee <HAL_I2CEx_ConfigDigitalFilter>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001f86:	f000 fb79 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20000228 	.word	0x20000228
 8001f94:	40005400 	.word	0x40005400
 8001f98:	00808cd2 	.word	0x00808cd2

08001f9c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b0aa      	sub	sp, #168	; 0xa8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fb4:	f107 0310 	add.w	r3, r7, #16
 8001fb8:	2284      	movs	r2, #132	; 0x84
 8001fba:	2100      	movs	r1, #0
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f007 fe66 	bl	8009c8e <memset>
  if(i2cHandle->Instance==I2C1)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a2a      	ldr	r2, [pc, #168]	; (8002070 <HAL_I2C_MspInit+0xd4>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d14c      	bne.n	8002066 <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001fcc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fd0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fd6:	f107 0310 	add.w	r3, r7, #16
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f003 fdae 	bl	8005b3c <HAL_RCCEx_PeriphCLKConfig>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001fe6:	f000 fb49 	bl	800267c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fea:	4b22      	ldr	r3, [pc, #136]	; (8002074 <HAL_I2C_MspInit+0xd8>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	4a21      	ldr	r2, [pc, #132]	; (8002074 <HAL_I2C_MspInit+0xd8>)
 8001ff0:	f043 0302 	orr.w	r3, r3, #2
 8001ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff6:	4b1f      	ldr	r3, [pc, #124]	; (8002074 <HAL_I2C_MspInit+0xd8>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002002:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002006:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800200a:	2312      	movs	r3, #18
 800200c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002016:	2303      	movs	r3, #3
 8002018:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800201c:	2304      	movs	r3, #4
 800201e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002022:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002026:	4619      	mov	r1, r3
 8002028:	4813      	ldr	r0, [pc, #76]	; (8002078 <HAL_I2C_MspInit+0xdc>)
 800202a:	f001 fb81 	bl	8003730 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800202e:	4b11      	ldr	r3, [pc, #68]	; (8002074 <HAL_I2C_MspInit+0xd8>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	4a10      	ldr	r2, [pc, #64]	; (8002074 <HAL_I2C_MspInit+0xd8>)
 8002034:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002038:	6413      	str	r3, [r2, #64]	; 0x40
 800203a:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <HAL_I2C_MspInit+0xd8>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	2100      	movs	r1, #0
 800204a:	201f      	movs	r0, #31
 800204c:	f000 ff21 	bl	8002e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002050:	201f      	movs	r0, #31
 8002052:	f000 ff3a 	bl	8002eca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002056:	2200      	movs	r2, #0
 8002058:	2100      	movs	r1, #0
 800205a:	2020      	movs	r0, #32
 800205c:	f000 ff19 	bl	8002e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002060:	2020      	movs	r0, #32
 8002062:	f000 ff32 	bl	8002eca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002066:	bf00      	nop
 8002068:	37a8      	adds	r7, #168	; 0xa8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40005400 	.word	0x40005400
 8002074:	40023800 	.word	0x40023800
 8002078:	40020400 	.word	0x40020400

0800207c <main>:
float32_t R;
float U;
int set_comp;
const int D_PWM = 1250;

int main(void){
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
	// Inicjalizacja peryferiów
	HAL_Init();
 8002080:	f000 fdab 	bl	8002bda <HAL_Init>
	SystemClock_Config();
 8002084:	f000 fa92 	bl	80025ac <SystemClock_Config>
	MX_GPIO_Init();
 8002088:	f7ff fe44 	bl	8001d14 <MX_GPIO_Init>
	MX_DMA_Init();
 800208c:	f7ff fe24 	bl	8001cd8 <MX_DMA_Init>
	MX_USART3_UART_Init();
 8002090:	f000 fcb0 	bl	80029f4 <MX_USART3_UART_Init>
	MX_I2C1_Init();
 8002094:	f7ff ff42 	bl	8001f1c <MX_I2C1_Init>

	// Konfiguracja czujnika
	SensorConfiguration();
 8002098:	f000 fa66 	bl	8002568 <SensorConfiguration>

	// Inicjalizacja tim4
	MX_TIM_Init();
 800209c:	f000 f9ea 	bl	8002474 <MX_TIM_Init>
	HAL_TIM_Base_Start_IT(&htim4);
 80020a0:	4813      	ldr	r0, [pc, #76]	; (80020f0 <main+0x74>)
 80020a2:	f004 f993 	bl	80063cc <HAL_TIM_Base_Start_IT>

	// Inicjalizacja PWM
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80020a6:	2100      	movs	r1, #0
 80020a8:	4811      	ldr	r0, [pc, #68]	; (80020f0 <main+0x74>)
 80020aa:	f004 fa69 	bl	8006580 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 80020ae:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <main+0x74>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2200      	movs	r2, #0
 80020b4:	635a      	str	r2, [r3, #52]	; 0x34

	// Inicjalizacja regulatora PID i zmiennych
	InitializeSettings(&data);
 80020b6:	480f      	ldr	r0, [pc, #60]	; (80020f4 <main+0x78>)
 80020b8:	f000 f964 	bl	8002384 <InitializeSettings>
	Tref = data.Tref;
 80020bc:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <main+0x78>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a0d      	ldr	r2, [pc, #52]	; (80020f8 <main+0x7c>)
 80020c2:	6013      	str	r3, [r2, #0]
	PID.Kp = data.Kp;
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <main+0x78>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	4a0c      	ldr	r2, [pc, #48]	; (80020fc <main+0x80>)
 80020ca:	6193      	str	r3, [r2, #24]
	PID.Ki = data.Ki;
 80020cc:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <main+0x78>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	4a0a      	ldr	r2, [pc, #40]	; (80020fc <main+0x80>)
 80020d2:	61d3      	str	r3, [r2, #28]
	PID.Kd = data.Kd;
 80020d4:	4b07      	ldr	r3, [pc, #28]	; (80020f4 <main+0x78>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	4a08      	ldr	r2, [pc, #32]	; (80020fc <main+0x80>)
 80020da:	6213      	str	r3, [r2, #32]
	arm_pid_init_f32(&PID, 1);
 80020dc:	2101      	movs	r1, #1
 80020de:	4807      	ldr	r0, [pc, #28]	; (80020fc <main+0x80>)
 80020e0:	f006 fdee 	bl	8008cc0 <arm_pid_init_f32>

	// Odbieranie nastaw z GUI
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, ReceiveBuffer, ReceiveBuffer_SIZE);
 80020e4:	2240      	movs	r2, #64	; 0x40
 80020e6:	4906      	ldr	r1, [pc, #24]	; (8002100 <main+0x84>)
 80020e8:	4806      	ldr	r0, [pc, #24]	; (8002104 <main+0x88>)
 80020ea:	f006 fd94 	bl	8008c16 <HAL_UARTEx_ReceiveToIdle_DMA>

	while(1){}
 80020ee:	e7fe      	b.n	80020ee <main+0x72>
 80020f0:	2000036c 	.word	0x2000036c
 80020f4:	20000314 	.word	0x20000314
 80020f8:	20000354 	.word	0x20000354
 80020fc:	20000324 	.word	0x20000324
 8002100:	20000290 	.word	0x20000290
 8002104:	200003b8 	.word	0x200003b8

08002108 <HAL_TIM_PeriodElapsedCallback>:
}

// FUNKCJE UZYTKOWNIKA -----------------------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002108:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800210c:	b08a      	sub	sp, #40	; 0x28
 800210e:	af04      	add	r7, sp, #16
 8002110:	6078      	str	r0, [r7, #4]
	// 2) POMIAR
	// 3) WYSLANIE POMIARU
	// 4) ALGORYM REGULACJI PID
	// Dodaj 4.2) FILTR CYFROWY

	if(htim->Instance == TIM4){
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a86      	ldr	r2, [pc, #536]	; (8002330 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002118:	4293      	cmp	r3, r2
 800211a:	f040 8103 	bne.w	8002324 <HAL_TIM_PeriodElapsedCallback+0x21c>

		//Processing danych
		if(ProcessDataFlag == 1){
 800211e:	4b85      	ldr	r3, [pc, #532]	; (8002334 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d154      	bne.n	80021d0 <HAL_TIM_PeriodElapsedCallback+0xc8>

			// tfloat;
			if (MainBuffer[0] == 't') {
 8002126:	4b84      	ldr	r3, [pc, #528]	; (8002338 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b74      	cmp	r3, #116	; 0x74
 800212c:	d105      	bne.n	800213a <HAL_TIM_PeriodElapsedCallback+0x32>
				sscanf((char*)&MainBuffer[1], "%f;", &Tref);
 800212e:	4a83      	ldr	r2, [pc, #524]	; (800233c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002130:	4983      	ldr	r1, [pc, #524]	; (8002340 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002132:	4884      	ldr	r0, [pc, #528]	; (8002344 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002134:	f007 fd3a 	bl	8009bac <siscanf>
 8002138:	e047      	b.n	80021ca <HAL_TIM_PeriodElapsedCallback+0xc2>
			}
			// pfloat,float,float;
			else if (MainBuffer[0] == 'p') {
 800213a:	4b7f      	ldr	r3, [pc, #508]	; (8002338 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b70      	cmp	r3, #112	; 0x70
 8002140:	d143      	bne.n	80021ca <HAL_TIM_PeriodElapsedCallback+0xc2>
				sscanf((char*)&MainBuffer[1], "%f,%f,%f;", &PID.Kp, &PID.Ki, &PID.Kd);
 8002142:	4b81      	ldr	r3, [pc, #516]	; (8002348 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	4b81      	ldr	r3, [pc, #516]	; (800234c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8002148:	4a81      	ldr	r2, [pc, #516]	; (8002350 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800214a:	4982      	ldr	r1, [pc, #520]	; (8002354 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800214c:	487d      	ldr	r0, [pc, #500]	; (8002344 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800214e:	f007 fd2d 	bl	8009bac <siscanf>
				PID.A0 = PID.Kp + PID.Ki + PID.Kd;
 8002152:	4b81      	ldr	r3, [pc, #516]	; (8002358 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002154:	ed93 7a06 	vldr	s14, [r3, #24]
 8002158:	4b7f      	ldr	r3, [pc, #508]	; (8002358 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800215a:	edd3 7a07 	vldr	s15, [r3, #28]
 800215e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002162:	4b7d      	ldr	r3, [pc, #500]	; (8002358 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002164:	edd3 7a08 	vldr	s15, [r3, #32]
 8002168:	ee77 7a27 	vadd.f32	s15, s14, s15
 800216c:	4b7a      	ldr	r3, [pc, #488]	; (8002358 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800216e:	edc3 7a00 	vstr	s15, [r3]
				PID.A1 = -PID.Kp - 2.0*PID.Kd;
 8002172:	4b79      	ldr	r3, [pc, #484]	; (8002358 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002174:	edd3 7a06 	vldr	s15, [r3, #24]
 8002178:	eef1 7a67 	vneg.f32	s15, s15
 800217c:	ee17 3a90 	vmov	r3, s15
 8002180:	4618      	mov	r0, r3
 8002182:	f7fe fa01 	bl	8000588 <__aeabi_f2d>
 8002186:	4604      	mov	r4, r0
 8002188:	460d      	mov	r5, r1
 800218a:	4b73      	ldr	r3, [pc, #460]	; (8002358 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe f9fa 	bl	8000588 <__aeabi_f2d>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	f7fe f898 	bl	80002cc <__adddf3>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4620      	mov	r0, r4
 80021a2:	4629      	mov	r1, r5
 80021a4:	f7fe f890 	bl	80002c8 <__aeabi_dsub>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	4610      	mov	r0, r2
 80021ae:	4619      	mov	r1, r3
 80021b0:	f7fe fd3a 	bl	8000c28 <__aeabi_d2f>
 80021b4:	4603      	mov	r3, r0
 80021b6:	4a68      	ldr	r2, [pc, #416]	; (8002358 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80021b8:	6053      	str	r3, [r2, #4]
				PID.A2 = PID.Kd;
 80021ba:	4b67      	ldr	r3, [pc, #412]	; (8002358 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	4a66      	ldr	r2, [pc, #408]	; (8002358 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80021c0:	6093      	str	r3, [r2, #8]
				arm_pid_init_f32(&PID, 0);
 80021c2:	2100      	movs	r1, #0
 80021c4:	4864      	ldr	r0, [pc, #400]	; (8002358 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80021c6:	f006 fd7b 	bl	8008cc0 <arm_pid_init_f32>
			}
			ProcessDataFlag = 0;
 80021ca:	4b5a      	ldr	r3, [pc, #360]	; (8002334 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
		}

		// Pomiar
		BMP280_Measure();
 80021d0:	f7ff fcf6 	bl	8001bc0 <BMP280_Measure>

		// Wyslij pomiar do terminala
		sprintf(SendBuffer, "%2.2f, %2.2f, %d;\r\n", Temperature, Tref, (int)(U*100.0));
 80021d4:	4b61      	ldr	r3, [pc, #388]	; (800235c <HAL_TIM_PeriodElapsedCallback+0x254>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7fe f9d5 	bl	8000588 <__aeabi_f2d>
 80021de:	4680      	mov	r8, r0
 80021e0:	4689      	mov	r9, r1
 80021e2:	4b56      	ldr	r3, [pc, #344]	; (800233c <HAL_TIM_PeriodElapsedCallback+0x234>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fe f9ce 	bl	8000588 <__aeabi_f2d>
 80021ec:	4604      	mov	r4, r0
 80021ee:	460d      	mov	r5, r1
 80021f0:	4b5b      	ldr	r3, [pc, #364]	; (8002360 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7fe f9c7 	bl	8000588 <__aeabi_f2d>
 80021fa:	f04f 0200 	mov.w	r2, #0
 80021fe:	4b59      	ldr	r3, [pc, #356]	; (8002364 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8002200:	f7fe fa1a 	bl	8000638 <__aeabi_dmul>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4610      	mov	r0, r2
 800220a:	4619      	mov	r1, r3
 800220c:	f7fe fcc4 	bl	8000b98 <__aeabi_d2iz>
 8002210:	4603      	mov	r3, r0
 8002212:	9302      	str	r3, [sp, #8]
 8002214:	e9cd 4500 	strd	r4, r5, [sp]
 8002218:	4642      	mov	r2, r8
 800221a:	464b      	mov	r3, r9
 800221c:	4952      	ldr	r1, [pc, #328]	; (8002368 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800221e:	4853      	ldr	r0, [pc, #332]	; (800236c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002220:	f007 fca4 	bl	8009b6c <siprintf>
		SendMessage(SendBuffer);
 8002224:	4851      	ldr	r0, [pc, #324]	; (800236c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002226:	f000 f90b 	bl	8002440 <SendMessage>

		// Zamkniety uklad regulacji z regulatorem PID
		//Uchyb regulacji
		error = Tref - Temperature;
 800222a:	4b44      	ldr	r3, [pc, #272]	; (800233c <HAL_TIM_PeriodElapsedCallback+0x234>)
 800222c:	ed93 7a00 	vldr	s14, [r3]
 8002230:	4b4a      	ldr	r3, [pc, #296]	; (800235c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8002232:	edd3 7a00 	vldr	s15, [r3]
 8002236:	ee77 7a67 	vsub.f32	s15, s14, s15
 800223a:	4b4d      	ldr	r3, [pc, #308]	; (8002370 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800223c:	edc3 7a00 	vstr	s15, [r3]
		// sygnal sterujacy z regulatora
		R = arm_pid_f32(&PID, error);
 8002240:	4b4b      	ldr	r3, [pc, #300]	; (8002370 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a44      	ldr	r2, [pc, #272]	; (8002358 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002246:	617a      	str	r2, [r7, #20]
 8002248:	613b      	str	r3, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	ed93 7a00 	vldr	s14, [r3]
 8002250:	edd7 7a04 	vldr	s15, [r7, #16]
 8002254:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	edd3 6a01 	vldr	s13, [r3, #4]
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	edd3 7a03 	vldr	s15, [r3, #12]
 8002264:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002268:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	edd3 6a02 	vldr	s13, [r3, #8]
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	edd3 7a04 	vldr	s15, [r3, #16]
 8002278:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800227c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8002286:	ee77 7a27 	vadd.f32	s15, s14, s15
 800228a:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	4a33      	ldr	r2, [pc, #204]	; (8002374 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80022a6:	6013      	str	r3, [r2, #0]
		U = R/10.0;
 80022a8:	4b32      	ldr	r3, [pc, #200]	; (8002374 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80022aa:	ed93 7a00 	vldr	s14, [r3]
 80022ae:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80022b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022b6:	4b2a      	ldr	r3, [pc, #168]	; (8002360 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80022b8:	edc3 7a00 	vstr	s15, [r3]
		// Saturacja sygnalu U
		U = (U <= 1.0) ? U : 1.0;
 80022bc:	4b28      	ldr	r3, [pc, #160]	; (8002360 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80022be:	edd3 7a00 	vldr	s15, [r3]
 80022c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80022c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ce:	d802      	bhi.n	80022d6 <HAL_TIM_PeriodElapsedCallback+0x1ce>
 80022d0:	4b23      	ldr	r3, [pc, #140]	; (8002360 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	e001      	b.n	80022da <HAL_TIM_PeriodElapsedCallback+0x1d2>
 80022d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80022da:	4a21      	ldr	r2, [pc, #132]	; (8002360 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80022dc:	6013      	str	r3, [r2, #0]
		U = (U >= 0.0) ? U : 0.0;
 80022de:	4b20      	ldr	r3, [pc, #128]	; (8002360 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80022e0:	edd3 7a00 	vldr	s15, [r3]
 80022e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ec:	db02      	blt.n	80022f4 <HAL_TIM_PeriodElapsedCallback+0x1ec>
 80022ee:	4b1c      	ldr	r3, [pc, #112]	; (8002360 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	e001      	b.n	80022f8 <HAL_TIM_PeriodElapsedCallback+0x1f0>
 80022f4:	f04f 0300 	mov.w	r3, #0
 80022f8:	4a19      	ldr	r2, [pc, #100]	; (8002360 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80022fa:	6013      	str	r3, [r2, #0]
		// Przeliczenie U na set_compare
		set_comp = U * D_PWM;
 80022fc:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8002378 <HAL_TIM_PeriodElapsedCallback+0x270>
 8002300:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002304:	4b16      	ldr	r3, [pc, #88]	; (8002360 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002306:	edd3 7a00 	vldr	s15, [r3]
 800230a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800230e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002312:	ee17 2a90 	vmov	r2, s15
 8002316:	4b19      	ldr	r3, [pc, #100]	; (800237c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8002318:	601a      	str	r2, [r3, #0]
		// Zadanie wypelnienia PWM
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, set_comp);
 800231a:	4b18      	ldr	r3, [pc, #96]	; (800237c <HAL_TIM_PeriodElapsedCallback+0x274>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	4b18      	ldr	r3, [pc, #96]	; (8002380 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8002324:	bf00      	nop
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800232e:	bf00      	nop
 8002330:	40000800 	.word	0x40000800
 8002334:	20000310 	.word	0x20000310
 8002338:	200002d0 	.word	0x200002d0
 800233c:	20000354 	.word	0x20000354
 8002340:	0800dd30 	.word	0x0800dd30
 8002344:	200002d1 	.word	0x200002d1
 8002348:	20000344 	.word	0x20000344
 800234c:	20000340 	.word	0x20000340
 8002350:	2000033c 	.word	0x2000033c
 8002354:	0800dd34 	.word	0x0800dd34
 8002358:	20000324 	.word	0x20000324
 800235c:	20000348 	.word	0x20000348
 8002360:	20000360 	.word	0x20000360
 8002364:	40590000 	.word	0x40590000
 8002368:	0800dd40 	.word	0x0800dd40
 800236c:	2000027c 	.word	0x2000027c
 8002370:	20000358 	.word	0x20000358
 8002374:	2000035c 	.word	0x2000035c
 8002378:	000004e2 	.word	0x000004e2
 800237c:	20000364 	.word	0x20000364
 8002380:	2000036c 	.word	0x2000036c

08002384 <InitializeSettings>:

void InitializeSettings(Settings *data) {
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]

	// Wczytanie ustawien zapisanych w EEPROM

	// Inicjalizacja ustawien domyslnych
    data->Tref = 25.0;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a0a      	ldr	r2, [pc, #40]	; (80023b8 <InitializeSettings+0x34>)
 8002390:	601a      	str	r2, [r3, #0]
    data->Kp = 1.0;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002398:	605a      	str	r2, [r3, #4]
    data->Ki = 0.0;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	609a      	str	r2, [r3, #8]
    data->Kd = 0.0;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f04f 0200 	mov.w	r2, #0
 80023a8:	60da      	str	r2, [r3, #12]
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	41c80000 	.word	0x41c80000

080023bc <HAL_UARTEx_RxEventCallback>:
void SaveSettings(Settings *data){

	// Zapisywanie danych do EEPROM
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 80023bc:	b5b0      	push	{r4, r5, r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	460b      	mov	r3, r1
 80023c6:	807b      	strh	r3, [r7, #2]

	// Funkcja do odbierania paczek danych z UART
    if(huart->Instance == USART3)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a17      	ldr	r2, [pc, #92]	; (800242c <HAL_UARTEx_RxEventCallback+0x70>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d128      	bne.n	8002424 <HAL_UARTEx_RxEventCallback+0x68>
    {
    	if(ProcessDataFlag == 0){
 80023d2:	4b17      	ldr	r3, [pc, #92]	; (8002430 <HAL_UARTEx_RxEventCallback+0x74>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d11f      	bne.n	800241a <HAL_UARTEx_RxEventCallback+0x5e>
    		memset(MainBuffer, '\000', MainBuffer_SIZE);
 80023da:	2240      	movs	r2, #64	; 0x40
 80023dc:	2100      	movs	r1, #0
 80023de:	4815      	ldr	r0, [pc, #84]	; (8002434 <HAL_UARTEx_RxEventCallback+0x78>)
 80023e0:	f007 fc55 	bl	8009c8e <memset>
    		memcpy(MainBuffer, ReceiveBuffer, ReceiveBuffer_SIZE);
 80023e4:	4a13      	ldr	r2, [pc, #76]	; (8002434 <HAL_UARTEx_RxEventCallback+0x78>)
 80023e6:	4b14      	ldr	r3, [pc, #80]	; (8002438 <HAL_UARTEx_RxEventCallback+0x7c>)
 80023e8:	4614      	mov	r4, r2
 80023ea:	461d      	mov	r5, r3
 80023ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80023fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    		memset(ReceiveBuffer, '\000', ReceiveBuffer_SIZE);
 8002400:	2240      	movs	r2, #64	; 0x40
 8002402:	2100      	movs	r1, #0
 8002404:	480c      	ldr	r0, [pc, #48]	; (8002438 <HAL_UARTEx_RxEventCallback+0x7c>)
 8002406:	f007 fc42 	bl	8009c8e <memset>
    		ProcessDataFlag = 1;
 800240a:	4b09      	ldr	r3, [pc, #36]	; (8002430 <HAL_UARTEx_RxEventCallback+0x74>)
 800240c:	2201      	movs	r2, #1
 800240e:	601a      	str	r2, [r3, #0]

    		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, ReceiveBuffer, ReceiveBuffer_SIZE);
 8002410:	2240      	movs	r2, #64	; 0x40
 8002412:	4909      	ldr	r1, [pc, #36]	; (8002438 <HAL_UARTEx_RxEventCallback+0x7c>)
 8002414:	4809      	ldr	r0, [pc, #36]	; (800243c <HAL_UARTEx_RxEventCallback+0x80>)
 8002416:	f006 fbfe 	bl	8008c16 <HAL_UARTEx_ReceiveToIdle_DMA>
    	}

    	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, ReceiveBuffer, ReceiveBuffer_SIZE);
 800241a:	2240      	movs	r2, #64	; 0x40
 800241c:	4906      	ldr	r1, [pc, #24]	; (8002438 <HAL_UARTEx_RxEventCallback+0x7c>)
 800241e:	4807      	ldr	r0, [pc, #28]	; (800243c <HAL_UARTEx_RxEventCallback+0x80>)
 8002420:	f006 fbf9 	bl	8008c16 <HAL_UARTEx_ReceiveToIdle_DMA>
    }
}
 8002424:	bf00      	nop
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bdb0      	pop	{r4, r5, r7, pc}
 800242c:	40004800 	.word	0x40004800
 8002430:	20000310 	.word	0x20000310
 8002434:	200002d0 	.word	0x200002d0
 8002438:	20000290 	.word	0x20000290
 800243c:	200003b8 	.word	0x200003b8

08002440 <SendMessage>:

void SendMessage(const char *message){
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]

	// Wysylanie wiadomosci do UART
	if (HAL_UART_Transmit_IT(&huart3, (uint8_t*)message, strlen(message)) != HAL_OK) {
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f7fd ff31 	bl	80002b0 <strlen>
 800244e:	4603      	mov	r3, r0
 8002450:	b29b      	uxth	r3, r3
 8002452:	461a      	mov	r2, r3
 8002454:	6879      	ldr	r1, [r7, #4]
 8002456:	4806      	ldr	r0, [pc, #24]	; (8002470 <SendMessage+0x30>)
 8002458:	f005 f96a 	bl	8007730 <HAL_UART_Transmit_IT>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <SendMessage+0x26>
		Error_Handler();
 8002462:	f000 f90b 	bl	800267c <Error_Handler>
	}
}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	200003b8 	.word	0x200003b8

08002474 <MX_TIM_Init>:

void MX_TIM_Init(void){
 8002474:	b580      	push	{r7, lr}
 8002476:	b08e      	sub	sp, #56	; 0x38
 8002478:	af00      	add	r7, sp, #0

	// Redefinicja funkcji bibliotecznej MX_TIM4_Init(); Okres PWM = 500ms
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800247a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	605a      	str	r2, [r3, #4]
 8002484:	609a      	str	r2, [r3, #8]
 8002486:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002488:	f107 031c 	add.w	r3, r7, #28
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002494:	463b      	mov	r3, r7
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	605a      	str	r2, [r3, #4]
 800249c:	609a      	str	r2, [r3, #8]
 800249e:	60da      	str	r2, [r3, #12]
 80024a0:	611a      	str	r2, [r3, #16]
 80024a2:	615a      	str	r2, [r3, #20]
 80024a4:	619a      	str	r2, [r3, #24]

	htim4.Instance = TIM4;
 80024a6:	4b2e      	ldr	r3, [pc, #184]	; (8002560 <MX_TIM_Init+0xec>)
 80024a8:	4a2e      	ldr	r2, [pc, #184]	; (8002564 <MX_TIM_Init+0xf0>)
 80024aa:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 3599;
 80024ac:	4b2c      	ldr	r3, [pc, #176]	; (8002560 <MX_TIM_Init+0xec>)
 80024ae:	f640 620f 	movw	r2, #3599	; 0xe0f
 80024b2:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b4:	4b2a      	ldr	r3, [pc, #168]	; (8002560 <MX_TIM_Init+0xec>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 9999;
 80024ba:	4b29      	ldr	r3, [pc, #164]	; (8002560 <MX_TIM_Init+0xec>)
 80024bc:	f242 720f 	movw	r2, #9999	; 0x270f
 80024c0:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024c2:	4b27      	ldr	r3, [pc, #156]	; (8002560 <MX_TIM_Init+0xec>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024c8:	4b25      	ldr	r3, [pc, #148]	; (8002560 <MX_TIM_Init+0xec>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80024ce:	4824      	ldr	r0, [pc, #144]	; (8002560 <MX_TIM_Init+0xec>)
 80024d0:	f003 ff24 	bl	800631c <HAL_TIM_Base_Init>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <MX_TIM_Init+0x6a>
	{
		Error_Handler();
 80024da:	f000 f8cf 	bl	800267c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024e2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80024e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024e8:	4619      	mov	r1, r3
 80024ea:	481d      	ldr	r0, [pc, #116]	; (8002560 <MX_TIM_Init+0xec>)
 80024ec:	f004 fb76 	bl	8006bdc <HAL_TIM_ConfigClockSource>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_TIM_Init+0x86>
	{
		Error_Handler();
 80024f6:	f000 f8c1 	bl	800267c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80024fa:	4819      	ldr	r0, [pc, #100]	; (8002560 <MX_TIM_Init+0xec>)
 80024fc:	f003 ffde 	bl	80064bc <HAL_TIM_PWM_Init>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <MX_TIM_Init+0x96>
	{
		Error_Handler();
 8002506:	f000 f8b9 	bl	800267c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800250a:	2300      	movs	r3, #0
 800250c:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800250e:	2300      	movs	r3, #0
 8002510:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002512:	f107 031c 	add.w	r3, r7, #28
 8002516:	4619      	mov	r1, r3
 8002518:	4811      	ldr	r0, [pc, #68]	; (8002560 <MX_TIM_Init+0xec>)
 800251a:	f005 f80f 	bl	800753c <HAL_TIMEx_MasterConfigSynchronization>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <MX_TIM_Init+0xb4>
	{
		Error_Handler();
 8002524:	f000 f8aa 	bl	800267c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002528:	2360      	movs	r3, #96	; 0x60
 800252a:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 500;
 800252c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002530:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002532:	2300      	movs	r3, #0
 8002534:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002536:	2300      	movs	r3, #0
 8002538:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800253a:	463b      	mov	r3, r7
 800253c:	2200      	movs	r2, #0
 800253e:	4619      	mov	r1, r3
 8002540:	4807      	ldr	r0, [pc, #28]	; (8002560 <MX_TIM_Init+0xec>)
 8002542:	f004 fa37 	bl	80069b4 <HAL_TIM_PWM_ConfigChannel>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <MX_TIM_Init+0xdc>
	{
		Error_Handler();
 800254c:	f000 f896 	bl	800267c <Error_Handler>
	}

	HAL_TIM_MspPostInit(&htim4);
 8002550:	4803      	ldr	r0, [pc, #12]	; (8002560 <MX_TIM_Init+0xec>)
 8002552:	f000 fa17 	bl	8002984 <HAL_TIM_MspPostInit>
}
 8002556:	bf00      	nop
 8002558:	3738      	adds	r7, #56	; 0x38
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	2000036c 	.word	0x2000036c
 8002564:	40000800 	.word	0x40000800

08002568 <SensorConfiguration>:

void SensorConfiguration(void){
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af02      	add	r7, sp, #8

	// Konfiguracja czujnika
	int ret = BMP280_Config(OSRS_16, OSRS_16, OSRS_OFF, MODE_NORMAL, T_SB_1000, IIR_16);
 800256e:	2304      	movs	r3, #4
 8002570:	9301      	str	r3, [sp, #4]
 8002572:	2305      	movs	r3, #5
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	2303      	movs	r3, #3
 8002578:	2200      	movs	r2, #0
 800257a:	2105      	movs	r1, #5
 800257c:	2005      	movs	r0, #5
 800257e:	f7fe fe89 	bl	8001294 <BMP280_Config>
 8002582:	6078      	str	r0, [r7, #4]

	if (ret>=0){
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	db04      	blt.n	8002594 <SensorConfiguration+0x2c>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800258a:	2101      	movs	r1, #1
 800258c:	4806      	ldr	r0, [pc, #24]	; (80025a8 <SensorConfiguration+0x40>)
 800258e:	f001 fa94 	bl	8003aba <HAL_GPIO_TogglePin>
	}else{
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
	}
}
 8002592:	e004      	b.n	800259e <SensorConfiguration+0x36>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8002594:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002598:	4803      	ldr	r0, [pc, #12]	; (80025a8 <SensorConfiguration+0x40>)
 800259a:	f001 fa8e 	bl	8003aba <HAL_GPIO_TogglePin>
}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40020400 	.word	0x40020400

080025ac <SystemClock_Config>:

// FUNKCJE SYSTEMOWE -----------------------------------------
void SystemClock_Config(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b094      	sub	sp, #80	; 0x50
 80025b0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025b2:	f107 0320 	add.w	r3, r7, #32
 80025b6:	2230      	movs	r2, #48	; 0x30
 80025b8:	2100      	movs	r1, #0
 80025ba:	4618      	mov	r0, r3
 80025bc:	f007 fb67 	bl	8009c8e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025c0:	f107 030c 	add.w	r3, r7, #12
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	60da      	str	r2, [r3, #12]
 80025ce:	611a      	str	r2, [r3, #16]

	HAL_PWR_EnableBkUpAccess();
 80025d0:	f002 fdda 	bl	8005188 <HAL_PWR_EnableBkUpAccess>

	__HAL_RCC_PWR_CLK_ENABLE();
 80025d4:	4b27      	ldr	r3, [pc, #156]	; (8002674 <SystemClock_Config+0xc8>)
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	4a26      	ldr	r2, [pc, #152]	; (8002674 <SystemClock_Config+0xc8>)
 80025da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025de:	6413      	str	r3, [r2, #64]	; 0x40
 80025e0:	4b24      	ldr	r3, [pc, #144]	; (8002674 <SystemClock_Config+0xc8>)
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e8:	60bb      	str	r3, [r7, #8]
 80025ea:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80025ec:	4b22      	ldr	r3, [pc, #136]	; (8002678 <SystemClock_Config+0xcc>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80025f4:	4a20      	ldr	r2, [pc, #128]	; (8002678 <SystemClock_Config+0xcc>)
 80025f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025fa:	6013      	str	r3, [r2, #0]
 80025fc:	4b1e      	ldr	r3, [pc, #120]	; (8002678 <SystemClock_Config+0xcc>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002604:	607b      	str	r3, [r7, #4]
 8002606:	687b      	ldr	r3, [r7, #4]

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002608:	2301      	movs	r3, #1
 800260a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800260c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002610:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002612:	2302      	movs	r3, #2
 8002614:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002616:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800261a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800261c:	2304      	movs	r3, #4
 800261e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 8002620:	2348      	movs	r3, #72	; 0x48
 8002622:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002624:	2302      	movs	r3, #2
 8002626:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8002628:	2303      	movs	r3, #3
 800262a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800262c:	f107 0320 	add.w	r3, r7, #32
 8002630:	4618      	mov	r0, r3
 8002632:	f002 fdb9 	bl	80051a8 <HAL_RCC_OscConfig>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <SystemClock_Config+0x94>
	{
		Error_Handler();
 800263c:	f000 f81e 	bl	800267c <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002640:	230f      	movs	r3, #15
 8002642:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002644:	2302      	movs	r3, #2
 8002646:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800264c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002650:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002652:	2300      	movs	r3, #0
 8002654:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002656:	f107 030c 	add.w	r3, r7, #12
 800265a:	2102      	movs	r1, #2
 800265c:	4618      	mov	r0, r3
 800265e:	f003 f847 	bl	80056f0 <HAL_RCC_ClockConfig>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <SystemClock_Config+0xc0>
	{
		Error_Handler();
 8002668:	f000 f808 	bl	800267c <Error_Handler>
	}
}
 800266c:	bf00      	nop
 800266e:	3750      	adds	r7, #80	; 0x50
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40023800 	.word	0x40023800
 8002678:	40007000 	.word	0x40007000

0800267c <Error_Handler>:

void Error_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002680:	b672      	cpsid	i
}
 8002682:	bf00      	nop
	__disable_irq();
	while(1){}
 8002684:	e7fe      	b.n	8002684 <Error_Handler+0x8>
	...

08002688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800268e:	4b0f      	ldr	r3, [pc, #60]	; (80026cc <HAL_MspInit+0x44>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	4a0e      	ldr	r2, [pc, #56]	; (80026cc <HAL_MspInit+0x44>)
 8002694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002698:	6413      	str	r3, [r2, #64]	; 0x40
 800269a:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <HAL_MspInit+0x44>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a2:	607b      	str	r3, [r7, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a6:	4b09      	ldr	r3, [pc, #36]	; (80026cc <HAL_MspInit+0x44>)
 80026a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026aa:	4a08      	ldr	r2, [pc, #32]	; (80026cc <HAL_MspInit+0x44>)
 80026ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026b0:	6453      	str	r3, [r2, #68]	; 0x44
 80026b2:	4b06      	ldr	r3, [pc, #24]	; (80026cc <HAL_MspInit+0x44>)
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ba:	603b      	str	r3, [r7, #0]
 80026bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	40023800 	.word	0x40023800

080026d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026d4:	e7fe      	b.n	80026d4 <NMI_Handler+0x4>

080026d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026d6:	b480      	push	{r7}
 80026d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026da:	e7fe      	b.n	80026da <HardFault_Handler+0x4>

080026dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026e0:	e7fe      	b.n	80026e0 <MemManage_Handler+0x4>

080026e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026e2:	b480      	push	{r7}
 80026e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026e6:	e7fe      	b.n	80026e6 <BusFault_Handler+0x4>

080026e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026ec:	e7fe      	b.n	80026ec <UsageFault_Handler+0x4>

080026ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026ee:	b480      	push	{r7}
 80026f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026f2:	bf00      	nop
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002700:	bf00      	nop
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800270a:	b480      	push	{r7}
 800270c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800270e:	bf00      	nop
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800271c:	f000 fa9a 	bl	8002c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002720:	bf00      	nop
 8002722:	bd80      	pop	{r7, pc}

08002724 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002728:	4802      	ldr	r0, [pc, #8]	; (8002734 <DMA1_Stream1_IRQHandler+0x10>)
 800272a:	f000 fd89 	bl	8003240 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	20000440 	.word	0x20000440

08002738 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800273c:	4802      	ldr	r0, [pc, #8]	; (8002748 <TIM4_IRQHandler+0x10>)
 800273e:	f004 f819 	bl	8006774 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	2000036c 	.word	0x2000036c

0800274c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002750:	4802      	ldr	r0, [pc, #8]	; (800275c <I2C1_EV_IRQHandler+0x10>)
 8002752:	f001 fc8b 	bl	800406c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000228 	.word	0x20000228

08002760 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002764:	4802      	ldr	r0, [pc, #8]	; (8002770 <I2C1_ER_IRQHandler+0x10>)
 8002766:	f001 fc9b 	bl	80040a0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20000228 	.word	0x20000228

08002774 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002778:	4802      	ldr	r0, [pc, #8]	; (8002784 <USART3_IRQHandler+0x10>)
 800277a:	f005 f837 	bl	80077ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	200003b8 	.word	0x200003b8

08002788 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  return 1;
 800278c:	2301      	movs	r3, #1
}
 800278e:	4618      	mov	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <_kill>:

int _kill(int pid, int sig)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027a2:	f007 fac7 	bl	8009d34 <__errno>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2216      	movs	r2, #22
 80027aa:	601a      	str	r2, [r3, #0]
  return -1;
 80027ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <_exit>:

void _exit (int status)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027c0:	f04f 31ff 	mov.w	r1, #4294967295
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f7ff ffe7 	bl	8002798 <_kill>
  while (1) {}    /* Make sure we hang here */
 80027ca:	e7fe      	b.n	80027ca <_exit+0x12>

080027cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	e00a      	b.n	80027f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027de:	f3af 8000 	nop.w
 80027e2:	4601      	mov	r1, r0
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	60ba      	str	r2, [r7, #8]
 80027ea:	b2ca      	uxtb	r2, r1
 80027ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	3301      	adds	r3, #1
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	dbf0      	blt.n	80027de <_read+0x12>
  }

  return len;
 80027fc:	687b      	ldr	r3, [r7, #4]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b086      	sub	sp, #24
 800280a:	af00      	add	r7, sp, #0
 800280c:	60f8      	str	r0, [r7, #12]
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	e009      	b.n	800282c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	60ba      	str	r2, [r7, #8]
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	3301      	adds	r3, #1
 800282a:	617b      	str	r3, [r7, #20]
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	429a      	cmp	r2, r3
 8002832:	dbf1      	blt.n	8002818 <_write+0x12>
  }
  return len;
 8002834:	687b      	ldr	r3, [r7, #4]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <_close>:

int _close(int file)
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002846:	f04f 33ff 	mov.w	r3, #4294967295
}
 800284a:	4618      	mov	r0, r3
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
 800285e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002866:	605a      	str	r2, [r3, #4]
  return 0;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <_isatty>:

int _isatty(int file)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800287e:	2301      	movs	r3, #1
}
 8002880:	4618      	mov	r0, r3
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3714      	adds	r7, #20
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
	...

080028a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028b0:	4a14      	ldr	r2, [pc, #80]	; (8002904 <_sbrk+0x5c>)
 80028b2:	4b15      	ldr	r3, [pc, #84]	; (8002908 <_sbrk+0x60>)
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028bc:	4b13      	ldr	r3, [pc, #76]	; (800290c <_sbrk+0x64>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d102      	bne.n	80028ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028c4:	4b11      	ldr	r3, [pc, #68]	; (800290c <_sbrk+0x64>)
 80028c6:	4a12      	ldr	r2, [pc, #72]	; (8002910 <_sbrk+0x68>)
 80028c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028ca:	4b10      	ldr	r3, [pc, #64]	; (800290c <_sbrk+0x64>)
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4413      	add	r3, r2
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d207      	bcs.n	80028e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028d8:	f007 fa2c 	bl	8009d34 <__errno>
 80028dc:	4603      	mov	r3, r0
 80028de:	220c      	movs	r2, #12
 80028e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028e2:	f04f 33ff 	mov.w	r3, #4294967295
 80028e6:	e009      	b.n	80028fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028e8:	4b08      	ldr	r3, [pc, #32]	; (800290c <_sbrk+0x64>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ee:	4b07      	ldr	r3, [pc, #28]	; (800290c <_sbrk+0x64>)
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4413      	add	r3, r2
 80028f6:	4a05      	ldr	r2, [pc, #20]	; (800290c <_sbrk+0x64>)
 80028f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028fa:	68fb      	ldr	r3, [r7, #12]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	20050000 	.word	0x20050000
 8002908:	00000400 	.word	0x00000400
 800290c:	20000368 	.word	0x20000368
 8002910:	200005f0 	.word	0x200005f0

08002914 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002918:	4b06      	ldr	r3, [pc, #24]	; (8002934 <SystemInit+0x20>)
 800291a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291e:	4a05      	ldr	r2, [pc, #20]	; (8002934 <SystemInit+0x20>)
 8002920:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002924:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002928:	bf00      	nop
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	e000ed00 	.word	0xe000ed00

08002938 <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim4);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a0d      	ldr	r2, [pc, #52]	; (800297c <HAL_TIM_Base_MspInit+0x44>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d113      	bne.n	8002972 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800294a:	4b0d      	ldr	r3, [pc, #52]	; (8002980 <HAL_TIM_Base_MspInit+0x48>)
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	4a0c      	ldr	r2, [pc, #48]	; (8002980 <HAL_TIM_Base_MspInit+0x48>)
 8002950:	f043 0304 	orr.w	r3, r3, #4
 8002954:	6413      	str	r3, [r2, #64]	; 0x40
 8002956:	4b0a      	ldr	r3, [pc, #40]	; (8002980 <HAL_TIM_Base_MspInit+0x48>)
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002962:	2200      	movs	r2, #0
 8002964:	2100      	movs	r1, #0
 8002966:	201e      	movs	r0, #30
 8002968:	f000 fa93 	bl	8002e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800296c:	201e      	movs	r0, #30
 800296e:	f000 faac 	bl	8002eca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002972:	bf00      	nop
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40000800 	.word	0x40000800
 8002980:	40023800 	.word	0x40023800

08002984 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800298c:	f107 030c 	add.w	r3, r7, #12
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	605a      	str	r2, [r3, #4]
 8002996:	609a      	str	r2, [r3, #8]
 8002998:	60da      	str	r2, [r3, #12]
 800299a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a11      	ldr	r2, [pc, #68]	; (80029e8 <HAL_TIM_MspPostInit+0x64>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d11c      	bne.n	80029e0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029a6:	4b11      	ldr	r3, [pc, #68]	; (80029ec <HAL_TIM_MspPostInit+0x68>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	4a10      	ldr	r2, [pc, #64]	; (80029ec <HAL_TIM_MspPostInit+0x68>)
 80029ac:	f043 0308 	orr.w	r3, r3, #8
 80029b0:	6313      	str	r3, [r2, #48]	; 0x30
 80029b2:	4b0e      	ldr	r3, [pc, #56]	; (80029ec <HAL_TIM_MspPostInit+0x68>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	60bb      	str	r3, [r7, #8]
 80029bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80029be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c4:	2302      	movs	r3, #2
 80029c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029cc:	2300      	movs	r3, #0
 80029ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80029d0:	2302      	movs	r3, #2
 80029d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029d4:	f107 030c 	add.w	r3, r7, #12
 80029d8:	4619      	mov	r1, r3
 80029da:	4805      	ldr	r0, [pc, #20]	; (80029f0 <HAL_TIM_MspPostInit+0x6c>)
 80029dc:	f000 fea8 	bl	8003730 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80029e0:	bf00      	nop
 80029e2:	3720      	adds	r7, #32
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40000800 	.word	0x40000800
 80029ec:	40023800 	.word	0x40023800
 80029f0:	40020c00 	.word	0x40020c00

080029f4 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80029f8:	4b14      	ldr	r3, [pc, #80]	; (8002a4c <MX_USART3_UART_Init+0x58>)
 80029fa:	4a15      	ldr	r2, [pc, #84]	; (8002a50 <MX_USART3_UART_Init+0x5c>)
 80029fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80029fe:	4b13      	ldr	r3, [pc, #76]	; (8002a4c <MX_USART3_UART_Init+0x58>)
 8002a00:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a06:	4b11      	ldr	r3, [pc, #68]	; (8002a4c <MX_USART3_UART_Init+0x58>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a0c:	4b0f      	ldr	r3, [pc, #60]	; (8002a4c <MX_USART3_UART_Init+0x58>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a12:	4b0e      	ldr	r3, [pc, #56]	; (8002a4c <MX_USART3_UART_Init+0x58>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a18:	4b0c      	ldr	r3, [pc, #48]	; (8002a4c <MX_USART3_UART_Init+0x58>)
 8002a1a:	220c      	movs	r2, #12
 8002a1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a1e:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <MX_USART3_UART_Init+0x58>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a24:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <MX_USART3_UART_Init+0x58>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a2a:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <MX_USART3_UART_Init+0x58>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a30:	4b06      	ldr	r3, [pc, #24]	; (8002a4c <MX_USART3_UART_Init+0x58>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a36:	4805      	ldr	r0, [pc, #20]	; (8002a4c <MX_USART3_UART_Init+0x58>)
 8002a38:	f004 fe2c 	bl	8007694 <HAL_UART_Init>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002a42:	f7ff fe1b 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002a46:	bf00      	nop
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	200003b8 	.word	0x200003b8
 8002a50:	40004800 	.word	0x40004800

08002a54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b0aa      	sub	sp, #168	; 0xa8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a5c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	605a      	str	r2, [r3, #4]
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	60da      	str	r2, [r3, #12]
 8002a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a6c:	f107 0310 	add.w	r3, r7, #16
 8002a70:	2284      	movs	r2, #132	; 0x84
 8002a72:	2100      	movs	r1, #0
 8002a74:	4618      	mov	r0, r3
 8002a76:	f007 f90a 	bl	8009c8e <memset>
  if(uartHandle->Instance==USART3)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a3d      	ldr	r2, [pc, #244]	; (8002b74 <HAL_UART_MspInit+0x120>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d172      	bne.n	8002b6a <HAL_UART_MspInit+0x116>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002a84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a88:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a8e:	f107 0310 	add.w	r3, r7, #16
 8002a92:	4618      	mov	r0, r3
 8002a94:	f003 f852 	bl	8005b3c <HAL_RCCEx_PeriphCLKConfig>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002a9e:	f7ff fded 	bl	800267c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002aa2:	4b35      	ldr	r3, [pc, #212]	; (8002b78 <HAL_UART_MspInit+0x124>)
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	4a34      	ldr	r2, [pc, #208]	; (8002b78 <HAL_UART_MspInit+0x124>)
 8002aa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aac:	6413      	str	r3, [r2, #64]	; 0x40
 8002aae:	4b32      	ldr	r3, [pc, #200]	; (8002b78 <HAL_UART_MspInit+0x124>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002aba:	4b2f      	ldr	r3, [pc, #188]	; (8002b78 <HAL_UART_MspInit+0x124>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	4a2e      	ldr	r2, [pc, #184]	; (8002b78 <HAL_UART_MspInit+0x124>)
 8002ac0:	f043 0308 	orr.w	r3, r3, #8
 8002ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac6:	4b2c      	ldr	r3, [pc, #176]	; (8002b78 <HAL_UART_MspInit+0x124>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	60bb      	str	r3, [r7, #8]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002ad2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ad6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ada:	2302      	movs	r3, #2
 8002adc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002aec:	2307      	movs	r3, #7
 8002aee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002af2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002af6:	4619      	mov	r1, r3
 8002af8:	4820      	ldr	r0, [pc, #128]	; (8002b7c <HAL_UART_MspInit+0x128>)
 8002afa:	f000 fe19 	bl	8003730 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002afe:	4b20      	ldr	r3, [pc, #128]	; (8002b80 <HAL_UART_MspInit+0x12c>)
 8002b00:	4a20      	ldr	r2, [pc, #128]	; (8002b84 <HAL_UART_MspInit+0x130>)
 8002b02:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002b04:	4b1e      	ldr	r3, [pc, #120]	; (8002b80 <HAL_UART_MspInit+0x12c>)
 8002b06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b0a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b0c:	4b1c      	ldr	r3, [pc, #112]	; (8002b80 <HAL_UART_MspInit+0x12c>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b12:	4b1b      	ldr	r3, [pc, #108]	; (8002b80 <HAL_UART_MspInit+0x12c>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b18:	4b19      	ldr	r3, [pc, #100]	; (8002b80 <HAL_UART_MspInit+0x12c>)
 8002b1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b1e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b20:	4b17      	ldr	r3, [pc, #92]	; (8002b80 <HAL_UART_MspInit+0x12c>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b26:	4b16      	ldr	r3, [pc, #88]	; (8002b80 <HAL_UART_MspInit+0x12c>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002b2c:	4b14      	ldr	r3, [pc, #80]	; (8002b80 <HAL_UART_MspInit+0x12c>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b32:	4b13      	ldr	r3, [pc, #76]	; (8002b80 <HAL_UART_MspInit+0x12c>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b38:	4b11      	ldr	r3, [pc, #68]	; (8002b80 <HAL_UART_MspInit+0x12c>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002b3e:	4810      	ldr	r0, [pc, #64]	; (8002b80 <HAL_UART_MspInit+0x12c>)
 8002b40:	f000 f9de 	bl	8002f00 <HAL_DMA_Init>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8002b4a:	f7ff fd97 	bl	800267c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a0b      	ldr	r2, [pc, #44]	; (8002b80 <HAL_UART_MspInit+0x12c>)
 8002b52:	675a      	str	r2, [r3, #116]	; 0x74
 8002b54:	4a0a      	ldr	r2, [pc, #40]	; (8002b80 <HAL_UART_MspInit+0x12c>)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	2027      	movs	r0, #39	; 0x27
 8002b60:	f000 f997 	bl	8002e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002b64:	2027      	movs	r0, #39	; 0x27
 8002b66:	f000 f9b0 	bl	8002eca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002b6a:	bf00      	nop
 8002b6c:	37a8      	adds	r7, #168	; 0xa8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40004800 	.word	0x40004800
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	40020c00 	.word	0x40020c00
 8002b80:	20000440 	.word	0x20000440
 8002b84:	40026028 	.word	0x40026028

08002b88 <Reset_Handler>:
 8002b88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bc0 <LoopFillZerobss+0x12>
 8002b8c:	480d      	ldr	r0, [pc, #52]	; (8002bc4 <LoopFillZerobss+0x16>)
 8002b8e:	490e      	ldr	r1, [pc, #56]	; (8002bc8 <LoopFillZerobss+0x1a>)
 8002b90:	4a0e      	ldr	r2, [pc, #56]	; (8002bcc <LoopFillZerobss+0x1e>)
 8002b92:	2300      	movs	r3, #0
 8002b94:	e002      	b.n	8002b9c <LoopCopyDataInit>

08002b96 <CopyDataInit>:
 8002b96:	58d4      	ldr	r4, [r2, r3]
 8002b98:	50c4      	str	r4, [r0, r3]
 8002b9a:	3304      	adds	r3, #4

08002b9c <LoopCopyDataInit>:
 8002b9c:	18c4      	adds	r4, r0, r3
 8002b9e:	428c      	cmp	r4, r1
 8002ba0:	d3f9      	bcc.n	8002b96 <CopyDataInit>
 8002ba2:	4a0b      	ldr	r2, [pc, #44]	; (8002bd0 <LoopFillZerobss+0x22>)
 8002ba4:	4c0b      	ldr	r4, [pc, #44]	; (8002bd4 <LoopFillZerobss+0x26>)
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	e001      	b.n	8002bae <LoopFillZerobss>

08002baa <FillZerobss>:
 8002baa:	6013      	str	r3, [r2, #0]
 8002bac:	3204      	adds	r2, #4

08002bae <LoopFillZerobss>:
 8002bae:	42a2      	cmp	r2, r4
 8002bb0:	d3fb      	bcc.n	8002baa <FillZerobss>
 8002bb2:	f7ff feaf 	bl	8002914 <SystemInit>
 8002bb6:	f007 f8c3 	bl	8009d40 <__libc_init_array>
 8002bba:	f7ff fa5f 	bl	800207c <main>
 8002bbe:	4770      	bx	lr
 8002bc0:	20050000 	.word	0x20050000
 8002bc4:	20000000 	.word	0x20000000
 8002bc8:	200001d4 	.word	0x200001d4
 8002bcc:	0800e1d4 	.word	0x0800e1d4
 8002bd0:	200001d4 	.word	0x200001d4
 8002bd4:	200005f0 	.word	0x200005f0

08002bd8 <ADC_IRQHandler>:
 8002bd8:	e7fe      	b.n	8002bd8 <ADC_IRQHandler>

08002bda <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bde:	2003      	movs	r0, #3
 8002be0:	f000 f94c 	bl	8002e7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002be4:	2000      	movs	r0, #0
 8002be6:	f000 f805 	bl	8002bf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bea:	f7ff fd4d 	bl	8002688 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bfc:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <HAL_InitTick+0x54>)
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	4b12      	ldr	r3, [pc, #72]	; (8002c4c <HAL_InitTick+0x58>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	4619      	mov	r1, r3
 8002c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 f967 	bl	8002ee6 <HAL_SYSTICK_Config>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e00e      	b.n	8002c40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b0f      	cmp	r3, #15
 8002c26:	d80a      	bhi.n	8002c3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c28:	2200      	movs	r2, #0
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c30:	f000 f92f 	bl	8002e92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c34:	4a06      	ldr	r2, [pc, #24]	; (8002c50 <HAL_InitTick+0x5c>)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	e000      	b.n	8002c40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	20000000 	.word	0x20000000
 8002c4c:	20000008 	.word	0x20000008
 8002c50:	20000004 	.word	0x20000004

08002c54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c58:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <HAL_IncTick+0x20>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <HAL_IncTick+0x24>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4413      	add	r3, r2
 8002c64:	4a04      	ldr	r2, [pc, #16]	; (8002c78 <HAL_IncTick+0x24>)
 8002c66:	6013      	str	r3, [r2, #0]
}
 8002c68:	bf00      	nop
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	20000008 	.word	0x20000008
 8002c78:	200004a0 	.word	0x200004a0

08002c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c80:	4b03      	ldr	r3, [pc, #12]	; (8002c90 <HAL_GetTick+0x14>)
 8002c82:	681b      	ldr	r3, [r3, #0]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	200004a0 	.word	0x200004a0

08002c94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c9c:	f7ff ffee 	bl	8002c7c <HAL_GetTick>
 8002ca0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cac:	d005      	beq.n	8002cba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cae:	4b0a      	ldr	r3, [pc, #40]	; (8002cd8 <HAL_Delay+0x44>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cba:	bf00      	nop
 8002cbc:	f7ff ffde 	bl	8002c7c <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d8f7      	bhi.n	8002cbc <HAL_Delay+0x28>
  {
  }
}
 8002ccc:	bf00      	nop
 8002cce:	bf00      	nop
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	20000008 	.word	0x20000008

08002cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <__NVIC_SetPriorityGrouping+0x40>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cf2:	68ba      	ldr	r2, [r7, #8]
 8002cf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d04:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <__NVIC_SetPriorityGrouping+0x44>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d0a:	4a04      	ldr	r2, [pc, #16]	; (8002d1c <__NVIC_SetPriorityGrouping+0x40>)
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	60d3      	str	r3, [r2, #12]
}
 8002d10:	bf00      	nop
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	e000ed00 	.word	0xe000ed00
 8002d20:	05fa0000 	.word	0x05fa0000

08002d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d28:	4b04      	ldr	r3, [pc, #16]	; (8002d3c <__NVIC_GetPriorityGrouping+0x18>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	0a1b      	lsrs	r3, r3, #8
 8002d2e:	f003 0307 	and.w	r3, r3, #7
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	e000ed00 	.word	0xe000ed00

08002d40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	4603      	mov	r3, r0
 8002d48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	db0b      	blt.n	8002d6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d52:	79fb      	ldrb	r3, [r7, #7]
 8002d54:	f003 021f 	and.w	r2, r3, #31
 8002d58:	4907      	ldr	r1, [pc, #28]	; (8002d78 <__NVIC_EnableIRQ+0x38>)
 8002d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5e:	095b      	lsrs	r3, r3, #5
 8002d60:	2001      	movs	r0, #1
 8002d62:	fa00 f202 	lsl.w	r2, r0, r2
 8002d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	e000e100 	.word	0xe000e100

08002d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	6039      	str	r1, [r7, #0]
 8002d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	db0a      	blt.n	8002da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	490c      	ldr	r1, [pc, #48]	; (8002dc8 <__NVIC_SetPriority+0x4c>)
 8002d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9a:	0112      	lsls	r2, r2, #4
 8002d9c:	b2d2      	uxtb	r2, r2
 8002d9e:	440b      	add	r3, r1
 8002da0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002da4:	e00a      	b.n	8002dbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	4908      	ldr	r1, [pc, #32]	; (8002dcc <__NVIC_SetPriority+0x50>)
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	3b04      	subs	r3, #4
 8002db4:	0112      	lsls	r2, r2, #4
 8002db6:	b2d2      	uxtb	r2, r2
 8002db8:	440b      	add	r3, r1
 8002dba:	761a      	strb	r2, [r3, #24]
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	e000e100 	.word	0xe000e100
 8002dcc:	e000ed00 	.word	0xe000ed00

08002dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b089      	sub	sp, #36	; 0x24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	f1c3 0307 	rsb	r3, r3, #7
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	bf28      	it	cs
 8002dee:	2304      	movcs	r3, #4
 8002df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	3304      	adds	r3, #4
 8002df6:	2b06      	cmp	r3, #6
 8002df8:	d902      	bls.n	8002e00 <NVIC_EncodePriority+0x30>
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	3b03      	subs	r3, #3
 8002dfe:	e000      	b.n	8002e02 <NVIC_EncodePriority+0x32>
 8002e00:	2300      	movs	r3, #0
 8002e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e04:	f04f 32ff 	mov.w	r2, #4294967295
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	43da      	mvns	r2, r3
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	401a      	ands	r2, r3
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e18:	f04f 31ff 	mov.w	r1, #4294967295
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e22:	43d9      	mvns	r1, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e28:	4313      	orrs	r3, r2
         );
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3724      	adds	r7, #36	; 0x24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
	...

08002e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3b01      	subs	r3, #1
 8002e44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e48:	d301      	bcc.n	8002e4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e00f      	b.n	8002e6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e4e:	4a0a      	ldr	r2, [pc, #40]	; (8002e78 <SysTick_Config+0x40>)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e56:	210f      	movs	r1, #15
 8002e58:	f04f 30ff 	mov.w	r0, #4294967295
 8002e5c:	f7ff ff8e 	bl	8002d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e60:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <SysTick_Config+0x40>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e66:	4b04      	ldr	r3, [pc, #16]	; (8002e78 <SysTick_Config+0x40>)
 8002e68:	2207      	movs	r2, #7
 8002e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	e000e010 	.word	0xe000e010

08002e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f7ff ff29 	bl	8002cdc <__NVIC_SetPriorityGrouping>
}
 8002e8a:	bf00      	nop
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b086      	sub	sp, #24
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	4603      	mov	r3, r0
 8002e9a:	60b9      	str	r1, [r7, #8]
 8002e9c:	607a      	str	r2, [r7, #4]
 8002e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ea4:	f7ff ff3e 	bl	8002d24 <__NVIC_GetPriorityGrouping>
 8002ea8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	68b9      	ldr	r1, [r7, #8]
 8002eae:	6978      	ldr	r0, [r7, #20]
 8002eb0:	f7ff ff8e 	bl	8002dd0 <NVIC_EncodePriority>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eba:	4611      	mov	r1, r2
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff ff5d 	bl	8002d7c <__NVIC_SetPriority>
}
 8002ec2:	bf00      	nop
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff ff31 	bl	8002d40 <__NVIC_EnableIRQ>
}
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b082      	sub	sp, #8
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7ff ffa2 	bl	8002e38 <SysTick_Config>
 8002ef4:	4603      	mov	r3, r0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
	...

08002f00 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f0c:	f7ff feb6 	bl	8002c7c <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e099      	b.n	8003050 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2202      	movs	r2, #2
 8002f20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0201 	bic.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f3c:	e00f      	b.n	8002f5e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f3e:	f7ff fe9d 	bl	8002c7c <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b05      	cmp	r3, #5
 8002f4a:	d908      	bls.n	8002f5e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2203      	movs	r2, #3
 8002f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e078      	b.n	8003050 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1e8      	bne.n	8002f3e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	4b38      	ldr	r3, [pc, #224]	; (8003058 <HAL_DMA_Init+0x158>)
 8002f78:	4013      	ands	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fa2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	2b04      	cmp	r3, #4
 8002fb6:	d107      	bne.n	8002fc8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	f023 0307 	bic.w	r3, r3, #7
 8002fde:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d117      	bne.n	8003022 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00e      	beq.n	8003022 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 fb17 	bl	8003638 <DMA_CheckFifoParam>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d008      	beq.n	8003022 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2240      	movs	r2, #64	; 0x40
 8003014:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800301e:	2301      	movs	r3, #1
 8003020:	e016      	b.n	8003050 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 face 	bl	80035cc <DMA_CalcBaseAndBitshift>
 8003030:	4603      	mov	r3, r0
 8003032:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003038:	223f      	movs	r2, #63	; 0x3f
 800303a:	409a      	lsls	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3718      	adds	r7, #24
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	f010803f 	.word	0xf010803f

0800305c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
 8003068:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800306a:	2300      	movs	r3, #0
 800306c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003072:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800307a:	2b01      	cmp	r3, #1
 800307c:	d101      	bne.n	8003082 <HAL_DMA_Start_IT+0x26>
 800307e:	2302      	movs	r3, #2
 8003080:	e048      	b.n	8003114 <HAL_DMA_Start_IT+0xb8>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b01      	cmp	r3, #1
 8003094:	d137      	bne.n	8003106 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2202      	movs	r2, #2
 800309a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	68b9      	ldr	r1, [r7, #8]
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 fa60 	bl	8003570 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b4:	223f      	movs	r2, #63	; 0x3f
 80030b6:	409a      	lsls	r2, r3
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f042 0216 	orr.w	r2, r2, #22
 80030ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	695a      	ldr	r2, [r3, #20]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030da:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d007      	beq.n	80030f4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f042 0208 	orr.w	r2, r2, #8
 80030f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 0201 	orr.w	r2, r2, #1
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	e005      	b.n	8003112 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800310e:	2302      	movs	r3, #2
 8003110:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003112:	7dfb      	ldrb	r3, [r7, #23]
}
 8003114:	4618      	mov	r0, r3
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003128:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800312a:	f7ff fda7 	bl	8002c7c <HAL_GetTick>
 800312e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d008      	beq.n	800314e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2280      	movs	r2, #128	; 0x80
 8003140:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e052      	b.n	80031f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0216 	bic.w	r2, r2, #22
 800315c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	695a      	ldr	r2, [r3, #20]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800316c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	2b00      	cmp	r3, #0
 8003174:	d103      	bne.n	800317e <HAL_DMA_Abort+0x62>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800317a:	2b00      	cmp	r3, #0
 800317c:	d007      	beq.n	800318e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 0208 	bic.w	r2, r2, #8
 800318c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 0201 	bic.w	r2, r2, #1
 800319c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800319e:	e013      	b.n	80031c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031a0:	f7ff fd6c 	bl	8002c7c <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b05      	cmp	r3, #5
 80031ac:	d90c      	bls.n	80031c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2220      	movs	r2, #32
 80031b2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2203      	movs	r2, #3
 80031b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e015      	b.n	80031f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1e4      	bne.n	80031a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031da:	223f      	movs	r2, #63	; 0x3f
 80031dc:	409a      	lsls	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d004      	beq.n	800321a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2280      	movs	r2, #128	; 0x80
 8003214:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e00c      	b.n	8003234 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2205      	movs	r2, #5
 800321e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0201 	bic.w	r2, r2, #1
 8003230:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003248:	2300      	movs	r3, #0
 800324a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800324c:	4b8e      	ldr	r3, [pc, #568]	; (8003488 <HAL_DMA_IRQHandler+0x248>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a8e      	ldr	r2, [pc, #568]	; (800348c <HAL_DMA_IRQHandler+0x24c>)
 8003252:	fba2 2303 	umull	r2, r3, r2, r3
 8003256:	0a9b      	lsrs	r3, r3, #10
 8003258:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326a:	2208      	movs	r2, #8
 800326c:	409a      	lsls	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	4013      	ands	r3, r2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d01a      	beq.n	80032ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b00      	cmp	r3, #0
 8003282:	d013      	beq.n	80032ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 0204 	bic.w	r2, r2, #4
 8003292:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003298:	2208      	movs	r2, #8
 800329a:	409a      	lsls	r2, r3
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a4:	f043 0201 	orr.w	r2, r3, #1
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b0:	2201      	movs	r2, #1
 80032b2:	409a      	lsls	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4013      	ands	r3, r2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d012      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00b      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ce:	2201      	movs	r2, #1
 80032d0:	409a      	lsls	r2, r3
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032da:	f043 0202 	orr.w	r2, r3, #2
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e6:	2204      	movs	r2, #4
 80032e8:	409a      	lsls	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	4013      	ands	r3, r2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d012      	beq.n	8003318 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00b      	beq.n	8003318 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003304:	2204      	movs	r2, #4
 8003306:	409a      	lsls	r2, r3
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003310:	f043 0204 	orr.w	r2, r3, #4
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800331c:	2210      	movs	r2, #16
 800331e:	409a      	lsls	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4013      	ands	r3, r2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d043      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0308 	and.w	r3, r3, #8
 8003332:	2b00      	cmp	r3, #0
 8003334:	d03c      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333a:	2210      	movs	r2, #16
 800333c:	409a      	lsls	r2, r3
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d018      	beq.n	8003382 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d108      	bne.n	8003370 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	2b00      	cmp	r3, #0
 8003364:	d024      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	4798      	blx	r3
 800336e:	e01f      	b.n	80033b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003374:	2b00      	cmp	r3, #0
 8003376:	d01b      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	4798      	blx	r3
 8003380:	e016      	b.n	80033b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338c:	2b00      	cmp	r3, #0
 800338e:	d107      	bne.n	80033a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0208 	bic.w	r2, r2, #8
 800339e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b4:	2220      	movs	r2, #32
 80033b6:	409a      	lsls	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4013      	ands	r3, r2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 808f 	beq.w	80034e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0310 	and.w	r3, r3, #16
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 8087 	beq.w	80034e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d6:	2220      	movs	r2, #32
 80033d8:	409a      	lsls	r2, r3
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b05      	cmp	r3, #5
 80033e8:	d136      	bne.n	8003458 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 0216 	bic.w	r2, r2, #22
 80033f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	695a      	ldr	r2, [r3, #20]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003408:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	2b00      	cmp	r3, #0
 8003410:	d103      	bne.n	800341a <HAL_DMA_IRQHandler+0x1da>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003416:	2b00      	cmp	r3, #0
 8003418:	d007      	beq.n	800342a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0208 	bic.w	r2, r2, #8
 8003428:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342e:	223f      	movs	r2, #63	; 0x3f
 8003430:	409a      	lsls	r2, r3
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800344a:	2b00      	cmp	r3, #0
 800344c:	d07e      	beq.n	800354c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	4798      	blx	r3
        }
        return;
 8003456:	e079      	b.n	800354c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d01d      	beq.n	80034a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10d      	bne.n	8003490 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003478:	2b00      	cmp	r3, #0
 800347a:	d031      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	4798      	blx	r3
 8003484:	e02c      	b.n	80034e0 <HAL_DMA_IRQHandler+0x2a0>
 8003486:	bf00      	nop
 8003488:	20000000 	.word	0x20000000
 800348c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003494:	2b00      	cmp	r3, #0
 8003496:	d023      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	4798      	blx	r3
 80034a0:	e01e      	b.n	80034e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10f      	bne.n	80034d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0210 	bic.w	r2, r2, #16
 80034be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d032      	beq.n	800354e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d022      	beq.n	800353a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2205      	movs	r2, #5
 80034f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 0201 	bic.w	r2, r2, #1
 800350a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	3301      	adds	r3, #1
 8003510:	60bb      	str	r3, [r7, #8]
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	429a      	cmp	r2, r3
 8003516:	d307      	bcc.n	8003528 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f2      	bne.n	800350c <HAL_DMA_IRQHandler+0x2cc>
 8003526:	e000      	b.n	800352a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003528:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353e:	2b00      	cmp	r3, #0
 8003540:	d005      	beq.n	800354e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	4798      	blx	r3
 800354a:	e000      	b.n	800354e <HAL_DMA_IRQHandler+0x30e>
        return;
 800354c:	bf00      	nop
    }
  }
}
 800354e:	3718      	adds	r7, #24
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003562:	b2db      	uxtb	r3, r3
}
 8003564:	4618      	mov	r0, r3
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
 800357c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800358c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	2b40      	cmp	r3, #64	; 0x40
 800359c:	d108      	bne.n	80035b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80035ae:	e007      	b.n	80035c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	60da      	str	r2, [r3, #12]
}
 80035c0:	bf00      	nop
 80035c2:	3714      	adds	r7, #20
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	3b10      	subs	r3, #16
 80035dc:	4a13      	ldr	r2, [pc, #76]	; (800362c <DMA_CalcBaseAndBitshift+0x60>)
 80035de:	fba2 2303 	umull	r2, r3, r2, r3
 80035e2:	091b      	lsrs	r3, r3, #4
 80035e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035e6:	4a12      	ldr	r2, [pc, #72]	; (8003630 <DMA_CalcBaseAndBitshift+0x64>)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4413      	add	r3, r2
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2b03      	cmp	r3, #3
 80035f8:	d908      	bls.n	800360c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	461a      	mov	r2, r3
 8003600:	4b0c      	ldr	r3, [pc, #48]	; (8003634 <DMA_CalcBaseAndBitshift+0x68>)
 8003602:	4013      	ands	r3, r2
 8003604:	1d1a      	adds	r2, r3, #4
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	659a      	str	r2, [r3, #88]	; 0x58
 800360a:	e006      	b.n	800361a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	461a      	mov	r2, r3
 8003612:	4b08      	ldr	r3, [pc, #32]	; (8003634 <DMA_CalcBaseAndBitshift+0x68>)
 8003614:	4013      	ands	r3, r2
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800361e:	4618      	mov	r0, r3
 8003620:	3714      	adds	r7, #20
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	aaaaaaab 	.word	0xaaaaaaab
 8003630:	0800dd78 	.word	0x0800dd78
 8003634:	fffffc00 	.word	0xfffffc00

08003638 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003640:	2300      	movs	r3, #0
 8003642:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003648:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d11f      	bne.n	8003692 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	2b03      	cmp	r3, #3
 8003656:	d856      	bhi.n	8003706 <DMA_CheckFifoParam+0xce>
 8003658:	a201      	add	r2, pc, #4	; (adr r2, 8003660 <DMA_CheckFifoParam+0x28>)
 800365a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365e:	bf00      	nop
 8003660:	08003671 	.word	0x08003671
 8003664:	08003683 	.word	0x08003683
 8003668:	08003671 	.word	0x08003671
 800366c:	08003707 	.word	0x08003707
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003674:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d046      	beq.n	800370a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003680:	e043      	b.n	800370a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003686:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800368a:	d140      	bne.n	800370e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003690:	e03d      	b.n	800370e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800369a:	d121      	bne.n	80036e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	2b03      	cmp	r3, #3
 80036a0:	d837      	bhi.n	8003712 <DMA_CheckFifoParam+0xda>
 80036a2:	a201      	add	r2, pc, #4	; (adr r2, 80036a8 <DMA_CheckFifoParam+0x70>)
 80036a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a8:	080036b9 	.word	0x080036b9
 80036ac:	080036bf 	.word	0x080036bf
 80036b0:	080036b9 	.word	0x080036b9
 80036b4:	080036d1 	.word	0x080036d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	73fb      	strb	r3, [r7, #15]
      break;
 80036bc:	e030      	b.n	8003720 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d025      	beq.n	8003716 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ce:	e022      	b.n	8003716 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036d8:	d11f      	bne.n	800371a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036de:	e01c      	b.n	800371a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d903      	bls.n	80036ee <DMA_CheckFifoParam+0xb6>
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	2b03      	cmp	r3, #3
 80036ea:	d003      	beq.n	80036f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036ec:	e018      	b.n	8003720 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	73fb      	strb	r3, [r7, #15]
      break;
 80036f2:	e015      	b.n	8003720 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00e      	beq.n	800371e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	73fb      	strb	r3, [r7, #15]
      break;
 8003704:	e00b      	b.n	800371e <DMA_CheckFifoParam+0xe6>
      break;
 8003706:	bf00      	nop
 8003708:	e00a      	b.n	8003720 <DMA_CheckFifoParam+0xe8>
      break;
 800370a:	bf00      	nop
 800370c:	e008      	b.n	8003720 <DMA_CheckFifoParam+0xe8>
      break;
 800370e:	bf00      	nop
 8003710:	e006      	b.n	8003720 <DMA_CheckFifoParam+0xe8>
      break;
 8003712:	bf00      	nop
 8003714:	e004      	b.n	8003720 <DMA_CheckFifoParam+0xe8>
      break;
 8003716:	bf00      	nop
 8003718:	e002      	b.n	8003720 <DMA_CheckFifoParam+0xe8>
      break;   
 800371a:	bf00      	nop
 800371c:	e000      	b.n	8003720 <DMA_CheckFifoParam+0xe8>
      break;
 800371e:	bf00      	nop
    }
  } 
  
  return status; 
 8003720:	7bfb      	ldrb	r3, [r7, #15]
}
 8003722:	4618      	mov	r0, r3
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop

08003730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003730:	b480      	push	{r7}
 8003732:	b089      	sub	sp, #36	; 0x24
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800373a:	2300      	movs	r3, #0
 800373c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800373e:	2300      	movs	r3, #0
 8003740:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003742:	2300      	movs	r3, #0
 8003744:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003746:	2300      	movs	r3, #0
 8003748:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800374a:	2300      	movs	r3, #0
 800374c:	61fb      	str	r3, [r7, #28]
 800374e:	e175      	b.n	8003a3c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003750:	2201      	movs	r2, #1
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	4013      	ands	r3, r2
 8003762:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	429a      	cmp	r2, r3
 800376a:	f040 8164 	bne.w	8003a36 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f003 0303 	and.w	r3, r3, #3
 8003776:	2b01      	cmp	r3, #1
 8003778:	d005      	beq.n	8003786 <HAL_GPIO_Init+0x56>
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f003 0303 	and.w	r3, r3, #3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d130      	bne.n	80037e8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	2203      	movs	r2, #3
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	43db      	mvns	r3, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4013      	ands	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	68da      	ldr	r2, [r3, #12]
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037bc:	2201      	movs	r2, #1
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	43db      	mvns	r3, r3
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	4013      	ands	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	091b      	lsrs	r3, r3, #4
 80037d2:	f003 0201 	and.w	r2, r3, #1
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	4313      	orrs	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f003 0303 	and.w	r3, r3, #3
 80037f0:	2b03      	cmp	r3, #3
 80037f2:	d017      	beq.n	8003824 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	2203      	movs	r2, #3
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	43db      	mvns	r3, r3
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4013      	ands	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	4313      	orrs	r3, r2
 800381c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f003 0303 	and.w	r3, r3, #3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d123      	bne.n	8003878 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	08da      	lsrs	r2, r3, #3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3208      	adds	r2, #8
 8003838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800383c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	f003 0307 	and.w	r3, r3, #7
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	220f      	movs	r2, #15
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	43db      	mvns	r3, r3
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	4013      	ands	r3, r2
 8003852:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	691a      	ldr	r2, [r3, #16]
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	4313      	orrs	r3, r2
 8003868:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	08da      	lsrs	r2, r3, #3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	3208      	adds	r2, #8
 8003872:	69b9      	ldr	r1, [r7, #24]
 8003874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	2203      	movs	r2, #3
 8003884:	fa02 f303 	lsl.w	r3, r2, r3
 8003888:	43db      	mvns	r3, r3
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	4013      	ands	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f003 0203 	and.w	r2, r3, #3
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 80be 	beq.w	8003a36 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ba:	4b66      	ldr	r3, [pc, #408]	; (8003a54 <HAL_GPIO_Init+0x324>)
 80038bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038be:	4a65      	ldr	r2, [pc, #404]	; (8003a54 <HAL_GPIO_Init+0x324>)
 80038c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038c4:	6453      	str	r3, [r2, #68]	; 0x44
 80038c6:	4b63      	ldr	r3, [pc, #396]	; (8003a54 <HAL_GPIO_Init+0x324>)
 80038c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80038d2:	4a61      	ldr	r2, [pc, #388]	; (8003a58 <HAL_GPIO_Init+0x328>)
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	089b      	lsrs	r3, r3, #2
 80038d8:	3302      	adds	r3, #2
 80038da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038de:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	220f      	movs	r2, #15
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	43db      	mvns	r3, r3
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	4013      	ands	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a58      	ldr	r2, [pc, #352]	; (8003a5c <HAL_GPIO_Init+0x32c>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d037      	beq.n	800396e <HAL_GPIO_Init+0x23e>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a57      	ldr	r2, [pc, #348]	; (8003a60 <HAL_GPIO_Init+0x330>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d031      	beq.n	800396a <HAL_GPIO_Init+0x23a>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a56      	ldr	r2, [pc, #344]	; (8003a64 <HAL_GPIO_Init+0x334>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d02b      	beq.n	8003966 <HAL_GPIO_Init+0x236>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a55      	ldr	r2, [pc, #340]	; (8003a68 <HAL_GPIO_Init+0x338>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d025      	beq.n	8003962 <HAL_GPIO_Init+0x232>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a54      	ldr	r2, [pc, #336]	; (8003a6c <HAL_GPIO_Init+0x33c>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d01f      	beq.n	800395e <HAL_GPIO_Init+0x22e>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a53      	ldr	r2, [pc, #332]	; (8003a70 <HAL_GPIO_Init+0x340>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d019      	beq.n	800395a <HAL_GPIO_Init+0x22a>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a52      	ldr	r2, [pc, #328]	; (8003a74 <HAL_GPIO_Init+0x344>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d013      	beq.n	8003956 <HAL_GPIO_Init+0x226>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a51      	ldr	r2, [pc, #324]	; (8003a78 <HAL_GPIO_Init+0x348>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d00d      	beq.n	8003952 <HAL_GPIO_Init+0x222>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a50      	ldr	r2, [pc, #320]	; (8003a7c <HAL_GPIO_Init+0x34c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d007      	beq.n	800394e <HAL_GPIO_Init+0x21e>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a4f      	ldr	r2, [pc, #316]	; (8003a80 <HAL_GPIO_Init+0x350>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d101      	bne.n	800394a <HAL_GPIO_Init+0x21a>
 8003946:	2309      	movs	r3, #9
 8003948:	e012      	b.n	8003970 <HAL_GPIO_Init+0x240>
 800394a:	230a      	movs	r3, #10
 800394c:	e010      	b.n	8003970 <HAL_GPIO_Init+0x240>
 800394e:	2308      	movs	r3, #8
 8003950:	e00e      	b.n	8003970 <HAL_GPIO_Init+0x240>
 8003952:	2307      	movs	r3, #7
 8003954:	e00c      	b.n	8003970 <HAL_GPIO_Init+0x240>
 8003956:	2306      	movs	r3, #6
 8003958:	e00a      	b.n	8003970 <HAL_GPIO_Init+0x240>
 800395a:	2305      	movs	r3, #5
 800395c:	e008      	b.n	8003970 <HAL_GPIO_Init+0x240>
 800395e:	2304      	movs	r3, #4
 8003960:	e006      	b.n	8003970 <HAL_GPIO_Init+0x240>
 8003962:	2303      	movs	r3, #3
 8003964:	e004      	b.n	8003970 <HAL_GPIO_Init+0x240>
 8003966:	2302      	movs	r3, #2
 8003968:	e002      	b.n	8003970 <HAL_GPIO_Init+0x240>
 800396a:	2301      	movs	r3, #1
 800396c:	e000      	b.n	8003970 <HAL_GPIO_Init+0x240>
 800396e:	2300      	movs	r3, #0
 8003970:	69fa      	ldr	r2, [r7, #28]
 8003972:	f002 0203 	and.w	r2, r2, #3
 8003976:	0092      	lsls	r2, r2, #2
 8003978:	4093      	lsls	r3, r2
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	4313      	orrs	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003980:	4935      	ldr	r1, [pc, #212]	; (8003a58 <HAL_GPIO_Init+0x328>)
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	089b      	lsrs	r3, r3, #2
 8003986:	3302      	adds	r3, #2
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800398e:	4b3d      	ldr	r3, [pc, #244]	; (8003a84 <HAL_GPIO_Init+0x354>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	43db      	mvns	r3, r3
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	4013      	ands	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039b2:	4a34      	ldr	r2, [pc, #208]	; (8003a84 <HAL_GPIO_Init+0x354>)
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039b8:	4b32      	ldr	r3, [pc, #200]	; (8003a84 <HAL_GPIO_Init+0x354>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	43db      	mvns	r3, r3
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	4013      	ands	r3, r2
 80039c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039dc:	4a29      	ldr	r2, [pc, #164]	; (8003a84 <HAL_GPIO_Init+0x354>)
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039e2:	4b28      	ldr	r3, [pc, #160]	; (8003a84 <HAL_GPIO_Init+0x354>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	43db      	mvns	r3, r3
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	4013      	ands	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a06:	4a1f      	ldr	r2, [pc, #124]	; (8003a84 <HAL_GPIO_Init+0x354>)
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a0c:	4b1d      	ldr	r3, [pc, #116]	; (8003a84 <HAL_GPIO_Init+0x354>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	43db      	mvns	r3, r3
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d003      	beq.n	8003a30 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a30:	4a14      	ldr	r2, [pc, #80]	; (8003a84 <HAL_GPIO_Init+0x354>)
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	61fb      	str	r3, [r7, #28]
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	2b0f      	cmp	r3, #15
 8003a40:	f67f ae86 	bls.w	8003750 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003a44:	bf00      	nop
 8003a46:	bf00      	nop
 8003a48:	3724      	adds	r7, #36	; 0x24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	40023800 	.word	0x40023800
 8003a58:	40013800 	.word	0x40013800
 8003a5c:	40020000 	.word	0x40020000
 8003a60:	40020400 	.word	0x40020400
 8003a64:	40020800 	.word	0x40020800
 8003a68:	40020c00 	.word	0x40020c00
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	40021400 	.word	0x40021400
 8003a74:	40021800 	.word	0x40021800
 8003a78:	40021c00 	.word	0x40021c00
 8003a7c:	40022000 	.word	0x40022000
 8003a80:	40022400 	.word	0x40022400
 8003a84:	40013c00 	.word	0x40013c00

08003a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	460b      	mov	r3, r1
 8003a92:	807b      	strh	r3, [r7, #2]
 8003a94:	4613      	mov	r3, r2
 8003a96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a98:	787b      	ldrb	r3, [r7, #1]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a9e:	887a      	ldrh	r2, [r7, #2]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003aa4:	e003      	b.n	8003aae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003aa6:	887b      	ldrh	r3, [r7, #2]
 8003aa8:	041a      	lsls	r2, r3, #16
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	619a      	str	r2, [r3, #24]
}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b085      	sub	sp, #20
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003acc:	887a      	ldrh	r2, [r7, #2]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	041a      	lsls	r2, r3, #16
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	43d9      	mvns	r1, r3
 8003ad8:	887b      	ldrh	r3, [r7, #2]
 8003ada:	400b      	ands	r3, r1
 8003adc:	431a      	orrs	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	619a      	str	r2, [r3, #24]
}
 8003ae2:	bf00      	nop
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
	...

08003af0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e07f      	b.n	8003c02 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d106      	bne.n	8003b1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7fe fa40 	bl	8001f9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2224      	movs	r2, #36	; 0x24
 8003b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 0201 	bic.w	r2, r2, #1
 8003b32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d107      	bne.n	8003b6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	689a      	ldr	r2, [r3, #8]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b66:	609a      	str	r2, [r3, #8]
 8003b68:	e006      	b.n	8003b78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689a      	ldr	r2, [r3, #8]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003b76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d104      	bne.n	8003b8a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6859      	ldr	r1, [r3, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	4b1d      	ldr	r3, [pc, #116]	; (8003c0c <HAL_I2C_Init+0x11c>)
 8003b96:	430b      	orrs	r3, r1
 8003b98:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68da      	ldr	r2, [r3, #12]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ba8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691a      	ldr	r2, [r3, #16]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	69d9      	ldr	r1, [r3, #28]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a1a      	ldr	r2, [r3, #32]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f042 0201 	orr.w	r2, r2, #1
 8003be2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2220      	movs	r2, #32
 8003bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	02008000 	.word	0x02008000

08003c10 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b088      	sub	sp, #32
 8003c14:	af02      	add	r7, sp, #8
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	4608      	mov	r0, r1
 8003c1a:	4611      	mov	r1, r2
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	4603      	mov	r3, r0
 8003c20:	817b      	strh	r3, [r7, #10]
 8003c22:	460b      	mov	r3, r1
 8003c24:	813b      	strh	r3, [r7, #8]
 8003c26:	4613      	mov	r3, r2
 8003c28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b20      	cmp	r3, #32
 8003c34:	f040 80f9 	bne.w	8003e2a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c38:	6a3b      	ldr	r3, [r7, #32]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d002      	beq.n	8003c44 <HAL_I2C_Mem_Write+0x34>
 8003c3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d105      	bne.n	8003c50 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c4a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e0ed      	b.n	8003e2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d101      	bne.n	8003c5e <HAL_I2C_Mem_Write+0x4e>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	e0e6      	b.n	8003e2c <HAL_I2C_Mem_Write+0x21c>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c66:	f7ff f809 	bl	8002c7c <HAL_GetTick>
 8003c6a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	2319      	movs	r3, #25
 8003c72:	2201      	movs	r2, #1
 8003c74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 ffc0 	bl	8004bfe <I2C_WaitOnFlagUntilTimeout>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e0d1      	b.n	8003e2c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2221      	movs	r2, #33	; 0x21
 8003c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2240      	movs	r2, #64	; 0x40
 8003c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6a3a      	ldr	r2, [r7, #32]
 8003ca2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ca8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cb0:	88f8      	ldrh	r0, [r7, #6]
 8003cb2:	893a      	ldrh	r2, [r7, #8]
 8003cb4:	8979      	ldrh	r1, [r7, #10]
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	9301      	str	r3, [sp, #4]
 8003cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 fb81 	bl	80043c8 <I2C_RequestMemoryWrite>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d005      	beq.n	8003cd8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e0a9      	b.n	8003e2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	2bff      	cmp	r3, #255	; 0xff
 8003ce0:	d90e      	bls.n	8003d00 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	22ff      	movs	r2, #255	; 0xff
 8003ce6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	8979      	ldrh	r1, [r7, #10]
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f001 f91d 	bl	8004f38 <I2C_TransferConfig>
 8003cfe:	e00f      	b.n	8003d20 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	8979      	ldrh	r1, [r7, #10]
 8003d12:	2300      	movs	r3, #0
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f001 f90c 	bl	8004f38 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f000 ffaa 	bl	8004c7e <I2C_WaitOnTXISFlagUntilTimeout>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e07b      	b.n	8003e2c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d38:	781a      	ldrb	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	1c5a      	adds	r2, r3, #1
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	3b01      	subs	r3, #1
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d034      	beq.n	8003dd8 <HAL_I2C_Mem_Write+0x1c8>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d130      	bne.n	8003dd8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	2180      	movs	r1, #128	; 0x80
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 ff3c 	bl	8004bfe <I2C_WaitOnFlagUntilTimeout>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e04d      	b.n	8003e2c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	2bff      	cmp	r3, #255	; 0xff
 8003d98:	d90e      	bls.n	8003db8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	22ff      	movs	r2, #255	; 0xff
 8003d9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	8979      	ldrh	r1, [r7, #10]
 8003da8:	2300      	movs	r3, #0
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f001 f8c1 	bl	8004f38 <I2C_TransferConfig>
 8003db6:	e00f      	b.n	8003dd8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	8979      	ldrh	r1, [r7, #10]
 8003dca:	2300      	movs	r3, #0
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f001 f8b0 	bl	8004f38 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d19e      	bne.n	8003d20 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 ff89 	bl	8004cfe <I2C_WaitOnSTOPFlagUntilTimeout>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e01a      	b.n	8003e2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6859      	ldr	r1, [r3, #4]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	4b0a      	ldr	r3, [pc, #40]	; (8003e34 <HAL_I2C_Mem_Write+0x224>)
 8003e0a:	400b      	ands	r3, r1
 8003e0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2220      	movs	r2, #32
 8003e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e26:	2300      	movs	r3, #0
 8003e28:	e000      	b.n	8003e2c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003e2a:	2302      	movs	r3, #2
  }
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3718      	adds	r7, #24
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	fe00e800 	.word	0xfe00e800

08003e38 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b088      	sub	sp, #32
 8003e3c:	af02      	add	r7, sp, #8
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	4608      	mov	r0, r1
 8003e42:	4611      	mov	r1, r2
 8003e44:	461a      	mov	r2, r3
 8003e46:	4603      	mov	r3, r0
 8003e48:	817b      	strh	r3, [r7, #10]
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	813b      	strh	r3, [r7, #8]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b20      	cmp	r3, #32
 8003e5c:	f040 80fd 	bne.w	800405a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e60:	6a3b      	ldr	r3, [r7, #32]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d002      	beq.n	8003e6c <HAL_I2C_Mem_Read+0x34>
 8003e66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d105      	bne.n	8003e78 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e72:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e0f1      	b.n	800405c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d101      	bne.n	8003e86 <HAL_I2C_Mem_Read+0x4e>
 8003e82:	2302      	movs	r3, #2
 8003e84:	e0ea      	b.n	800405c <HAL_I2C_Mem_Read+0x224>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e8e:	f7fe fef5 	bl	8002c7c <HAL_GetTick>
 8003e92:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	2319      	movs	r3, #25
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f000 feac 	bl	8004bfe <I2C_WaitOnFlagUntilTimeout>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e0d5      	b.n	800405c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2222      	movs	r2, #34	; 0x22
 8003eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2240      	movs	r2, #64	; 0x40
 8003ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6a3a      	ldr	r2, [r7, #32]
 8003eca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ed0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ed8:	88f8      	ldrh	r0, [r7, #6]
 8003eda:	893a      	ldrh	r2, [r7, #8]
 8003edc:	8979      	ldrh	r1, [r7, #10]
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	9301      	str	r3, [sp, #4]
 8003ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 fac1 	bl	8004470 <I2C_RequestMemoryRead>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d005      	beq.n	8003f00 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e0ad      	b.n	800405c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	2bff      	cmp	r3, #255	; 0xff
 8003f08:	d90e      	bls.n	8003f28 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	22ff      	movs	r2, #255	; 0xff
 8003f0e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f14:	b2da      	uxtb	r2, r3
 8003f16:	8979      	ldrh	r1, [r7, #10]
 8003f18:	4b52      	ldr	r3, [pc, #328]	; (8004064 <HAL_I2C_Mem_Read+0x22c>)
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f001 f809 	bl	8004f38 <I2C_TransferConfig>
 8003f26:	e00f      	b.n	8003f48 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	8979      	ldrh	r1, [r7, #10]
 8003f3a:	4b4a      	ldr	r3, [pc, #296]	; (8004064 <HAL_I2C_Mem_Read+0x22c>)
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f000 fff8 	bl	8004f38 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4e:	2200      	movs	r2, #0
 8003f50:	2104      	movs	r1, #4
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 fe53 	bl	8004bfe <I2C_WaitOnFlagUntilTimeout>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e07c      	b.n	800405c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6c:	b2d2      	uxtb	r2, r2
 8003f6e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f74:	1c5a      	adds	r2, r3, #1
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d034      	beq.n	8004008 <HAL_I2C_Mem_Read+0x1d0>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d130      	bne.n	8004008 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fac:	2200      	movs	r2, #0
 8003fae:	2180      	movs	r1, #128	; 0x80
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f000 fe24 	bl	8004bfe <I2C_WaitOnFlagUntilTimeout>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e04d      	b.n	800405c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2bff      	cmp	r3, #255	; 0xff
 8003fc8:	d90e      	bls.n	8003fe8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	22ff      	movs	r2, #255	; 0xff
 8003fce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	8979      	ldrh	r1, [r7, #10]
 8003fd8:	2300      	movs	r3, #0
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f000 ffa9 	bl	8004f38 <I2C_TransferConfig>
 8003fe6:	e00f      	b.n	8004008 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff6:	b2da      	uxtb	r2, r3
 8003ff8:	8979      	ldrh	r1, [r7, #10]
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f000 ff98 	bl	8004f38 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400c:	b29b      	uxth	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d19a      	bne.n	8003f48 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 fe71 	bl	8004cfe <I2C_WaitOnSTOPFlagUntilTimeout>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e01a      	b.n	800405c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2220      	movs	r2, #32
 800402c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6859      	ldr	r1, [r3, #4]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	4b0b      	ldr	r3, [pc, #44]	; (8004068 <HAL_I2C_Mem_Read+0x230>)
 800403a:	400b      	ands	r3, r1
 800403c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2220      	movs	r2, #32
 8004042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004056:	2300      	movs	r3, #0
 8004058:	e000      	b.n	800405c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800405a:	2302      	movs	r3, #2
  }
}
 800405c:	4618      	mov	r0, r3
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	80002400 	.word	0x80002400
 8004068:	fe00e800 	.word	0xfe00e800

0800406c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004088:	2b00      	cmp	r3, #0
 800408a:	d005      	beq.n	8004098 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	68f9      	ldr	r1, [r7, #12]
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	4798      	blx	r3
  }
}
 8004098:	bf00      	nop
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00f      	beq.n	80040e2 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00a      	beq.n	80040e2 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d0:	f043 0201 	orr.w	r2, r3, #1
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040e0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00f      	beq.n	800410c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00a      	beq.n	800410c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fa:	f043 0208 	orr.w	r2, r3, #8
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800410a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00f      	beq.n	8004136 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00a      	beq.n	8004136 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004124:	f043 0202 	orr.w	r2, r3, #2
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004134:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f003 030b 	and.w	r3, r3, #11
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8004146:	68f9      	ldr	r1, [r7, #12]
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 fc1f 	bl	800498c <I2C_ITError>
  }
}
 800414e:	bf00      	nop
 8004150:	3718      	adds	r7, #24
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800417e:	b480      	push	{r7}
 8004180:	b083      	sub	sp, #12
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
 8004186:	460b      	mov	r3, r1
 8004188:	70fb      	strb	r3, [r7, #3]
 800418a:	4613      	mov	r3, r2
 800418c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80041a2:	bf00      	nop
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80041b6:	bf00      	nop
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b083      	sub	sp, #12
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b086      	sub	sp, #24
 80041da:	af00      	add	r7, sp, #0
 80041dc:	60f8      	str	r0, [r7, #12]
 80041de:	60b9      	str	r1, [r7, #8]
 80041e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d101      	bne.n	80041fa <I2C_Slave_ISR_IT+0x24>
 80041f6:	2302      	movs	r3, #2
 80041f8:	e0e1      	b.n	80043be <I2C_Slave_ISR_IT+0x1e8>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	f003 0320 	and.w	r3, r3, #32
 8004208:	2b00      	cmp	r3, #0
 800420a:	d008      	beq.n	800421e <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004212:	2b00      	cmp	r3, #0
 8004214:	d003      	beq.n	800421e <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004216:	6939      	ldr	r1, [r7, #16]
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 fa5d 	bl	80046d8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	f003 0310 	and.w	r3, r3, #16
 8004224:	2b00      	cmp	r3, #0
 8004226:	d04b      	beq.n	80042c0 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800422e:	2b00      	cmp	r3, #0
 8004230:	d046      	beq.n	80042c0 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004236:	b29b      	uxth	r3, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	d128      	bne.n	800428e <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b28      	cmp	r3, #40	; 0x28
 8004246:	d108      	bne.n	800425a <I2C_Slave_ISR_IT+0x84>
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800424e:	d104      	bne.n	800425a <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004250:	6939      	ldr	r1, [r7, #16]
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 fb46 	bl	80048e4 <I2C_ITListenCplt>
 8004258:	e031      	b.n	80042be <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b29      	cmp	r3, #41	; 0x29
 8004264:	d10e      	bne.n	8004284 <I2C_Slave_ISR_IT+0xae>
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800426c:	d00a      	beq.n	8004284 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2210      	movs	r2, #16
 8004274:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 fc7f 	bl	8004b7a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f000 f9cf 	bl	8004620 <I2C_ITSlaveSeqCplt>
 8004282:	e01c      	b.n	80042be <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2210      	movs	r2, #16
 800428a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800428c:	e08f      	b.n	80043ae <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2210      	movs	r2, #16
 8004294:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429a:	f043 0204 	orr.w	r2, r3, #4
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d003      	beq.n	80042b0 <I2C_Slave_ISR_IT+0xda>
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042ae:	d17e      	bne.n	80043ae <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b4:	4619      	mov	r1, r3
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f000 fb68 	bl	800498c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80042bc:	e077      	b.n	80043ae <I2C_Slave_ISR_IT+0x1d8>
 80042be:	e076      	b.n	80043ae <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	f003 0304 	and.w	r3, r3, #4
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d02f      	beq.n	800432a <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d02a      	beq.n	800432a <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d8:	b29b      	uxth	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d018      	beq.n	8004310 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	b2d2      	uxtb	r2, r2
 80042ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	1c5a      	adds	r2, r3, #1
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042fa:	3b01      	subs	r3, #1
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004306:	b29b      	uxth	r3, r3
 8004308:	3b01      	subs	r3, #1
 800430a:	b29a      	uxth	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004314:	b29b      	uxth	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d14b      	bne.n	80043b2 <I2C_Slave_ISR_IT+0x1dc>
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004320:	d047      	beq.n	80043b2 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f000 f97c 	bl	8004620 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004328:	e043      	b.n	80043b2 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	f003 0308 	and.w	r3, r3, #8
 8004330:	2b00      	cmp	r3, #0
 8004332:	d009      	beq.n	8004348 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800433a:	2b00      	cmp	r3, #0
 800433c:	d004      	beq.n	8004348 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800433e:	6939      	ldr	r1, [r7, #16]
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 f8e9 	bl	8004518 <I2C_ITAddrCplt>
 8004346:	e035      	b.n	80043b4 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d030      	beq.n	80043b4 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004358:	2b00      	cmp	r3, #0
 800435a:	d02b      	beq.n	80043b4 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004360:	b29b      	uxth	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d018      	beq.n	8004398 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436a:	781a      	ldrb	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004376:	1c5a      	adds	r2, r3, #1
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004380:	b29b      	uxth	r3, r3
 8004382:	3b01      	subs	r3, #1
 8004384:	b29a      	uxth	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800438e:	3b01      	subs	r3, #1
 8004390:	b29a      	uxth	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	851a      	strh	r2, [r3, #40]	; 0x28
 8004396:	e00d      	b.n	80043b4 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800439e:	d002      	beq.n	80043a6 <I2C_Slave_ISR_IT+0x1d0>
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d106      	bne.n	80043b4 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f000 f93a 	bl	8004620 <I2C_ITSlaveSeqCplt>
 80043ac:	e002      	b.n	80043b4 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 80043ae:	bf00      	nop
 80043b0:	e000      	b.n	80043b4 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 80043b2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3718      	adds	r7, #24
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
	...

080043c8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af02      	add	r7, sp, #8
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	4608      	mov	r0, r1
 80043d2:	4611      	mov	r1, r2
 80043d4:	461a      	mov	r2, r3
 80043d6:	4603      	mov	r3, r0
 80043d8:	817b      	strh	r3, [r7, #10]
 80043da:	460b      	mov	r3, r1
 80043dc:	813b      	strh	r3, [r7, #8]
 80043de:	4613      	mov	r3, r2
 80043e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80043e2:	88fb      	ldrh	r3, [r7, #6]
 80043e4:	b2da      	uxtb	r2, r3
 80043e6:	8979      	ldrh	r1, [r7, #10]
 80043e8:	4b20      	ldr	r3, [pc, #128]	; (800446c <I2C_RequestMemoryWrite+0xa4>)
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f000 fda1 	bl	8004f38 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043f6:	69fa      	ldr	r2, [r7, #28]
 80043f8:	69b9      	ldr	r1, [r7, #24]
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f000 fc3f 	bl	8004c7e <I2C_WaitOnTXISFlagUntilTimeout>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e02c      	b.n	8004464 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800440a:	88fb      	ldrh	r3, [r7, #6]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d105      	bne.n	800441c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004410:	893b      	ldrh	r3, [r7, #8]
 8004412:	b2da      	uxtb	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	629a      	str	r2, [r3, #40]	; 0x28
 800441a:	e015      	b.n	8004448 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800441c:	893b      	ldrh	r3, [r7, #8]
 800441e:	0a1b      	lsrs	r3, r3, #8
 8004420:	b29b      	uxth	r3, r3
 8004422:	b2da      	uxtb	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800442a:	69fa      	ldr	r2, [r7, #28]
 800442c:	69b9      	ldr	r1, [r7, #24]
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f000 fc25 	bl	8004c7e <I2C_WaitOnTXISFlagUntilTimeout>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e012      	b.n	8004464 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800443e:	893b      	ldrh	r3, [r7, #8]
 8004440:	b2da      	uxtb	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	2200      	movs	r2, #0
 8004450:	2180      	movs	r1, #128	; 0x80
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f000 fbd3 	bl	8004bfe <I2C_WaitOnFlagUntilTimeout>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e000      	b.n	8004464 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	80002000 	.word	0x80002000

08004470 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af02      	add	r7, sp, #8
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	4608      	mov	r0, r1
 800447a:	4611      	mov	r1, r2
 800447c:	461a      	mov	r2, r3
 800447e:	4603      	mov	r3, r0
 8004480:	817b      	strh	r3, [r7, #10]
 8004482:	460b      	mov	r3, r1
 8004484:	813b      	strh	r3, [r7, #8]
 8004486:	4613      	mov	r3, r2
 8004488:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800448a:	88fb      	ldrh	r3, [r7, #6]
 800448c:	b2da      	uxtb	r2, r3
 800448e:	8979      	ldrh	r1, [r7, #10]
 8004490:	4b20      	ldr	r3, [pc, #128]	; (8004514 <I2C_RequestMemoryRead+0xa4>)
 8004492:	9300      	str	r3, [sp, #0]
 8004494:	2300      	movs	r3, #0
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f000 fd4e 	bl	8004f38 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800449c:	69fa      	ldr	r2, [r7, #28]
 800449e:	69b9      	ldr	r1, [r7, #24]
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 fbec 	bl	8004c7e <I2C_WaitOnTXISFlagUntilTimeout>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e02c      	b.n	800450a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044b0:	88fb      	ldrh	r3, [r7, #6]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d105      	bne.n	80044c2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044b6:	893b      	ldrh	r3, [r7, #8]
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	629a      	str	r2, [r3, #40]	; 0x28
 80044c0:	e015      	b.n	80044ee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80044c2:	893b      	ldrh	r3, [r7, #8]
 80044c4:	0a1b      	lsrs	r3, r3, #8
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044d0:	69fa      	ldr	r2, [r7, #28]
 80044d2:	69b9      	ldr	r1, [r7, #24]
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f000 fbd2 	bl	8004c7e <I2C_WaitOnTXISFlagUntilTimeout>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d001      	beq.n	80044e4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e012      	b.n	800450a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044e4:	893b      	ldrh	r3, [r7, #8]
 80044e6:	b2da      	uxtb	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	2200      	movs	r2, #0
 80044f6:	2140      	movs	r1, #64	; 0x40
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f000 fb80 	bl	8004bfe <I2C_WaitOnFlagUntilTimeout>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e000      	b.n	800450a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	80002000 	.word	0x80002000

08004518 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004528:	b2db      	uxtb	r3, r3
 800452a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800452e:	2b28      	cmp	r3, #40	; 0x28
 8004530:	d16a      	bne.n	8004608 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	0c1b      	lsrs	r3, r3, #16
 800453a:	b2db      	uxtb	r3, r3
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	0c1b      	lsrs	r3, r3, #16
 800454a:	b29b      	uxth	r3, r3
 800454c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004550:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	b29b      	uxth	r3, r3
 800455a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800455e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	b29b      	uxth	r3, r3
 8004568:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800456c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	2b02      	cmp	r3, #2
 8004574:	d138      	bne.n	80045e8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004576:	897b      	ldrh	r3, [r7, #10]
 8004578:	09db      	lsrs	r3, r3, #7
 800457a:	b29a      	uxth	r2, r3
 800457c:	89bb      	ldrh	r3, [r7, #12]
 800457e:	4053      	eors	r3, r2
 8004580:	b29b      	uxth	r3, r3
 8004582:	f003 0306 	and.w	r3, r3, #6
 8004586:	2b00      	cmp	r3, #0
 8004588:	d11c      	bne.n	80045c4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800458a:	897b      	ldrh	r3, [r7, #10]
 800458c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004592:	1c5a      	adds	r2, r3, #1
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800459c:	2b02      	cmp	r3, #2
 800459e:	d13b      	bne.n	8004618 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2208      	movs	r2, #8
 80045ac:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80045b6:	89ba      	ldrh	r2, [r7, #12]
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
 80045ba:	4619      	mov	r1, r3
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7ff fdde 	bl	800417e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80045c2:	e029      	b.n	8004618 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80045c4:	893b      	ldrh	r3, [r7, #8]
 80045c6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80045c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 fce5 	bl	8004f9c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80045da:	89ba      	ldrh	r2, [r7, #12]
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
 80045de:	4619      	mov	r1, r3
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f7ff fdcc 	bl	800417e <HAL_I2C_AddrCallback>
}
 80045e6:	e017      	b.n	8004618 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80045e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 fcd5 	bl	8004f9c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80045fa:	89ba      	ldrh	r2, [r7, #12]
 80045fc:	7bfb      	ldrb	r3, [r7, #15]
 80045fe:	4619      	mov	r1, r3
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f7ff fdbc 	bl	800417e <HAL_I2C_AddrCallback>
}
 8004606:	e007      	b.n	8004618 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2208      	movs	r2, #8
 800460e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004618:	bf00      	nop
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d008      	beq.n	8004654 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	e00c      	b.n	800466e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d007      	beq.n	800466e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800466c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b29      	cmp	r3, #41	; 0x29
 8004678:	d112      	bne.n	80046a0 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2228      	movs	r2, #40	; 0x28
 800467e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2221      	movs	r2, #33	; 0x21
 8004686:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004688:	2101      	movs	r1, #1
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 fc86 	bl	8004f9c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f7ff fd5c 	bl	8004156 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800469e:	e017      	b.n	80046d0 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b2a      	cmp	r3, #42	; 0x2a
 80046aa:	d111      	bne.n	80046d0 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2228      	movs	r2, #40	; 0x28
 80046b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2222      	movs	r2, #34	; 0x22
 80046b8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80046ba:	2102      	movs	r1, #2
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 fc6d 	bl	8004f9c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7ff fd4d 	bl	800416a <HAL_I2C_SlaveRxCpltCallback>
}
 80046d0:	bf00      	nop
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046f4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2220      	movs	r2, #32
 80046fc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
 8004700:	2b21      	cmp	r3, #33	; 0x21
 8004702:	d002      	beq.n	800470a <I2C_ITSlaveCplt+0x32>
 8004704:	7bfb      	ldrb	r3, [r7, #15]
 8004706:	2b29      	cmp	r3, #41	; 0x29
 8004708:	d108      	bne.n	800471c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800470a:	f248 0101 	movw	r1, #32769	; 0x8001
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 fc44 	bl	8004f9c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2221      	movs	r2, #33	; 0x21
 8004718:	631a      	str	r2, [r3, #48]	; 0x30
 800471a:	e00d      	b.n	8004738 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800471c:	7bfb      	ldrb	r3, [r7, #15]
 800471e:	2b22      	cmp	r3, #34	; 0x22
 8004720:	d002      	beq.n	8004728 <I2C_ITSlaveCplt+0x50>
 8004722:	7bfb      	ldrb	r3, [r7, #15]
 8004724:	2b2a      	cmp	r3, #42	; 0x2a
 8004726:	d107      	bne.n	8004738 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004728:	f248 0102 	movw	r1, #32770	; 0x8002
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 fc35 	bl	8004f9c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2222      	movs	r2, #34	; 0x22
 8004736:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004746:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6859      	ldr	r1, [r3, #4]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	4b62      	ldr	r3, [pc, #392]	; (80048dc <I2C_ITSlaveCplt+0x204>)
 8004754:	400b      	ands	r3, r1
 8004756:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 fa0e 	bl	8004b7a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d013      	beq.n	8004790 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004776:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477c:	2b00      	cmp	r3, #0
 800477e:	d01f      	beq.n	80047c0 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	b29a      	uxth	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800478e:	e017      	b.n	80047c0 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d012      	beq.n	80047c0 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047a8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d006      	beq.n	80047c0 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	f003 0304 	and.w	r3, r3, #4
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d020      	beq.n	800480c <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	f023 0304 	bic.w	r3, r3, #4
 80047d0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047dc:	b2d2      	uxtb	r2, r2
 80047de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00c      	beq.n	800480c <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f6:	3b01      	subs	r3, #1
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004802:	b29b      	uxth	r3, r3
 8004804:	3b01      	subs	r3, #1
 8004806:	b29a      	uxth	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004810:	b29b      	uxth	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d005      	beq.n	8004822 <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481a:	f043 0204 	orr.w	r2, r3, #4
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004834:	2b00      	cmp	r3, #0
 8004836:	d010      	beq.n	800485a <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483c:	4619      	mov	r1, r3
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f8a4 	bl	800498c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b28      	cmp	r3, #40	; 0x28
 800484e:	d141      	bne.n	80048d4 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004850:	6979      	ldr	r1, [r7, #20]
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f846 	bl	80048e4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004858:	e03c      	b.n	80048d4 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004862:	d014      	beq.n	800488e <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f7ff fedb 	bl	8004620 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a1c      	ldr	r2, [pc, #112]	; (80048e0 <I2C_ITSlaveCplt+0x208>)
 800486e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2220      	movs	r2, #32
 8004874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7ff fc87 	bl	800419a <HAL_I2C_ListenCpltCallback>
}
 800488c:	e022      	b.n	80048d4 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b22      	cmp	r3, #34	; 0x22
 8004898:	d10e      	bne.n	80048b8 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2220      	movs	r2, #32
 800489e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f7ff fc5a 	bl	800416a <HAL_I2C_SlaveRxCpltCallback>
}
 80048b6:	e00d      	b.n	80048d4 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2220      	movs	r2, #32
 80048bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7ff fc41 	bl	8004156 <HAL_I2C_SlaveTxCpltCallback>
}
 80048d4:	bf00      	nop
 80048d6:	3718      	adds	r7, #24
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	fe00e800 	.word	0xfe00e800
 80048e0:	ffff0000 	.word	0xffff0000

080048e4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a25      	ldr	r2, [pc, #148]	; (8004988 <I2C_ITListenCplt+0xa4>)
 80048f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2220      	movs	r2, #32
 80048fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	f003 0304 	and.w	r3, r3, #4
 8004916:	2b00      	cmp	r3, #0
 8004918:	d022      	beq.n	8004960 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004924:	b2d2      	uxtb	r2, r2
 8004926:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492c:	1c5a      	adds	r2, r3, #1
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004936:	2b00      	cmp	r3, #0
 8004938:	d012      	beq.n	8004960 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800493e:	3b01      	subs	r3, #1
 8004940:	b29a      	uxth	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800494a:	b29b      	uxth	r3, r3
 800494c:	3b01      	subs	r3, #1
 800494e:	b29a      	uxth	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004958:	f043 0204 	orr.w	r2, r3, #4
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004960:	f248 0103 	movw	r1, #32771	; 0x8003
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 fb19 	bl	8004f9c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2210      	movs	r2, #16
 8004970:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7ff fc0d 	bl	800419a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004980:	bf00      	nop
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	ffff0000 	.word	0xffff0000

0800498c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800499c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a5d      	ldr	r2, [pc, #372]	; (8004b20 <I2C_ITError+0x194>)
 80049aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	431a      	orrs	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80049be:	7bfb      	ldrb	r3, [r7, #15]
 80049c0:	2b28      	cmp	r3, #40	; 0x28
 80049c2:	d005      	beq.n	80049d0 <I2C_ITError+0x44>
 80049c4:	7bfb      	ldrb	r3, [r7, #15]
 80049c6:	2b29      	cmp	r3, #41	; 0x29
 80049c8:	d002      	beq.n	80049d0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80049ca:	7bfb      	ldrb	r3, [r7, #15]
 80049cc:	2b2a      	cmp	r3, #42	; 0x2a
 80049ce:	d10b      	bne.n	80049e8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80049d0:	2103      	movs	r1, #3
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 fae2 	bl	8004f9c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2228      	movs	r2, #40	; 0x28
 80049dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a50      	ldr	r2, [pc, #320]	; (8004b24 <I2C_ITError+0x198>)
 80049e4:	635a      	str	r2, [r3, #52]	; 0x34
 80049e6:	e011      	b.n	8004a0c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80049e8:	f248 0103 	movw	r1, #32771	; 0x8003
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 fad5 	bl	8004f9c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b60      	cmp	r3, #96	; 0x60
 80049fc:	d003      	beq.n	8004a06 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2220      	movs	r2, #32
 8004a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a10:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d039      	beq.n	8004a8e <I2C_ITError+0x102>
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	2b11      	cmp	r3, #17
 8004a1e:	d002      	beq.n	8004a26 <I2C_ITError+0x9a>
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	2b21      	cmp	r3, #33	; 0x21
 8004a24:	d133      	bne.n	8004a8e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a34:	d107      	bne.n	8004a46 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a44:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fe fd82 	bl	8003554 <HAL_DMA_GetState>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d017      	beq.n	8004a86 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5a:	4a33      	ldr	r2, [pc, #204]	; (8004b28 <I2C_ITError+0x19c>)
 8004a5c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7fe fbc6 	bl	80031fc <HAL_DMA_Abort_IT>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d04d      	beq.n	8004b12 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a80:	4610      	mov	r0, r2
 8004a82:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a84:	e045      	b.n	8004b12 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f850 	bl	8004b2c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a8c:	e041      	b.n	8004b12 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d039      	beq.n	8004b0a <I2C_ITError+0x17e>
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	2b12      	cmp	r3, #18
 8004a9a:	d002      	beq.n	8004aa2 <I2C_ITError+0x116>
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	2b22      	cmp	r3, #34	; 0x22
 8004aa0:	d133      	bne.n	8004b0a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004aac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ab0:	d107      	bne.n	8004ac2 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ac0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7fe fd44 	bl	8003554 <HAL_DMA_GetState>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d017      	beq.n	8004b02 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad6:	4a14      	ldr	r2, [pc, #80]	; (8004b28 <I2C_ITError+0x19c>)
 8004ad8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7fe fb88 	bl	80031fc <HAL_DMA_Abort_IT>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d011      	beq.n	8004b16 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004afc:	4610      	mov	r0, r2
 8004afe:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b00:	e009      	b.n	8004b16 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f812 	bl	8004b2c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b08:	e005      	b.n	8004b16 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f80e 	bl	8004b2c <I2C_TreatErrorCallback>
  }
}
 8004b10:	e002      	b.n	8004b18 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b12:	bf00      	nop
 8004b14:	e000      	b.n	8004b18 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b16:	bf00      	nop
}
 8004b18:	bf00      	nop
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	ffff0000 	.word	0xffff0000
 8004b24:	080041d7 	.word	0x080041d7
 8004b28:	08004bc3 	.word	0x08004bc3

08004b2c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	2b60      	cmp	r3, #96	; 0x60
 8004b3e:	d10e      	bne.n	8004b5e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2220      	movs	r2, #32
 8004b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7ff fb33 	bl	80041c2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b5c:	e009      	b.n	8004b72 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f7ff fb1e 	bl	80041ae <HAL_I2C_ErrorCallback>
}
 8004b72:	bf00      	nop
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d103      	bne.n	8004b98 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2200      	movs	r2, #0
 8004b96:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d007      	beq.n	8004bb6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	699a      	ldr	r2, [r3, #24]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f042 0201 	orr.w	r2, r2, #1
 8004bb4:	619a      	str	r2, [r3, #24]
  }
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b084      	sub	sp, #16
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d003      	beq.n	8004be0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bdc:	2200      	movs	r2, #0
 8004bde:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d003      	beq.n	8004bf0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bec:	2200      	movs	r2, #0
 8004bee:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f7ff ff9b 	bl	8004b2c <I2C_TreatErrorCallback>
}
 8004bf6:	bf00      	nop
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b084      	sub	sp, #16
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	60f8      	str	r0, [r7, #12]
 8004c06:	60b9      	str	r1, [r7, #8]
 8004c08:	603b      	str	r3, [r7, #0]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c0e:	e022      	b.n	8004c56 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c16:	d01e      	beq.n	8004c56 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c18:	f7fe f830 	bl	8002c7c <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	683a      	ldr	r2, [r7, #0]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d302      	bcc.n	8004c2e <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d113      	bne.n	8004c56 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c32:	f043 0220 	orr.w	r2, r3, #32
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e00f      	b.n	8004c76 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	699a      	ldr	r2, [r3, #24]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	4013      	ands	r3, r2
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	bf0c      	ite	eq
 8004c66:	2301      	moveq	r3, #1
 8004c68:	2300      	movne	r3, #0
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	79fb      	ldrb	r3, [r7, #7]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d0cd      	beq.n	8004c10 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b084      	sub	sp, #16
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	60f8      	str	r0, [r7, #12]
 8004c86:	60b9      	str	r1, [r7, #8]
 8004c88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c8a:	e02c      	b.n	8004ce6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	68b9      	ldr	r1, [r7, #8]
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 f871 	bl	8004d78 <I2C_IsErrorOccurred>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e02a      	b.n	8004cf6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca6:	d01e      	beq.n	8004ce6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ca8:	f7fd ffe8 	bl	8002c7c <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	68ba      	ldr	r2, [r7, #8]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d302      	bcc.n	8004cbe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d113      	bne.n	8004ce6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc2:	f043 0220 	orr.w	r2, r3, #32
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e007      	b.n	8004cf6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d1cb      	bne.n	8004c8c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b084      	sub	sp, #16
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	60f8      	str	r0, [r7, #12]
 8004d06:	60b9      	str	r1, [r7, #8]
 8004d08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d0a:	e028      	b.n	8004d5e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	68b9      	ldr	r1, [r7, #8]
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f000 f831 	bl	8004d78 <I2C_IsErrorOccurred>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d001      	beq.n	8004d20 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e026      	b.n	8004d6e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d20:	f7fd ffac 	bl	8002c7c <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d302      	bcc.n	8004d36 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d113      	bne.n	8004d5e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3a:	f043 0220 	orr.w	r2, r3, #32
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2220      	movs	r2, #32
 8004d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e007      	b.n	8004d6e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	f003 0320 	and.w	r3, r3, #32
 8004d68:	2b20      	cmp	r3, #32
 8004d6a:	d1cf      	bne.n	8004d0c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
	...

08004d78 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b08a      	sub	sp, #40	; 0x28
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d84:	2300      	movs	r3, #0
 8004d86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004d92:	2300      	movs	r3, #0
 8004d94:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	f003 0310 	and.w	r3, r3, #16
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d068      	beq.n	8004e76 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2210      	movs	r2, #16
 8004daa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004dac:	e049      	b.n	8004e42 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db4:	d045      	beq.n	8004e42 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004db6:	f7fd ff61 	bl	8002c7c <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d302      	bcc.n	8004dcc <I2C_IsErrorOccurred+0x54>
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d13a      	bne.n	8004e42 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dd6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004dde:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dee:	d121      	bne.n	8004e34 <I2C_IsErrorOccurred+0xbc>
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004df6:	d01d      	beq.n	8004e34 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004df8:	7cfb      	ldrb	r3, [r7, #19]
 8004dfa:	2b20      	cmp	r3, #32
 8004dfc:	d01a      	beq.n	8004e34 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e0c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004e0e:	f7fd ff35 	bl	8002c7c <HAL_GetTick>
 8004e12:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e14:	e00e      	b.n	8004e34 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004e16:	f7fd ff31 	bl	8002c7c <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b19      	cmp	r3, #25
 8004e22:	d907      	bls.n	8004e34 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004e24:	6a3b      	ldr	r3, [r7, #32]
 8004e26:	f043 0320 	orr.w	r3, r3, #32
 8004e2a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004e32:	e006      	b.n	8004e42 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	f003 0320 	and.w	r3, r3, #32
 8004e3e:	2b20      	cmp	r3, #32
 8004e40:	d1e9      	bne.n	8004e16 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	f003 0320 	and.w	r3, r3, #32
 8004e4c:	2b20      	cmp	r3, #32
 8004e4e:	d003      	beq.n	8004e58 <I2C_IsErrorOccurred+0xe0>
 8004e50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d0aa      	beq.n	8004dae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004e58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d103      	bne.n	8004e68 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2220      	movs	r2, #32
 8004e66:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004e68:	6a3b      	ldr	r3, [r7, #32]
 8004e6a:	f043 0304 	orr.w	r3, r3, #4
 8004e6e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00b      	beq.n	8004ea0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004e88:	6a3b      	ldr	r3, [r7, #32]
 8004e8a:	f043 0301 	orr.w	r3, r3, #1
 8004e8e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00b      	beq.n	8004ec2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004eaa:	6a3b      	ldr	r3, [r7, #32]
 8004eac:	f043 0308 	orr.w	r3, r3, #8
 8004eb0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004eba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00b      	beq.n	8004ee4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004ecc:	6a3b      	ldr	r3, [r7, #32]
 8004ece:	f043 0302 	orr.w	r3, r3, #2
 8004ed2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004edc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004ee4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d01c      	beq.n	8004f26 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f7ff fe44 	bl	8004b7a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	6859      	ldr	r1, [r3, #4]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	4b0d      	ldr	r3, [pc, #52]	; (8004f34 <I2C_IsErrorOccurred+0x1bc>)
 8004efe:	400b      	ands	r3, r1
 8004f00:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f06:	6a3b      	ldr	r3, [r7, #32]
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2220      	movs	r2, #32
 8004f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004f26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3728      	adds	r7, #40	; 0x28
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	fe00e800 	.word	0xfe00e800

08004f38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b087      	sub	sp, #28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	607b      	str	r3, [r7, #4]
 8004f42:	460b      	mov	r3, r1
 8004f44:	817b      	strh	r3, [r7, #10]
 8004f46:	4613      	mov	r3, r2
 8004f48:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f4a:	897b      	ldrh	r3, [r7, #10]
 8004f4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f50:	7a7b      	ldrb	r3, [r7, #9]
 8004f52:	041b      	lsls	r3, r3, #16
 8004f54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f58:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f66:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	6a3b      	ldr	r3, [r7, #32]
 8004f70:	0d5b      	lsrs	r3, r3, #21
 8004f72:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004f76:	4b08      	ldr	r3, [pc, #32]	; (8004f98 <I2C_TransferConfig+0x60>)
 8004f78:	430b      	orrs	r3, r1
 8004f7a:	43db      	mvns	r3, r3
 8004f7c:	ea02 0103 	and.w	r1, r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	430a      	orrs	r2, r1
 8004f88:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004f8a:	bf00      	nop
 8004f8c:	371c      	adds	r7, #28
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	03ff63ff 	.word	0x03ff63ff

08004f9c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004fac:	887b      	ldrh	r3, [r7, #2]
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00f      	beq.n	8004fd6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004fbc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004fca:	2b28      	cmp	r3, #40	; 0x28
 8004fcc:	d003      	beq.n	8004fd6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004fd4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004fd6:	887b      	ldrh	r3, [r7, #2]
 8004fd8:	f003 0302 	and.w	r3, r3, #2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00f      	beq.n	8005000 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004fe6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ff4:	2b28      	cmp	r3, #40	; 0x28
 8004ff6:	d003      	beq.n	8005000 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004ffe:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005000:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005004:	2b00      	cmp	r3, #0
 8005006:	da03      	bge.n	8005010 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800500e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005010:	887b      	ldrh	r3, [r7, #2]
 8005012:	2b10      	cmp	r3, #16
 8005014:	d103      	bne.n	800501e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800501c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800501e:	887b      	ldrh	r3, [r7, #2]
 8005020:	2b20      	cmp	r3, #32
 8005022:	d103      	bne.n	800502c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f043 0320 	orr.w	r3, r3, #32
 800502a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800502c:	887b      	ldrh	r3, [r7, #2]
 800502e:	2b40      	cmp	r3, #64	; 0x40
 8005030:	d103      	bne.n	800503a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005038:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	6819      	ldr	r1, [r3, #0]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	43da      	mvns	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	400a      	ands	r2, r1
 800504a:	601a      	str	r2, [r3, #0]
}
 800504c:	bf00      	nop
 800504e:	3714      	adds	r7, #20
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b20      	cmp	r3, #32
 800506c:	d138      	bne.n	80050e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005074:	2b01      	cmp	r3, #1
 8005076:	d101      	bne.n	800507c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005078:	2302      	movs	r3, #2
 800507a:	e032      	b.n	80050e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2224      	movs	r2, #36	; 0x24
 8005088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f022 0201 	bic.w	r2, r2, #1
 800509a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6819      	ldr	r1, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	683a      	ldr	r2, [r7, #0]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f042 0201 	orr.w	r2, r2, #1
 80050ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2220      	movs	r2, #32
 80050d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80050dc:	2300      	movs	r3, #0
 80050de:	e000      	b.n	80050e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80050e0:	2302      	movs	r3, #2
  }
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b085      	sub	sp, #20
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
 80050f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2b20      	cmp	r3, #32
 8005102:	d139      	bne.n	8005178 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800510a:	2b01      	cmp	r3, #1
 800510c:	d101      	bne.n	8005112 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800510e:	2302      	movs	r3, #2
 8005110:	e033      	b.n	800517a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2224      	movs	r2, #36	; 0x24
 800511e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 0201 	bic.w	r2, r2, #1
 8005130:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005140:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	021b      	lsls	r3, r3, #8
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	4313      	orrs	r3, r2
 800514a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f042 0201 	orr.w	r2, r2, #1
 8005162:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2220      	movs	r2, #32
 8005168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005174:	2300      	movs	r3, #0
 8005176:	e000      	b.n	800517a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005178:	2302      	movs	r3, #2
  }
}
 800517a:	4618      	mov	r0, r3
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
	...

08005188 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005188:	b480      	push	{r7}
 800518a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800518c:	4b05      	ldr	r3, [pc, #20]	; (80051a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a04      	ldr	r2, [pc, #16]	; (80051a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005196:	6013      	str	r3, [r2, #0]
}
 8005198:	bf00      	nop
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	40007000 	.word	0x40007000

080051a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80051b0:	2300      	movs	r3, #0
 80051b2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e291      	b.n	80056e2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	f000 8087 	beq.w	80052da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80051cc:	4b96      	ldr	r3, [pc, #600]	; (8005428 <HAL_RCC_OscConfig+0x280>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f003 030c 	and.w	r3, r3, #12
 80051d4:	2b04      	cmp	r3, #4
 80051d6:	d00c      	beq.n	80051f2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051d8:	4b93      	ldr	r3, [pc, #588]	; (8005428 <HAL_RCC_OscConfig+0x280>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f003 030c 	and.w	r3, r3, #12
 80051e0:	2b08      	cmp	r3, #8
 80051e2:	d112      	bne.n	800520a <HAL_RCC_OscConfig+0x62>
 80051e4:	4b90      	ldr	r3, [pc, #576]	; (8005428 <HAL_RCC_OscConfig+0x280>)
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051f0:	d10b      	bne.n	800520a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051f2:	4b8d      	ldr	r3, [pc, #564]	; (8005428 <HAL_RCC_OscConfig+0x280>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d06c      	beq.n	80052d8 <HAL_RCC_OscConfig+0x130>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d168      	bne.n	80052d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e26b      	b.n	80056e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005212:	d106      	bne.n	8005222 <HAL_RCC_OscConfig+0x7a>
 8005214:	4b84      	ldr	r3, [pc, #528]	; (8005428 <HAL_RCC_OscConfig+0x280>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a83      	ldr	r2, [pc, #524]	; (8005428 <HAL_RCC_OscConfig+0x280>)
 800521a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800521e:	6013      	str	r3, [r2, #0]
 8005220:	e02e      	b.n	8005280 <HAL_RCC_OscConfig+0xd8>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10c      	bne.n	8005244 <HAL_RCC_OscConfig+0x9c>
 800522a:	4b7f      	ldr	r3, [pc, #508]	; (8005428 <HAL_RCC_OscConfig+0x280>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a7e      	ldr	r2, [pc, #504]	; (8005428 <HAL_RCC_OscConfig+0x280>)
 8005230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005234:	6013      	str	r3, [r2, #0]
 8005236:	4b7c      	ldr	r3, [pc, #496]	; (8005428 <HAL_RCC_OscConfig+0x280>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a7b      	ldr	r2, [pc, #492]	; (8005428 <HAL_RCC_OscConfig+0x280>)
 800523c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005240:	6013      	str	r3, [r2, #0]
 8005242:	e01d      	b.n	8005280 <HAL_RCC_OscConfig+0xd8>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800524c:	d10c      	bne.n	8005268 <HAL_RCC_OscConfig+0xc0>
 800524e:	4b76      	ldr	r3, [pc, #472]	; (8005428 <HAL_RCC_OscConfig+0x280>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a75      	ldr	r2, [pc, #468]	; (8005428 <HAL_RCC_OscConfig+0x280>)
 8005254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005258:	6013      	str	r3, [r2, #0]
 800525a:	4b73      	ldr	r3, [pc, #460]	; (8005428 <HAL_RCC_OscConfig+0x280>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a72      	ldr	r2, [pc, #456]	; (8005428 <HAL_RCC_OscConfig+0x280>)
 8005260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005264:	6013      	str	r3, [r2, #0]
 8005266:	e00b      	b.n	8005280 <HAL_RCC_OscConfig+0xd8>
 8005268:	4b6f      	ldr	r3, [pc, #444]	; (8005428 <HAL_RCC_OscConfig+0x280>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a6e      	ldr	r2, [pc, #440]	; (8005428 <HAL_RCC_OscConfig+0x280>)
 800526e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005272:	6013      	str	r3, [r2, #0]
 8005274:	4b6c      	ldr	r3, [pc, #432]	; (8005428 <HAL_RCC_OscConfig+0x280>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a6b      	ldr	r2, [pc, #428]	; (8005428 <HAL_RCC_OscConfig+0x280>)
 800527a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800527e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d013      	beq.n	80052b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005288:	f7fd fcf8 	bl	8002c7c <HAL_GetTick>
 800528c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800528e:	e008      	b.n	80052a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005290:	f7fd fcf4 	bl	8002c7c <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b64      	cmp	r3, #100	; 0x64
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e21f      	b.n	80056e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052a2:	4b61      	ldr	r3, [pc, #388]	; (8005428 <HAL_RCC_OscConfig+0x280>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d0f0      	beq.n	8005290 <HAL_RCC_OscConfig+0xe8>
 80052ae:	e014      	b.n	80052da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b0:	f7fd fce4 	bl	8002c7c <HAL_GetTick>
 80052b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052b6:	e008      	b.n	80052ca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052b8:	f7fd fce0 	bl	8002c7c <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b64      	cmp	r3, #100	; 0x64
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e20b      	b.n	80056e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052ca:	4b57      	ldr	r3, [pc, #348]	; (8005428 <HAL_RCC_OscConfig+0x280>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1f0      	bne.n	80052b8 <HAL_RCC_OscConfig+0x110>
 80052d6:	e000      	b.n	80052da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d069      	beq.n	80053ba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80052e6:	4b50      	ldr	r3, [pc, #320]	; (8005428 <HAL_RCC_OscConfig+0x280>)
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f003 030c 	and.w	r3, r3, #12
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00b      	beq.n	800530a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052f2:	4b4d      	ldr	r3, [pc, #308]	; (8005428 <HAL_RCC_OscConfig+0x280>)
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f003 030c 	and.w	r3, r3, #12
 80052fa:	2b08      	cmp	r3, #8
 80052fc:	d11c      	bne.n	8005338 <HAL_RCC_OscConfig+0x190>
 80052fe:	4b4a      	ldr	r3, [pc, #296]	; (8005428 <HAL_RCC_OscConfig+0x280>)
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d116      	bne.n	8005338 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800530a:	4b47      	ldr	r3, [pc, #284]	; (8005428 <HAL_RCC_OscConfig+0x280>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0302 	and.w	r3, r3, #2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d005      	beq.n	8005322 <HAL_RCC_OscConfig+0x17a>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d001      	beq.n	8005322 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e1df      	b.n	80056e2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005322:	4b41      	ldr	r3, [pc, #260]	; (8005428 <HAL_RCC_OscConfig+0x280>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	00db      	lsls	r3, r3, #3
 8005330:	493d      	ldr	r1, [pc, #244]	; (8005428 <HAL_RCC_OscConfig+0x280>)
 8005332:	4313      	orrs	r3, r2
 8005334:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005336:	e040      	b.n	80053ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d023      	beq.n	8005388 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005340:	4b39      	ldr	r3, [pc, #228]	; (8005428 <HAL_RCC_OscConfig+0x280>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a38      	ldr	r2, [pc, #224]	; (8005428 <HAL_RCC_OscConfig+0x280>)
 8005346:	f043 0301 	orr.w	r3, r3, #1
 800534a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800534c:	f7fd fc96 	bl	8002c7c <HAL_GetTick>
 8005350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005352:	e008      	b.n	8005366 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005354:	f7fd fc92 	bl	8002c7c <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	2b02      	cmp	r3, #2
 8005360:	d901      	bls.n	8005366 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e1bd      	b.n	80056e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005366:	4b30      	ldr	r3, [pc, #192]	; (8005428 <HAL_RCC_OscConfig+0x280>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d0f0      	beq.n	8005354 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005372:	4b2d      	ldr	r3, [pc, #180]	; (8005428 <HAL_RCC_OscConfig+0x280>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	00db      	lsls	r3, r3, #3
 8005380:	4929      	ldr	r1, [pc, #164]	; (8005428 <HAL_RCC_OscConfig+0x280>)
 8005382:	4313      	orrs	r3, r2
 8005384:	600b      	str	r3, [r1, #0]
 8005386:	e018      	b.n	80053ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005388:	4b27      	ldr	r3, [pc, #156]	; (8005428 <HAL_RCC_OscConfig+0x280>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a26      	ldr	r2, [pc, #152]	; (8005428 <HAL_RCC_OscConfig+0x280>)
 800538e:	f023 0301 	bic.w	r3, r3, #1
 8005392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005394:	f7fd fc72 	bl	8002c7c <HAL_GetTick>
 8005398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800539a:	e008      	b.n	80053ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800539c:	f7fd fc6e 	bl	8002c7c <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e199      	b.n	80056e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053ae:	4b1e      	ldr	r3, [pc, #120]	; (8005428 <HAL_RCC_OscConfig+0x280>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1f0      	bne.n	800539c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0308 	and.w	r3, r3, #8
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d038      	beq.n	8005438 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d019      	beq.n	8005402 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053ce:	4b16      	ldr	r3, [pc, #88]	; (8005428 <HAL_RCC_OscConfig+0x280>)
 80053d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053d2:	4a15      	ldr	r2, [pc, #84]	; (8005428 <HAL_RCC_OscConfig+0x280>)
 80053d4:	f043 0301 	orr.w	r3, r3, #1
 80053d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053da:	f7fd fc4f 	bl	8002c7c <HAL_GetTick>
 80053de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053e0:	e008      	b.n	80053f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053e2:	f7fd fc4b 	bl	8002c7c <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d901      	bls.n	80053f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e176      	b.n	80056e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053f4:	4b0c      	ldr	r3, [pc, #48]	; (8005428 <HAL_RCC_OscConfig+0x280>)
 80053f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d0f0      	beq.n	80053e2 <HAL_RCC_OscConfig+0x23a>
 8005400:	e01a      	b.n	8005438 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005402:	4b09      	ldr	r3, [pc, #36]	; (8005428 <HAL_RCC_OscConfig+0x280>)
 8005404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005406:	4a08      	ldr	r2, [pc, #32]	; (8005428 <HAL_RCC_OscConfig+0x280>)
 8005408:	f023 0301 	bic.w	r3, r3, #1
 800540c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800540e:	f7fd fc35 	bl	8002c7c <HAL_GetTick>
 8005412:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005414:	e00a      	b.n	800542c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005416:	f7fd fc31 	bl	8002c7c <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	2b02      	cmp	r3, #2
 8005422:	d903      	bls.n	800542c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e15c      	b.n	80056e2 <HAL_RCC_OscConfig+0x53a>
 8005428:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800542c:	4b91      	ldr	r3, [pc, #580]	; (8005674 <HAL_RCC_OscConfig+0x4cc>)
 800542e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005430:	f003 0302 	and.w	r3, r3, #2
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1ee      	bne.n	8005416 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0304 	and.w	r3, r3, #4
 8005440:	2b00      	cmp	r3, #0
 8005442:	f000 80a4 	beq.w	800558e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005446:	4b8b      	ldr	r3, [pc, #556]	; (8005674 <HAL_RCC_OscConfig+0x4cc>)
 8005448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10d      	bne.n	800546e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005452:	4b88      	ldr	r3, [pc, #544]	; (8005674 <HAL_RCC_OscConfig+0x4cc>)
 8005454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005456:	4a87      	ldr	r2, [pc, #540]	; (8005674 <HAL_RCC_OscConfig+0x4cc>)
 8005458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800545c:	6413      	str	r3, [r2, #64]	; 0x40
 800545e:	4b85      	ldr	r3, [pc, #532]	; (8005674 <HAL_RCC_OscConfig+0x4cc>)
 8005460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005466:	60bb      	str	r3, [r7, #8]
 8005468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800546a:	2301      	movs	r3, #1
 800546c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800546e:	4b82      	ldr	r3, [pc, #520]	; (8005678 <HAL_RCC_OscConfig+0x4d0>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005476:	2b00      	cmp	r3, #0
 8005478:	d118      	bne.n	80054ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800547a:	4b7f      	ldr	r3, [pc, #508]	; (8005678 <HAL_RCC_OscConfig+0x4d0>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a7e      	ldr	r2, [pc, #504]	; (8005678 <HAL_RCC_OscConfig+0x4d0>)
 8005480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005486:	f7fd fbf9 	bl	8002c7c <HAL_GetTick>
 800548a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800548c:	e008      	b.n	80054a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800548e:	f7fd fbf5 	bl	8002c7c <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	2b64      	cmp	r3, #100	; 0x64
 800549a:	d901      	bls.n	80054a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e120      	b.n	80056e2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054a0:	4b75      	ldr	r3, [pc, #468]	; (8005678 <HAL_RCC_OscConfig+0x4d0>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d0f0      	beq.n	800548e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d106      	bne.n	80054c2 <HAL_RCC_OscConfig+0x31a>
 80054b4:	4b6f      	ldr	r3, [pc, #444]	; (8005674 <HAL_RCC_OscConfig+0x4cc>)
 80054b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b8:	4a6e      	ldr	r2, [pc, #440]	; (8005674 <HAL_RCC_OscConfig+0x4cc>)
 80054ba:	f043 0301 	orr.w	r3, r3, #1
 80054be:	6713      	str	r3, [r2, #112]	; 0x70
 80054c0:	e02d      	b.n	800551e <HAL_RCC_OscConfig+0x376>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10c      	bne.n	80054e4 <HAL_RCC_OscConfig+0x33c>
 80054ca:	4b6a      	ldr	r3, [pc, #424]	; (8005674 <HAL_RCC_OscConfig+0x4cc>)
 80054cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ce:	4a69      	ldr	r2, [pc, #420]	; (8005674 <HAL_RCC_OscConfig+0x4cc>)
 80054d0:	f023 0301 	bic.w	r3, r3, #1
 80054d4:	6713      	str	r3, [r2, #112]	; 0x70
 80054d6:	4b67      	ldr	r3, [pc, #412]	; (8005674 <HAL_RCC_OscConfig+0x4cc>)
 80054d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054da:	4a66      	ldr	r2, [pc, #408]	; (8005674 <HAL_RCC_OscConfig+0x4cc>)
 80054dc:	f023 0304 	bic.w	r3, r3, #4
 80054e0:	6713      	str	r3, [r2, #112]	; 0x70
 80054e2:	e01c      	b.n	800551e <HAL_RCC_OscConfig+0x376>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	2b05      	cmp	r3, #5
 80054ea:	d10c      	bne.n	8005506 <HAL_RCC_OscConfig+0x35e>
 80054ec:	4b61      	ldr	r3, [pc, #388]	; (8005674 <HAL_RCC_OscConfig+0x4cc>)
 80054ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f0:	4a60      	ldr	r2, [pc, #384]	; (8005674 <HAL_RCC_OscConfig+0x4cc>)
 80054f2:	f043 0304 	orr.w	r3, r3, #4
 80054f6:	6713      	str	r3, [r2, #112]	; 0x70
 80054f8:	4b5e      	ldr	r3, [pc, #376]	; (8005674 <HAL_RCC_OscConfig+0x4cc>)
 80054fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054fc:	4a5d      	ldr	r2, [pc, #372]	; (8005674 <HAL_RCC_OscConfig+0x4cc>)
 80054fe:	f043 0301 	orr.w	r3, r3, #1
 8005502:	6713      	str	r3, [r2, #112]	; 0x70
 8005504:	e00b      	b.n	800551e <HAL_RCC_OscConfig+0x376>
 8005506:	4b5b      	ldr	r3, [pc, #364]	; (8005674 <HAL_RCC_OscConfig+0x4cc>)
 8005508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800550a:	4a5a      	ldr	r2, [pc, #360]	; (8005674 <HAL_RCC_OscConfig+0x4cc>)
 800550c:	f023 0301 	bic.w	r3, r3, #1
 8005510:	6713      	str	r3, [r2, #112]	; 0x70
 8005512:	4b58      	ldr	r3, [pc, #352]	; (8005674 <HAL_RCC_OscConfig+0x4cc>)
 8005514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005516:	4a57      	ldr	r2, [pc, #348]	; (8005674 <HAL_RCC_OscConfig+0x4cc>)
 8005518:	f023 0304 	bic.w	r3, r3, #4
 800551c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d015      	beq.n	8005552 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005526:	f7fd fba9 	bl	8002c7c <HAL_GetTick>
 800552a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800552c:	e00a      	b.n	8005544 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800552e:	f7fd fba5 	bl	8002c7c <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	f241 3288 	movw	r2, #5000	; 0x1388
 800553c:	4293      	cmp	r3, r2
 800553e:	d901      	bls.n	8005544 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e0ce      	b.n	80056e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005544:	4b4b      	ldr	r3, [pc, #300]	; (8005674 <HAL_RCC_OscConfig+0x4cc>)
 8005546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005548:	f003 0302 	and.w	r3, r3, #2
 800554c:	2b00      	cmp	r3, #0
 800554e:	d0ee      	beq.n	800552e <HAL_RCC_OscConfig+0x386>
 8005550:	e014      	b.n	800557c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005552:	f7fd fb93 	bl	8002c7c <HAL_GetTick>
 8005556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005558:	e00a      	b.n	8005570 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800555a:	f7fd fb8f 	bl	8002c7c <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	f241 3288 	movw	r2, #5000	; 0x1388
 8005568:	4293      	cmp	r3, r2
 800556a:	d901      	bls.n	8005570 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e0b8      	b.n	80056e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005570:	4b40      	ldr	r3, [pc, #256]	; (8005674 <HAL_RCC_OscConfig+0x4cc>)
 8005572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1ee      	bne.n	800555a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800557c:	7dfb      	ldrb	r3, [r7, #23]
 800557e:	2b01      	cmp	r3, #1
 8005580:	d105      	bne.n	800558e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005582:	4b3c      	ldr	r3, [pc, #240]	; (8005674 <HAL_RCC_OscConfig+0x4cc>)
 8005584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005586:	4a3b      	ldr	r2, [pc, #236]	; (8005674 <HAL_RCC_OscConfig+0x4cc>)
 8005588:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800558c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	2b00      	cmp	r3, #0
 8005594:	f000 80a4 	beq.w	80056e0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005598:	4b36      	ldr	r3, [pc, #216]	; (8005674 <HAL_RCC_OscConfig+0x4cc>)
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f003 030c 	and.w	r3, r3, #12
 80055a0:	2b08      	cmp	r3, #8
 80055a2:	d06b      	beq.n	800567c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d149      	bne.n	8005640 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ac:	4b31      	ldr	r3, [pc, #196]	; (8005674 <HAL_RCC_OscConfig+0x4cc>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a30      	ldr	r2, [pc, #192]	; (8005674 <HAL_RCC_OscConfig+0x4cc>)
 80055b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b8:	f7fd fb60 	bl	8002c7c <HAL_GetTick>
 80055bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055be:	e008      	b.n	80055d2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055c0:	f7fd fb5c 	bl	8002c7c <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e087      	b.n	80056e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055d2:	4b28      	ldr	r3, [pc, #160]	; (8005674 <HAL_RCC_OscConfig+0x4cc>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1f0      	bne.n	80055c0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	69da      	ldr	r2, [r3, #28]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a1b      	ldr	r3, [r3, #32]
 80055e6:	431a      	orrs	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ec:	019b      	lsls	r3, r3, #6
 80055ee:	431a      	orrs	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f4:	085b      	lsrs	r3, r3, #1
 80055f6:	3b01      	subs	r3, #1
 80055f8:	041b      	lsls	r3, r3, #16
 80055fa:	431a      	orrs	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005600:	061b      	lsls	r3, r3, #24
 8005602:	4313      	orrs	r3, r2
 8005604:	4a1b      	ldr	r2, [pc, #108]	; (8005674 <HAL_RCC_OscConfig+0x4cc>)
 8005606:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800560a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800560c:	4b19      	ldr	r3, [pc, #100]	; (8005674 <HAL_RCC_OscConfig+0x4cc>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a18      	ldr	r2, [pc, #96]	; (8005674 <HAL_RCC_OscConfig+0x4cc>)
 8005612:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005618:	f7fd fb30 	bl	8002c7c <HAL_GetTick>
 800561c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800561e:	e008      	b.n	8005632 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005620:	f7fd fb2c 	bl	8002c7c <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	2b02      	cmp	r3, #2
 800562c:	d901      	bls.n	8005632 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e057      	b.n	80056e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005632:	4b10      	ldr	r3, [pc, #64]	; (8005674 <HAL_RCC_OscConfig+0x4cc>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d0f0      	beq.n	8005620 <HAL_RCC_OscConfig+0x478>
 800563e:	e04f      	b.n	80056e0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005640:	4b0c      	ldr	r3, [pc, #48]	; (8005674 <HAL_RCC_OscConfig+0x4cc>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a0b      	ldr	r2, [pc, #44]	; (8005674 <HAL_RCC_OscConfig+0x4cc>)
 8005646:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800564a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800564c:	f7fd fb16 	bl	8002c7c <HAL_GetTick>
 8005650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005652:	e008      	b.n	8005666 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005654:	f7fd fb12 	bl	8002c7c <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	2b02      	cmp	r3, #2
 8005660:	d901      	bls.n	8005666 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e03d      	b.n	80056e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005666:	4b03      	ldr	r3, [pc, #12]	; (8005674 <HAL_RCC_OscConfig+0x4cc>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1f0      	bne.n	8005654 <HAL_RCC_OscConfig+0x4ac>
 8005672:	e035      	b.n	80056e0 <HAL_RCC_OscConfig+0x538>
 8005674:	40023800 	.word	0x40023800
 8005678:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800567c:	4b1b      	ldr	r3, [pc, #108]	; (80056ec <HAL_RCC_OscConfig+0x544>)
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d028      	beq.n	80056dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005694:	429a      	cmp	r2, r3
 8005696:	d121      	bne.n	80056dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d11a      	bne.n	80056dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80056ac:	4013      	ands	r3, r2
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056b2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d111      	bne.n	80056dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c2:	085b      	lsrs	r3, r3, #1
 80056c4:	3b01      	subs	r3, #1
 80056c6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d107      	bne.n	80056dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80056d8:	429a      	cmp	r2, r3
 80056da:	d001      	beq.n	80056e0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e000      	b.n	80056e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3718      	adds	r7, #24
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	40023800 	.word	0x40023800

080056f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80056fa:	2300      	movs	r3, #0
 80056fc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e0d0      	b.n	80058aa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005708:	4b6a      	ldr	r3, [pc, #424]	; (80058b4 <HAL_RCC_ClockConfig+0x1c4>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 030f 	and.w	r3, r3, #15
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	429a      	cmp	r2, r3
 8005714:	d910      	bls.n	8005738 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005716:	4b67      	ldr	r3, [pc, #412]	; (80058b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f023 020f 	bic.w	r2, r3, #15
 800571e:	4965      	ldr	r1, [pc, #404]	; (80058b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	4313      	orrs	r3, r2
 8005724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005726:	4b63      	ldr	r3, [pc, #396]	; (80058b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 030f 	and.w	r3, r3, #15
 800572e:	683a      	ldr	r2, [r7, #0]
 8005730:	429a      	cmp	r2, r3
 8005732:	d001      	beq.n	8005738 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e0b8      	b.n	80058aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	2b00      	cmp	r3, #0
 8005742:	d020      	beq.n	8005786 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0304 	and.w	r3, r3, #4
 800574c:	2b00      	cmp	r3, #0
 800574e:	d005      	beq.n	800575c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005750:	4b59      	ldr	r3, [pc, #356]	; (80058b8 <HAL_RCC_ClockConfig+0x1c8>)
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	4a58      	ldr	r2, [pc, #352]	; (80058b8 <HAL_RCC_ClockConfig+0x1c8>)
 8005756:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800575a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0308 	and.w	r3, r3, #8
 8005764:	2b00      	cmp	r3, #0
 8005766:	d005      	beq.n	8005774 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005768:	4b53      	ldr	r3, [pc, #332]	; (80058b8 <HAL_RCC_ClockConfig+0x1c8>)
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	4a52      	ldr	r2, [pc, #328]	; (80058b8 <HAL_RCC_ClockConfig+0x1c8>)
 800576e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005772:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005774:	4b50      	ldr	r3, [pc, #320]	; (80058b8 <HAL_RCC_ClockConfig+0x1c8>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	494d      	ldr	r1, [pc, #308]	; (80058b8 <HAL_RCC_ClockConfig+0x1c8>)
 8005782:	4313      	orrs	r3, r2
 8005784:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	2b00      	cmp	r3, #0
 8005790:	d040      	beq.n	8005814 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d107      	bne.n	80057aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800579a:	4b47      	ldr	r3, [pc, #284]	; (80058b8 <HAL_RCC_ClockConfig+0x1c8>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d115      	bne.n	80057d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e07f      	b.n	80058aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d107      	bne.n	80057c2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057b2:	4b41      	ldr	r3, [pc, #260]	; (80058b8 <HAL_RCC_ClockConfig+0x1c8>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d109      	bne.n	80057d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e073      	b.n	80058aa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057c2:	4b3d      	ldr	r3, [pc, #244]	; (80058b8 <HAL_RCC_ClockConfig+0x1c8>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e06b      	b.n	80058aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057d2:	4b39      	ldr	r3, [pc, #228]	; (80058b8 <HAL_RCC_ClockConfig+0x1c8>)
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f023 0203 	bic.w	r2, r3, #3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	4936      	ldr	r1, [pc, #216]	; (80058b8 <HAL_RCC_ClockConfig+0x1c8>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057e4:	f7fd fa4a 	bl	8002c7c <HAL_GetTick>
 80057e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ea:	e00a      	b.n	8005802 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057ec:	f7fd fa46 	bl	8002c7c <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e053      	b.n	80058aa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005802:	4b2d      	ldr	r3, [pc, #180]	; (80058b8 <HAL_RCC_ClockConfig+0x1c8>)
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f003 020c 	and.w	r2, r3, #12
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	429a      	cmp	r2, r3
 8005812:	d1eb      	bne.n	80057ec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005814:	4b27      	ldr	r3, [pc, #156]	; (80058b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 030f 	and.w	r3, r3, #15
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	429a      	cmp	r2, r3
 8005820:	d210      	bcs.n	8005844 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005822:	4b24      	ldr	r3, [pc, #144]	; (80058b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f023 020f 	bic.w	r2, r3, #15
 800582a:	4922      	ldr	r1, [pc, #136]	; (80058b4 <HAL_RCC_ClockConfig+0x1c4>)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	4313      	orrs	r3, r2
 8005830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005832:	4b20      	ldr	r3, [pc, #128]	; (80058b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 030f 	and.w	r3, r3, #15
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	429a      	cmp	r2, r3
 800583e:	d001      	beq.n	8005844 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e032      	b.n	80058aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0304 	and.w	r3, r3, #4
 800584c:	2b00      	cmp	r3, #0
 800584e:	d008      	beq.n	8005862 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005850:	4b19      	ldr	r3, [pc, #100]	; (80058b8 <HAL_RCC_ClockConfig+0x1c8>)
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	4916      	ldr	r1, [pc, #88]	; (80058b8 <HAL_RCC_ClockConfig+0x1c8>)
 800585e:	4313      	orrs	r3, r2
 8005860:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0308 	and.w	r3, r3, #8
 800586a:	2b00      	cmp	r3, #0
 800586c:	d009      	beq.n	8005882 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800586e:	4b12      	ldr	r3, [pc, #72]	; (80058b8 <HAL_RCC_ClockConfig+0x1c8>)
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	00db      	lsls	r3, r3, #3
 800587c:	490e      	ldr	r1, [pc, #56]	; (80058b8 <HAL_RCC_ClockConfig+0x1c8>)
 800587e:	4313      	orrs	r3, r2
 8005880:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005882:	f000 f821 	bl	80058c8 <HAL_RCC_GetSysClockFreq>
 8005886:	4602      	mov	r2, r0
 8005888:	4b0b      	ldr	r3, [pc, #44]	; (80058b8 <HAL_RCC_ClockConfig+0x1c8>)
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	091b      	lsrs	r3, r3, #4
 800588e:	f003 030f 	and.w	r3, r3, #15
 8005892:	490a      	ldr	r1, [pc, #40]	; (80058bc <HAL_RCC_ClockConfig+0x1cc>)
 8005894:	5ccb      	ldrb	r3, [r1, r3]
 8005896:	fa22 f303 	lsr.w	r3, r2, r3
 800589a:	4a09      	ldr	r2, [pc, #36]	; (80058c0 <HAL_RCC_ClockConfig+0x1d0>)
 800589c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800589e:	4b09      	ldr	r3, [pc, #36]	; (80058c4 <HAL_RCC_ClockConfig+0x1d4>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7fd f9a6 	bl	8002bf4 <HAL_InitTick>

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	40023c00 	.word	0x40023c00
 80058b8:	40023800 	.word	0x40023800
 80058bc:	0800dd60 	.word	0x0800dd60
 80058c0:	20000000 	.word	0x20000000
 80058c4:	20000004 	.word	0x20000004

080058c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058cc:	b094      	sub	sp, #80	; 0x50
 80058ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80058d0:	2300      	movs	r3, #0
 80058d2:	647b      	str	r3, [r7, #68]	; 0x44
 80058d4:	2300      	movs	r3, #0
 80058d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058d8:	2300      	movs	r3, #0
 80058da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80058dc:	2300      	movs	r3, #0
 80058de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058e0:	4b79      	ldr	r3, [pc, #484]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f003 030c 	and.w	r3, r3, #12
 80058e8:	2b08      	cmp	r3, #8
 80058ea:	d00d      	beq.n	8005908 <HAL_RCC_GetSysClockFreq+0x40>
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	f200 80e1 	bhi.w	8005ab4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d002      	beq.n	80058fc <HAL_RCC_GetSysClockFreq+0x34>
 80058f6:	2b04      	cmp	r3, #4
 80058f8:	d003      	beq.n	8005902 <HAL_RCC_GetSysClockFreq+0x3a>
 80058fa:	e0db      	b.n	8005ab4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058fc:	4b73      	ldr	r3, [pc, #460]	; (8005acc <HAL_RCC_GetSysClockFreq+0x204>)
 80058fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005900:	e0db      	b.n	8005aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005902:	4b73      	ldr	r3, [pc, #460]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005904:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005906:	e0d8      	b.n	8005aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005908:	4b6f      	ldr	r3, [pc, #444]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005910:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005912:	4b6d      	ldr	r3, [pc, #436]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d063      	beq.n	80059e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800591e:	4b6a      	ldr	r3, [pc, #424]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	099b      	lsrs	r3, r3, #6
 8005924:	2200      	movs	r2, #0
 8005926:	63bb      	str	r3, [r7, #56]	; 0x38
 8005928:	63fa      	str	r2, [r7, #60]	; 0x3c
 800592a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005930:	633b      	str	r3, [r7, #48]	; 0x30
 8005932:	2300      	movs	r3, #0
 8005934:	637b      	str	r3, [r7, #52]	; 0x34
 8005936:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800593a:	4622      	mov	r2, r4
 800593c:	462b      	mov	r3, r5
 800593e:	f04f 0000 	mov.w	r0, #0
 8005942:	f04f 0100 	mov.w	r1, #0
 8005946:	0159      	lsls	r1, r3, #5
 8005948:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800594c:	0150      	lsls	r0, r2, #5
 800594e:	4602      	mov	r2, r0
 8005950:	460b      	mov	r3, r1
 8005952:	4621      	mov	r1, r4
 8005954:	1a51      	subs	r1, r2, r1
 8005956:	6139      	str	r1, [r7, #16]
 8005958:	4629      	mov	r1, r5
 800595a:	eb63 0301 	sbc.w	r3, r3, r1
 800595e:	617b      	str	r3, [r7, #20]
 8005960:	f04f 0200 	mov.w	r2, #0
 8005964:	f04f 0300 	mov.w	r3, #0
 8005968:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800596c:	4659      	mov	r1, fp
 800596e:	018b      	lsls	r3, r1, #6
 8005970:	4651      	mov	r1, sl
 8005972:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005976:	4651      	mov	r1, sl
 8005978:	018a      	lsls	r2, r1, #6
 800597a:	4651      	mov	r1, sl
 800597c:	ebb2 0801 	subs.w	r8, r2, r1
 8005980:	4659      	mov	r1, fp
 8005982:	eb63 0901 	sbc.w	r9, r3, r1
 8005986:	f04f 0200 	mov.w	r2, #0
 800598a:	f04f 0300 	mov.w	r3, #0
 800598e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005992:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005996:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800599a:	4690      	mov	r8, r2
 800599c:	4699      	mov	r9, r3
 800599e:	4623      	mov	r3, r4
 80059a0:	eb18 0303 	adds.w	r3, r8, r3
 80059a4:	60bb      	str	r3, [r7, #8]
 80059a6:	462b      	mov	r3, r5
 80059a8:	eb49 0303 	adc.w	r3, r9, r3
 80059ac:	60fb      	str	r3, [r7, #12]
 80059ae:	f04f 0200 	mov.w	r2, #0
 80059b2:	f04f 0300 	mov.w	r3, #0
 80059b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80059ba:	4629      	mov	r1, r5
 80059bc:	024b      	lsls	r3, r1, #9
 80059be:	4621      	mov	r1, r4
 80059c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80059c4:	4621      	mov	r1, r4
 80059c6:	024a      	lsls	r2, r1, #9
 80059c8:	4610      	mov	r0, r2
 80059ca:	4619      	mov	r1, r3
 80059cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059ce:	2200      	movs	r2, #0
 80059d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80059d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80059d8:	f7fb f9c6 	bl	8000d68 <__aeabi_uldivmod>
 80059dc:	4602      	mov	r2, r0
 80059de:	460b      	mov	r3, r1
 80059e0:	4613      	mov	r3, r2
 80059e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059e4:	e058      	b.n	8005a98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059e6:	4b38      	ldr	r3, [pc, #224]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	099b      	lsrs	r3, r3, #6
 80059ec:	2200      	movs	r2, #0
 80059ee:	4618      	mov	r0, r3
 80059f0:	4611      	mov	r1, r2
 80059f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80059f6:	623b      	str	r3, [r7, #32]
 80059f8:	2300      	movs	r3, #0
 80059fa:	627b      	str	r3, [r7, #36]	; 0x24
 80059fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a00:	4642      	mov	r2, r8
 8005a02:	464b      	mov	r3, r9
 8005a04:	f04f 0000 	mov.w	r0, #0
 8005a08:	f04f 0100 	mov.w	r1, #0
 8005a0c:	0159      	lsls	r1, r3, #5
 8005a0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a12:	0150      	lsls	r0, r2, #5
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	4641      	mov	r1, r8
 8005a1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a1e:	4649      	mov	r1, r9
 8005a20:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a24:	f04f 0200 	mov.w	r2, #0
 8005a28:	f04f 0300 	mov.w	r3, #0
 8005a2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a38:	ebb2 040a 	subs.w	r4, r2, sl
 8005a3c:	eb63 050b 	sbc.w	r5, r3, fp
 8005a40:	f04f 0200 	mov.w	r2, #0
 8005a44:	f04f 0300 	mov.w	r3, #0
 8005a48:	00eb      	lsls	r3, r5, #3
 8005a4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a4e:	00e2      	lsls	r2, r4, #3
 8005a50:	4614      	mov	r4, r2
 8005a52:	461d      	mov	r5, r3
 8005a54:	4643      	mov	r3, r8
 8005a56:	18e3      	adds	r3, r4, r3
 8005a58:	603b      	str	r3, [r7, #0]
 8005a5a:	464b      	mov	r3, r9
 8005a5c:	eb45 0303 	adc.w	r3, r5, r3
 8005a60:	607b      	str	r3, [r7, #4]
 8005a62:	f04f 0200 	mov.w	r2, #0
 8005a66:	f04f 0300 	mov.w	r3, #0
 8005a6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a6e:	4629      	mov	r1, r5
 8005a70:	028b      	lsls	r3, r1, #10
 8005a72:	4621      	mov	r1, r4
 8005a74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a78:	4621      	mov	r1, r4
 8005a7a:	028a      	lsls	r2, r1, #10
 8005a7c:	4610      	mov	r0, r2
 8005a7e:	4619      	mov	r1, r3
 8005a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a82:	2200      	movs	r2, #0
 8005a84:	61bb      	str	r3, [r7, #24]
 8005a86:	61fa      	str	r2, [r7, #28]
 8005a88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a8c:	f7fb f96c 	bl	8000d68 <__aeabi_uldivmod>
 8005a90:	4602      	mov	r2, r0
 8005a92:	460b      	mov	r3, r1
 8005a94:	4613      	mov	r3, r2
 8005a96:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005a98:	4b0b      	ldr	r3, [pc, #44]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	0c1b      	lsrs	r3, r3, #16
 8005a9e:	f003 0303 	and.w	r3, r3, #3
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	005b      	lsls	r3, r3, #1
 8005aa6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005aa8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005aaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ab2:	e002      	b.n	8005aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ab4:	4b05      	ldr	r3, [pc, #20]	; (8005acc <HAL_RCC_GetSysClockFreq+0x204>)
 8005ab6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ab8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3750      	adds	r7, #80	; 0x50
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ac6:	bf00      	nop
 8005ac8:	40023800 	.word	0x40023800
 8005acc:	00f42400 	.word	0x00f42400
 8005ad0:	007a1200 	.word	0x007a1200

08005ad4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ad8:	4b03      	ldr	r3, [pc, #12]	; (8005ae8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ada:	681b      	ldr	r3, [r3, #0]
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	20000000 	.word	0x20000000

08005aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005af0:	f7ff fff0 	bl	8005ad4 <HAL_RCC_GetHCLKFreq>
 8005af4:	4602      	mov	r2, r0
 8005af6:	4b05      	ldr	r3, [pc, #20]	; (8005b0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	0a9b      	lsrs	r3, r3, #10
 8005afc:	f003 0307 	and.w	r3, r3, #7
 8005b00:	4903      	ldr	r1, [pc, #12]	; (8005b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b02:	5ccb      	ldrb	r3, [r1, r3]
 8005b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	40023800 	.word	0x40023800
 8005b10:	0800dd70 	.word	0x0800dd70

08005b14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b18:	f7ff ffdc 	bl	8005ad4 <HAL_RCC_GetHCLKFreq>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	4b05      	ldr	r3, [pc, #20]	; (8005b34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	0b5b      	lsrs	r3, r3, #13
 8005b24:	f003 0307 	and.w	r3, r3, #7
 8005b28:	4903      	ldr	r1, [pc, #12]	; (8005b38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b2a:	5ccb      	ldrb	r3, [r1, r3]
 8005b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	40023800 	.word	0x40023800
 8005b38:	0800dd70 	.word	0x0800dd70

08005b3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b088      	sub	sp, #32
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005b44:	2300      	movs	r3, #0
 8005b46:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005b50:	2300      	movs	r3, #0
 8005b52:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005b54:	2300      	movs	r3, #0
 8005b56:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0301 	and.w	r3, r3, #1
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d012      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005b64:	4b69      	ldr	r3, [pc, #420]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	4a68      	ldr	r2, [pc, #416]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b6a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005b6e:	6093      	str	r3, [r2, #8]
 8005b70:	4b66      	ldr	r3, [pc, #408]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b72:	689a      	ldr	r2, [r3, #8]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b78:	4964      	ldr	r1, [pc, #400]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005b86:	2301      	movs	r3, #1
 8005b88:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d017      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b96:	4b5d      	ldr	r3, [pc, #372]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba4:	4959      	ldr	r1, [pc, #356]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bb4:	d101      	bne.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d017      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005bd2:	4b4e      	ldr	r3, [pc, #312]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bd8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be0:	494a      	ldr	r1, [pc, #296]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bf0:	d101      	bne.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d101      	bne.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d001      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0320 	and.w	r3, r3, #32
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f000 808b 	beq.w	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c20:	4b3a      	ldr	r3, [pc, #232]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c24:	4a39      	ldr	r2, [pc, #228]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c2a:	6413      	str	r3, [r2, #64]	; 0x40
 8005c2c:	4b37      	ldr	r3, [pc, #220]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c34:	60bb      	str	r3, [r7, #8]
 8005c36:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005c38:	4b35      	ldr	r3, [pc, #212]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a34      	ldr	r2, [pc, #208]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c44:	f7fd f81a 	bl	8002c7c <HAL_GetTick>
 8005c48:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005c4a:	e008      	b.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c4c:	f7fd f816 	bl	8002c7c <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	2b64      	cmp	r3, #100	; 0x64
 8005c58:	d901      	bls.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e357      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005c5e:	4b2c      	ldr	r3, [pc, #176]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d0f0      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c6a:	4b28      	ldr	r3, [pc, #160]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c72:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d035      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d02e      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c88:	4b20      	ldr	r3, [pc, #128]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c90:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c92:	4b1e      	ldr	r3, [pc, #120]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c96:	4a1d      	ldr	r2, [pc, #116]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c9c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c9e:	4b1b      	ldr	r3, [pc, #108]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca2:	4a1a      	ldr	r2, [pc, #104]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ca8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005caa:	4a18      	ldr	r2, [pc, #96]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005cb0:	4b16      	ldr	r3, [pc, #88]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb4:	f003 0301 	and.w	r3, r3, #1
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d114      	bne.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cbc:	f7fc ffde 	bl	8002c7c <HAL_GetTick>
 8005cc0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cc2:	e00a      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cc4:	f7fc ffda 	bl	8002c7c <HAL_GetTick>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d901      	bls.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e319      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cda:	4b0c      	ldr	r3, [pc, #48]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cde:	f003 0302 	and.w	r3, r3, #2
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d0ee      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cf2:	d111      	bne.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005cf4:	4b05      	ldr	r3, [pc, #20]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005d00:	4b04      	ldr	r3, [pc, #16]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005d02:	400b      	ands	r3, r1
 8005d04:	4901      	ldr	r1, [pc, #4]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	608b      	str	r3, [r1, #8]
 8005d0a:	e00b      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005d0c:	40023800 	.word	0x40023800
 8005d10:	40007000 	.word	0x40007000
 8005d14:	0ffffcff 	.word	0x0ffffcff
 8005d18:	4baa      	ldr	r3, [pc, #680]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	4aa9      	ldr	r2, [pc, #676]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d1e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005d22:	6093      	str	r3, [r2, #8]
 8005d24:	4ba7      	ldr	r3, [pc, #668]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d30:	49a4      	ldr	r1, [pc, #656]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0310 	and.w	r3, r3, #16
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d010      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d42:	4ba0      	ldr	r3, [pc, #640]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d48:	4a9e      	ldr	r2, [pc, #632]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d4e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005d52:	4b9c      	ldr	r3, [pc, #624]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d54:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5c:	4999      	ldr	r1, [pc, #612]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00a      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d70:	4b94      	ldr	r3, [pc, #592]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d7e:	4991      	ldr	r1, [pc, #580]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d80:	4313      	orrs	r3, r2
 8005d82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00a      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d92:	4b8c      	ldr	r3, [pc, #560]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005da0:	4988      	ldr	r1, [pc, #544]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005da2:	4313      	orrs	r3, r2
 8005da4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00a      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005db4:	4b83      	ldr	r3, [pc, #524]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dc2:	4980      	ldr	r1, [pc, #512]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00a      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005dd6:	4b7b      	ldr	r3, [pc, #492]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ddc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005de4:	4977      	ldr	r1, [pc, #476]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d00a      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005df8:	4b72      	ldr	r3, [pc, #456]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dfe:	f023 0203 	bic.w	r2, r3, #3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e06:	496f      	ldr	r1, [pc, #444]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00a      	beq.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e1a:	4b6a      	ldr	r3, [pc, #424]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e20:	f023 020c 	bic.w	r2, r3, #12
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e28:	4966      	ldr	r1, [pc, #408]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00a      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e3c:	4b61      	ldr	r3, [pc, #388]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e42:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e4a:	495e      	ldr	r1, [pc, #376]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00a      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005e5e:	4b59      	ldr	r3, [pc, #356]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e64:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e6c:	4955      	ldr	r1, [pc, #340]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d00a      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005e80:	4b50      	ldr	r3, [pc, #320]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e8e:	494d      	ldr	r1, [pc, #308]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e90:	4313      	orrs	r3, r2
 8005e92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00a      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005ea2:	4b48      	ldr	r3, [pc, #288]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eb0:	4944      	ldr	r1, [pc, #272]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00a      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005ec4:	4b3f      	ldr	r3, [pc, #252]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ed2:	493c      	ldr	r1, [pc, #240]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00a      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005ee6:	4b37      	ldr	r3, [pc, #220]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ef4:	4933      	ldr	r1, [pc, #204]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00a      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005f08:	4b2e      	ldr	r3, [pc, #184]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f0e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f16:	492b      	ldr	r1, [pc, #172]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d011      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005f2a:	4b26      	ldr	r3, [pc, #152]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f30:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f38:	4922      	ldr	r1, [pc, #136]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f48:	d101      	bne.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0308 	and.w	r3, r3, #8
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d001      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00a      	beq.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f6a:	4b16      	ldr	r3, [pc, #88]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f70:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f78:	4912      	ldr	r1, [pc, #72]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00b      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005f8c:	4b0d      	ldr	r3, [pc, #52]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f92:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f9c:	4909      	ldr	r1, [pc, #36]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d006      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f000 80d9 	beq.w	800616a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005fb8:	4b02      	ldr	r3, [pc, #8]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a01      	ldr	r2, [pc, #4]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005fbe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005fc2:	e001      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005fc4:	40023800 	.word	0x40023800
 8005fc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fca:	f7fc fe57 	bl	8002c7c <HAL_GetTick>
 8005fce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005fd0:	e008      	b.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005fd2:	f7fc fe53 	bl	8002c7c <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	2b64      	cmp	r3, #100	; 0x64
 8005fde:	d901      	bls.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e194      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005fe4:	4b6c      	ldr	r3, [pc, #432]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1f0      	bne.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0301 	and.w	r3, r3, #1
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d021      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006000:	2b00      	cmp	r3, #0
 8006002:	d11d      	bne.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006004:	4b64      	ldr	r3, [pc, #400]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006006:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800600a:	0c1b      	lsrs	r3, r3, #16
 800600c:	f003 0303 	and.w	r3, r3, #3
 8006010:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006012:	4b61      	ldr	r3, [pc, #388]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006014:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006018:	0e1b      	lsrs	r3, r3, #24
 800601a:	f003 030f 	and.w	r3, r3, #15
 800601e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	019a      	lsls	r2, r3, #6
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	041b      	lsls	r3, r3, #16
 800602a:	431a      	orrs	r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	061b      	lsls	r3, r3, #24
 8006030:	431a      	orrs	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	071b      	lsls	r3, r3, #28
 8006038:	4957      	ldr	r1, [pc, #348]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800603a:	4313      	orrs	r3, r2
 800603c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006048:	2b00      	cmp	r3, #0
 800604a:	d004      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006050:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006054:	d00a      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800605e:	2b00      	cmp	r3, #0
 8006060:	d02e      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006066:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800606a:	d129      	bne.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800606c:	4b4a      	ldr	r3, [pc, #296]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800606e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006072:	0c1b      	lsrs	r3, r3, #16
 8006074:	f003 0303 	and.w	r3, r3, #3
 8006078:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800607a:	4b47      	ldr	r3, [pc, #284]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800607c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006080:	0f1b      	lsrs	r3, r3, #28
 8006082:	f003 0307 	and.w	r3, r3, #7
 8006086:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	019a      	lsls	r2, r3, #6
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	041b      	lsls	r3, r3, #16
 8006092:	431a      	orrs	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	061b      	lsls	r3, r3, #24
 800609a:	431a      	orrs	r2, r3
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	071b      	lsls	r3, r3, #28
 80060a0:	493d      	ldr	r1, [pc, #244]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80060a8:	4b3b      	ldr	r3, [pc, #236]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060ae:	f023 021f 	bic.w	r2, r3, #31
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b6:	3b01      	subs	r3, #1
 80060b8:	4937      	ldr	r1, [pc, #220]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060ba:	4313      	orrs	r3, r2
 80060bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d01d      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80060cc:	4b32      	ldr	r3, [pc, #200]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060d2:	0e1b      	lsrs	r3, r3, #24
 80060d4:	f003 030f 	and.w	r3, r3, #15
 80060d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80060da:	4b2f      	ldr	r3, [pc, #188]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060e0:	0f1b      	lsrs	r3, r3, #28
 80060e2:	f003 0307 	and.w	r3, r3, #7
 80060e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	019a      	lsls	r2, r3, #6
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	041b      	lsls	r3, r3, #16
 80060f4:	431a      	orrs	r2, r3
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	061b      	lsls	r3, r3, #24
 80060fa:	431a      	orrs	r2, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	071b      	lsls	r3, r3, #28
 8006100:	4925      	ldr	r1, [pc, #148]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006102:	4313      	orrs	r3, r2
 8006104:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d011      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	019a      	lsls	r2, r3, #6
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	041b      	lsls	r3, r3, #16
 8006120:	431a      	orrs	r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	061b      	lsls	r3, r3, #24
 8006128:	431a      	orrs	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	071b      	lsls	r3, r3, #28
 8006130:	4919      	ldr	r1, [pc, #100]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006132:	4313      	orrs	r3, r2
 8006134:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006138:	4b17      	ldr	r3, [pc, #92]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a16      	ldr	r2, [pc, #88]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800613e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006142:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006144:	f7fc fd9a 	bl	8002c7c <HAL_GetTick>
 8006148:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800614a:	e008      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800614c:	f7fc fd96 	bl	8002c7c <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	2b64      	cmp	r3, #100	; 0x64
 8006158:	d901      	bls.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e0d7      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800615e:	4b0e      	ldr	r3, [pc, #56]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d0f0      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	2b01      	cmp	r3, #1
 800616e:	f040 80cd 	bne.w	800630c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006172:	4b09      	ldr	r3, [pc, #36]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a08      	ldr	r2, [pc, #32]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006178:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800617c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800617e:	f7fc fd7d 	bl	8002c7c <HAL_GetTick>
 8006182:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006184:	e00a      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006186:	f7fc fd79 	bl	8002c7c <HAL_GetTick>
 800618a:	4602      	mov	r2, r0
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	2b64      	cmp	r3, #100	; 0x64
 8006192:	d903      	bls.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	e0ba      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006198:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800619c:	4b5e      	ldr	r3, [pc, #376]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061a8:	d0ed      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d003      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x682>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d009      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d02e      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d12a      	bne.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80061d2:	4b51      	ldr	r3, [pc, #324]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80061d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d8:	0c1b      	lsrs	r3, r3, #16
 80061da:	f003 0303 	and.w	r3, r3, #3
 80061de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80061e0:	4b4d      	ldr	r3, [pc, #308]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80061e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e6:	0f1b      	lsrs	r3, r3, #28
 80061e8:	f003 0307 	and.w	r3, r3, #7
 80061ec:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	019a      	lsls	r2, r3, #6
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	041b      	lsls	r3, r3, #16
 80061f8:	431a      	orrs	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	061b      	lsls	r3, r3, #24
 8006200:	431a      	orrs	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	071b      	lsls	r3, r3, #28
 8006206:	4944      	ldr	r1, [pc, #272]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006208:	4313      	orrs	r3, r2
 800620a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800620e:	4b42      	ldr	r3, [pc, #264]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006214:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800621c:	3b01      	subs	r3, #1
 800621e:	021b      	lsls	r3, r3, #8
 8006220:	493d      	ldr	r1, [pc, #244]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006222:	4313      	orrs	r3, r2
 8006224:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d022      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006238:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800623c:	d11d      	bne.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800623e:	4b36      	ldr	r3, [pc, #216]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006244:	0e1b      	lsrs	r3, r3, #24
 8006246:	f003 030f 	and.w	r3, r3, #15
 800624a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800624c:	4b32      	ldr	r3, [pc, #200]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800624e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006252:	0f1b      	lsrs	r3, r3, #28
 8006254:	f003 0307 	and.w	r3, r3, #7
 8006258:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	695b      	ldr	r3, [r3, #20]
 800625e:	019a      	lsls	r2, r3, #6
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a1b      	ldr	r3, [r3, #32]
 8006264:	041b      	lsls	r3, r3, #16
 8006266:	431a      	orrs	r2, r3
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	061b      	lsls	r3, r3, #24
 800626c:	431a      	orrs	r2, r3
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	071b      	lsls	r3, r3, #28
 8006272:	4929      	ldr	r1, [pc, #164]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006274:	4313      	orrs	r3, r2
 8006276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0308 	and.w	r3, r3, #8
 8006282:	2b00      	cmp	r3, #0
 8006284:	d028      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006286:	4b24      	ldr	r3, [pc, #144]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800628c:	0e1b      	lsrs	r3, r3, #24
 800628e:	f003 030f 	and.w	r3, r3, #15
 8006292:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006294:	4b20      	ldr	r3, [pc, #128]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800629a:	0c1b      	lsrs	r3, r3, #16
 800629c:	f003 0303 	and.w	r3, r3, #3
 80062a0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	019a      	lsls	r2, r3, #6
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	041b      	lsls	r3, r3, #16
 80062ac:	431a      	orrs	r2, r3
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	061b      	lsls	r3, r3, #24
 80062b2:	431a      	orrs	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	69db      	ldr	r3, [r3, #28]
 80062b8:	071b      	lsls	r3, r3, #28
 80062ba:	4917      	ldr	r1, [pc, #92]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80062bc:	4313      	orrs	r3, r2
 80062be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80062c2:	4b15      	ldr	r3, [pc, #84]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80062c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d0:	4911      	ldr	r1, [pc, #68]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80062d8:	4b0f      	ldr	r3, [pc, #60]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a0e      	ldr	r2, [pc, #56]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80062de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062e4:	f7fc fcca 	bl	8002c7c <HAL_GetTick>
 80062e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80062ea:	e008      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80062ec:	f7fc fcc6 	bl	8002c7c <HAL_GetTick>
 80062f0:	4602      	mov	r2, r0
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	2b64      	cmp	r3, #100	; 0x64
 80062f8:	d901      	bls.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e007      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80062fe:	4b06      	ldr	r3, [pc, #24]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006306:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800630a:	d1ef      	bne.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3720      	adds	r7, #32
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	40023800 	.word	0x40023800

0800631c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d101      	bne.n	800632e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e049      	b.n	80063c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b00      	cmp	r3, #0
 8006338:	d106      	bne.n	8006348 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7fc faf8 	bl	8002938 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2202      	movs	r2, #2
 800634c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	3304      	adds	r3, #4
 8006358:	4619      	mov	r1, r3
 800635a:	4610      	mov	r0, r2
 800635c:	f000 fd30 	bl	8006dc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3708      	adds	r7, #8
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
	...

080063cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d001      	beq.n	80063e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e054      	b.n	800648e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2202      	movs	r2, #2
 80063e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68da      	ldr	r2, [r3, #12]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f042 0201 	orr.w	r2, r2, #1
 80063fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a26      	ldr	r2, [pc, #152]	; (800649c <HAL_TIM_Base_Start_IT+0xd0>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d022      	beq.n	800644c <HAL_TIM_Base_Start_IT+0x80>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800640e:	d01d      	beq.n	800644c <HAL_TIM_Base_Start_IT+0x80>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a22      	ldr	r2, [pc, #136]	; (80064a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d018      	beq.n	800644c <HAL_TIM_Base_Start_IT+0x80>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a21      	ldr	r2, [pc, #132]	; (80064a4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d013      	beq.n	800644c <HAL_TIM_Base_Start_IT+0x80>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a1f      	ldr	r2, [pc, #124]	; (80064a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d00e      	beq.n	800644c <HAL_TIM_Base_Start_IT+0x80>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a1e      	ldr	r2, [pc, #120]	; (80064ac <HAL_TIM_Base_Start_IT+0xe0>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d009      	beq.n	800644c <HAL_TIM_Base_Start_IT+0x80>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a1c      	ldr	r2, [pc, #112]	; (80064b0 <HAL_TIM_Base_Start_IT+0xe4>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d004      	beq.n	800644c <HAL_TIM_Base_Start_IT+0x80>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a1b      	ldr	r2, [pc, #108]	; (80064b4 <HAL_TIM_Base_Start_IT+0xe8>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d115      	bne.n	8006478 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	689a      	ldr	r2, [r3, #8]
 8006452:	4b19      	ldr	r3, [pc, #100]	; (80064b8 <HAL_TIM_Base_Start_IT+0xec>)
 8006454:	4013      	ands	r3, r2
 8006456:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2b06      	cmp	r3, #6
 800645c:	d015      	beq.n	800648a <HAL_TIM_Base_Start_IT+0xbe>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006464:	d011      	beq.n	800648a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f042 0201 	orr.w	r2, r2, #1
 8006474:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006476:	e008      	b.n	800648a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f042 0201 	orr.w	r2, r2, #1
 8006486:	601a      	str	r2, [r3, #0]
 8006488:	e000      	b.n	800648c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800648a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	40010000 	.word	0x40010000
 80064a0:	40000400 	.word	0x40000400
 80064a4:	40000800 	.word	0x40000800
 80064a8:	40000c00 	.word	0x40000c00
 80064ac:	40010400 	.word	0x40010400
 80064b0:	40014000 	.word	0x40014000
 80064b4:	40001800 	.word	0x40001800
 80064b8:	00010007 	.word	0x00010007

080064bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d101      	bne.n	80064ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e049      	b.n	8006562 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d106      	bne.n	80064e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 f841 	bl	800656a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2202      	movs	r2, #2
 80064ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	3304      	adds	r3, #4
 80064f8:	4619      	mov	r1, r3
 80064fa:	4610      	mov	r0, r2
 80064fc:	f000 fc60 	bl	8006dc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3708      	adds	r7, #8
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}

0800656a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800656a:	b480      	push	{r7}
 800656c:	b083      	sub	sp, #12
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006572:	bf00      	nop
 8006574:	370c      	adds	r7, #12
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
	...

08006580 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d109      	bne.n	80065a4 <HAL_TIM_PWM_Start+0x24>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006596:	b2db      	uxtb	r3, r3
 8006598:	2b01      	cmp	r3, #1
 800659a:	bf14      	ite	ne
 800659c:	2301      	movne	r3, #1
 800659e:	2300      	moveq	r3, #0
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	e03c      	b.n	800661e <HAL_TIM_PWM_Start+0x9e>
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	2b04      	cmp	r3, #4
 80065a8:	d109      	bne.n	80065be <HAL_TIM_PWM_Start+0x3e>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	bf14      	ite	ne
 80065b6:	2301      	movne	r3, #1
 80065b8:	2300      	moveq	r3, #0
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	e02f      	b.n	800661e <HAL_TIM_PWM_Start+0x9e>
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	2b08      	cmp	r3, #8
 80065c2:	d109      	bne.n	80065d8 <HAL_TIM_PWM_Start+0x58>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	bf14      	ite	ne
 80065d0:	2301      	movne	r3, #1
 80065d2:	2300      	moveq	r3, #0
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	e022      	b.n	800661e <HAL_TIM_PWM_Start+0x9e>
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	2b0c      	cmp	r3, #12
 80065dc:	d109      	bne.n	80065f2 <HAL_TIM_PWM_Start+0x72>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	bf14      	ite	ne
 80065ea:	2301      	movne	r3, #1
 80065ec:	2300      	moveq	r3, #0
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	e015      	b.n	800661e <HAL_TIM_PWM_Start+0x9e>
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	2b10      	cmp	r3, #16
 80065f6:	d109      	bne.n	800660c <HAL_TIM_PWM_Start+0x8c>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	2b01      	cmp	r3, #1
 8006602:	bf14      	ite	ne
 8006604:	2301      	movne	r3, #1
 8006606:	2300      	moveq	r3, #0
 8006608:	b2db      	uxtb	r3, r3
 800660a:	e008      	b.n	800661e <HAL_TIM_PWM_Start+0x9e>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006612:	b2db      	uxtb	r3, r3
 8006614:	2b01      	cmp	r3, #1
 8006616:	bf14      	ite	ne
 8006618:	2301      	movne	r3, #1
 800661a:	2300      	moveq	r3, #0
 800661c:	b2db      	uxtb	r3, r3
 800661e:	2b00      	cmp	r3, #0
 8006620:	d001      	beq.n	8006626 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e092      	b.n	800674c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d104      	bne.n	8006636 <HAL_TIM_PWM_Start+0xb6>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2202      	movs	r2, #2
 8006630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006634:	e023      	b.n	800667e <HAL_TIM_PWM_Start+0xfe>
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	2b04      	cmp	r3, #4
 800663a:	d104      	bne.n	8006646 <HAL_TIM_PWM_Start+0xc6>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2202      	movs	r2, #2
 8006640:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006644:	e01b      	b.n	800667e <HAL_TIM_PWM_Start+0xfe>
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	2b08      	cmp	r3, #8
 800664a:	d104      	bne.n	8006656 <HAL_TIM_PWM_Start+0xd6>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2202      	movs	r2, #2
 8006650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006654:	e013      	b.n	800667e <HAL_TIM_PWM_Start+0xfe>
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	2b0c      	cmp	r3, #12
 800665a:	d104      	bne.n	8006666 <HAL_TIM_PWM_Start+0xe6>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2202      	movs	r2, #2
 8006660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006664:	e00b      	b.n	800667e <HAL_TIM_PWM_Start+0xfe>
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	2b10      	cmp	r3, #16
 800666a:	d104      	bne.n	8006676 <HAL_TIM_PWM_Start+0xf6>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2202      	movs	r2, #2
 8006670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006674:	e003      	b.n	800667e <HAL_TIM_PWM_Start+0xfe>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2202      	movs	r2, #2
 800667a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2201      	movs	r2, #1
 8006684:	6839      	ldr	r1, [r7, #0]
 8006686:	4618      	mov	r0, r3
 8006688:	f000 ff32 	bl	80074f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a30      	ldr	r2, [pc, #192]	; (8006754 <HAL_TIM_PWM_Start+0x1d4>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d004      	beq.n	80066a0 <HAL_TIM_PWM_Start+0x120>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a2f      	ldr	r2, [pc, #188]	; (8006758 <HAL_TIM_PWM_Start+0x1d8>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d101      	bne.n	80066a4 <HAL_TIM_PWM_Start+0x124>
 80066a0:	2301      	movs	r3, #1
 80066a2:	e000      	b.n	80066a6 <HAL_TIM_PWM_Start+0x126>
 80066a4:	2300      	movs	r3, #0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d007      	beq.n	80066ba <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a25      	ldr	r2, [pc, #148]	; (8006754 <HAL_TIM_PWM_Start+0x1d4>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d022      	beq.n	800670a <HAL_TIM_PWM_Start+0x18a>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066cc:	d01d      	beq.n	800670a <HAL_TIM_PWM_Start+0x18a>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a22      	ldr	r2, [pc, #136]	; (800675c <HAL_TIM_PWM_Start+0x1dc>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d018      	beq.n	800670a <HAL_TIM_PWM_Start+0x18a>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a20      	ldr	r2, [pc, #128]	; (8006760 <HAL_TIM_PWM_Start+0x1e0>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d013      	beq.n	800670a <HAL_TIM_PWM_Start+0x18a>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a1f      	ldr	r2, [pc, #124]	; (8006764 <HAL_TIM_PWM_Start+0x1e4>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d00e      	beq.n	800670a <HAL_TIM_PWM_Start+0x18a>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a19      	ldr	r2, [pc, #100]	; (8006758 <HAL_TIM_PWM_Start+0x1d8>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d009      	beq.n	800670a <HAL_TIM_PWM_Start+0x18a>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a1b      	ldr	r2, [pc, #108]	; (8006768 <HAL_TIM_PWM_Start+0x1e8>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d004      	beq.n	800670a <HAL_TIM_PWM_Start+0x18a>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a19      	ldr	r2, [pc, #100]	; (800676c <HAL_TIM_PWM_Start+0x1ec>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d115      	bne.n	8006736 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	689a      	ldr	r2, [r3, #8]
 8006710:	4b17      	ldr	r3, [pc, #92]	; (8006770 <HAL_TIM_PWM_Start+0x1f0>)
 8006712:	4013      	ands	r3, r2
 8006714:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2b06      	cmp	r3, #6
 800671a:	d015      	beq.n	8006748 <HAL_TIM_PWM_Start+0x1c8>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006722:	d011      	beq.n	8006748 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f042 0201 	orr.w	r2, r2, #1
 8006732:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006734:	e008      	b.n	8006748 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f042 0201 	orr.w	r2, r2, #1
 8006744:	601a      	str	r2, [r3, #0]
 8006746:	e000      	b.n	800674a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006748:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	40010000 	.word	0x40010000
 8006758:	40010400 	.word	0x40010400
 800675c:	40000400 	.word	0x40000400
 8006760:	40000800 	.word	0x40000800
 8006764:	40000c00 	.word	0x40000c00
 8006768:	40014000 	.word	0x40014000
 800676c:	40001800 	.word	0x40001800
 8006770:	00010007 	.word	0x00010007

08006774 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	f003 0302 	and.w	r3, r3, #2
 8006786:	2b02      	cmp	r3, #2
 8006788:	d122      	bne.n	80067d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	f003 0302 	and.w	r3, r3, #2
 8006794:	2b02      	cmp	r3, #2
 8006796:	d11b      	bne.n	80067d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f06f 0202 	mvn.w	r2, #2
 80067a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	f003 0303 	and.w	r3, r3, #3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d003      	beq.n	80067be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 fae4 	bl	8006d84 <HAL_TIM_IC_CaptureCallback>
 80067bc:	e005      	b.n	80067ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 fad6 	bl	8006d70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 fae7 	bl	8006d98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	f003 0304 	and.w	r3, r3, #4
 80067da:	2b04      	cmp	r3, #4
 80067dc:	d122      	bne.n	8006824 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	f003 0304 	and.w	r3, r3, #4
 80067e8:	2b04      	cmp	r3, #4
 80067ea:	d11b      	bne.n	8006824 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f06f 0204 	mvn.w	r2, #4
 80067f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2202      	movs	r2, #2
 80067fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006806:	2b00      	cmp	r3, #0
 8006808:	d003      	beq.n	8006812 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 faba 	bl	8006d84 <HAL_TIM_IC_CaptureCallback>
 8006810:	e005      	b.n	800681e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 faac 	bl	8006d70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 fabd 	bl	8006d98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	f003 0308 	and.w	r3, r3, #8
 800682e:	2b08      	cmp	r3, #8
 8006830:	d122      	bne.n	8006878 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	f003 0308 	and.w	r3, r3, #8
 800683c:	2b08      	cmp	r3, #8
 800683e:	d11b      	bne.n	8006878 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f06f 0208 	mvn.w	r2, #8
 8006848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2204      	movs	r2, #4
 800684e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	69db      	ldr	r3, [r3, #28]
 8006856:	f003 0303 	and.w	r3, r3, #3
 800685a:	2b00      	cmp	r3, #0
 800685c:	d003      	beq.n	8006866 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 fa90 	bl	8006d84 <HAL_TIM_IC_CaptureCallback>
 8006864:	e005      	b.n	8006872 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 fa82 	bl	8006d70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fa93 	bl	8006d98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	f003 0310 	and.w	r3, r3, #16
 8006882:	2b10      	cmp	r3, #16
 8006884:	d122      	bne.n	80068cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	f003 0310 	and.w	r3, r3, #16
 8006890:	2b10      	cmp	r3, #16
 8006892:	d11b      	bne.n	80068cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f06f 0210 	mvn.w	r2, #16
 800689c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2208      	movs	r2, #8
 80068a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	69db      	ldr	r3, [r3, #28]
 80068aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d003      	beq.n	80068ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 fa66 	bl	8006d84 <HAL_TIM_IC_CaptureCallback>
 80068b8:	e005      	b.n	80068c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 fa58 	bl	8006d70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 fa69 	bl	8006d98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	f003 0301 	and.w	r3, r3, #1
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d10e      	bne.n	80068f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	f003 0301 	and.w	r3, r3, #1
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d107      	bne.n	80068f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f06f 0201 	mvn.w	r2, #1
 80068f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f7fb fc08 	bl	8002108 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006902:	2b80      	cmp	r3, #128	; 0x80
 8006904:	d10e      	bne.n	8006924 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006910:	2b80      	cmp	r3, #128	; 0x80
 8006912:	d107      	bne.n	8006924 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800691c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 fea4 	bl	800766c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800692e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006932:	d10e      	bne.n	8006952 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800693e:	2b80      	cmp	r3, #128	; 0x80
 8006940:	d107      	bne.n	8006952 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800694a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 fe97 	bl	8007680 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800695c:	2b40      	cmp	r3, #64	; 0x40
 800695e:	d10e      	bne.n	800697e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800696a:	2b40      	cmp	r3, #64	; 0x40
 800696c:	d107      	bne.n	800697e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006976:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 fa17 	bl	8006dac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	f003 0320 	and.w	r3, r3, #32
 8006988:	2b20      	cmp	r3, #32
 800698a:	d10e      	bne.n	80069aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	f003 0320 	and.w	r3, r3, #32
 8006996:	2b20      	cmp	r3, #32
 8006998:	d107      	bne.n	80069aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f06f 0220 	mvn.w	r2, #32
 80069a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 fe57 	bl	8007658 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069aa:	bf00      	nop
 80069ac:	3708      	adds	r7, #8
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
	...

080069b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b086      	sub	sp, #24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069c0:	2300      	movs	r3, #0
 80069c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d101      	bne.n	80069d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80069ce:	2302      	movs	r3, #2
 80069d0:	e0ff      	b.n	8006bd2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2201      	movs	r2, #1
 80069d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2b14      	cmp	r3, #20
 80069de:	f200 80f0 	bhi.w	8006bc2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80069e2:	a201      	add	r2, pc, #4	; (adr r2, 80069e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80069e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e8:	08006a3d 	.word	0x08006a3d
 80069ec:	08006bc3 	.word	0x08006bc3
 80069f0:	08006bc3 	.word	0x08006bc3
 80069f4:	08006bc3 	.word	0x08006bc3
 80069f8:	08006a7d 	.word	0x08006a7d
 80069fc:	08006bc3 	.word	0x08006bc3
 8006a00:	08006bc3 	.word	0x08006bc3
 8006a04:	08006bc3 	.word	0x08006bc3
 8006a08:	08006abf 	.word	0x08006abf
 8006a0c:	08006bc3 	.word	0x08006bc3
 8006a10:	08006bc3 	.word	0x08006bc3
 8006a14:	08006bc3 	.word	0x08006bc3
 8006a18:	08006aff 	.word	0x08006aff
 8006a1c:	08006bc3 	.word	0x08006bc3
 8006a20:	08006bc3 	.word	0x08006bc3
 8006a24:	08006bc3 	.word	0x08006bc3
 8006a28:	08006b41 	.word	0x08006b41
 8006a2c:	08006bc3 	.word	0x08006bc3
 8006a30:	08006bc3 	.word	0x08006bc3
 8006a34:	08006bc3 	.word	0x08006bc3
 8006a38:	08006b81 	.word	0x08006b81
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68b9      	ldr	r1, [r7, #8]
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 fa5c 	bl	8006f00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	699a      	ldr	r2, [r3, #24]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f042 0208 	orr.w	r2, r2, #8
 8006a56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	699a      	ldr	r2, [r3, #24]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f022 0204 	bic.w	r2, r2, #4
 8006a66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6999      	ldr	r1, [r3, #24]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	691a      	ldr	r2, [r3, #16]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	430a      	orrs	r2, r1
 8006a78:	619a      	str	r2, [r3, #24]
      break;
 8006a7a:	e0a5      	b.n	8006bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68b9      	ldr	r1, [r7, #8]
 8006a82:	4618      	mov	r0, r3
 8006a84:	f000 faae 	bl	8006fe4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	699a      	ldr	r2, [r3, #24]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	699a      	ldr	r2, [r3, #24]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	6999      	ldr	r1, [r3, #24]
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	021a      	lsls	r2, r3, #8
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	430a      	orrs	r2, r1
 8006aba:	619a      	str	r2, [r3, #24]
      break;
 8006abc:	e084      	b.n	8006bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68b9      	ldr	r1, [r7, #8]
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f000 fb05 	bl	80070d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	69da      	ldr	r2, [r3, #28]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f042 0208 	orr.w	r2, r2, #8
 8006ad8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	69da      	ldr	r2, [r3, #28]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f022 0204 	bic.w	r2, r2, #4
 8006ae8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	69d9      	ldr	r1, [r3, #28]
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	691a      	ldr	r2, [r3, #16]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	430a      	orrs	r2, r1
 8006afa:	61da      	str	r2, [r3, #28]
      break;
 8006afc:	e064      	b.n	8006bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68b9      	ldr	r1, [r7, #8]
 8006b04:	4618      	mov	r0, r3
 8006b06:	f000 fb5b 	bl	80071c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	69da      	ldr	r2, [r3, #28]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	69da      	ldr	r2, [r3, #28]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	69d9      	ldr	r1, [r3, #28]
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	021a      	lsls	r2, r3, #8
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	430a      	orrs	r2, r1
 8006b3c:	61da      	str	r2, [r3, #28]
      break;
 8006b3e:	e043      	b.n	8006bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68b9      	ldr	r1, [r7, #8]
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 fb92 	bl	8007270 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f042 0208 	orr.w	r2, r2, #8
 8006b5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f022 0204 	bic.w	r2, r2, #4
 8006b6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	691a      	ldr	r2, [r3, #16]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006b7e:	e023      	b.n	8006bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68b9      	ldr	r1, [r7, #8]
 8006b86:	4618      	mov	r0, r3
 8006b88:	f000 fbc4 	bl	8007314 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006baa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	021a      	lsls	r2, r3, #8
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	430a      	orrs	r2, r1
 8006bbe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006bc0:	e002      	b.n	8006bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	75fb      	strb	r3, [r7, #23]
      break;
 8006bc6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006bd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3718      	adds	r7, #24
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop

08006bdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006be6:	2300      	movs	r3, #0
 8006be8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d101      	bne.n	8006bf8 <HAL_TIM_ConfigClockSource+0x1c>
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	e0b4      	b.n	8006d62 <HAL_TIM_ConfigClockSource+0x186>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2202      	movs	r2, #2
 8006c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c10:	68ba      	ldr	r2, [r7, #8]
 8006c12:	4b56      	ldr	r3, [pc, #344]	; (8006d6c <HAL_TIM_ConfigClockSource+0x190>)
 8006c14:	4013      	ands	r3, r2
 8006c16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68ba      	ldr	r2, [r7, #8]
 8006c26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c30:	d03e      	beq.n	8006cb0 <HAL_TIM_ConfigClockSource+0xd4>
 8006c32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c36:	f200 8087 	bhi.w	8006d48 <HAL_TIM_ConfigClockSource+0x16c>
 8006c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c3e:	f000 8086 	beq.w	8006d4e <HAL_TIM_ConfigClockSource+0x172>
 8006c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c46:	d87f      	bhi.n	8006d48 <HAL_TIM_ConfigClockSource+0x16c>
 8006c48:	2b70      	cmp	r3, #112	; 0x70
 8006c4a:	d01a      	beq.n	8006c82 <HAL_TIM_ConfigClockSource+0xa6>
 8006c4c:	2b70      	cmp	r3, #112	; 0x70
 8006c4e:	d87b      	bhi.n	8006d48 <HAL_TIM_ConfigClockSource+0x16c>
 8006c50:	2b60      	cmp	r3, #96	; 0x60
 8006c52:	d050      	beq.n	8006cf6 <HAL_TIM_ConfigClockSource+0x11a>
 8006c54:	2b60      	cmp	r3, #96	; 0x60
 8006c56:	d877      	bhi.n	8006d48 <HAL_TIM_ConfigClockSource+0x16c>
 8006c58:	2b50      	cmp	r3, #80	; 0x50
 8006c5a:	d03c      	beq.n	8006cd6 <HAL_TIM_ConfigClockSource+0xfa>
 8006c5c:	2b50      	cmp	r3, #80	; 0x50
 8006c5e:	d873      	bhi.n	8006d48 <HAL_TIM_ConfigClockSource+0x16c>
 8006c60:	2b40      	cmp	r3, #64	; 0x40
 8006c62:	d058      	beq.n	8006d16 <HAL_TIM_ConfigClockSource+0x13a>
 8006c64:	2b40      	cmp	r3, #64	; 0x40
 8006c66:	d86f      	bhi.n	8006d48 <HAL_TIM_ConfigClockSource+0x16c>
 8006c68:	2b30      	cmp	r3, #48	; 0x30
 8006c6a:	d064      	beq.n	8006d36 <HAL_TIM_ConfigClockSource+0x15a>
 8006c6c:	2b30      	cmp	r3, #48	; 0x30
 8006c6e:	d86b      	bhi.n	8006d48 <HAL_TIM_ConfigClockSource+0x16c>
 8006c70:	2b20      	cmp	r3, #32
 8006c72:	d060      	beq.n	8006d36 <HAL_TIM_ConfigClockSource+0x15a>
 8006c74:	2b20      	cmp	r3, #32
 8006c76:	d867      	bhi.n	8006d48 <HAL_TIM_ConfigClockSource+0x16c>
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d05c      	beq.n	8006d36 <HAL_TIM_ConfigClockSource+0x15a>
 8006c7c:	2b10      	cmp	r3, #16
 8006c7e:	d05a      	beq.n	8006d36 <HAL_TIM_ConfigClockSource+0x15a>
 8006c80:	e062      	b.n	8006d48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c92:	f000 fc0d 	bl	80074b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ca4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68ba      	ldr	r2, [r7, #8]
 8006cac:	609a      	str	r2, [r3, #8]
      break;
 8006cae:	e04f      	b.n	8006d50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006cc0:	f000 fbf6 	bl	80074b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	689a      	ldr	r2, [r3, #8]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006cd2:	609a      	str	r2, [r3, #8]
      break;
 8006cd4:	e03c      	b.n	8006d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	f000 fb6a 	bl	80073bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2150      	movs	r1, #80	; 0x50
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f000 fbc3 	bl	800747a <TIM_ITRx_SetConfig>
      break;
 8006cf4:	e02c      	b.n	8006d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d02:	461a      	mov	r2, r3
 8006d04:	f000 fb89 	bl	800741a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2160      	movs	r1, #96	; 0x60
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f000 fbb3 	bl	800747a <TIM_ITRx_SetConfig>
      break;
 8006d14:	e01c      	b.n	8006d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d22:	461a      	mov	r2, r3
 8006d24:	f000 fb4a 	bl	80073bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2140      	movs	r1, #64	; 0x40
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f000 fba3 	bl	800747a <TIM_ITRx_SetConfig>
      break;
 8006d34:	e00c      	b.n	8006d50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4619      	mov	r1, r3
 8006d40:	4610      	mov	r0, r2
 8006d42:	f000 fb9a 	bl	800747a <TIM_ITRx_SetConfig>
      break;
 8006d46:	e003      	b.n	8006d50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d4c:	e000      	b.n	8006d50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006d4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	fffeff88 	.word	0xfffeff88

08006d70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d78:	bf00      	nop
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006da0:	bf00      	nop
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006db4:	bf00      	nop
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a40      	ldr	r2, [pc, #256]	; (8006ed4 <TIM_Base_SetConfig+0x114>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d013      	beq.n	8006e00 <TIM_Base_SetConfig+0x40>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dde:	d00f      	beq.n	8006e00 <TIM_Base_SetConfig+0x40>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4a3d      	ldr	r2, [pc, #244]	; (8006ed8 <TIM_Base_SetConfig+0x118>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d00b      	beq.n	8006e00 <TIM_Base_SetConfig+0x40>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a3c      	ldr	r2, [pc, #240]	; (8006edc <TIM_Base_SetConfig+0x11c>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d007      	beq.n	8006e00 <TIM_Base_SetConfig+0x40>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a3b      	ldr	r2, [pc, #236]	; (8006ee0 <TIM_Base_SetConfig+0x120>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d003      	beq.n	8006e00 <TIM_Base_SetConfig+0x40>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4a3a      	ldr	r2, [pc, #232]	; (8006ee4 <TIM_Base_SetConfig+0x124>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d108      	bne.n	8006e12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a2f      	ldr	r2, [pc, #188]	; (8006ed4 <TIM_Base_SetConfig+0x114>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d02b      	beq.n	8006e72 <TIM_Base_SetConfig+0xb2>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e20:	d027      	beq.n	8006e72 <TIM_Base_SetConfig+0xb2>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a2c      	ldr	r2, [pc, #176]	; (8006ed8 <TIM_Base_SetConfig+0x118>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d023      	beq.n	8006e72 <TIM_Base_SetConfig+0xb2>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a2b      	ldr	r2, [pc, #172]	; (8006edc <TIM_Base_SetConfig+0x11c>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d01f      	beq.n	8006e72 <TIM_Base_SetConfig+0xb2>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a2a      	ldr	r2, [pc, #168]	; (8006ee0 <TIM_Base_SetConfig+0x120>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d01b      	beq.n	8006e72 <TIM_Base_SetConfig+0xb2>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a29      	ldr	r2, [pc, #164]	; (8006ee4 <TIM_Base_SetConfig+0x124>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d017      	beq.n	8006e72 <TIM_Base_SetConfig+0xb2>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a28      	ldr	r2, [pc, #160]	; (8006ee8 <TIM_Base_SetConfig+0x128>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d013      	beq.n	8006e72 <TIM_Base_SetConfig+0xb2>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a27      	ldr	r2, [pc, #156]	; (8006eec <TIM_Base_SetConfig+0x12c>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d00f      	beq.n	8006e72 <TIM_Base_SetConfig+0xb2>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a26      	ldr	r2, [pc, #152]	; (8006ef0 <TIM_Base_SetConfig+0x130>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d00b      	beq.n	8006e72 <TIM_Base_SetConfig+0xb2>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a25      	ldr	r2, [pc, #148]	; (8006ef4 <TIM_Base_SetConfig+0x134>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d007      	beq.n	8006e72 <TIM_Base_SetConfig+0xb2>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a24      	ldr	r2, [pc, #144]	; (8006ef8 <TIM_Base_SetConfig+0x138>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d003      	beq.n	8006e72 <TIM_Base_SetConfig+0xb2>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a23      	ldr	r2, [pc, #140]	; (8006efc <TIM_Base_SetConfig+0x13c>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d108      	bne.n	8006e84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	695b      	ldr	r3, [r3, #20]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	689a      	ldr	r2, [r3, #8]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a0a      	ldr	r2, [pc, #40]	; (8006ed4 <TIM_Base_SetConfig+0x114>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d003      	beq.n	8006eb8 <TIM_Base_SetConfig+0xf8>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a0c      	ldr	r2, [pc, #48]	; (8006ee4 <TIM_Base_SetConfig+0x124>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d103      	bne.n	8006ec0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	691a      	ldr	r2, [r3, #16]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	615a      	str	r2, [r3, #20]
}
 8006ec6:	bf00      	nop
 8006ec8:	3714      	adds	r7, #20
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	40010000 	.word	0x40010000
 8006ed8:	40000400 	.word	0x40000400
 8006edc:	40000800 	.word	0x40000800
 8006ee0:	40000c00 	.word	0x40000c00
 8006ee4:	40010400 	.word	0x40010400
 8006ee8:	40014000 	.word	0x40014000
 8006eec:	40014400 	.word	0x40014400
 8006ef0:	40014800 	.word	0x40014800
 8006ef4:	40001800 	.word	0x40001800
 8006ef8:	40001c00 	.word	0x40001c00
 8006efc:	40002000 	.word	0x40002000

08006f00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b087      	sub	sp, #28
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a1b      	ldr	r3, [r3, #32]
 8006f0e:	f023 0201 	bic.w	r2, r3, #1
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	4b2b      	ldr	r3, [pc, #172]	; (8006fd8 <TIM_OC1_SetConfig+0xd8>)
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f023 0303 	bic.w	r3, r3, #3
 8006f36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	f023 0302 	bic.w	r3, r3, #2
 8006f48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a21      	ldr	r2, [pc, #132]	; (8006fdc <TIM_OC1_SetConfig+0xdc>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d003      	beq.n	8006f64 <TIM_OC1_SetConfig+0x64>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a20      	ldr	r2, [pc, #128]	; (8006fe0 <TIM_OC1_SetConfig+0xe0>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d10c      	bne.n	8006f7e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	f023 0308 	bic.w	r3, r3, #8
 8006f6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	697a      	ldr	r2, [r7, #20]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	f023 0304 	bic.w	r3, r3, #4
 8006f7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a16      	ldr	r2, [pc, #88]	; (8006fdc <TIM_OC1_SetConfig+0xdc>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d003      	beq.n	8006f8e <TIM_OC1_SetConfig+0x8e>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a15      	ldr	r2, [pc, #84]	; (8006fe0 <TIM_OC1_SetConfig+0xe0>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d111      	bne.n	8006fb2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	695b      	ldr	r3, [r3, #20]
 8006fa2:	693a      	ldr	r2, [r7, #16]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	699b      	ldr	r3, [r3, #24]
 8006fac:	693a      	ldr	r2, [r7, #16]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	693a      	ldr	r2, [r7, #16]
 8006fb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	685a      	ldr	r2, [r3, #4]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	697a      	ldr	r2, [r7, #20]
 8006fca:	621a      	str	r2, [r3, #32]
}
 8006fcc:	bf00      	nop
 8006fce:	371c      	adds	r7, #28
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr
 8006fd8:	fffeff8f 	.word	0xfffeff8f
 8006fdc:	40010000 	.word	0x40010000
 8006fe0:	40010400 	.word	0x40010400

08006fe4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b087      	sub	sp, #28
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	f023 0210 	bic.w	r2, r3, #16
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a1b      	ldr	r3, [r3, #32]
 8006ffe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	699b      	ldr	r3, [r3, #24]
 800700a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	4b2e      	ldr	r3, [pc, #184]	; (80070c8 <TIM_OC2_SetConfig+0xe4>)
 8007010:	4013      	ands	r3, r2
 8007012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800701a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	021b      	lsls	r3, r3, #8
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	4313      	orrs	r3, r2
 8007026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f023 0320 	bic.w	r3, r3, #32
 800702e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	011b      	lsls	r3, r3, #4
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	4313      	orrs	r3, r2
 800703a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a23      	ldr	r2, [pc, #140]	; (80070cc <TIM_OC2_SetConfig+0xe8>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d003      	beq.n	800704c <TIM_OC2_SetConfig+0x68>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a22      	ldr	r2, [pc, #136]	; (80070d0 <TIM_OC2_SetConfig+0xec>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d10d      	bne.n	8007068 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007052:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	011b      	lsls	r3, r3, #4
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	4313      	orrs	r3, r2
 800705e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007066:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a18      	ldr	r2, [pc, #96]	; (80070cc <TIM_OC2_SetConfig+0xe8>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d003      	beq.n	8007078 <TIM_OC2_SetConfig+0x94>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4a17      	ldr	r2, [pc, #92]	; (80070d0 <TIM_OC2_SetConfig+0xec>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d113      	bne.n	80070a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800707e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007086:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	695b      	ldr	r3, [r3, #20]
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	693a      	ldr	r2, [r7, #16]
 8007090:	4313      	orrs	r3, r2
 8007092:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	699b      	ldr	r3, [r3, #24]
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	693a      	ldr	r2, [r7, #16]
 800709c:	4313      	orrs	r3, r2
 800709e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	693a      	ldr	r2, [r7, #16]
 80070a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	685a      	ldr	r2, [r3, #4]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	621a      	str	r2, [r3, #32]
}
 80070ba:	bf00      	nop
 80070bc:	371c      	adds	r7, #28
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	feff8fff 	.word	0xfeff8fff
 80070cc:	40010000 	.word	0x40010000
 80070d0:	40010400 	.word	0x40010400

080070d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b087      	sub	sp, #28
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a1b      	ldr	r3, [r3, #32]
 80070e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a1b      	ldr	r3, [r3, #32]
 80070ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	69db      	ldr	r3, [r3, #28]
 80070fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	4b2d      	ldr	r3, [pc, #180]	; (80071b4 <TIM_OC3_SetConfig+0xe0>)
 8007100:	4013      	ands	r3, r2
 8007102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f023 0303 	bic.w	r3, r3, #3
 800710a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	4313      	orrs	r3, r2
 8007114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800711c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	021b      	lsls	r3, r3, #8
 8007124:	697a      	ldr	r2, [r7, #20]
 8007126:	4313      	orrs	r3, r2
 8007128:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a22      	ldr	r2, [pc, #136]	; (80071b8 <TIM_OC3_SetConfig+0xe4>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d003      	beq.n	800713a <TIM_OC3_SetConfig+0x66>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a21      	ldr	r2, [pc, #132]	; (80071bc <TIM_OC3_SetConfig+0xe8>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d10d      	bne.n	8007156 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007140:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	021b      	lsls	r3, r3, #8
 8007148:	697a      	ldr	r2, [r7, #20]
 800714a:	4313      	orrs	r3, r2
 800714c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007154:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a17      	ldr	r2, [pc, #92]	; (80071b8 <TIM_OC3_SetConfig+0xe4>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d003      	beq.n	8007166 <TIM_OC3_SetConfig+0x92>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a16      	ldr	r2, [pc, #88]	; (80071bc <TIM_OC3_SetConfig+0xe8>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d113      	bne.n	800718e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800716c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007174:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	695b      	ldr	r3, [r3, #20]
 800717a:	011b      	lsls	r3, r3, #4
 800717c:	693a      	ldr	r2, [r7, #16]
 800717e:	4313      	orrs	r3, r2
 8007180:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	011b      	lsls	r3, r3, #4
 8007188:	693a      	ldr	r2, [r7, #16]
 800718a:	4313      	orrs	r3, r2
 800718c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	693a      	ldr	r2, [r7, #16]
 8007192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	685a      	ldr	r2, [r3, #4]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	697a      	ldr	r2, [r7, #20]
 80071a6:	621a      	str	r2, [r3, #32]
}
 80071a8:	bf00      	nop
 80071aa:	371c      	adds	r7, #28
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr
 80071b4:	fffeff8f 	.word	0xfffeff8f
 80071b8:	40010000 	.word	0x40010000
 80071bc:	40010400 	.word	0x40010400

080071c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b087      	sub	sp, #28
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a1b      	ldr	r3, [r3, #32]
 80071ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a1b      	ldr	r3, [r3, #32]
 80071da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	69db      	ldr	r3, [r3, #28]
 80071e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	4b1e      	ldr	r3, [pc, #120]	; (8007264 <TIM_OC4_SetConfig+0xa4>)
 80071ec:	4013      	ands	r3, r2
 80071ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	021b      	lsls	r3, r3, #8
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	4313      	orrs	r3, r2
 8007202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800720a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	031b      	lsls	r3, r3, #12
 8007212:	693a      	ldr	r2, [r7, #16]
 8007214:	4313      	orrs	r3, r2
 8007216:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a13      	ldr	r2, [pc, #76]	; (8007268 <TIM_OC4_SetConfig+0xa8>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d003      	beq.n	8007228 <TIM_OC4_SetConfig+0x68>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a12      	ldr	r2, [pc, #72]	; (800726c <TIM_OC4_SetConfig+0xac>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d109      	bne.n	800723c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800722e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	695b      	ldr	r3, [r3, #20]
 8007234:	019b      	lsls	r3, r3, #6
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	4313      	orrs	r3, r2
 800723a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	685a      	ldr	r2, [r3, #4]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	693a      	ldr	r2, [r7, #16]
 8007254:	621a      	str	r2, [r3, #32]
}
 8007256:	bf00      	nop
 8007258:	371c      	adds	r7, #28
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	feff8fff 	.word	0xfeff8fff
 8007268:	40010000 	.word	0x40010000
 800726c:	40010400 	.word	0x40010400

08007270 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007270:	b480      	push	{r7}
 8007272:	b087      	sub	sp, #28
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a1b      	ldr	r3, [r3, #32]
 800728a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	4b1b      	ldr	r3, [pc, #108]	; (8007308 <TIM_OC5_SetConfig+0x98>)
 800729c:	4013      	ands	r3, r2
 800729e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80072b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	041b      	lsls	r3, r3, #16
 80072b8:	693a      	ldr	r2, [r7, #16]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a12      	ldr	r2, [pc, #72]	; (800730c <TIM_OC5_SetConfig+0x9c>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d003      	beq.n	80072ce <TIM_OC5_SetConfig+0x5e>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a11      	ldr	r2, [pc, #68]	; (8007310 <TIM_OC5_SetConfig+0xa0>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d109      	bne.n	80072e2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	695b      	ldr	r3, [r3, #20]
 80072da:	021b      	lsls	r3, r3, #8
 80072dc:	697a      	ldr	r2, [r7, #20]
 80072de:	4313      	orrs	r3, r2
 80072e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	697a      	ldr	r2, [r7, #20]
 80072e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	685a      	ldr	r2, [r3, #4]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	693a      	ldr	r2, [r7, #16]
 80072fa:	621a      	str	r2, [r3, #32]
}
 80072fc:	bf00      	nop
 80072fe:	371c      	adds	r7, #28
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr
 8007308:	fffeff8f 	.word	0xfffeff8f
 800730c:	40010000 	.word	0x40010000
 8007310:	40010400 	.word	0x40010400

08007314 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007314:	b480      	push	{r7}
 8007316:	b087      	sub	sp, #28
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a1b      	ldr	r3, [r3, #32]
 8007322:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a1b      	ldr	r3, [r3, #32]
 800732e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800733a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	4b1c      	ldr	r3, [pc, #112]	; (80073b0 <TIM_OC6_SetConfig+0x9c>)
 8007340:	4013      	ands	r3, r2
 8007342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	021b      	lsls	r3, r3, #8
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	4313      	orrs	r3, r2
 800734e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007356:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	051b      	lsls	r3, r3, #20
 800735e:	693a      	ldr	r2, [r7, #16]
 8007360:	4313      	orrs	r3, r2
 8007362:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	4a13      	ldr	r2, [pc, #76]	; (80073b4 <TIM_OC6_SetConfig+0xa0>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d003      	beq.n	8007374 <TIM_OC6_SetConfig+0x60>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4a12      	ldr	r2, [pc, #72]	; (80073b8 <TIM_OC6_SetConfig+0xa4>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d109      	bne.n	8007388 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800737a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	695b      	ldr	r3, [r3, #20]
 8007380:	029b      	lsls	r3, r3, #10
 8007382:	697a      	ldr	r2, [r7, #20]
 8007384:	4313      	orrs	r3, r2
 8007386:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	697a      	ldr	r2, [r7, #20]
 800738c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	685a      	ldr	r2, [r3, #4]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	693a      	ldr	r2, [r7, #16]
 80073a0:	621a      	str	r2, [r3, #32]
}
 80073a2:	bf00      	nop
 80073a4:	371c      	adds	r7, #28
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	feff8fff 	.word	0xfeff8fff
 80073b4:	40010000 	.word	0x40010000
 80073b8:	40010400 	.word	0x40010400

080073bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073bc:	b480      	push	{r7}
 80073be:	b087      	sub	sp, #28
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6a1b      	ldr	r3, [r3, #32]
 80073cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6a1b      	ldr	r3, [r3, #32]
 80073d2:	f023 0201 	bic.w	r2, r3, #1
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	699b      	ldr	r3, [r3, #24]
 80073de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	011b      	lsls	r3, r3, #4
 80073ec:	693a      	ldr	r2, [r7, #16]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	f023 030a 	bic.w	r3, r3, #10
 80073f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073fa:	697a      	ldr	r2, [r7, #20]
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	4313      	orrs	r3, r2
 8007400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	693a      	ldr	r2, [r7, #16]
 8007406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	697a      	ldr	r2, [r7, #20]
 800740c:	621a      	str	r2, [r3, #32]
}
 800740e:	bf00      	nop
 8007410:	371c      	adds	r7, #28
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr

0800741a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800741a:	b480      	push	{r7}
 800741c:	b087      	sub	sp, #28
 800741e:	af00      	add	r7, sp, #0
 8007420:	60f8      	str	r0, [r7, #12]
 8007422:	60b9      	str	r1, [r7, #8]
 8007424:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6a1b      	ldr	r3, [r3, #32]
 800742a:	f023 0210 	bic.w	r2, r3, #16
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	699b      	ldr	r3, [r3, #24]
 8007436:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6a1b      	ldr	r3, [r3, #32]
 800743c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007444:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	031b      	lsls	r3, r3, #12
 800744a:	697a      	ldr	r2, [r7, #20]
 800744c:	4313      	orrs	r3, r2
 800744e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007456:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	011b      	lsls	r3, r3, #4
 800745c:	693a      	ldr	r2, [r7, #16]
 800745e:	4313      	orrs	r3, r2
 8007460:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	697a      	ldr	r2, [r7, #20]
 8007466:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	693a      	ldr	r2, [r7, #16]
 800746c:	621a      	str	r2, [r3, #32]
}
 800746e:	bf00      	nop
 8007470:	371c      	adds	r7, #28
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr

0800747a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800747a:	b480      	push	{r7}
 800747c:	b085      	sub	sp, #20
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
 8007482:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007490:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007492:	683a      	ldr	r2, [r7, #0]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	4313      	orrs	r3, r2
 8007498:	f043 0307 	orr.w	r3, r3, #7
 800749c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	609a      	str	r2, [r3, #8]
}
 80074a4:	bf00      	nop
 80074a6:	3714      	adds	r7, #20
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b087      	sub	sp, #28
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	607a      	str	r2, [r7, #4]
 80074bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	021a      	lsls	r2, r3, #8
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	431a      	orrs	r2, r3
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	697a      	ldr	r2, [r7, #20]
 80074da:	4313      	orrs	r3, r2
 80074dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	697a      	ldr	r2, [r7, #20]
 80074e2:	609a      	str	r2, [r3, #8]
}
 80074e4:	bf00      	nop
 80074e6:	371c      	adds	r7, #28
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b087      	sub	sp, #28
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	f003 031f 	and.w	r3, r3, #31
 8007502:	2201      	movs	r2, #1
 8007504:	fa02 f303 	lsl.w	r3, r2, r3
 8007508:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	6a1a      	ldr	r2, [r3, #32]
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	43db      	mvns	r3, r3
 8007512:	401a      	ands	r2, r3
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6a1a      	ldr	r2, [r3, #32]
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	f003 031f 	and.w	r3, r3, #31
 8007522:	6879      	ldr	r1, [r7, #4]
 8007524:	fa01 f303 	lsl.w	r3, r1, r3
 8007528:	431a      	orrs	r2, r3
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	621a      	str	r2, [r3, #32]
}
 800752e:	bf00      	nop
 8007530:	371c      	adds	r7, #28
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr
	...

0800753c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800753c:	b480      	push	{r7}
 800753e:	b085      	sub	sp, #20
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800754c:	2b01      	cmp	r3, #1
 800754e:	d101      	bne.n	8007554 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007550:	2302      	movs	r3, #2
 8007552:	e06d      	b.n	8007630 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2202      	movs	r2, #2
 8007560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a30      	ldr	r2, [pc, #192]	; (800763c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d004      	beq.n	8007588 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a2f      	ldr	r2, [pc, #188]	; (8007640 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d108      	bne.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800758e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	4313      	orrs	r3, r2
 8007598:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68fa      	ldr	r2, [r7, #12]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a20      	ldr	r2, [pc, #128]	; (800763c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d022      	beq.n	8007604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075c6:	d01d      	beq.n	8007604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a1d      	ldr	r2, [pc, #116]	; (8007644 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d018      	beq.n	8007604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a1c      	ldr	r2, [pc, #112]	; (8007648 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d013      	beq.n	8007604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a1a      	ldr	r2, [pc, #104]	; (800764c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d00e      	beq.n	8007604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a15      	ldr	r2, [pc, #84]	; (8007640 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d009      	beq.n	8007604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a16      	ldr	r2, [pc, #88]	; (8007650 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d004      	beq.n	8007604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a15      	ldr	r2, [pc, #84]	; (8007654 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d10c      	bne.n	800761e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800760a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	68ba      	ldr	r2, [r7, #8]
 8007612:	4313      	orrs	r3, r2
 8007614:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68ba      	ldr	r2, [r7, #8]
 800761c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2201      	movs	r2, #1
 8007622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800762e:	2300      	movs	r3, #0
}
 8007630:	4618      	mov	r0, r3
 8007632:	3714      	adds	r7, #20
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr
 800763c:	40010000 	.word	0x40010000
 8007640:	40010400 	.word	0x40010400
 8007644:	40000400 	.word	0x40000400
 8007648:	40000800 	.word	0x40000800
 800764c:	40000c00 	.word	0x40000c00
 8007650:	40014000 	.word	0x40014000
 8007654:	40001800 	.word	0x40001800

08007658 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007660:	bf00      	nop
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007674:	bf00      	nop
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007688:	bf00      	nop
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d101      	bne.n	80076a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e040      	b.n	8007728 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d106      	bne.n	80076bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f7fb f9cc 	bl	8002a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2224      	movs	r2, #36	; 0x24
 80076c0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f022 0201 	bic.w	r2, r2, #1
 80076d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 fb84 	bl	8007de0 <UART_SetConfig>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d101      	bne.n	80076e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e022      	b.n	8007728 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d002      	beq.n	80076f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fddc 	bl	80082a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	685a      	ldr	r2, [r3, #4]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80076fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	689a      	ldr	r2, [r3, #8]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800770e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f042 0201 	orr.w	r2, r2, #1
 800771e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 fe63 	bl	80083ec <UART_CheckIdleState>
 8007726:	4603      	mov	r3, r0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3708      	adds	r7, #8
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007730:	b480      	push	{r7}
 8007732:	b08b      	sub	sp, #44	; 0x2c
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	4613      	mov	r3, r2
 800773c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007742:	2b20      	cmp	r3, #32
 8007744:	d147      	bne.n	80077d6 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d002      	beq.n	8007752 <HAL_UART_Transmit_IT+0x22>
 800774c:	88fb      	ldrh	r3, [r7, #6]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d101      	bne.n	8007756 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e040      	b.n	80077d8 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	68ba      	ldr	r2, [r7, #8]
 800775a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	88fa      	ldrh	r2, [r7, #6]
 8007760:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	88fa      	ldrh	r2, [r7, #6]
 8007768:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2200      	movs	r2, #0
 8007770:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2200      	movs	r2, #0
 8007776:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2221      	movs	r2, #33	; 0x21
 800777e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007788:	d107      	bne.n	800779a <HAL_UART_Transmit_IT+0x6a>
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d103      	bne.n	800779a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	4a13      	ldr	r2, [pc, #76]	; (80077e4 <HAL_UART_Transmit_IT+0xb4>)
 8007796:	66da      	str	r2, [r3, #108]	; 0x6c
 8007798:	e002      	b.n	80077a0 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	4a12      	ldr	r2, [pc, #72]	; (80077e8 <HAL_UART_Transmit_IT+0xb8>)
 800779e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	e853 3f00 	ldrex	r3, [r3]
 80077ac:	613b      	str	r3, [r7, #16]
   return(result);
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077b4:	627b      	str	r3, [r7, #36]	; 0x24
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	461a      	mov	r2, r3
 80077bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077be:	623b      	str	r3, [r7, #32]
 80077c0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c2:	69f9      	ldr	r1, [r7, #28]
 80077c4:	6a3a      	ldr	r2, [r7, #32]
 80077c6:	e841 2300 	strex	r3, r2, [r1]
 80077ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d1e6      	bne.n	80077a0 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80077d2:	2300      	movs	r3, #0
 80077d4:	e000      	b.n	80077d8 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80077d6:	2302      	movs	r3, #2
  }
}
 80077d8:	4618      	mov	r0, r3
 80077da:	372c      	adds	r7, #44	; 0x2c
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr
 80077e4:	08008b03 	.word	0x08008b03
 80077e8:	08008a4d 	.word	0x08008a4d

080077ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b0ba      	sub	sp, #232	; 0xe8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	69db      	ldr	r3, [r3, #28]
 80077fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007812:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007816:	f640 030f 	movw	r3, #2063	; 0x80f
 800781a:	4013      	ands	r3, r2
 800781c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007820:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007824:	2b00      	cmp	r3, #0
 8007826:	d115      	bne.n	8007854 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800782c:	f003 0320 	and.w	r3, r3, #32
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00f      	beq.n	8007854 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007838:	f003 0320 	and.w	r3, r3, #32
 800783c:	2b00      	cmp	r3, #0
 800783e:	d009      	beq.n	8007854 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007844:	2b00      	cmp	r3, #0
 8007846:	f000 8297 	beq.w	8007d78 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	4798      	blx	r3
      }
      return;
 8007852:	e291      	b.n	8007d78 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007854:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007858:	2b00      	cmp	r3, #0
 800785a:	f000 8117 	beq.w	8007a8c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800785e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	2b00      	cmp	r3, #0
 8007868:	d106      	bne.n	8007878 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800786a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800786e:	4b85      	ldr	r3, [pc, #532]	; (8007a84 <HAL_UART_IRQHandler+0x298>)
 8007870:	4013      	ands	r3, r2
 8007872:	2b00      	cmp	r3, #0
 8007874:	f000 810a 	beq.w	8007a8c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800787c:	f003 0301 	and.w	r3, r3, #1
 8007880:	2b00      	cmp	r3, #0
 8007882:	d011      	beq.n	80078a8 <HAL_UART_IRQHandler+0xbc>
 8007884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00b      	beq.n	80078a8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2201      	movs	r2, #1
 8007896:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800789e:	f043 0201 	orr.w	r2, r3, #1
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078ac:	f003 0302 	and.w	r3, r3, #2
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d011      	beq.n	80078d8 <HAL_UART_IRQHandler+0xec>
 80078b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078b8:	f003 0301 	and.w	r3, r3, #1
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00b      	beq.n	80078d8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2202      	movs	r2, #2
 80078c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078ce:	f043 0204 	orr.w	r2, r3, #4
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078dc:	f003 0304 	and.w	r3, r3, #4
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d011      	beq.n	8007908 <HAL_UART_IRQHandler+0x11c>
 80078e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078e8:	f003 0301 	and.w	r3, r3, #1
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d00b      	beq.n	8007908 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2204      	movs	r2, #4
 80078f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078fe:	f043 0202 	orr.w	r2, r3, #2
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800790c:	f003 0308 	and.w	r3, r3, #8
 8007910:	2b00      	cmp	r3, #0
 8007912:	d017      	beq.n	8007944 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007918:	f003 0320 	and.w	r3, r3, #32
 800791c:	2b00      	cmp	r3, #0
 800791e:	d105      	bne.n	800792c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007920:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007924:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00b      	beq.n	8007944 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2208      	movs	r2, #8
 8007932:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800793a:	f043 0208 	orr.w	r2, r3, #8
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007948:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800794c:	2b00      	cmp	r3, #0
 800794e:	d012      	beq.n	8007976 <HAL_UART_IRQHandler+0x18a>
 8007950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007954:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00c      	beq.n	8007976 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007964:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800796c:	f043 0220 	orr.w	r2, r3, #32
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800797c:	2b00      	cmp	r3, #0
 800797e:	f000 81fd 	beq.w	8007d7c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007986:	f003 0320 	and.w	r3, r3, #32
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00d      	beq.n	80079aa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800798e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007992:	f003 0320 	and.w	r3, r3, #32
 8007996:	2b00      	cmp	r3, #0
 8007998:	d007      	beq.n	80079aa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d003      	beq.n	80079aa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079be:	2b40      	cmp	r3, #64	; 0x40
 80079c0:	d005      	beq.n	80079ce <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80079c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80079c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d04f      	beq.n	8007a6e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 fed0 	bl	8008774 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079de:	2b40      	cmp	r3, #64	; 0x40
 80079e0:	d141      	bne.n	8007a66 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	3308      	adds	r3, #8
 80079e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80079f0:	e853 3f00 	ldrex	r3, [r3]
 80079f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80079f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	3308      	adds	r3, #8
 8007a0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007a0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007a12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007a1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007a1e:	e841 2300 	strex	r3, r2, [r1]
 8007a22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007a26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d1d9      	bne.n	80079e2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d013      	beq.n	8007a5e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a3a:	4a13      	ldr	r2, [pc, #76]	; (8007a88 <HAL_UART_IRQHandler+0x29c>)
 8007a3c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7fb fbda 	bl	80031fc <HAL_DMA_Abort_IT>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d017      	beq.n	8007a7e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007a58:	4610      	mov	r0, r2
 8007a5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a5c:	e00f      	b.n	8007a7e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 f9b4 	bl	8007dcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a64:	e00b      	b.n	8007a7e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f9b0 	bl	8007dcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a6c:	e007      	b.n	8007a7e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 f9ac 	bl	8007dcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007a7c:	e17e      	b.n	8007d7c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a7e:	bf00      	nop
    return;
 8007a80:	e17c      	b.n	8007d7c <HAL_UART_IRQHandler+0x590>
 8007a82:	bf00      	nop
 8007a84:	04000120 	.word	0x04000120
 8007a88:	08008a21 	.word	0x08008a21

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	f040 814c 	bne.w	8007d2e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a9a:	f003 0310 	and.w	r3, r3, #16
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f000 8145 	beq.w	8007d2e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aa8:	f003 0310 	and.w	r3, r3, #16
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f000 813e 	beq.w	8007d2e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2210      	movs	r2, #16
 8007ab8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ac4:	2b40      	cmp	r3, #64	; 0x40
 8007ac6:	f040 80b6 	bne.w	8007c36 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007ad6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	f000 8150 	beq.w	8007d80 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007ae6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007aea:	429a      	cmp	r2, r3
 8007aec:	f080 8148 	bcs.w	8007d80 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007af6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007afe:	69db      	ldr	r3, [r3, #28]
 8007b00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b04:	f000 8086 	beq.w	8007c14 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b14:	e853 3f00 	ldrex	r3, [r3]
 8007b18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007b1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007b36:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007b3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007b42:	e841 2300 	strex	r3, r2, [r1]
 8007b46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007b4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1da      	bne.n	8007b08 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	3308      	adds	r3, #8
 8007b58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b5c:	e853 3f00 	ldrex	r3, [r3]
 8007b60:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007b62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b64:	f023 0301 	bic.w	r3, r3, #1
 8007b68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	3308      	adds	r3, #8
 8007b72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007b76:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007b7a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007b7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007b82:	e841 2300 	strex	r3, r2, [r1]
 8007b86:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007b88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d1e1      	bne.n	8007b52 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	3308      	adds	r3, #8
 8007b94:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b98:	e853 3f00 	ldrex	r3, [r3]
 8007b9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ba0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ba4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	3308      	adds	r3, #8
 8007bae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007bb2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007bb4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007bb8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007bba:	e841 2300 	strex	r3, r2, [r1]
 8007bbe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007bc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1e3      	bne.n	8007b8e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2220      	movs	r2, #32
 8007bca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bdc:	e853 3f00 	ldrex	r3, [r3]
 8007be0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007be2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007be4:	f023 0310 	bic.w	r3, r3, #16
 8007be8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007bf6:	65bb      	str	r3, [r7, #88]	; 0x58
 8007bf8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007bfc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007bfe:	e841 2300 	strex	r3, r2, [r1]
 8007c02:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007c04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1e4      	bne.n	8007bd4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7fb fa84 	bl	800311c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2202      	movs	r2, #2
 8007c18:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	1ad3      	subs	r3, r2, r3
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f7fa fbc4 	bl	80023bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c34:	e0a4      	b.n	8007d80 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	1ad3      	subs	r3, r2, r3
 8007c46:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	f000 8096 	beq.w	8007d84 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8007c58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	f000 8091 	beq.w	8007d84 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6a:	e853 3f00 	ldrex	r3, [r3]
 8007c6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	461a      	mov	r2, r3
 8007c80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c84:	647b      	str	r3, [r7, #68]	; 0x44
 8007c86:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c8c:	e841 2300 	strex	r3, r2, [r1]
 8007c90:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1e4      	bne.n	8007c62 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	3308      	adds	r3, #8
 8007c9e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca2:	e853 3f00 	ldrex	r3, [r3]
 8007ca6:	623b      	str	r3, [r7, #32]
   return(result);
 8007ca8:	6a3b      	ldr	r3, [r7, #32]
 8007caa:	f023 0301 	bic.w	r3, r3, #1
 8007cae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	3308      	adds	r3, #8
 8007cb8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007cbc:	633a      	str	r2, [r7, #48]	; 0x30
 8007cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cc4:	e841 2300 	strex	r3, r2, [r1]
 8007cc8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d1e3      	bne.n	8007c98 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2220      	movs	r2, #32
 8007cd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	e853 3f00 	ldrex	r3, [r3]
 8007cf0:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f023 0310 	bic.w	r3, r3, #16
 8007cf8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	461a      	mov	r2, r3
 8007d02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007d06:	61fb      	str	r3, [r7, #28]
 8007d08:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0a:	69b9      	ldr	r1, [r7, #24]
 8007d0c:	69fa      	ldr	r2, [r7, #28]
 8007d0e:	e841 2300 	strex	r3, r2, [r1]
 8007d12:	617b      	str	r3, [r7, #20]
   return(result);
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1e4      	bne.n	8007ce4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2202      	movs	r2, #2
 8007d1e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d24:	4619      	mov	r1, r3
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f7fa fb48 	bl	80023bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d2c:	e02a      	b.n	8007d84 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d00e      	beq.n	8007d58 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007d3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d008      	beq.n	8007d58 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d01c      	beq.n	8007d88 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	4798      	blx	r3
    }
    return;
 8007d56:	e017      	b.n	8007d88 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d012      	beq.n	8007d8a <HAL_UART_IRQHandler+0x59e>
 8007d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00c      	beq.n	8007d8a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 ff26 	bl	8008bc2 <UART_EndTransmit_IT>
    return;
 8007d76:	e008      	b.n	8007d8a <HAL_UART_IRQHandler+0x59e>
      return;
 8007d78:	bf00      	nop
 8007d7a:	e006      	b.n	8007d8a <HAL_UART_IRQHandler+0x59e>
    return;
 8007d7c:	bf00      	nop
 8007d7e:	e004      	b.n	8007d8a <HAL_UART_IRQHandler+0x59e>
      return;
 8007d80:	bf00      	nop
 8007d82:	e002      	b.n	8007d8a <HAL_UART_IRQHandler+0x59e>
      return;
 8007d84:	bf00      	nop
 8007d86:	e000      	b.n	8007d8a <HAL_UART_IRQHandler+0x59e>
    return;
 8007d88:	bf00      	nop
  }

}
 8007d8a:	37e8      	adds	r7, #232	; 0xe8
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007d98:	bf00      	nop
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007dac:	bf00      	nop
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007dc0:	bf00      	nop
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007dd4:	bf00      	nop
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b088      	sub	sp, #32
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007de8:	2300      	movs	r3, #0
 8007dea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	689a      	ldr	r2, [r3, #8]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	431a      	orrs	r2, r3
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	695b      	ldr	r3, [r3, #20]
 8007dfa:	431a      	orrs	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	69db      	ldr	r3, [r3, #28]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	4ba6      	ldr	r3, [pc, #664]	; (80080a4 <UART_SetConfig+0x2c4>)
 8007e0c:	4013      	ands	r3, r2
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	6812      	ldr	r2, [r2, #0]
 8007e12:	6979      	ldr	r1, [r7, #20]
 8007e14:	430b      	orrs	r3, r1
 8007e16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	68da      	ldr	r2, [r3, #12]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	430a      	orrs	r2, r1
 8007e2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	699b      	ldr	r3, [r3, #24]
 8007e32:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a1b      	ldr	r3, [r3, #32]
 8007e38:	697a      	ldr	r2, [r7, #20]
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	697a      	ldr	r2, [r7, #20]
 8007e4e:	430a      	orrs	r2, r1
 8007e50:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a94      	ldr	r2, [pc, #592]	; (80080a8 <UART_SetConfig+0x2c8>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d120      	bne.n	8007e9e <UART_SetConfig+0xbe>
 8007e5c:	4b93      	ldr	r3, [pc, #588]	; (80080ac <UART_SetConfig+0x2cc>)
 8007e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e62:	f003 0303 	and.w	r3, r3, #3
 8007e66:	2b03      	cmp	r3, #3
 8007e68:	d816      	bhi.n	8007e98 <UART_SetConfig+0xb8>
 8007e6a:	a201      	add	r2, pc, #4	; (adr r2, 8007e70 <UART_SetConfig+0x90>)
 8007e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e70:	08007e81 	.word	0x08007e81
 8007e74:	08007e8d 	.word	0x08007e8d
 8007e78:	08007e87 	.word	0x08007e87
 8007e7c:	08007e93 	.word	0x08007e93
 8007e80:	2301      	movs	r3, #1
 8007e82:	77fb      	strb	r3, [r7, #31]
 8007e84:	e150      	b.n	8008128 <UART_SetConfig+0x348>
 8007e86:	2302      	movs	r3, #2
 8007e88:	77fb      	strb	r3, [r7, #31]
 8007e8a:	e14d      	b.n	8008128 <UART_SetConfig+0x348>
 8007e8c:	2304      	movs	r3, #4
 8007e8e:	77fb      	strb	r3, [r7, #31]
 8007e90:	e14a      	b.n	8008128 <UART_SetConfig+0x348>
 8007e92:	2308      	movs	r3, #8
 8007e94:	77fb      	strb	r3, [r7, #31]
 8007e96:	e147      	b.n	8008128 <UART_SetConfig+0x348>
 8007e98:	2310      	movs	r3, #16
 8007e9a:	77fb      	strb	r3, [r7, #31]
 8007e9c:	e144      	b.n	8008128 <UART_SetConfig+0x348>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a83      	ldr	r2, [pc, #524]	; (80080b0 <UART_SetConfig+0x2d0>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d132      	bne.n	8007f0e <UART_SetConfig+0x12e>
 8007ea8:	4b80      	ldr	r3, [pc, #512]	; (80080ac <UART_SetConfig+0x2cc>)
 8007eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eae:	f003 030c 	and.w	r3, r3, #12
 8007eb2:	2b0c      	cmp	r3, #12
 8007eb4:	d828      	bhi.n	8007f08 <UART_SetConfig+0x128>
 8007eb6:	a201      	add	r2, pc, #4	; (adr r2, 8007ebc <UART_SetConfig+0xdc>)
 8007eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ebc:	08007ef1 	.word	0x08007ef1
 8007ec0:	08007f09 	.word	0x08007f09
 8007ec4:	08007f09 	.word	0x08007f09
 8007ec8:	08007f09 	.word	0x08007f09
 8007ecc:	08007efd 	.word	0x08007efd
 8007ed0:	08007f09 	.word	0x08007f09
 8007ed4:	08007f09 	.word	0x08007f09
 8007ed8:	08007f09 	.word	0x08007f09
 8007edc:	08007ef7 	.word	0x08007ef7
 8007ee0:	08007f09 	.word	0x08007f09
 8007ee4:	08007f09 	.word	0x08007f09
 8007ee8:	08007f09 	.word	0x08007f09
 8007eec:	08007f03 	.word	0x08007f03
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	77fb      	strb	r3, [r7, #31]
 8007ef4:	e118      	b.n	8008128 <UART_SetConfig+0x348>
 8007ef6:	2302      	movs	r3, #2
 8007ef8:	77fb      	strb	r3, [r7, #31]
 8007efa:	e115      	b.n	8008128 <UART_SetConfig+0x348>
 8007efc:	2304      	movs	r3, #4
 8007efe:	77fb      	strb	r3, [r7, #31]
 8007f00:	e112      	b.n	8008128 <UART_SetConfig+0x348>
 8007f02:	2308      	movs	r3, #8
 8007f04:	77fb      	strb	r3, [r7, #31]
 8007f06:	e10f      	b.n	8008128 <UART_SetConfig+0x348>
 8007f08:	2310      	movs	r3, #16
 8007f0a:	77fb      	strb	r3, [r7, #31]
 8007f0c:	e10c      	b.n	8008128 <UART_SetConfig+0x348>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a68      	ldr	r2, [pc, #416]	; (80080b4 <UART_SetConfig+0x2d4>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d120      	bne.n	8007f5a <UART_SetConfig+0x17a>
 8007f18:	4b64      	ldr	r3, [pc, #400]	; (80080ac <UART_SetConfig+0x2cc>)
 8007f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f1e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007f22:	2b30      	cmp	r3, #48	; 0x30
 8007f24:	d013      	beq.n	8007f4e <UART_SetConfig+0x16e>
 8007f26:	2b30      	cmp	r3, #48	; 0x30
 8007f28:	d814      	bhi.n	8007f54 <UART_SetConfig+0x174>
 8007f2a:	2b20      	cmp	r3, #32
 8007f2c:	d009      	beq.n	8007f42 <UART_SetConfig+0x162>
 8007f2e:	2b20      	cmp	r3, #32
 8007f30:	d810      	bhi.n	8007f54 <UART_SetConfig+0x174>
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d002      	beq.n	8007f3c <UART_SetConfig+0x15c>
 8007f36:	2b10      	cmp	r3, #16
 8007f38:	d006      	beq.n	8007f48 <UART_SetConfig+0x168>
 8007f3a:	e00b      	b.n	8007f54 <UART_SetConfig+0x174>
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	77fb      	strb	r3, [r7, #31]
 8007f40:	e0f2      	b.n	8008128 <UART_SetConfig+0x348>
 8007f42:	2302      	movs	r3, #2
 8007f44:	77fb      	strb	r3, [r7, #31]
 8007f46:	e0ef      	b.n	8008128 <UART_SetConfig+0x348>
 8007f48:	2304      	movs	r3, #4
 8007f4a:	77fb      	strb	r3, [r7, #31]
 8007f4c:	e0ec      	b.n	8008128 <UART_SetConfig+0x348>
 8007f4e:	2308      	movs	r3, #8
 8007f50:	77fb      	strb	r3, [r7, #31]
 8007f52:	e0e9      	b.n	8008128 <UART_SetConfig+0x348>
 8007f54:	2310      	movs	r3, #16
 8007f56:	77fb      	strb	r3, [r7, #31]
 8007f58:	e0e6      	b.n	8008128 <UART_SetConfig+0x348>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a56      	ldr	r2, [pc, #344]	; (80080b8 <UART_SetConfig+0x2d8>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d120      	bne.n	8007fa6 <UART_SetConfig+0x1c6>
 8007f64:	4b51      	ldr	r3, [pc, #324]	; (80080ac <UART_SetConfig+0x2cc>)
 8007f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f6a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007f6e:	2bc0      	cmp	r3, #192	; 0xc0
 8007f70:	d013      	beq.n	8007f9a <UART_SetConfig+0x1ba>
 8007f72:	2bc0      	cmp	r3, #192	; 0xc0
 8007f74:	d814      	bhi.n	8007fa0 <UART_SetConfig+0x1c0>
 8007f76:	2b80      	cmp	r3, #128	; 0x80
 8007f78:	d009      	beq.n	8007f8e <UART_SetConfig+0x1ae>
 8007f7a:	2b80      	cmp	r3, #128	; 0x80
 8007f7c:	d810      	bhi.n	8007fa0 <UART_SetConfig+0x1c0>
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d002      	beq.n	8007f88 <UART_SetConfig+0x1a8>
 8007f82:	2b40      	cmp	r3, #64	; 0x40
 8007f84:	d006      	beq.n	8007f94 <UART_SetConfig+0x1b4>
 8007f86:	e00b      	b.n	8007fa0 <UART_SetConfig+0x1c0>
 8007f88:	2300      	movs	r3, #0
 8007f8a:	77fb      	strb	r3, [r7, #31]
 8007f8c:	e0cc      	b.n	8008128 <UART_SetConfig+0x348>
 8007f8e:	2302      	movs	r3, #2
 8007f90:	77fb      	strb	r3, [r7, #31]
 8007f92:	e0c9      	b.n	8008128 <UART_SetConfig+0x348>
 8007f94:	2304      	movs	r3, #4
 8007f96:	77fb      	strb	r3, [r7, #31]
 8007f98:	e0c6      	b.n	8008128 <UART_SetConfig+0x348>
 8007f9a:	2308      	movs	r3, #8
 8007f9c:	77fb      	strb	r3, [r7, #31]
 8007f9e:	e0c3      	b.n	8008128 <UART_SetConfig+0x348>
 8007fa0:	2310      	movs	r3, #16
 8007fa2:	77fb      	strb	r3, [r7, #31]
 8007fa4:	e0c0      	b.n	8008128 <UART_SetConfig+0x348>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a44      	ldr	r2, [pc, #272]	; (80080bc <UART_SetConfig+0x2dc>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d125      	bne.n	8007ffc <UART_SetConfig+0x21c>
 8007fb0:	4b3e      	ldr	r3, [pc, #248]	; (80080ac <UART_SetConfig+0x2cc>)
 8007fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fbe:	d017      	beq.n	8007ff0 <UART_SetConfig+0x210>
 8007fc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fc4:	d817      	bhi.n	8007ff6 <UART_SetConfig+0x216>
 8007fc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fca:	d00b      	beq.n	8007fe4 <UART_SetConfig+0x204>
 8007fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fd0:	d811      	bhi.n	8007ff6 <UART_SetConfig+0x216>
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d003      	beq.n	8007fde <UART_SetConfig+0x1fe>
 8007fd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fda:	d006      	beq.n	8007fea <UART_SetConfig+0x20a>
 8007fdc:	e00b      	b.n	8007ff6 <UART_SetConfig+0x216>
 8007fde:	2300      	movs	r3, #0
 8007fe0:	77fb      	strb	r3, [r7, #31]
 8007fe2:	e0a1      	b.n	8008128 <UART_SetConfig+0x348>
 8007fe4:	2302      	movs	r3, #2
 8007fe6:	77fb      	strb	r3, [r7, #31]
 8007fe8:	e09e      	b.n	8008128 <UART_SetConfig+0x348>
 8007fea:	2304      	movs	r3, #4
 8007fec:	77fb      	strb	r3, [r7, #31]
 8007fee:	e09b      	b.n	8008128 <UART_SetConfig+0x348>
 8007ff0:	2308      	movs	r3, #8
 8007ff2:	77fb      	strb	r3, [r7, #31]
 8007ff4:	e098      	b.n	8008128 <UART_SetConfig+0x348>
 8007ff6:	2310      	movs	r3, #16
 8007ff8:	77fb      	strb	r3, [r7, #31]
 8007ffa:	e095      	b.n	8008128 <UART_SetConfig+0x348>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a2f      	ldr	r2, [pc, #188]	; (80080c0 <UART_SetConfig+0x2e0>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d125      	bne.n	8008052 <UART_SetConfig+0x272>
 8008006:	4b29      	ldr	r3, [pc, #164]	; (80080ac <UART_SetConfig+0x2cc>)
 8008008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800800c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008010:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008014:	d017      	beq.n	8008046 <UART_SetConfig+0x266>
 8008016:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800801a:	d817      	bhi.n	800804c <UART_SetConfig+0x26c>
 800801c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008020:	d00b      	beq.n	800803a <UART_SetConfig+0x25a>
 8008022:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008026:	d811      	bhi.n	800804c <UART_SetConfig+0x26c>
 8008028:	2b00      	cmp	r3, #0
 800802a:	d003      	beq.n	8008034 <UART_SetConfig+0x254>
 800802c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008030:	d006      	beq.n	8008040 <UART_SetConfig+0x260>
 8008032:	e00b      	b.n	800804c <UART_SetConfig+0x26c>
 8008034:	2301      	movs	r3, #1
 8008036:	77fb      	strb	r3, [r7, #31]
 8008038:	e076      	b.n	8008128 <UART_SetConfig+0x348>
 800803a:	2302      	movs	r3, #2
 800803c:	77fb      	strb	r3, [r7, #31]
 800803e:	e073      	b.n	8008128 <UART_SetConfig+0x348>
 8008040:	2304      	movs	r3, #4
 8008042:	77fb      	strb	r3, [r7, #31]
 8008044:	e070      	b.n	8008128 <UART_SetConfig+0x348>
 8008046:	2308      	movs	r3, #8
 8008048:	77fb      	strb	r3, [r7, #31]
 800804a:	e06d      	b.n	8008128 <UART_SetConfig+0x348>
 800804c:	2310      	movs	r3, #16
 800804e:	77fb      	strb	r3, [r7, #31]
 8008050:	e06a      	b.n	8008128 <UART_SetConfig+0x348>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a1b      	ldr	r2, [pc, #108]	; (80080c4 <UART_SetConfig+0x2e4>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d138      	bne.n	80080ce <UART_SetConfig+0x2ee>
 800805c:	4b13      	ldr	r3, [pc, #76]	; (80080ac <UART_SetConfig+0x2cc>)
 800805e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008062:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008066:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800806a:	d017      	beq.n	800809c <UART_SetConfig+0x2bc>
 800806c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008070:	d82a      	bhi.n	80080c8 <UART_SetConfig+0x2e8>
 8008072:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008076:	d00b      	beq.n	8008090 <UART_SetConfig+0x2b0>
 8008078:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800807c:	d824      	bhi.n	80080c8 <UART_SetConfig+0x2e8>
 800807e:	2b00      	cmp	r3, #0
 8008080:	d003      	beq.n	800808a <UART_SetConfig+0x2aa>
 8008082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008086:	d006      	beq.n	8008096 <UART_SetConfig+0x2b6>
 8008088:	e01e      	b.n	80080c8 <UART_SetConfig+0x2e8>
 800808a:	2300      	movs	r3, #0
 800808c:	77fb      	strb	r3, [r7, #31]
 800808e:	e04b      	b.n	8008128 <UART_SetConfig+0x348>
 8008090:	2302      	movs	r3, #2
 8008092:	77fb      	strb	r3, [r7, #31]
 8008094:	e048      	b.n	8008128 <UART_SetConfig+0x348>
 8008096:	2304      	movs	r3, #4
 8008098:	77fb      	strb	r3, [r7, #31]
 800809a:	e045      	b.n	8008128 <UART_SetConfig+0x348>
 800809c:	2308      	movs	r3, #8
 800809e:	77fb      	strb	r3, [r7, #31]
 80080a0:	e042      	b.n	8008128 <UART_SetConfig+0x348>
 80080a2:	bf00      	nop
 80080a4:	efff69f3 	.word	0xefff69f3
 80080a8:	40011000 	.word	0x40011000
 80080ac:	40023800 	.word	0x40023800
 80080b0:	40004400 	.word	0x40004400
 80080b4:	40004800 	.word	0x40004800
 80080b8:	40004c00 	.word	0x40004c00
 80080bc:	40005000 	.word	0x40005000
 80080c0:	40011400 	.word	0x40011400
 80080c4:	40007800 	.word	0x40007800
 80080c8:	2310      	movs	r3, #16
 80080ca:	77fb      	strb	r3, [r7, #31]
 80080cc:	e02c      	b.n	8008128 <UART_SetConfig+0x348>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a72      	ldr	r2, [pc, #456]	; (800829c <UART_SetConfig+0x4bc>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d125      	bne.n	8008124 <UART_SetConfig+0x344>
 80080d8:	4b71      	ldr	r3, [pc, #452]	; (80082a0 <UART_SetConfig+0x4c0>)
 80080da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80080e2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80080e6:	d017      	beq.n	8008118 <UART_SetConfig+0x338>
 80080e8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80080ec:	d817      	bhi.n	800811e <UART_SetConfig+0x33e>
 80080ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080f2:	d00b      	beq.n	800810c <UART_SetConfig+0x32c>
 80080f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080f8:	d811      	bhi.n	800811e <UART_SetConfig+0x33e>
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d003      	beq.n	8008106 <UART_SetConfig+0x326>
 80080fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008102:	d006      	beq.n	8008112 <UART_SetConfig+0x332>
 8008104:	e00b      	b.n	800811e <UART_SetConfig+0x33e>
 8008106:	2300      	movs	r3, #0
 8008108:	77fb      	strb	r3, [r7, #31]
 800810a:	e00d      	b.n	8008128 <UART_SetConfig+0x348>
 800810c:	2302      	movs	r3, #2
 800810e:	77fb      	strb	r3, [r7, #31]
 8008110:	e00a      	b.n	8008128 <UART_SetConfig+0x348>
 8008112:	2304      	movs	r3, #4
 8008114:	77fb      	strb	r3, [r7, #31]
 8008116:	e007      	b.n	8008128 <UART_SetConfig+0x348>
 8008118:	2308      	movs	r3, #8
 800811a:	77fb      	strb	r3, [r7, #31]
 800811c:	e004      	b.n	8008128 <UART_SetConfig+0x348>
 800811e:	2310      	movs	r3, #16
 8008120:	77fb      	strb	r3, [r7, #31]
 8008122:	e001      	b.n	8008128 <UART_SetConfig+0x348>
 8008124:	2310      	movs	r3, #16
 8008126:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	69db      	ldr	r3, [r3, #28]
 800812c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008130:	d15b      	bne.n	80081ea <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008132:	7ffb      	ldrb	r3, [r7, #31]
 8008134:	2b08      	cmp	r3, #8
 8008136:	d828      	bhi.n	800818a <UART_SetConfig+0x3aa>
 8008138:	a201      	add	r2, pc, #4	; (adr r2, 8008140 <UART_SetConfig+0x360>)
 800813a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813e:	bf00      	nop
 8008140:	08008165 	.word	0x08008165
 8008144:	0800816d 	.word	0x0800816d
 8008148:	08008175 	.word	0x08008175
 800814c:	0800818b 	.word	0x0800818b
 8008150:	0800817b 	.word	0x0800817b
 8008154:	0800818b 	.word	0x0800818b
 8008158:	0800818b 	.word	0x0800818b
 800815c:	0800818b 	.word	0x0800818b
 8008160:	08008183 	.word	0x08008183
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008164:	f7fd fcc2 	bl	8005aec <HAL_RCC_GetPCLK1Freq>
 8008168:	61b8      	str	r0, [r7, #24]
        break;
 800816a:	e013      	b.n	8008194 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800816c:	f7fd fcd2 	bl	8005b14 <HAL_RCC_GetPCLK2Freq>
 8008170:	61b8      	str	r0, [r7, #24]
        break;
 8008172:	e00f      	b.n	8008194 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008174:	4b4b      	ldr	r3, [pc, #300]	; (80082a4 <UART_SetConfig+0x4c4>)
 8008176:	61bb      	str	r3, [r7, #24]
        break;
 8008178:	e00c      	b.n	8008194 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800817a:	f7fd fba5 	bl	80058c8 <HAL_RCC_GetSysClockFreq>
 800817e:	61b8      	str	r0, [r7, #24]
        break;
 8008180:	e008      	b.n	8008194 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008186:	61bb      	str	r3, [r7, #24]
        break;
 8008188:	e004      	b.n	8008194 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800818a:	2300      	movs	r3, #0
 800818c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	77bb      	strb	r3, [r7, #30]
        break;
 8008192:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d074      	beq.n	8008284 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	005a      	lsls	r2, r3, #1
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	085b      	lsrs	r3, r3, #1
 80081a4:	441a      	add	r2, r3
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	2b0f      	cmp	r3, #15
 80081b4:	d916      	bls.n	80081e4 <UART_SetConfig+0x404>
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081bc:	d212      	bcs.n	80081e4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	f023 030f 	bic.w	r3, r3, #15
 80081c6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	085b      	lsrs	r3, r3, #1
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	f003 0307 	and.w	r3, r3, #7
 80081d2:	b29a      	uxth	r2, r3
 80081d4:	89fb      	ldrh	r3, [r7, #14]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	89fa      	ldrh	r2, [r7, #14]
 80081e0:	60da      	str	r2, [r3, #12]
 80081e2:	e04f      	b.n	8008284 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	77bb      	strb	r3, [r7, #30]
 80081e8:	e04c      	b.n	8008284 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80081ea:	7ffb      	ldrb	r3, [r7, #31]
 80081ec:	2b08      	cmp	r3, #8
 80081ee:	d828      	bhi.n	8008242 <UART_SetConfig+0x462>
 80081f0:	a201      	add	r2, pc, #4	; (adr r2, 80081f8 <UART_SetConfig+0x418>)
 80081f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f6:	bf00      	nop
 80081f8:	0800821d 	.word	0x0800821d
 80081fc:	08008225 	.word	0x08008225
 8008200:	0800822d 	.word	0x0800822d
 8008204:	08008243 	.word	0x08008243
 8008208:	08008233 	.word	0x08008233
 800820c:	08008243 	.word	0x08008243
 8008210:	08008243 	.word	0x08008243
 8008214:	08008243 	.word	0x08008243
 8008218:	0800823b 	.word	0x0800823b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800821c:	f7fd fc66 	bl	8005aec <HAL_RCC_GetPCLK1Freq>
 8008220:	61b8      	str	r0, [r7, #24]
        break;
 8008222:	e013      	b.n	800824c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008224:	f7fd fc76 	bl	8005b14 <HAL_RCC_GetPCLK2Freq>
 8008228:	61b8      	str	r0, [r7, #24]
        break;
 800822a:	e00f      	b.n	800824c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800822c:	4b1d      	ldr	r3, [pc, #116]	; (80082a4 <UART_SetConfig+0x4c4>)
 800822e:	61bb      	str	r3, [r7, #24]
        break;
 8008230:	e00c      	b.n	800824c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008232:	f7fd fb49 	bl	80058c8 <HAL_RCC_GetSysClockFreq>
 8008236:	61b8      	str	r0, [r7, #24]
        break;
 8008238:	e008      	b.n	800824c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800823a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800823e:	61bb      	str	r3, [r7, #24]
        break;
 8008240:	e004      	b.n	800824c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008242:	2300      	movs	r3, #0
 8008244:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	77bb      	strb	r3, [r7, #30]
        break;
 800824a:	bf00      	nop
    }

    if (pclk != 0U)
 800824c:	69bb      	ldr	r3, [r7, #24]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d018      	beq.n	8008284 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	085a      	lsrs	r2, r3, #1
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	441a      	add	r2, r3
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	fbb2 f3f3 	udiv	r3, r2, r3
 8008264:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	2b0f      	cmp	r3, #15
 800826a:	d909      	bls.n	8008280 <UART_SetConfig+0x4a0>
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008272:	d205      	bcs.n	8008280 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	b29a      	uxth	r2, r3
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	60da      	str	r2, [r3, #12]
 800827e:	e001      	b.n	8008284 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008290:	7fbb      	ldrb	r3, [r7, #30]
}
 8008292:	4618      	mov	r0, r3
 8008294:	3720      	adds	r7, #32
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	40007c00 	.word	0x40007c00
 80082a0:	40023800 	.word	0x40023800
 80082a4:	00f42400 	.word	0x00f42400

080082a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b4:	f003 0301 	and.w	r3, r3, #1
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d00a      	beq.n	80082d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	430a      	orrs	r2, r1
 80082d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d6:	f003 0302 	and.w	r3, r3, #2
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00a      	beq.n	80082f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	430a      	orrs	r2, r1
 80082f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f8:	f003 0304 	and.w	r3, r3, #4
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00a      	beq.n	8008316 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	430a      	orrs	r2, r1
 8008314:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831a:	f003 0308 	and.w	r3, r3, #8
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00a      	beq.n	8008338 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	430a      	orrs	r2, r1
 8008336:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833c:	f003 0310 	and.w	r3, r3, #16
 8008340:	2b00      	cmp	r3, #0
 8008342:	d00a      	beq.n	800835a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	430a      	orrs	r2, r1
 8008358:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835e:	f003 0320 	and.w	r3, r3, #32
 8008362:	2b00      	cmp	r3, #0
 8008364:	d00a      	beq.n	800837c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	430a      	orrs	r2, r1
 800837a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008384:	2b00      	cmp	r3, #0
 8008386:	d01a      	beq.n	80083be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	430a      	orrs	r2, r1
 800839c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083a6:	d10a      	bne.n	80083be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	430a      	orrs	r2, r1
 80083bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00a      	beq.n	80083e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	430a      	orrs	r2, r1
 80083de:	605a      	str	r2, [r3, #4]
  }
}
 80083e0:	bf00      	nop
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b086      	sub	sp, #24
 80083f0:	af02      	add	r7, sp, #8
 80083f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80083fc:	f7fa fc3e 	bl	8002c7c <HAL_GetTick>
 8008400:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 0308 	and.w	r3, r3, #8
 800840c:	2b08      	cmp	r3, #8
 800840e:	d10e      	bne.n	800842e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008410:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008414:	9300      	str	r3, [sp, #0]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2200      	movs	r2, #0
 800841a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 f81b 	bl	800845a <UART_WaitOnFlagUntilTimeout>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d001      	beq.n	800842e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800842a:	2303      	movs	r3, #3
 800842c:	e011      	b.n	8008452 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2220      	movs	r2, #32
 8008432:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2220      	movs	r2, #32
 8008438:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008450:	2300      	movs	r3, #0
}
 8008452:	4618      	mov	r0, r3
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b09c      	sub	sp, #112	; 0x70
 800845e:	af00      	add	r7, sp, #0
 8008460:	60f8      	str	r0, [r7, #12]
 8008462:	60b9      	str	r1, [r7, #8]
 8008464:	603b      	str	r3, [r7, #0]
 8008466:	4613      	mov	r3, r2
 8008468:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800846a:	e0a7      	b.n	80085bc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800846c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800846e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008472:	f000 80a3 	beq.w	80085bc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008476:	f7fa fc01 	bl	8002c7c <HAL_GetTick>
 800847a:	4602      	mov	r2, r0
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	1ad3      	subs	r3, r2, r3
 8008480:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008482:	429a      	cmp	r2, r3
 8008484:	d302      	bcc.n	800848c <UART_WaitOnFlagUntilTimeout+0x32>
 8008486:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008488:	2b00      	cmp	r3, #0
 800848a:	d13f      	bne.n	800850c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008494:	e853 3f00 	ldrex	r3, [r3]
 8008498:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800849a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800849c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80084a0:	667b      	str	r3, [r7, #100]	; 0x64
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	461a      	mov	r2, r3
 80084a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084ac:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80084b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80084b2:	e841 2300 	strex	r3, r2, [r1]
 80084b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80084b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1e6      	bne.n	800848c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	3308      	adds	r3, #8
 80084c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084c8:	e853 3f00 	ldrex	r3, [r3]
 80084cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80084ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d0:	f023 0301 	bic.w	r3, r3, #1
 80084d4:	663b      	str	r3, [r7, #96]	; 0x60
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	3308      	adds	r3, #8
 80084dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80084de:	64ba      	str	r2, [r7, #72]	; 0x48
 80084e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80084e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084e6:	e841 2300 	strex	r3, r2, [r1]
 80084ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80084ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d1e5      	bne.n	80084be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2220      	movs	r2, #32
 80084f6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2220      	movs	r2, #32
 80084fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2200      	movs	r2, #0
 8008504:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008508:	2303      	movs	r3, #3
 800850a:	e068      	b.n	80085de <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f003 0304 	and.w	r3, r3, #4
 8008516:	2b00      	cmp	r3, #0
 8008518:	d050      	beq.n	80085bc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	69db      	ldr	r3, [r3, #28]
 8008520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008524:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008528:	d148      	bne.n	80085bc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008532:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853c:	e853 3f00 	ldrex	r3, [r3]
 8008540:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008544:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008548:	66fb      	str	r3, [r7, #108]	; 0x6c
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	461a      	mov	r2, r3
 8008550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008552:	637b      	str	r3, [r7, #52]	; 0x34
 8008554:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008556:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008558:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800855a:	e841 2300 	strex	r3, r2, [r1]
 800855e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008562:	2b00      	cmp	r3, #0
 8008564:	d1e6      	bne.n	8008534 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	3308      	adds	r3, #8
 800856c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	e853 3f00 	ldrex	r3, [r3]
 8008574:	613b      	str	r3, [r7, #16]
   return(result);
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	f023 0301 	bic.w	r3, r3, #1
 800857c:	66bb      	str	r3, [r7, #104]	; 0x68
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	3308      	adds	r3, #8
 8008584:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008586:	623a      	str	r2, [r7, #32]
 8008588:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858a:	69f9      	ldr	r1, [r7, #28]
 800858c:	6a3a      	ldr	r2, [r7, #32]
 800858e:	e841 2300 	strex	r3, r2, [r1]
 8008592:	61bb      	str	r3, [r7, #24]
   return(result);
 8008594:	69bb      	ldr	r3, [r7, #24]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d1e5      	bne.n	8008566 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2220      	movs	r2, #32
 800859e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2220      	movs	r2, #32
 80085a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2220      	movs	r2, #32
 80085ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80085b8:	2303      	movs	r3, #3
 80085ba:	e010      	b.n	80085de <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	69da      	ldr	r2, [r3, #28]
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	4013      	ands	r3, r2
 80085c6:	68ba      	ldr	r2, [r7, #8]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	bf0c      	ite	eq
 80085cc:	2301      	moveq	r3, #1
 80085ce:	2300      	movne	r3, #0
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	461a      	mov	r2, r3
 80085d4:	79fb      	ldrb	r3, [r7, #7]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	f43f af48 	beq.w	800846c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80085dc:	2300      	movs	r3, #0
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3770      	adds	r7, #112	; 0x70
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
	...

080085e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b096      	sub	sp, #88	; 0x58
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	4613      	mov	r3, r2
 80085f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	68ba      	ldr	r2, [r7, #8]
 80085fa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	88fa      	ldrh	r2, [r7, #6]
 8008600:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2200      	movs	r2, #0
 8008608:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2222      	movs	r2, #34	; 0x22
 8008610:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008618:	2b00      	cmp	r3, #0
 800861a:	d028      	beq.n	800866e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008620:	4a3e      	ldr	r2, [pc, #248]	; (800871c <UART_Start_Receive_DMA+0x134>)
 8008622:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008628:	4a3d      	ldr	r2, [pc, #244]	; (8008720 <UART_Start_Receive_DMA+0x138>)
 800862a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008630:	4a3c      	ldr	r2, [pc, #240]	; (8008724 <UART_Start_Receive_DMA+0x13c>)
 8008632:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008638:	2200      	movs	r2, #0
 800863a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	3324      	adds	r3, #36	; 0x24
 8008646:	4619      	mov	r1, r3
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800864c:	461a      	mov	r2, r3
 800864e:	88fb      	ldrh	r3, [r7, #6]
 8008650:	f7fa fd04 	bl	800305c <HAL_DMA_Start_IT>
 8008654:	4603      	mov	r3, r0
 8008656:	2b00      	cmp	r3, #0
 8008658:	d009      	beq.n	800866e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2210      	movs	r2, #16
 800865e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2220      	movs	r2, #32
 8008666:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	e051      	b.n	8008712 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	691b      	ldr	r3, [r3, #16]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d018      	beq.n	80086a8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800867e:	e853 3f00 	ldrex	r3, [r3]
 8008682:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800868a:	657b      	str	r3, [r7, #84]	; 0x54
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	461a      	mov	r2, r3
 8008692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008694:	64bb      	str	r3, [r7, #72]	; 0x48
 8008696:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008698:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800869a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800869c:	e841 2300 	strex	r3, r2, [r1]
 80086a0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80086a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d1e6      	bne.n	8008676 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	3308      	adds	r3, #8
 80086ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b2:	e853 3f00 	ldrex	r3, [r3]
 80086b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ba:	f043 0301 	orr.w	r3, r3, #1
 80086be:	653b      	str	r3, [r7, #80]	; 0x50
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	3308      	adds	r3, #8
 80086c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80086c8:	637a      	str	r2, [r7, #52]	; 0x34
 80086ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80086ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086d0:	e841 2300 	strex	r3, r2, [r1]
 80086d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80086d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d1e5      	bne.n	80086a8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	3308      	adds	r3, #8
 80086e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	e853 3f00 	ldrex	r3, [r3]
 80086ea:	613b      	str	r3, [r7, #16]
   return(result);
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	3308      	adds	r3, #8
 80086fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80086fc:	623a      	str	r2, [r7, #32]
 80086fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008700:	69f9      	ldr	r1, [r7, #28]
 8008702:	6a3a      	ldr	r2, [r7, #32]
 8008704:	e841 2300 	strex	r3, r2, [r1]
 8008708:	61bb      	str	r3, [r7, #24]
   return(result);
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d1e5      	bne.n	80086dc <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3758      	adds	r7, #88	; 0x58
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	0800883d 	.word	0x0800883d
 8008720:	08008965 	.word	0x08008965
 8008724:	080089a3 	.word	0x080089a3

08008728 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008728:	b480      	push	{r7}
 800872a:	b089      	sub	sp, #36	; 0x24
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	e853 3f00 	ldrex	r3, [r3]
 800873c:	60bb      	str	r3, [r7, #8]
   return(result);
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008744:	61fb      	str	r3, [r7, #28]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	461a      	mov	r2, r3
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	61bb      	str	r3, [r7, #24]
 8008750:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008752:	6979      	ldr	r1, [r7, #20]
 8008754:	69ba      	ldr	r2, [r7, #24]
 8008756:	e841 2300 	strex	r3, r2, [r1]
 800875a:	613b      	str	r3, [r7, #16]
   return(result);
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d1e6      	bne.n	8008730 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2220      	movs	r2, #32
 8008766:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8008768:	bf00      	nop
 800876a:	3724      	adds	r7, #36	; 0x24
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008774:	b480      	push	{r7}
 8008776:	b095      	sub	sp, #84	; 0x54
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008784:	e853 3f00 	ldrex	r3, [r3]
 8008788:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800878a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800878c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008790:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	461a      	mov	r2, r3
 8008798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800879a:	643b      	str	r3, [r7, #64]	; 0x40
 800879c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80087a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087a2:	e841 2300 	strex	r3, r2, [r1]
 80087a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d1e6      	bne.n	800877c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	3308      	adds	r3, #8
 80087b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b6:	6a3b      	ldr	r3, [r7, #32]
 80087b8:	e853 3f00 	ldrex	r3, [r3]
 80087bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80087be:	69fb      	ldr	r3, [r7, #28]
 80087c0:	f023 0301 	bic.w	r3, r3, #1
 80087c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	3308      	adds	r3, #8
 80087cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087d6:	e841 2300 	strex	r3, r2, [r1]
 80087da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d1e5      	bne.n	80087ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d118      	bne.n	800881c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	e853 3f00 	ldrex	r3, [r3]
 80087f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	f023 0310 	bic.w	r3, r3, #16
 80087fe:	647b      	str	r3, [r7, #68]	; 0x44
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	461a      	mov	r2, r3
 8008806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008808:	61bb      	str	r3, [r7, #24]
 800880a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800880c:	6979      	ldr	r1, [r7, #20]
 800880e:	69ba      	ldr	r2, [r7, #24]
 8008810:	e841 2300 	strex	r3, r2, [r1]
 8008814:	613b      	str	r3, [r7, #16]
   return(result);
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d1e6      	bne.n	80087ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2220      	movs	r2, #32
 8008820:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008830:	bf00      	nop
 8008832:	3754      	adds	r7, #84	; 0x54
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b09c      	sub	sp, #112	; 0x70
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008848:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	69db      	ldr	r3, [r3, #28]
 800884e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008852:	d071      	beq.n	8008938 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8008854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008856:	2200      	movs	r2, #0
 8008858:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800885c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008864:	e853 3f00 	ldrex	r3, [r3]
 8008868:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800886a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800886c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008870:	66bb      	str	r3, [r7, #104]	; 0x68
 8008872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	461a      	mov	r2, r3
 8008878:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800887a:	65bb      	str	r3, [r7, #88]	; 0x58
 800887c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800887e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008880:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008882:	e841 2300 	strex	r3, r2, [r1]
 8008886:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1e6      	bne.n	800885c <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800888e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	3308      	adds	r3, #8
 8008894:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008898:	e853 3f00 	ldrex	r3, [r3]
 800889c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800889e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088a0:	f023 0301 	bic.w	r3, r3, #1
 80088a4:	667b      	str	r3, [r7, #100]	; 0x64
 80088a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	3308      	adds	r3, #8
 80088ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80088ae:	647a      	str	r2, [r7, #68]	; 0x44
 80088b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80088b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088b6:	e841 2300 	strex	r3, r2, [r1]
 80088ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80088bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1e5      	bne.n	800888e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	3308      	adds	r3, #8
 80088c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088cc:	e853 3f00 	ldrex	r3, [r3]
 80088d0:	623b      	str	r3, [r7, #32]
   return(result);
 80088d2:	6a3b      	ldr	r3, [r7, #32]
 80088d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088d8:	663b      	str	r3, [r7, #96]	; 0x60
 80088da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	3308      	adds	r3, #8
 80088e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80088e2:	633a      	str	r2, [r7, #48]	; 0x30
 80088e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088ea:	e841 2300 	strex	r3, r2, [r1]
 80088ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80088f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1e5      	bne.n	80088c2 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80088f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088f8:	2220      	movs	r2, #32
 80088fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008902:	2b01      	cmp	r3, #1
 8008904:	d118      	bne.n	8008938 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	e853 3f00 	ldrex	r3, [r3]
 8008912:	60fb      	str	r3, [r7, #12]
   return(result);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f023 0310 	bic.w	r3, r3, #16
 800891a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800891c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	461a      	mov	r2, r3
 8008922:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008924:	61fb      	str	r3, [r7, #28]
 8008926:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008928:	69b9      	ldr	r1, [r7, #24]
 800892a:	69fa      	ldr	r2, [r7, #28]
 800892c:	e841 2300 	strex	r3, r2, [r1]
 8008930:	617b      	str	r3, [r7, #20]
   return(result);
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d1e6      	bne.n	8008906 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800893a:	2200      	movs	r2, #0
 800893c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800893e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008942:	2b01      	cmp	r3, #1
 8008944:	d107      	bne.n	8008956 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008948:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800894c:	4619      	mov	r1, r3
 800894e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008950:	f7f9 fd34 	bl	80023bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008954:	e002      	b.n	800895c <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8008956:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008958:	f7ff fa24 	bl	8007da4 <HAL_UART_RxCpltCallback>
}
 800895c:	bf00      	nop
 800895e:	3770      	adds	r7, #112	; 0x70
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008970:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2201      	movs	r2, #1
 8008976:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800897c:	2b01      	cmp	r3, #1
 800897e:	d109      	bne.n	8008994 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008986:	085b      	lsrs	r3, r3, #1
 8008988:	b29b      	uxth	r3, r3
 800898a:	4619      	mov	r1, r3
 800898c:	68f8      	ldr	r0, [r7, #12]
 800898e:	f7f9 fd15 	bl	80023bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008992:	e002      	b.n	800899a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008994:	68f8      	ldr	r0, [r7, #12]
 8008996:	f7ff fa0f 	bl	8007db8 <HAL_UART_RxHalfCpltCallback>
}
 800899a:	bf00      	nop
 800899c:	3710      	adds	r7, #16
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b086      	sub	sp, #24
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ae:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089b4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089bc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089c8:	2b80      	cmp	r3, #128	; 0x80
 80089ca:	d109      	bne.n	80089e0 <UART_DMAError+0x3e>
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	2b21      	cmp	r3, #33	; 0x21
 80089d0:	d106      	bne.n	80089e0 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	2200      	movs	r2, #0
 80089d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80089da:	6978      	ldr	r0, [r7, #20]
 80089dc:	f7ff fea4 	bl	8008728 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ea:	2b40      	cmp	r3, #64	; 0x40
 80089ec:	d109      	bne.n	8008a02 <UART_DMAError+0x60>
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2b22      	cmp	r3, #34	; 0x22
 80089f2:	d106      	bne.n	8008a02 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80089fc:	6978      	ldr	r0, [r7, #20]
 80089fe:	f7ff feb9 	bl	8008774 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a08:	f043 0210 	orr.w	r2, r3, #16
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a12:	6978      	ldr	r0, [r7, #20]
 8008a14:	f7ff f9da 	bl	8007dcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a18:	bf00      	nop
 8008a1a:	3718      	adds	r7, #24
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2200      	movs	r2, #0
 8008a32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	f7ff f9c4 	bl	8007dcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a44:	bf00      	nop
 8008a46:	3710      	adds	r7, #16
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b08f      	sub	sp, #60	; 0x3c
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a58:	2b21      	cmp	r3, #33	; 0x21
 8008a5a:	d14c      	bne.n	8008af6 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d132      	bne.n	8008ace <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a6e:	6a3b      	ldr	r3, [r7, #32]
 8008a70:	e853 3f00 	ldrex	r3, [r3]
 8008a74:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a7c:	637b      	str	r3, [r7, #52]	; 0x34
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	461a      	mov	r2, r3
 8008a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a88:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a8e:	e841 2300 	strex	r3, r2, [r1]
 8008a92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d1e6      	bne.n	8008a68 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	e853 3f00 	ldrex	r3, [r3]
 8008aa6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008aae:	633b      	str	r3, [r7, #48]	; 0x30
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab8:	61bb      	str	r3, [r7, #24]
 8008aba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008abc:	6979      	ldr	r1, [r7, #20]
 8008abe:	69ba      	ldr	r2, [r7, #24]
 8008ac0:	e841 2300 	strex	r3, r2, [r1]
 8008ac4:	613b      	str	r3, [r7, #16]
   return(result);
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d1e6      	bne.n	8008a9a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008acc:	e013      	b.n	8008af6 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ad2:	781a      	ldrb	r2, [r3, #0]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ade:	1c5a      	adds	r2, r3, #1
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	3b01      	subs	r3, #1
 8008aee:	b29a      	uxth	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8008af6:	bf00      	nop
 8008af8:	373c      	adds	r7, #60	; 0x3c
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr

08008b02 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008b02:	b480      	push	{r7}
 8008b04:	b091      	sub	sp, #68	; 0x44
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b0e:	2b21      	cmp	r3, #33	; 0x21
 8008b10:	d151      	bne.n	8008bb6 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d132      	bne.n	8008b84 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b26:	e853 3f00 	ldrex	r3, [r3]
 8008b2a:	623b      	str	r3, [r7, #32]
   return(result);
 8008b2c:	6a3b      	ldr	r3, [r7, #32]
 8008b2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b32:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	461a      	mov	r2, r3
 8008b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b3c:	633b      	str	r3, [r7, #48]	; 0x30
 8008b3e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b44:	e841 2300 	strex	r3, r2, [r1]
 8008b48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d1e6      	bne.n	8008b1e <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	e853 3f00 	ldrex	r3, [r3]
 8008b5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b64:	637b      	str	r3, [r7, #52]	; 0x34
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b6e:	61fb      	str	r3, [r7, #28]
 8008b70:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b72:	69b9      	ldr	r1, [r7, #24]
 8008b74:	69fa      	ldr	r2, [r7, #28]
 8008b76:	e841 2300 	strex	r3, r2, [r1]
 8008b7a:	617b      	str	r3, [r7, #20]
   return(result);
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d1e6      	bne.n	8008b50 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008b82:	e018      	b.n	8008bb6 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b88:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b8c:	881b      	ldrh	r3, [r3, #0]
 8008b8e:	461a      	mov	r2, r3
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b98:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b9e:	1c9a      	adds	r2, r3, #2
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	3b01      	subs	r3, #1
 8008bae:	b29a      	uxth	r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8008bb6:	bf00      	nop
 8008bb8:	3744      	adds	r7, #68	; 0x44
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr

08008bc2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b088      	sub	sp, #32
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	e853 3f00 	ldrex	r3, [r3]
 8008bd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bde:	61fb      	str	r3, [r7, #28]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	461a      	mov	r2, r3
 8008be6:	69fb      	ldr	r3, [r7, #28]
 8008be8:	61bb      	str	r3, [r7, #24]
 8008bea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bec:	6979      	ldr	r1, [r7, #20]
 8008bee:	69ba      	ldr	r2, [r7, #24]
 8008bf0:	e841 2300 	strex	r3, r2, [r1]
 8008bf4:	613b      	str	r3, [r7, #16]
   return(result);
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d1e6      	bne.n	8008bca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2220      	movs	r2, #32
 8008c00:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f7ff f8c1 	bl	8007d90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c0e:	bf00      	nop
 8008c10:	3720      	adds	r7, #32
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}

08008c16 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c16:	b580      	push	{r7, lr}
 8008c18:	b08c      	sub	sp, #48	; 0x30
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	60f8      	str	r0, [r7, #12]
 8008c1e:	60b9      	str	r1, [r7, #8]
 8008c20:	4613      	mov	r3, r2
 8008c22:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c2a:	2b20      	cmp	r3, #32
 8008c2c:	d142      	bne.n	8008cb4 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d002      	beq.n	8008c3a <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8008c34:	88fb      	ldrh	r3, [r7, #6]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d101      	bne.n	8008c3e <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e03b      	b.n	8008cb6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2201      	movs	r2, #1
 8008c42:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2200      	movs	r2, #0
 8008c48:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008c4a:	88fb      	ldrh	r3, [r7, #6]
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	68b9      	ldr	r1, [r7, #8]
 8008c50:	68f8      	ldr	r0, [r7, #12]
 8008c52:	f7ff fcc9 	bl	80085e8 <UART_Start_Receive_DMA>
 8008c56:	4603      	mov	r3, r0
 8008c58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008c5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d124      	bne.n	8008cae <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d11d      	bne.n	8008ca8 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	2210      	movs	r2, #16
 8008c72:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	e853 3f00 	ldrex	r3, [r3]
 8008c80:	617b      	str	r3, [r7, #20]
   return(result);
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	f043 0310 	orr.w	r3, r3, #16
 8008c88:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	461a      	mov	r2, r3
 8008c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c92:	627b      	str	r3, [r7, #36]	; 0x24
 8008c94:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c96:	6a39      	ldr	r1, [r7, #32]
 8008c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c9a:	e841 2300 	strex	r3, r2, [r1]
 8008c9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d1e6      	bne.n	8008c74 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8008ca6:	e002      	b.n	8008cae <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8008cae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008cb2:	e000      	b.n	8008cb6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008cb4:	2302      	movs	r3, #2
  }
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3730      	adds	r7, #48	; 0x30
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
	...

08008cc0 <arm_pid_init_f32>:
 8008cc0:	ed90 7a08 	vldr	s14, [r0, #32]
 8008cc4:	edd0 7a06 	vldr	s15, [r0, #24]
 8008cc8:	ed90 6a07 	vldr	s12, [r0, #28]
 8008ccc:	eef1 6a67 	vneg.f32	s13, s15
 8008cd0:	ed80 7a02 	vstr	s14, [r0, #8]
 8008cd4:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008cd8:	ee37 6a07 	vadd.f32	s12, s14, s14
 8008cdc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008ce0:	ee36 7ac6 	vsub.f32	s14, s13, s12
 8008ce4:	edc0 7a00 	vstr	s15, [r0]
 8008ce8:	ed80 7a01 	vstr	s14, [r0, #4]
 8008cec:	b901      	cbnz	r1, 8008cf0 <arm_pid_init_f32+0x30>
 8008cee:	4770      	bx	lr
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	60c3      	str	r3, [r0, #12]
 8008cf4:	6103      	str	r3, [r0, #16]
 8008cf6:	6143      	str	r3, [r0, #20]
 8008cf8:	4770      	bx	lr
 8008cfa:	bf00      	nop

08008cfc <__cvt>:
 8008cfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d00:	ec55 4b10 	vmov	r4, r5, d0
 8008d04:	2d00      	cmp	r5, #0
 8008d06:	460e      	mov	r6, r1
 8008d08:	4619      	mov	r1, r3
 8008d0a:	462b      	mov	r3, r5
 8008d0c:	bfbb      	ittet	lt
 8008d0e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008d12:	461d      	movlt	r5, r3
 8008d14:	2300      	movge	r3, #0
 8008d16:	232d      	movlt	r3, #45	; 0x2d
 8008d18:	700b      	strb	r3, [r1, #0]
 8008d1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d1c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008d20:	4691      	mov	r9, r2
 8008d22:	f023 0820 	bic.w	r8, r3, #32
 8008d26:	bfbc      	itt	lt
 8008d28:	4622      	movlt	r2, r4
 8008d2a:	4614      	movlt	r4, r2
 8008d2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d30:	d005      	beq.n	8008d3e <__cvt+0x42>
 8008d32:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008d36:	d100      	bne.n	8008d3a <__cvt+0x3e>
 8008d38:	3601      	adds	r6, #1
 8008d3a:	2102      	movs	r1, #2
 8008d3c:	e000      	b.n	8008d40 <__cvt+0x44>
 8008d3e:	2103      	movs	r1, #3
 8008d40:	ab03      	add	r3, sp, #12
 8008d42:	9301      	str	r3, [sp, #4]
 8008d44:	ab02      	add	r3, sp, #8
 8008d46:	9300      	str	r3, [sp, #0]
 8008d48:	ec45 4b10 	vmov	d0, r4, r5
 8008d4c:	4653      	mov	r3, sl
 8008d4e:	4632      	mov	r2, r6
 8008d50:	f001 f8ae 	bl	8009eb0 <_dtoa_r>
 8008d54:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008d58:	4607      	mov	r7, r0
 8008d5a:	d102      	bne.n	8008d62 <__cvt+0x66>
 8008d5c:	f019 0f01 	tst.w	r9, #1
 8008d60:	d022      	beq.n	8008da8 <__cvt+0xac>
 8008d62:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d66:	eb07 0906 	add.w	r9, r7, r6
 8008d6a:	d110      	bne.n	8008d8e <__cvt+0x92>
 8008d6c:	783b      	ldrb	r3, [r7, #0]
 8008d6e:	2b30      	cmp	r3, #48	; 0x30
 8008d70:	d10a      	bne.n	8008d88 <__cvt+0x8c>
 8008d72:	2200      	movs	r2, #0
 8008d74:	2300      	movs	r3, #0
 8008d76:	4620      	mov	r0, r4
 8008d78:	4629      	mov	r1, r5
 8008d7a:	f7f7 fec5 	bl	8000b08 <__aeabi_dcmpeq>
 8008d7e:	b918      	cbnz	r0, 8008d88 <__cvt+0x8c>
 8008d80:	f1c6 0601 	rsb	r6, r6, #1
 8008d84:	f8ca 6000 	str.w	r6, [sl]
 8008d88:	f8da 3000 	ldr.w	r3, [sl]
 8008d8c:	4499      	add	r9, r3
 8008d8e:	2200      	movs	r2, #0
 8008d90:	2300      	movs	r3, #0
 8008d92:	4620      	mov	r0, r4
 8008d94:	4629      	mov	r1, r5
 8008d96:	f7f7 feb7 	bl	8000b08 <__aeabi_dcmpeq>
 8008d9a:	b108      	cbz	r0, 8008da0 <__cvt+0xa4>
 8008d9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008da0:	2230      	movs	r2, #48	; 0x30
 8008da2:	9b03      	ldr	r3, [sp, #12]
 8008da4:	454b      	cmp	r3, r9
 8008da6:	d307      	bcc.n	8008db8 <__cvt+0xbc>
 8008da8:	9b03      	ldr	r3, [sp, #12]
 8008daa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008dac:	1bdb      	subs	r3, r3, r7
 8008dae:	4638      	mov	r0, r7
 8008db0:	6013      	str	r3, [r2, #0]
 8008db2:	b004      	add	sp, #16
 8008db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008db8:	1c59      	adds	r1, r3, #1
 8008dba:	9103      	str	r1, [sp, #12]
 8008dbc:	701a      	strb	r2, [r3, #0]
 8008dbe:	e7f0      	b.n	8008da2 <__cvt+0xa6>

08008dc0 <__exponent>:
 8008dc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	2900      	cmp	r1, #0
 8008dc6:	bfb8      	it	lt
 8008dc8:	4249      	neglt	r1, r1
 8008dca:	f803 2b02 	strb.w	r2, [r3], #2
 8008dce:	bfb4      	ite	lt
 8008dd0:	222d      	movlt	r2, #45	; 0x2d
 8008dd2:	222b      	movge	r2, #43	; 0x2b
 8008dd4:	2909      	cmp	r1, #9
 8008dd6:	7042      	strb	r2, [r0, #1]
 8008dd8:	dd2a      	ble.n	8008e30 <__exponent+0x70>
 8008dda:	f10d 0207 	add.w	r2, sp, #7
 8008dde:	4617      	mov	r7, r2
 8008de0:	260a      	movs	r6, #10
 8008de2:	4694      	mov	ip, r2
 8008de4:	fb91 f5f6 	sdiv	r5, r1, r6
 8008de8:	fb06 1415 	mls	r4, r6, r5, r1
 8008dec:	3430      	adds	r4, #48	; 0x30
 8008dee:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008df2:	460c      	mov	r4, r1
 8008df4:	2c63      	cmp	r4, #99	; 0x63
 8008df6:	f102 32ff 	add.w	r2, r2, #4294967295
 8008dfa:	4629      	mov	r1, r5
 8008dfc:	dcf1      	bgt.n	8008de2 <__exponent+0x22>
 8008dfe:	3130      	adds	r1, #48	; 0x30
 8008e00:	f1ac 0402 	sub.w	r4, ip, #2
 8008e04:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008e08:	1c41      	adds	r1, r0, #1
 8008e0a:	4622      	mov	r2, r4
 8008e0c:	42ba      	cmp	r2, r7
 8008e0e:	d30a      	bcc.n	8008e26 <__exponent+0x66>
 8008e10:	f10d 0209 	add.w	r2, sp, #9
 8008e14:	eba2 020c 	sub.w	r2, r2, ip
 8008e18:	42bc      	cmp	r4, r7
 8008e1a:	bf88      	it	hi
 8008e1c:	2200      	movhi	r2, #0
 8008e1e:	4413      	add	r3, r2
 8008e20:	1a18      	subs	r0, r3, r0
 8008e22:	b003      	add	sp, #12
 8008e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e26:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008e2a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008e2e:	e7ed      	b.n	8008e0c <__exponent+0x4c>
 8008e30:	2330      	movs	r3, #48	; 0x30
 8008e32:	3130      	adds	r1, #48	; 0x30
 8008e34:	7083      	strb	r3, [r0, #2]
 8008e36:	70c1      	strb	r1, [r0, #3]
 8008e38:	1d03      	adds	r3, r0, #4
 8008e3a:	e7f1      	b.n	8008e20 <__exponent+0x60>

08008e3c <_printf_float>:
 8008e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e40:	ed2d 8b02 	vpush	{d8}
 8008e44:	b08d      	sub	sp, #52	; 0x34
 8008e46:	460c      	mov	r4, r1
 8008e48:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008e4c:	4616      	mov	r6, r2
 8008e4e:	461f      	mov	r7, r3
 8008e50:	4605      	mov	r5, r0
 8008e52:	f000 ff25 	bl	8009ca0 <_localeconv_r>
 8008e56:	f8d0 a000 	ldr.w	sl, [r0]
 8008e5a:	4650      	mov	r0, sl
 8008e5c:	f7f7 fa28 	bl	80002b0 <strlen>
 8008e60:	2300      	movs	r3, #0
 8008e62:	930a      	str	r3, [sp, #40]	; 0x28
 8008e64:	6823      	ldr	r3, [r4, #0]
 8008e66:	9305      	str	r3, [sp, #20]
 8008e68:	f8d8 3000 	ldr.w	r3, [r8]
 8008e6c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008e70:	3307      	adds	r3, #7
 8008e72:	f023 0307 	bic.w	r3, r3, #7
 8008e76:	f103 0208 	add.w	r2, r3, #8
 8008e7a:	f8c8 2000 	str.w	r2, [r8]
 8008e7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008e86:	9307      	str	r3, [sp, #28]
 8008e88:	f8cd 8018 	str.w	r8, [sp, #24]
 8008e8c:	ee08 0a10 	vmov	s16, r0
 8008e90:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008e94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e98:	4b9e      	ldr	r3, [pc, #632]	; (8009114 <_printf_float+0x2d8>)
 8008e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e9e:	f7f7 fe65 	bl	8000b6c <__aeabi_dcmpun>
 8008ea2:	bb88      	cbnz	r0, 8008f08 <_printf_float+0xcc>
 8008ea4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ea8:	4b9a      	ldr	r3, [pc, #616]	; (8009114 <_printf_float+0x2d8>)
 8008eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8008eae:	f7f7 fe3f 	bl	8000b30 <__aeabi_dcmple>
 8008eb2:	bb48      	cbnz	r0, 8008f08 <_printf_float+0xcc>
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	4640      	mov	r0, r8
 8008eba:	4649      	mov	r1, r9
 8008ebc:	f7f7 fe2e 	bl	8000b1c <__aeabi_dcmplt>
 8008ec0:	b110      	cbz	r0, 8008ec8 <_printf_float+0x8c>
 8008ec2:	232d      	movs	r3, #45	; 0x2d
 8008ec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ec8:	4a93      	ldr	r2, [pc, #588]	; (8009118 <_printf_float+0x2dc>)
 8008eca:	4b94      	ldr	r3, [pc, #592]	; (800911c <_printf_float+0x2e0>)
 8008ecc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008ed0:	bf94      	ite	ls
 8008ed2:	4690      	movls	r8, r2
 8008ed4:	4698      	movhi	r8, r3
 8008ed6:	2303      	movs	r3, #3
 8008ed8:	6123      	str	r3, [r4, #16]
 8008eda:	9b05      	ldr	r3, [sp, #20]
 8008edc:	f023 0304 	bic.w	r3, r3, #4
 8008ee0:	6023      	str	r3, [r4, #0]
 8008ee2:	f04f 0900 	mov.w	r9, #0
 8008ee6:	9700      	str	r7, [sp, #0]
 8008ee8:	4633      	mov	r3, r6
 8008eea:	aa0b      	add	r2, sp, #44	; 0x2c
 8008eec:	4621      	mov	r1, r4
 8008eee:	4628      	mov	r0, r5
 8008ef0:	f000 f9da 	bl	80092a8 <_printf_common>
 8008ef4:	3001      	adds	r0, #1
 8008ef6:	f040 8090 	bne.w	800901a <_printf_float+0x1de>
 8008efa:	f04f 30ff 	mov.w	r0, #4294967295
 8008efe:	b00d      	add	sp, #52	; 0x34
 8008f00:	ecbd 8b02 	vpop	{d8}
 8008f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f08:	4642      	mov	r2, r8
 8008f0a:	464b      	mov	r3, r9
 8008f0c:	4640      	mov	r0, r8
 8008f0e:	4649      	mov	r1, r9
 8008f10:	f7f7 fe2c 	bl	8000b6c <__aeabi_dcmpun>
 8008f14:	b140      	cbz	r0, 8008f28 <_printf_float+0xec>
 8008f16:	464b      	mov	r3, r9
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	bfbc      	itt	lt
 8008f1c:	232d      	movlt	r3, #45	; 0x2d
 8008f1e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008f22:	4a7f      	ldr	r2, [pc, #508]	; (8009120 <_printf_float+0x2e4>)
 8008f24:	4b7f      	ldr	r3, [pc, #508]	; (8009124 <_printf_float+0x2e8>)
 8008f26:	e7d1      	b.n	8008ecc <_printf_float+0x90>
 8008f28:	6863      	ldr	r3, [r4, #4]
 8008f2a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008f2e:	9206      	str	r2, [sp, #24]
 8008f30:	1c5a      	adds	r2, r3, #1
 8008f32:	d13f      	bne.n	8008fb4 <_printf_float+0x178>
 8008f34:	2306      	movs	r3, #6
 8008f36:	6063      	str	r3, [r4, #4]
 8008f38:	9b05      	ldr	r3, [sp, #20]
 8008f3a:	6861      	ldr	r1, [r4, #4]
 8008f3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008f40:	2300      	movs	r3, #0
 8008f42:	9303      	str	r3, [sp, #12]
 8008f44:	ab0a      	add	r3, sp, #40	; 0x28
 8008f46:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008f4a:	ab09      	add	r3, sp, #36	; 0x24
 8008f4c:	ec49 8b10 	vmov	d0, r8, r9
 8008f50:	9300      	str	r3, [sp, #0]
 8008f52:	6022      	str	r2, [r4, #0]
 8008f54:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008f58:	4628      	mov	r0, r5
 8008f5a:	f7ff fecf 	bl	8008cfc <__cvt>
 8008f5e:	9b06      	ldr	r3, [sp, #24]
 8008f60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f62:	2b47      	cmp	r3, #71	; 0x47
 8008f64:	4680      	mov	r8, r0
 8008f66:	d108      	bne.n	8008f7a <_printf_float+0x13e>
 8008f68:	1cc8      	adds	r0, r1, #3
 8008f6a:	db02      	blt.n	8008f72 <_printf_float+0x136>
 8008f6c:	6863      	ldr	r3, [r4, #4]
 8008f6e:	4299      	cmp	r1, r3
 8008f70:	dd41      	ble.n	8008ff6 <_printf_float+0x1ba>
 8008f72:	f1ab 0302 	sub.w	r3, fp, #2
 8008f76:	fa5f fb83 	uxtb.w	fp, r3
 8008f7a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008f7e:	d820      	bhi.n	8008fc2 <_printf_float+0x186>
 8008f80:	3901      	subs	r1, #1
 8008f82:	465a      	mov	r2, fp
 8008f84:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008f88:	9109      	str	r1, [sp, #36]	; 0x24
 8008f8a:	f7ff ff19 	bl	8008dc0 <__exponent>
 8008f8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f90:	1813      	adds	r3, r2, r0
 8008f92:	2a01      	cmp	r2, #1
 8008f94:	4681      	mov	r9, r0
 8008f96:	6123      	str	r3, [r4, #16]
 8008f98:	dc02      	bgt.n	8008fa0 <_printf_float+0x164>
 8008f9a:	6822      	ldr	r2, [r4, #0]
 8008f9c:	07d2      	lsls	r2, r2, #31
 8008f9e:	d501      	bpl.n	8008fa4 <_printf_float+0x168>
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	6123      	str	r3, [r4, #16]
 8008fa4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d09c      	beq.n	8008ee6 <_printf_float+0xaa>
 8008fac:	232d      	movs	r3, #45	; 0x2d
 8008fae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fb2:	e798      	b.n	8008ee6 <_printf_float+0xaa>
 8008fb4:	9a06      	ldr	r2, [sp, #24]
 8008fb6:	2a47      	cmp	r2, #71	; 0x47
 8008fb8:	d1be      	bne.n	8008f38 <_printf_float+0xfc>
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d1bc      	bne.n	8008f38 <_printf_float+0xfc>
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	e7b9      	b.n	8008f36 <_printf_float+0xfa>
 8008fc2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008fc6:	d118      	bne.n	8008ffa <_printf_float+0x1be>
 8008fc8:	2900      	cmp	r1, #0
 8008fca:	6863      	ldr	r3, [r4, #4]
 8008fcc:	dd0b      	ble.n	8008fe6 <_printf_float+0x1aa>
 8008fce:	6121      	str	r1, [r4, #16]
 8008fd0:	b913      	cbnz	r3, 8008fd8 <_printf_float+0x19c>
 8008fd2:	6822      	ldr	r2, [r4, #0]
 8008fd4:	07d0      	lsls	r0, r2, #31
 8008fd6:	d502      	bpl.n	8008fde <_printf_float+0x1a2>
 8008fd8:	3301      	adds	r3, #1
 8008fda:	440b      	add	r3, r1
 8008fdc:	6123      	str	r3, [r4, #16]
 8008fde:	65a1      	str	r1, [r4, #88]	; 0x58
 8008fe0:	f04f 0900 	mov.w	r9, #0
 8008fe4:	e7de      	b.n	8008fa4 <_printf_float+0x168>
 8008fe6:	b913      	cbnz	r3, 8008fee <_printf_float+0x1b2>
 8008fe8:	6822      	ldr	r2, [r4, #0]
 8008fea:	07d2      	lsls	r2, r2, #31
 8008fec:	d501      	bpl.n	8008ff2 <_printf_float+0x1b6>
 8008fee:	3302      	adds	r3, #2
 8008ff0:	e7f4      	b.n	8008fdc <_printf_float+0x1a0>
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	e7f2      	b.n	8008fdc <_printf_float+0x1a0>
 8008ff6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008ffa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ffc:	4299      	cmp	r1, r3
 8008ffe:	db05      	blt.n	800900c <_printf_float+0x1d0>
 8009000:	6823      	ldr	r3, [r4, #0]
 8009002:	6121      	str	r1, [r4, #16]
 8009004:	07d8      	lsls	r0, r3, #31
 8009006:	d5ea      	bpl.n	8008fde <_printf_float+0x1a2>
 8009008:	1c4b      	adds	r3, r1, #1
 800900a:	e7e7      	b.n	8008fdc <_printf_float+0x1a0>
 800900c:	2900      	cmp	r1, #0
 800900e:	bfd4      	ite	le
 8009010:	f1c1 0202 	rsble	r2, r1, #2
 8009014:	2201      	movgt	r2, #1
 8009016:	4413      	add	r3, r2
 8009018:	e7e0      	b.n	8008fdc <_printf_float+0x1a0>
 800901a:	6823      	ldr	r3, [r4, #0]
 800901c:	055a      	lsls	r2, r3, #21
 800901e:	d407      	bmi.n	8009030 <_printf_float+0x1f4>
 8009020:	6923      	ldr	r3, [r4, #16]
 8009022:	4642      	mov	r2, r8
 8009024:	4631      	mov	r1, r6
 8009026:	4628      	mov	r0, r5
 8009028:	47b8      	blx	r7
 800902a:	3001      	adds	r0, #1
 800902c:	d12c      	bne.n	8009088 <_printf_float+0x24c>
 800902e:	e764      	b.n	8008efa <_printf_float+0xbe>
 8009030:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009034:	f240 80e0 	bls.w	80091f8 <_printf_float+0x3bc>
 8009038:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800903c:	2200      	movs	r2, #0
 800903e:	2300      	movs	r3, #0
 8009040:	f7f7 fd62 	bl	8000b08 <__aeabi_dcmpeq>
 8009044:	2800      	cmp	r0, #0
 8009046:	d034      	beq.n	80090b2 <_printf_float+0x276>
 8009048:	4a37      	ldr	r2, [pc, #220]	; (8009128 <_printf_float+0x2ec>)
 800904a:	2301      	movs	r3, #1
 800904c:	4631      	mov	r1, r6
 800904e:	4628      	mov	r0, r5
 8009050:	47b8      	blx	r7
 8009052:	3001      	adds	r0, #1
 8009054:	f43f af51 	beq.w	8008efa <_printf_float+0xbe>
 8009058:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800905c:	429a      	cmp	r2, r3
 800905e:	db02      	blt.n	8009066 <_printf_float+0x22a>
 8009060:	6823      	ldr	r3, [r4, #0]
 8009062:	07d8      	lsls	r0, r3, #31
 8009064:	d510      	bpl.n	8009088 <_printf_float+0x24c>
 8009066:	ee18 3a10 	vmov	r3, s16
 800906a:	4652      	mov	r2, sl
 800906c:	4631      	mov	r1, r6
 800906e:	4628      	mov	r0, r5
 8009070:	47b8      	blx	r7
 8009072:	3001      	adds	r0, #1
 8009074:	f43f af41 	beq.w	8008efa <_printf_float+0xbe>
 8009078:	f04f 0800 	mov.w	r8, #0
 800907c:	f104 091a 	add.w	r9, r4, #26
 8009080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009082:	3b01      	subs	r3, #1
 8009084:	4543      	cmp	r3, r8
 8009086:	dc09      	bgt.n	800909c <_printf_float+0x260>
 8009088:	6823      	ldr	r3, [r4, #0]
 800908a:	079b      	lsls	r3, r3, #30
 800908c:	f100 8107 	bmi.w	800929e <_printf_float+0x462>
 8009090:	68e0      	ldr	r0, [r4, #12]
 8009092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009094:	4298      	cmp	r0, r3
 8009096:	bfb8      	it	lt
 8009098:	4618      	movlt	r0, r3
 800909a:	e730      	b.n	8008efe <_printf_float+0xc2>
 800909c:	2301      	movs	r3, #1
 800909e:	464a      	mov	r2, r9
 80090a0:	4631      	mov	r1, r6
 80090a2:	4628      	mov	r0, r5
 80090a4:	47b8      	blx	r7
 80090a6:	3001      	adds	r0, #1
 80090a8:	f43f af27 	beq.w	8008efa <_printf_float+0xbe>
 80090ac:	f108 0801 	add.w	r8, r8, #1
 80090b0:	e7e6      	b.n	8009080 <_printf_float+0x244>
 80090b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	dc39      	bgt.n	800912c <_printf_float+0x2f0>
 80090b8:	4a1b      	ldr	r2, [pc, #108]	; (8009128 <_printf_float+0x2ec>)
 80090ba:	2301      	movs	r3, #1
 80090bc:	4631      	mov	r1, r6
 80090be:	4628      	mov	r0, r5
 80090c0:	47b8      	blx	r7
 80090c2:	3001      	adds	r0, #1
 80090c4:	f43f af19 	beq.w	8008efa <_printf_float+0xbe>
 80090c8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80090cc:	4313      	orrs	r3, r2
 80090ce:	d102      	bne.n	80090d6 <_printf_float+0x29a>
 80090d0:	6823      	ldr	r3, [r4, #0]
 80090d2:	07d9      	lsls	r1, r3, #31
 80090d4:	d5d8      	bpl.n	8009088 <_printf_float+0x24c>
 80090d6:	ee18 3a10 	vmov	r3, s16
 80090da:	4652      	mov	r2, sl
 80090dc:	4631      	mov	r1, r6
 80090de:	4628      	mov	r0, r5
 80090e0:	47b8      	blx	r7
 80090e2:	3001      	adds	r0, #1
 80090e4:	f43f af09 	beq.w	8008efa <_printf_float+0xbe>
 80090e8:	f04f 0900 	mov.w	r9, #0
 80090ec:	f104 0a1a 	add.w	sl, r4, #26
 80090f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090f2:	425b      	negs	r3, r3
 80090f4:	454b      	cmp	r3, r9
 80090f6:	dc01      	bgt.n	80090fc <_printf_float+0x2c0>
 80090f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090fa:	e792      	b.n	8009022 <_printf_float+0x1e6>
 80090fc:	2301      	movs	r3, #1
 80090fe:	4652      	mov	r2, sl
 8009100:	4631      	mov	r1, r6
 8009102:	4628      	mov	r0, r5
 8009104:	47b8      	blx	r7
 8009106:	3001      	adds	r0, #1
 8009108:	f43f aef7 	beq.w	8008efa <_printf_float+0xbe>
 800910c:	f109 0901 	add.w	r9, r9, #1
 8009110:	e7ee      	b.n	80090f0 <_printf_float+0x2b4>
 8009112:	bf00      	nop
 8009114:	7fefffff 	.word	0x7fefffff
 8009118:	0800dd80 	.word	0x0800dd80
 800911c:	0800dd84 	.word	0x0800dd84
 8009120:	0800dd88 	.word	0x0800dd88
 8009124:	0800dd8c 	.word	0x0800dd8c
 8009128:	0800e118 	.word	0x0800e118
 800912c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800912e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009130:	429a      	cmp	r2, r3
 8009132:	bfa8      	it	ge
 8009134:	461a      	movge	r2, r3
 8009136:	2a00      	cmp	r2, #0
 8009138:	4691      	mov	r9, r2
 800913a:	dc37      	bgt.n	80091ac <_printf_float+0x370>
 800913c:	f04f 0b00 	mov.w	fp, #0
 8009140:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009144:	f104 021a 	add.w	r2, r4, #26
 8009148:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800914a:	9305      	str	r3, [sp, #20]
 800914c:	eba3 0309 	sub.w	r3, r3, r9
 8009150:	455b      	cmp	r3, fp
 8009152:	dc33      	bgt.n	80091bc <_printf_float+0x380>
 8009154:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009158:	429a      	cmp	r2, r3
 800915a:	db3b      	blt.n	80091d4 <_printf_float+0x398>
 800915c:	6823      	ldr	r3, [r4, #0]
 800915e:	07da      	lsls	r2, r3, #31
 8009160:	d438      	bmi.n	80091d4 <_printf_float+0x398>
 8009162:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009166:	eba2 0903 	sub.w	r9, r2, r3
 800916a:	9b05      	ldr	r3, [sp, #20]
 800916c:	1ad2      	subs	r2, r2, r3
 800916e:	4591      	cmp	r9, r2
 8009170:	bfa8      	it	ge
 8009172:	4691      	movge	r9, r2
 8009174:	f1b9 0f00 	cmp.w	r9, #0
 8009178:	dc35      	bgt.n	80091e6 <_printf_float+0x3aa>
 800917a:	f04f 0800 	mov.w	r8, #0
 800917e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009182:	f104 0a1a 	add.w	sl, r4, #26
 8009186:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800918a:	1a9b      	subs	r3, r3, r2
 800918c:	eba3 0309 	sub.w	r3, r3, r9
 8009190:	4543      	cmp	r3, r8
 8009192:	f77f af79 	ble.w	8009088 <_printf_float+0x24c>
 8009196:	2301      	movs	r3, #1
 8009198:	4652      	mov	r2, sl
 800919a:	4631      	mov	r1, r6
 800919c:	4628      	mov	r0, r5
 800919e:	47b8      	blx	r7
 80091a0:	3001      	adds	r0, #1
 80091a2:	f43f aeaa 	beq.w	8008efa <_printf_float+0xbe>
 80091a6:	f108 0801 	add.w	r8, r8, #1
 80091aa:	e7ec      	b.n	8009186 <_printf_float+0x34a>
 80091ac:	4613      	mov	r3, r2
 80091ae:	4631      	mov	r1, r6
 80091b0:	4642      	mov	r2, r8
 80091b2:	4628      	mov	r0, r5
 80091b4:	47b8      	blx	r7
 80091b6:	3001      	adds	r0, #1
 80091b8:	d1c0      	bne.n	800913c <_printf_float+0x300>
 80091ba:	e69e      	b.n	8008efa <_printf_float+0xbe>
 80091bc:	2301      	movs	r3, #1
 80091be:	4631      	mov	r1, r6
 80091c0:	4628      	mov	r0, r5
 80091c2:	9205      	str	r2, [sp, #20]
 80091c4:	47b8      	blx	r7
 80091c6:	3001      	adds	r0, #1
 80091c8:	f43f ae97 	beq.w	8008efa <_printf_float+0xbe>
 80091cc:	9a05      	ldr	r2, [sp, #20]
 80091ce:	f10b 0b01 	add.w	fp, fp, #1
 80091d2:	e7b9      	b.n	8009148 <_printf_float+0x30c>
 80091d4:	ee18 3a10 	vmov	r3, s16
 80091d8:	4652      	mov	r2, sl
 80091da:	4631      	mov	r1, r6
 80091dc:	4628      	mov	r0, r5
 80091de:	47b8      	blx	r7
 80091e0:	3001      	adds	r0, #1
 80091e2:	d1be      	bne.n	8009162 <_printf_float+0x326>
 80091e4:	e689      	b.n	8008efa <_printf_float+0xbe>
 80091e6:	9a05      	ldr	r2, [sp, #20]
 80091e8:	464b      	mov	r3, r9
 80091ea:	4442      	add	r2, r8
 80091ec:	4631      	mov	r1, r6
 80091ee:	4628      	mov	r0, r5
 80091f0:	47b8      	blx	r7
 80091f2:	3001      	adds	r0, #1
 80091f4:	d1c1      	bne.n	800917a <_printf_float+0x33e>
 80091f6:	e680      	b.n	8008efa <_printf_float+0xbe>
 80091f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091fa:	2a01      	cmp	r2, #1
 80091fc:	dc01      	bgt.n	8009202 <_printf_float+0x3c6>
 80091fe:	07db      	lsls	r3, r3, #31
 8009200:	d53a      	bpl.n	8009278 <_printf_float+0x43c>
 8009202:	2301      	movs	r3, #1
 8009204:	4642      	mov	r2, r8
 8009206:	4631      	mov	r1, r6
 8009208:	4628      	mov	r0, r5
 800920a:	47b8      	blx	r7
 800920c:	3001      	adds	r0, #1
 800920e:	f43f ae74 	beq.w	8008efa <_printf_float+0xbe>
 8009212:	ee18 3a10 	vmov	r3, s16
 8009216:	4652      	mov	r2, sl
 8009218:	4631      	mov	r1, r6
 800921a:	4628      	mov	r0, r5
 800921c:	47b8      	blx	r7
 800921e:	3001      	adds	r0, #1
 8009220:	f43f ae6b 	beq.w	8008efa <_printf_float+0xbe>
 8009224:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009228:	2200      	movs	r2, #0
 800922a:	2300      	movs	r3, #0
 800922c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009230:	f7f7 fc6a 	bl	8000b08 <__aeabi_dcmpeq>
 8009234:	b9d8      	cbnz	r0, 800926e <_printf_float+0x432>
 8009236:	f10a 33ff 	add.w	r3, sl, #4294967295
 800923a:	f108 0201 	add.w	r2, r8, #1
 800923e:	4631      	mov	r1, r6
 8009240:	4628      	mov	r0, r5
 8009242:	47b8      	blx	r7
 8009244:	3001      	adds	r0, #1
 8009246:	d10e      	bne.n	8009266 <_printf_float+0x42a>
 8009248:	e657      	b.n	8008efa <_printf_float+0xbe>
 800924a:	2301      	movs	r3, #1
 800924c:	4652      	mov	r2, sl
 800924e:	4631      	mov	r1, r6
 8009250:	4628      	mov	r0, r5
 8009252:	47b8      	blx	r7
 8009254:	3001      	adds	r0, #1
 8009256:	f43f ae50 	beq.w	8008efa <_printf_float+0xbe>
 800925a:	f108 0801 	add.w	r8, r8, #1
 800925e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009260:	3b01      	subs	r3, #1
 8009262:	4543      	cmp	r3, r8
 8009264:	dcf1      	bgt.n	800924a <_printf_float+0x40e>
 8009266:	464b      	mov	r3, r9
 8009268:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800926c:	e6da      	b.n	8009024 <_printf_float+0x1e8>
 800926e:	f04f 0800 	mov.w	r8, #0
 8009272:	f104 0a1a 	add.w	sl, r4, #26
 8009276:	e7f2      	b.n	800925e <_printf_float+0x422>
 8009278:	2301      	movs	r3, #1
 800927a:	4642      	mov	r2, r8
 800927c:	e7df      	b.n	800923e <_printf_float+0x402>
 800927e:	2301      	movs	r3, #1
 8009280:	464a      	mov	r2, r9
 8009282:	4631      	mov	r1, r6
 8009284:	4628      	mov	r0, r5
 8009286:	47b8      	blx	r7
 8009288:	3001      	adds	r0, #1
 800928a:	f43f ae36 	beq.w	8008efa <_printf_float+0xbe>
 800928e:	f108 0801 	add.w	r8, r8, #1
 8009292:	68e3      	ldr	r3, [r4, #12]
 8009294:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009296:	1a5b      	subs	r3, r3, r1
 8009298:	4543      	cmp	r3, r8
 800929a:	dcf0      	bgt.n	800927e <_printf_float+0x442>
 800929c:	e6f8      	b.n	8009090 <_printf_float+0x254>
 800929e:	f04f 0800 	mov.w	r8, #0
 80092a2:	f104 0919 	add.w	r9, r4, #25
 80092a6:	e7f4      	b.n	8009292 <_printf_float+0x456>

080092a8 <_printf_common>:
 80092a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092ac:	4616      	mov	r6, r2
 80092ae:	4699      	mov	r9, r3
 80092b0:	688a      	ldr	r2, [r1, #8]
 80092b2:	690b      	ldr	r3, [r1, #16]
 80092b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80092b8:	4293      	cmp	r3, r2
 80092ba:	bfb8      	it	lt
 80092bc:	4613      	movlt	r3, r2
 80092be:	6033      	str	r3, [r6, #0]
 80092c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80092c4:	4607      	mov	r7, r0
 80092c6:	460c      	mov	r4, r1
 80092c8:	b10a      	cbz	r2, 80092ce <_printf_common+0x26>
 80092ca:	3301      	adds	r3, #1
 80092cc:	6033      	str	r3, [r6, #0]
 80092ce:	6823      	ldr	r3, [r4, #0]
 80092d0:	0699      	lsls	r1, r3, #26
 80092d2:	bf42      	ittt	mi
 80092d4:	6833      	ldrmi	r3, [r6, #0]
 80092d6:	3302      	addmi	r3, #2
 80092d8:	6033      	strmi	r3, [r6, #0]
 80092da:	6825      	ldr	r5, [r4, #0]
 80092dc:	f015 0506 	ands.w	r5, r5, #6
 80092e0:	d106      	bne.n	80092f0 <_printf_common+0x48>
 80092e2:	f104 0a19 	add.w	sl, r4, #25
 80092e6:	68e3      	ldr	r3, [r4, #12]
 80092e8:	6832      	ldr	r2, [r6, #0]
 80092ea:	1a9b      	subs	r3, r3, r2
 80092ec:	42ab      	cmp	r3, r5
 80092ee:	dc26      	bgt.n	800933e <_printf_common+0x96>
 80092f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80092f4:	1e13      	subs	r3, r2, #0
 80092f6:	6822      	ldr	r2, [r4, #0]
 80092f8:	bf18      	it	ne
 80092fa:	2301      	movne	r3, #1
 80092fc:	0692      	lsls	r2, r2, #26
 80092fe:	d42b      	bmi.n	8009358 <_printf_common+0xb0>
 8009300:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009304:	4649      	mov	r1, r9
 8009306:	4638      	mov	r0, r7
 8009308:	47c0      	blx	r8
 800930a:	3001      	adds	r0, #1
 800930c:	d01e      	beq.n	800934c <_printf_common+0xa4>
 800930e:	6823      	ldr	r3, [r4, #0]
 8009310:	6922      	ldr	r2, [r4, #16]
 8009312:	f003 0306 	and.w	r3, r3, #6
 8009316:	2b04      	cmp	r3, #4
 8009318:	bf02      	ittt	eq
 800931a:	68e5      	ldreq	r5, [r4, #12]
 800931c:	6833      	ldreq	r3, [r6, #0]
 800931e:	1aed      	subeq	r5, r5, r3
 8009320:	68a3      	ldr	r3, [r4, #8]
 8009322:	bf0c      	ite	eq
 8009324:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009328:	2500      	movne	r5, #0
 800932a:	4293      	cmp	r3, r2
 800932c:	bfc4      	itt	gt
 800932e:	1a9b      	subgt	r3, r3, r2
 8009330:	18ed      	addgt	r5, r5, r3
 8009332:	2600      	movs	r6, #0
 8009334:	341a      	adds	r4, #26
 8009336:	42b5      	cmp	r5, r6
 8009338:	d11a      	bne.n	8009370 <_printf_common+0xc8>
 800933a:	2000      	movs	r0, #0
 800933c:	e008      	b.n	8009350 <_printf_common+0xa8>
 800933e:	2301      	movs	r3, #1
 8009340:	4652      	mov	r2, sl
 8009342:	4649      	mov	r1, r9
 8009344:	4638      	mov	r0, r7
 8009346:	47c0      	blx	r8
 8009348:	3001      	adds	r0, #1
 800934a:	d103      	bne.n	8009354 <_printf_common+0xac>
 800934c:	f04f 30ff 	mov.w	r0, #4294967295
 8009350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009354:	3501      	adds	r5, #1
 8009356:	e7c6      	b.n	80092e6 <_printf_common+0x3e>
 8009358:	18e1      	adds	r1, r4, r3
 800935a:	1c5a      	adds	r2, r3, #1
 800935c:	2030      	movs	r0, #48	; 0x30
 800935e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009362:	4422      	add	r2, r4
 8009364:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009368:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800936c:	3302      	adds	r3, #2
 800936e:	e7c7      	b.n	8009300 <_printf_common+0x58>
 8009370:	2301      	movs	r3, #1
 8009372:	4622      	mov	r2, r4
 8009374:	4649      	mov	r1, r9
 8009376:	4638      	mov	r0, r7
 8009378:	47c0      	blx	r8
 800937a:	3001      	adds	r0, #1
 800937c:	d0e6      	beq.n	800934c <_printf_common+0xa4>
 800937e:	3601      	adds	r6, #1
 8009380:	e7d9      	b.n	8009336 <_printf_common+0x8e>
	...

08009384 <_printf_i>:
 8009384:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009388:	7e0f      	ldrb	r7, [r1, #24]
 800938a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800938c:	2f78      	cmp	r7, #120	; 0x78
 800938e:	4691      	mov	r9, r2
 8009390:	4680      	mov	r8, r0
 8009392:	460c      	mov	r4, r1
 8009394:	469a      	mov	sl, r3
 8009396:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800939a:	d807      	bhi.n	80093ac <_printf_i+0x28>
 800939c:	2f62      	cmp	r7, #98	; 0x62
 800939e:	d80a      	bhi.n	80093b6 <_printf_i+0x32>
 80093a0:	2f00      	cmp	r7, #0
 80093a2:	f000 80d4 	beq.w	800954e <_printf_i+0x1ca>
 80093a6:	2f58      	cmp	r7, #88	; 0x58
 80093a8:	f000 80c0 	beq.w	800952c <_printf_i+0x1a8>
 80093ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80093b4:	e03a      	b.n	800942c <_printf_i+0xa8>
 80093b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80093ba:	2b15      	cmp	r3, #21
 80093bc:	d8f6      	bhi.n	80093ac <_printf_i+0x28>
 80093be:	a101      	add	r1, pc, #4	; (adr r1, 80093c4 <_printf_i+0x40>)
 80093c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80093c4:	0800941d 	.word	0x0800941d
 80093c8:	08009431 	.word	0x08009431
 80093cc:	080093ad 	.word	0x080093ad
 80093d0:	080093ad 	.word	0x080093ad
 80093d4:	080093ad 	.word	0x080093ad
 80093d8:	080093ad 	.word	0x080093ad
 80093dc:	08009431 	.word	0x08009431
 80093e0:	080093ad 	.word	0x080093ad
 80093e4:	080093ad 	.word	0x080093ad
 80093e8:	080093ad 	.word	0x080093ad
 80093ec:	080093ad 	.word	0x080093ad
 80093f0:	08009535 	.word	0x08009535
 80093f4:	0800945d 	.word	0x0800945d
 80093f8:	080094ef 	.word	0x080094ef
 80093fc:	080093ad 	.word	0x080093ad
 8009400:	080093ad 	.word	0x080093ad
 8009404:	08009557 	.word	0x08009557
 8009408:	080093ad 	.word	0x080093ad
 800940c:	0800945d 	.word	0x0800945d
 8009410:	080093ad 	.word	0x080093ad
 8009414:	080093ad 	.word	0x080093ad
 8009418:	080094f7 	.word	0x080094f7
 800941c:	682b      	ldr	r3, [r5, #0]
 800941e:	1d1a      	adds	r2, r3, #4
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	602a      	str	r2, [r5, #0]
 8009424:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009428:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800942c:	2301      	movs	r3, #1
 800942e:	e09f      	b.n	8009570 <_printf_i+0x1ec>
 8009430:	6820      	ldr	r0, [r4, #0]
 8009432:	682b      	ldr	r3, [r5, #0]
 8009434:	0607      	lsls	r7, r0, #24
 8009436:	f103 0104 	add.w	r1, r3, #4
 800943a:	6029      	str	r1, [r5, #0]
 800943c:	d501      	bpl.n	8009442 <_printf_i+0xbe>
 800943e:	681e      	ldr	r6, [r3, #0]
 8009440:	e003      	b.n	800944a <_printf_i+0xc6>
 8009442:	0646      	lsls	r6, r0, #25
 8009444:	d5fb      	bpl.n	800943e <_printf_i+0xba>
 8009446:	f9b3 6000 	ldrsh.w	r6, [r3]
 800944a:	2e00      	cmp	r6, #0
 800944c:	da03      	bge.n	8009456 <_printf_i+0xd2>
 800944e:	232d      	movs	r3, #45	; 0x2d
 8009450:	4276      	negs	r6, r6
 8009452:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009456:	485a      	ldr	r0, [pc, #360]	; (80095c0 <_printf_i+0x23c>)
 8009458:	230a      	movs	r3, #10
 800945a:	e012      	b.n	8009482 <_printf_i+0xfe>
 800945c:	682b      	ldr	r3, [r5, #0]
 800945e:	6820      	ldr	r0, [r4, #0]
 8009460:	1d19      	adds	r1, r3, #4
 8009462:	6029      	str	r1, [r5, #0]
 8009464:	0605      	lsls	r5, r0, #24
 8009466:	d501      	bpl.n	800946c <_printf_i+0xe8>
 8009468:	681e      	ldr	r6, [r3, #0]
 800946a:	e002      	b.n	8009472 <_printf_i+0xee>
 800946c:	0641      	lsls	r1, r0, #25
 800946e:	d5fb      	bpl.n	8009468 <_printf_i+0xe4>
 8009470:	881e      	ldrh	r6, [r3, #0]
 8009472:	4853      	ldr	r0, [pc, #332]	; (80095c0 <_printf_i+0x23c>)
 8009474:	2f6f      	cmp	r7, #111	; 0x6f
 8009476:	bf0c      	ite	eq
 8009478:	2308      	moveq	r3, #8
 800947a:	230a      	movne	r3, #10
 800947c:	2100      	movs	r1, #0
 800947e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009482:	6865      	ldr	r5, [r4, #4]
 8009484:	60a5      	str	r5, [r4, #8]
 8009486:	2d00      	cmp	r5, #0
 8009488:	bfa2      	ittt	ge
 800948a:	6821      	ldrge	r1, [r4, #0]
 800948c:	f021 0104 	bicge.w	r1, r1, #4
 8009490:	6021      	strge	r1, [r4, #0]
 8009492:	b90e      	cbnz	r6, 8009498 <_printf_i+0x114>
 8009494:	2d00      	cmp	r5, #0
 8009496:	d04b      	beq.n	8009530 <_printf_i+0x1ac>
 8009498:	4615      	mov	r5, r2
 800949a:	fbb6 f1f3 	udiv	r1, r6, r3
 800949e:	fb03 6711 	mls	r7, r3, r1, r6
 80094a2:	5dc7      	ldrb	r7, [r0, r7]
 80094a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80094a8:	4637      	mov	r7, r6
 80094aa:	42bb      	cmp	r3, r7
 80094ac:	460e      	mov	r6, r1
 80094ae:	d9f4      	bls.n	800949a <_printf_i+0x116>
 80094b0:	2b08      	cmp	r3, #8
 80094b2:	d10b      	bne.n	80094cc <_printf_i+0x148>
 80094b4:	6823      	ldr	r3, [r4, #0]
 80094b6:	07de      	lsls	r6, r3, #31
 80094b8:	d508      	bpl.n	80094cc <_printf_i+0x148>
 80094ba:	6923      	ldr	r3, [r4, #16]
 80094bc:	6861      	ldr	r1, [r4, #4]
 80094be:	4299      	cmp	r1, r3
 80094c0:	bfde      	ittt	le
 80094c2:	2330      	movle	r3, #48	; 0x30
 80094c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80094c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80094cc:	1b52      	subs	r2, r2, r5
 80094ce:	6122      	str	r2, [r4, #16]
 80094d0:	f8cd a000 	str.w	sl, [sp]
 80094d4:	464b      	mov	r3, r9
 80094d6:	aa03      	add	r2, sp, #12
 80094d8:	4621      	mov	r1, r4
 80094da:	4640      	mov	r0, r8
 80094dc:	f7ff fee4 	bl	80092a8 <_printf_common>
 80094e0:	3001      	adds	r0, #1
 80094e2:	d14a      	bne.n	800957a <_printf_i+0x1f6>
 80094e4:	f04f 30ff 	mov.w	r0, #4294967295
 80094e8:	b004      	add	sp, #16
 80094ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094ee:	6823      	ldr	r3, [r4, #0]
 80094f0:	f043 0320 	orr.w	r3, r3, #32
 80094f4:	6023      	str	r3, [r4, #0]
 80094f6:	4833      	ldr	r0, [pc, #204]	; (80095c4 <_printf_i+0x240>)
 80094f8:	2778      	movs	r7, #120	; 0x78
 80094fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80094fe:	6823      	ldr	r3, [r4, #0]
 8009500:	6829      	ldr	r1, [r5, #0]
 8009502:	061f      	lsls	r7, r3, #24
 8009504:	f851 6b04 	ldr.w	r6, [r1], #4
 8009508:	d402      	bmi.n	8009510 <_printf_i+0x18c>
 800950a:	065f      	lsls	r7, r3, #25
 800950c:	bf48      	it	mi
 800950e:	b2b6      	uxthmi	r6, r6
 8009510:	07df      	lsls	r7, r3, #31
 8009512:	bf48      	it	mi
 8009514:	f043 0320 	orrmi.w	r3, r3, #32
 8009518:	6029      	str	r1, [r5, #0]
 800951a:	bf48      	it	mi
 800951c:	6023      	strmi	r3, [r4, #0]
 800951e:	b91e      	cbnz	r6, 8009528 <_printf_i+0x1a4>
 8009520:	6823      	ldr	r3, [r4, #0]
 8009522:	f023 0320 	bic.w	r3, r3, #32
 8009526:	6023      	str	r3, [r4, #0]
 8009528:	2310      	movs	r3, #16
 800952a:	e7a7      	b.n	800947c <_printf_i+0xf8>
 800952c:	4824      	ldr	r0, [pc, #144]	; (80095c0 <_printf_i+0x23c>)
 800952e:	e7e4      	b.n	80094fa <_printf_i+0x176>
 8009530:	4615      	mov	r5, r2
 8009532:	e7bd      	b.n	80094b0 <_printf_i+0x12c>
 8009534:	682b      	ldr	r3, [r5, #0]
 8009536:	6826      	ldr	r6, [r4, #0]
 8009538:	6961      	ldr	r1, [r4, #20]
 800953a:	1d18      	adds	r0, r3, #4
 800953c:	6028      	str	r0, [r5, #0]
 800953e:	0635      	lsls	r5, r6, #24
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	d501      	bpl.n	8009548 <_printf_i+0x1c4>
 8009544:	6019      	str	r1, [r3, #0]
 8009546:	e002      	b.n	800954e <_printf_i+0x1ca>
 8009548:	0670      	lsls	r0, r6, #25
 800954a:	d5fb      	bpl.n	8009544 <_printf_i+0x1c0>
 800954c:	8019      	strh	r1, [r3, #0]
 800954e:	2300      	movs	r3, #0
 8009550:	6123      	str	r3, [r4, #16]
 8009552:	4615      	mov	r5, r2
 8009554:	e7bc      	b.n	80094d0 <_printf_i+0x14c>
 8009556:	682b      	ldr	r3, [r5, #0]
 8009558:	1d1a      	adds	r2, r3, #4
 800955a:	602a      	str	r2, [r5, #0]
 800955c:	681d      	ldr	r5, [r3, #0]
 800955e:	6862      	ldr	r2, [r4, #4]
 8009560:	2100      	movs	r1, #0
 8009562:	4628      	mov	r0, r5
 8009564:	f7f6 fe54 	bl	8000210 <memchr>
 8009568:	b108      	cbz	r0, 800956e <_printf_i+0x1ea>
 800956a:	1b40      	subs	r0, r0, r5
 800956c:	6060      	str	r0, [r4, #4]
 800956e:	6863      	ldr	r3, [r4, #4]
 8009570:	6123      	str	r3, [r4, #16]
 8009572:	2300      	movs	r3, #0
 8009574:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009578:	e7aa      	b.n	80094d0 <_printf_i+0x14c>
 800957a:	6923      	ldr	r3, [r4, #16]
 800957c:	462a      	mov	r2, r5
 800957e:	4649      	mov	r1, r9
 8009580:	4640      	mov	r0, r8
 8009582:	47d0      	blx	sl
 8009584:	3001      	adds	r0, #1
 8009586:	d0ad      	beq.n	80094e4 <_printf_i+0x160>
 8009588:	6823      	ldr	r3, [r4, #0]
 800958a:	079b      	lsls	r3, r3, #30
 800958c:	d413      	bmi.n	80095b6 <_printf_i+0x232>
 800958e:	68e0      	ldr	r0, [r4, #12]
 8009590:	9b03      	ldr	r3, [sp, #12]
 8009592:	4298      	cmp	r0, r3
 8009594:	bfb8      	it	lt
 8009596:	4618      	movlt	r0, r3
 8009598:	e7a6      	b.n	80094e8 <_printf_i+0x164>
 800959a:	2301      	movs	r3, #1
 800959c:	4632      	mov	r2, r6
 800959e:	4649      	mov	r1, r9
 80095a0:	4640      	mov	r0, r8
 80095a2:	47d0      	blx	sl
 80095a4:	3001      	adds	r0, #1
 80095a6:	d09d      	beq.n	80094e4 <_printf_i+0x160>
 80095a8:	3501      	adds	r5, #1
 80095aa:	68e3      	ldr	r3, [r4, #12]
 80095ac:	9903      	ldr	r1, [sp, #12]
 80095ae:	1a5b      	subs	r3, r3, r1
 80095b0:	42ab      	cmp	r3, r5
 80095b2:	dcf2      	bgt.n	800959a <_printf_i+0x216>
 80095b4:	e7eb      	b.n	800958e <_printf_i+0x20a>
 80095b6:	2500      	movs	r5, #0
 80095b8:	f104 0619 	add.w	r6, r4, #25
 80095bc:	e7f5      	b.n	80095aa <_printf_i+0x226>
 80095be:	bf00      	nop
 80095c0:	0800dd90 	.word	0x0800dd90
 80095c4:	0800dda1 	.word	0x0800dda1

080095c8 <_scanf_float>:
 80095c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095cc:	b087      	sub	sp, #28
 80095ce:	4617      	mov	r7, r2
 80095d0:	9303      	str	r3, [sp, #12]
 80095d2:	688b      	ldr	r3, [r1, #8]
 80095d4:	1e5a      	subs	r2, r3, #1
 80095d6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80095da:	bf83      	ittte	hi
 80095dc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80095e0:	195b      	addhi	r3, r3, r5
 80095e2:	9302      	strhi	r3, [sp, #8]
 80095e4:	2300      	movls	r3, #0
 80095e6:	bf86      	itte	hi
 80095e8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80095ec:	608b      	strhi	r3, [r1, #8]
 80095ee:	9302      	strls	r3, [sp, #8]
 80095f0:	680b      	ldr	r3, [r1, #0]
 80095f2:	468b      	mov	fp, r1
 80095f4:	2500      	movs	r5, #0
 80095f6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80095fa:	f84b 3b1c 	str.w	r3, [fp], #28
 80095fe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009602:	4680      	mov	r8, r0
 8009604:	460c      	mov	r4, r1
 8009606:	465e      	mov	r6, fp
 8009608:	46aa      	mov	sl, r5
 800960a:	46a9      	mov	r9, r5
 800960c:	9501      	str	r5, [sp, #4]
 800960e:	68a2      	ldr	r2, [r4, #8]
 8009610:	b152      	cbz	r2, 8009628 <_scanf_float+0x60>
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	2b4e      	cmp	r3, #78	; 0x4e
 8009618:	d864      	bhi.n	80096e4 <_scanf_float+0x11c>
 800961a:	2b40      	cmp	r3, #64	; 0x40
 800961c:	d83c      	bhi.n	8009698 <_scanf_float+0xd0>
 800961e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009622:	b2c8      	uxtb	r0, r1
 8009624:	280e      	cmp	r0, #14
 8009626:	d93a      	bls.n	800969e <_scanf_float+0xd6>
 8009628:	f1b9 0f00 	cmp.w	r9, #0
 800962c:	d003      	beq.n	8009636 <_scanf_float+0x6e>
 800962e:	6823      	ldr	r3, [r4, #0]
 8009630:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009634:	6023      	str	r3, [r4, #0]
 8009636:	f10a 3aff 	add.w	sl, sl, #4294967295
 800963a:	f1ba 0f01 	cmp.w	sl, #1
 800963e:	f200 8113 	bhi.w	8009868 <_scanf_float+0x2a0>
 8009642:	455e      	cmp	r6, fp
 8009644:	f200 8105 	bhi.w	8009852 <_scanf_float+0x28a>
 8009648:	2501      	movs	r5, #1
 800964a:	4628      	mov	r0, r5
 800964c:	b007      	add	sp, #28
 800964e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009652:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009656:	2a0d      	cmp	r2, #13
 8009658:	d8e6      	bhi.n	8009628 <_scanf_float+0x60>
 800965a:	a101      	add	r1, pc, #4	; (adr r1, 8009660 <_scanf_float+0x98>)
 800965c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009660:	0800979f 	.word	0x0800979f
 8009664:	08009629 	.word	0x08009629
 8009668:	08009629 	.word	0x08009629
 800966c:	08009629 	.word	0x08009629
 8009670:	080097ff 	.word	0x080097ff
 8009674:	080097d7 	.word	0x080097d7
 8009678:	08009629 	.word	0x08009629
 800967c:	08009629 	.word	0x08009629
 8009680:	080097ad 	.word	0x080097ad
 8009684:	08009629 	.word	0x08009629
 8009688:	08009629 	.word	0x08009629
 800968c:	08009629 	.word	0x08009629
 8009690:	08009629 	.word	0x08009629
 8009694:	08009765 	.word	0x08009765
 8009698:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800969c:	e7db      	b.n	8009656 <_scanf_float+0x8e>
 800969e:	290e      	cmp	r1, #14
 80096a0:	d8c2      	bhi.n	8009628 <_scanf_float+0x60>
 80096a2:	a001      	add	r0, pc, #4	; (adr r0, 80096a8 <_scanf_float+0xe0>)
 80096a4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80096a8:	08009757 	.word	0x08009757
 80096ac:	08009629 	.word	0x08009629
 80096b0:	08009757 	.word	0x08009757
 80096b4:	080097eb 	.word	0x080097eb
 80096b8:	08009629 	.word	0x08009629
 80096bc:	08009705 	.word	0x08009705
 80096c0:	08009741 	.word	0x08009741
 80096c4:	08009741 	.word	0x08009741
 80096c8:	08009741 	.word	0x08009741
 80096cc:	08009741 	.word	0x08009741
 80096d0:	08009741 	.word	0x08009741
 80096d4:	08009741 	.word	0x08009741
 80096d8:	08009741 	.word	0x08009741
 80096dc:	08009741 	.word	0x08009741
 80096e0:	08009741 	.word	0x08009741
 80096e4:	2b6e      	cmp	r3, #110	; 0x6e
 80096e6:	d809      	bhi.n	80096fc <_scanf_float+0x134>
 80096e8:	2b60      	cmp	r3, #96	; 0x60
 80096ea:	d8b2      	bhi.n	8009652 <_scanf_float+0x8a>
 80096ec:	2b54      	cmp	r3, #84	; 0x54
 80096ee:	d077      	beq.n	80097e0 <_scanf_float+0x218>
 80096f0:	2b59      	cmp	r3, #89	; 0x59
 80096f2:	d199      	bne.n	8009628 <_scanf_float+0x60>
 80096f4:	2d07      	cmp	r5, #7
 80096f6:	d197      	bne.n	8009628 <_scanf_float+0x60>
 80096f8:	2508      	movs	r5, #8
 80096fa:	e029      	b.n	8009750 <_scanf_float+0x188>
 80096fc:	2b74      	cmp	r3, #116	; 0x74
 80096fe:	d06f      	beq.n	80097e0 <_scanf_float+0x218>
 8009700:	2b79      	cmp	r3, #121	; 0x79
 8009702:	e7f6      	b.n	80096f2 <_scanf_float+0x12a>
 8009704:	6821      	ldr	r1, [r4, #0]
 8009706:	05c8      	lsls	r0, r1, #23
 8009708:	d51a      	bpl.n	8009740 <_scanf_float+0x178>
 800970a:	9b02      	ldr	r3, [sp, #8]
 800970c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009710:	6021      	str	r1, [r4, #0]
 8009712:	f109 0901 	add.w	r9, r9, #1
 8009716:	b11b      	cbz	r3, 8009720 <_scanf_float+0x158>
 8009718:	3b01      	subs	r3, #1
 800971a:	3201      	adds	r2, #1
 800971c:	9302      	str	r3, [sp, #8]
 800971e:	60a2      	str	r2, [r4, #8]
 8009720:	68a3      	ldr	r3, [r4, #8]
 8009722:	3b01      	subs	r3, #1
 8009724:	60a3      	str	r3, [r4, #8]
 8009726:	6923      	ldr	r3, [r4, #16]
 8009728:	3301      	adds	r3, #1
 800972a:	6123      	str	r3, [r4, #16]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	3b01      	subs	r3, #1
 8009730:	2b00      	cmp	r3, #0
 8009732:	607b      	str	r3, [r7, #4]
 8009734:	f340 8084 	ble.w	8009840 <_scanf_float+0x278>
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	3301      	adds	r3, #1
 800973c:	603b      	str	r3, [r7, #0]
 800973e:	e766      	b.n	800960e <_scanf_float+0x46>
 8009740:	eb1a 0f05 	cmn.w	sl, r5
 8009744:	f47f af70 	bne.w	8009628 <_scanf_float+0x60>
 8009748:	6822      	ldr	r2, [r4, #0]
 800974a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800974e:	6022      	str	r2, [r4, #0]
 8009750:	f806 3b01 	strb.w	r3, [r6], #1
 8009754:	e7e4      	b.n	8009720 <_scanf_float+0x158>
 8009756:	6822      	ldr	r2, [r4, #0]
 8009758:	0610      	lsls	r0, r2, #24
 800975a:	f57f af65 	bpl.w	8009628 <_scanf_float+0x60>
 800975e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009762:	e7f4      	b.n	800974e <_scanf_float+0x186>
 8009764:	f1ba 0f00 	cmp.w	sl, #0
 8009768:	d10e      	bne.n	8009788 <_scanf_float+0x1c0>
 800976a:	f1b9 0f00 	cmp.w	r9, #0
 800976e:	d10e      	bne.n	800978e <_scanf_float+0x1c6>
 8009770:	6822      	ldr	r2, [r4, #0]
 8009772:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009776:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800977a:	d108      	bne.n	800978e <_scanf_float+0x1c6>
 800977c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009780:	6022      	str	r2, [r4, #0]
 8009782:	f04f 0a01 	mov.w	sl, #1
 8009786:	e7e3      	b.n	8009750 <_scanf_float+0x188>
 8009788:	f1ba 0f02 	cmp.w	sl, #2
 800978c:	d055      	beq.n	800983a <_scanf_float+0x272>
 800978e:	2d01      	cmp	r5, #1
 8009790:	d002      	beq.n	8009798 <_scanf_float+0x1d0>
 8009792:	2d04      	cmp	r5, #4
 8009794:	f47f af48 	bne.w	8009628 <_scanf_float+0x60>
 8009798:	3501      	adds	r5, #1
 800979a:	b2ed      	uxtb	r5, r5
 800979c:	e7d8      	b.n	8009750 <_scanf_float+0x188>
 800979e:	f1ba 0f01 	cmp.w	sl, #1
 80097a2:	f47f af41 	bne.w	8009628 <_scanf_float+0x60>
 80097a6:	f04f 0a02 	mov.w	sl, #2
 80097aa:	e7d1      	b.n	8009750 <_scanf_float+0x188>
 80097ac:	b97d      	cbnz	r5, 80097ce <_scanf_float+0x206>
 80097ae:	f1b9 0f00 	cmp.w	r9, #0
 80097b2:	f47f af3c 	bne.w	800962e <_scanf_float+0x66>
 80097b6:	6822      	ldr	r2, [r4, #0]
 80097b8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80097bc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80097c0:	f47f af39 	bne.w	8009636 <_scanf_float+0x6e>
 80097c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80097c8:	6022      	str	r2, [r4, #0]
 80097ca:	2501      	movs	r5, #1
 80097cc:	e7c0      	b.n	8009750 <_scanf_float+0x188>
 80097ce:	2d03      	cmp	r5, #3
 80097d0:	d0e2      	beq.n	8009798 <_scanf_float+0x1d0>
 80097d2:	2d05      	cmp	r5, #5
 80097d4:	e7de      	b.n	8009794 <_scanf_float+0x1cc>
 80097d6:	2d02      	cmp	r5, #2
 80097d8:	f47f af26 	bne.w	8009628 <_scanf_float+0x60>
 80097dc:	2503      	movs	r5, #3
 80097de:	e7b7      	b.n	8009750 <_scanf_float+0x188>
 80097e0:	2d06      	cmp	r5, #6
 80097e2:	f47f af21 	bne.w	8009628 <_scanf_float+0x60>
 80097e6:	2507      	movs	r5, #7
 80097e8:	e7b2      	b.n	8009750 <_scanf_float+0x188>
 80097ea:	6822      	ldr	r2, [r4, #0]
 80097ec:	0591      	lsls	r1, r2, #22
 80097ee:	f57f af1b 	bpl.w	8009628 <_scanf_float+0x60>
 80097f2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80097f6:	6022      	str	r2, [r4, #0]
 80097f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80097fc:	e7a8      	b.n	8009750 <_scanf_float+0x188>
 80097fe:	6822      	ldr	r2, [r4, #0]
 8009800:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009804:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009808:	d006      	beq.n	8009818 <_scanf_float+0x250>
 800980a:	0550      	lsls	r0, r2, #21
 800980c:	f57f af0c 	bpl.w	8009628 <_scanf_float+0x60>
 8009810:	f1b9 0f00 	cmp.w	r9, #0
 8009814:	f43f af0f 	beq.w	8009636 <_scanf_float+0x6e>
 8009818:	0591      	lsls	r1, r2, #22
 800981a:	bf58      	it	pl
 800981c:	9901      	ldrpl	r1, [sp, #4]
 800981e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009822:	bf58      	it	pl
 8009824:	eba9 0101 	subpl.w	r1, r9, r1
 8009828:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800982c:	bf58      	it	pl
 800982e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009832:	6022      	str	r2, [r4, #0]
 8009834:	f04f 0900 	mov.w	r9, #0
 8009838:	e78a      	b.n	8009750 <_scanf_float+0x188>
 800983a:	f04f 0a03 	mov.w	sl, #3
 800983e:	e787      	b.n	8009750 <_scanf_float+0x188>
 8009840:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009844:	4639      	mov	r1, r7
 8009846:	4640      	mov	r0, r8
 8009848:	4798      	blx	r3
 800984a:	2800      	cmp	r0, #0
 800984c:	f43f aedf 	beq.w	800960e <_scanf_float+0x46>
 8009850:	e6ea      	b.n	8009628 <_scanf_float+0x60>
 8009852:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009856:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800985a:	463a      	mov	r2, r7
 800985c:	4640      	mov	r0, r8
 800985e:	4798      	blx	r3
 8009860:	6923      	ldr	r3, [r4, #16]
 8009862:	3b01      	subs	r3, #1
 8009864:	6123      	str	r3, [r4, #16]
 8009866:	e6ec      	b.n	8009642 <_scanf_float+0x7a>
 8009868:	1e6b      	subs	r3, r5, #1
 800986a:	2b06      	cmp	r3, #6
 800986c:	d825      	bhi.n	80098ba <_scanf_float+0x2f2>
 800986e:	2d02      	cmp	r5, #2
 8009870:	d836      	bhi.n	80098e0 <_scanf_float+0x318>
 8009872:	455e      	cmp	r6, fp
 8009874:	f67f aee8 	bls.w	8009648 <_scanf_float+0x80>
 8009878:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800987c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009880:	463a      	mov	r2, r7
 8009882:	4640      	mov	r0, r8
 8009884:	4798      	blx	r3
 8009886:	6923      	ldr	r3, [r4, #16]
 8009888:	3b01      	subs	r3, #1
 800988a:	6123      	str	r3, [r4, #16]
 800988c:	e7f1      	b.n	8009872 <_scanf_float+0x2aa>
 800988e:	9802      	ldr	r0, [sp, #8]
 8009890:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009894:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009898:	9002      	str	r0, [sp, #8]
 800989a:	463a      	mov	r2, r7
 800989c:	4640      	mov	r0, r8
 800989e:	4798      	blx	r3
 80098a0:	6923      	ldr	r3, [r4, #16]
 80098a2:	3b01      	subs	r3, #1
 80098a4:	6123      	str	r3, [r4, #16]
 80098a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80098aa:	fa5f fa8a 	uxtb.w	sl, sl
 80098ae:	f1ba 0f02 	cmp.w	sl, #2
 80098b2:	d1ec      	bne.n	800988e <_scanf_float+0x2c6>
 80098b4:	3d03      	subs	r5, #3
 80098b6:	b2ed      	uxtb	r5, r5
 80098b8:	1b76      	subs	r6, r6, r5
 80098ba:	6823      	ldr	r3, [r4, #0]
 80098bc:	05da      	lsls	r2, r3, #23
 80098be:	d52f      	bpl.n	8009920 <_scanf_float+0x358>
 80098c0:	055b      	lsls	r3, r3, #21
 80098c2:	d510      	bpl.n	80098e6 <_scanf_float+0x31e>
 80098c4:	455e      	cmp	r6, fp
 80098c6:	f67f aebf 	bls.w	8009648 <_scanf_float+0x80>
 80098ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80098ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80098d2:	463a      	mov	r2, r7
 80098d4:	4640      	mov	r0, r8
 80098d6:	4798      	blx	r3
 80098d8:	6923      	ldr	r3, [r4, #16]
 80098da:	3b01      	subs	r3, #1
 80098dc:	6123      	str	r3, [r4, #16]
 80098de:	e7f1      	b.n	80098c4 <_scanf_float+0x2fc>
 80098e0:	46aa      	mov	sl, r5
 80098e2:	9602      	str	r6, [sp, #8]
 80098e4:	e7df      	b.n	80098a6 <_scanf_float+0x2de>
 80098e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80098ea:	6923      	ldr	r3, [r4, #16]
 80098ec:	2965      	cmp	r1, #101	; 0x65
 80098ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80098f2:	f106 35ff 	add.w	r5, r6, #4294967295
 80098f6:	6123      	str	r3, [r4, #16]
 80098f8:	d00c      	beq.n	8009914 <_scanf_float+0x34c>
 80098fa:	2945      	cmp	r1, #69	; 0x45
 80098fc:	d00a      	beq.n	8009914 <_scanf_float+0x34c>
 80098fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009902:	463a      	mov	r2, r7
 8009904:	4640      	mov	r0, r8
 8009906:	4798      	blx	r3
 8009908:	6923      	ldr	r3, [r4, #16]
 800990a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800990e:	3b01      	subs	r3, #1
 8009910:	1eb5      	subs	r5, r6, #2
 8009912:	6123      	str	r3, [r4, #16]
 8009914:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009918:	463a      	mov	r2, r7
 800991a:	4640      	mov	r0, r8
 800991c:	4798      	blx	r3
 800991e:	462e      	mov	r6, r5
 8009920:	6825      	ldr	r5, [r4, #0]
 8009922:	f015 0510 	ands.w	r5, r5, #16
 8009926:	d158      	bne.n	80099da <_scanf_float+0x412>
 8009928:	7035      	strb	r5, [r6, #0]
 800992a:	6823      	ldr	r3, [r4, #0]
 800992c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009934:	d11c      	bne.n	8009970 <_scanf_float+0x3a8>
 8009936:	9b01      	ldr	r3, [sp, #4]
 8009938:	454b      	cmp	r3, r9
 800993a:	eba3 0209 	sub.w	r2, r3, r9
 800993e:	d124      	bne.n	800998a <_scanf_float+0x3c2>
 8009940:	2200      	movs	r2, #0
 8009942:	4659      	mov	r1, fp
 8009944:	4640      	mov	r0, r8
 8009946:	f002 fc5f 	bl	800c208 <_strtod_r>
 800994a:	9b03      	ldr	r3, [sp, #12]
 800994c:	6821      	ldr	r1, [r4, #0]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f011 0f02 	tst.w	r1, #2
 8009954:	ec57 6b10 	vmov	r6, r7, d0
 8009958:	f103 0204 	add.w	r2, r3, #4
 800995c:	d020      	beq.n	80099a0 <_scanf_float+0x3d8>
 800995e:	9903      	ldr	r1, [sp, #12]
 8009960:	600a      	str	r2, [r1, #0]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	e9c3 6700 	strd	r6, r7, [r3]
 8009968:	68e3      	ldr	r3, [r4, #12]
 800996a:	3301      	adds	r3, #1
 800996c:	60e3      	str	r3, [r4, #12]
 800996e:	e66c      	b.n	800964a <_scanf_float+0x82>
 8009970:	9b04      	ldr	r3, [sp, #16]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d0e4      	beq.n	8009940 <_scanf_float+0x378>
 8009976:	9905      	ldr	r1, [sp, #20]
 8009978:	230a      	movs	r3, #10
 800997a:	462a      	mov	r2, r5
 800997c:	3101      	adds	r1, #1
 800997e:	4640      	mov	r0, r8
 8009980:	f002 fcca 	bl	800c318 <_strtol_r>
 8009984:	9b04      	ldr	r3, [sp, #16]
 8009986:	9e05      	ldr	r6, [sp, #20]
 8009988:	1ac2      	subs	r2, r0, r3
 800998a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800998e:	429e      	cmp	r6, r3
 8009990:	bf28      	it	cs
 8009992:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009996:	4912      	ldr	r1, [pc, #72]	; (80099e0 <_scanf_float+0x418>)
 8009998:	4630      	mov	r0, r6
 800999a:	f000 f8e7 	bl	8009b6c <siprintf>
 800999e:	e7cf      	b.n	8009940 <_scanf_float+0x378>
 80099a0:	f011 0f04 	tst.w	r1, #4
 80099a4:	9903      	ldr	r1, [sp, #12]
 80099a6:	600a      	str	r2, [r1, #0]
 80099a8:	d1db      	bne.n	8009962 <_scanf_float+0x39a>
 80099aa:	f8d3 8000 	ldr.w	r8, [r3]
 80099ae:	ee10 2a10 	vmov	r2, s0
 80099b2:	ee10 0a10 	vmov	r0, s0
 80099b6:	463b      	mov	r3, r7
 80099b8:	4639      	mov	r1, r7
 80099ba:	f7f7 f8d7 	bl	8000b6c <__aeabi_dcmpun>
 80099be:	b128      	cbz	r0, 80099cc <_scanf_float+0x404>
 80099c0:	4808      	ldr	r0, [pc, #32]	; (80099e4 <_scanf_float+0x41c>)
 80099c2:	f000 f9e5 	bl	8009d90 <nanf>
 80099c6:	ed88 0a00 	vstr	s0, [r8]
 80099ca:	e7cd      	b.n	8009968 <_scanf_float+0x3a0>
 80099cc:	4630      	mov	r0, r6
 80099ce:	4639      	mov	r1, r7
 80099d0:	f7f7 f92a 	bl	8000c28 <__aeabi_d2f>
 80099d4:	f8c8 0000 	str.w	r0, [r8]
 80099d8:	e7c6      	b.n	8009968 <_scanf_float+0x3a0>
 80099da:	2500      	movs	r5, #0
 80099dc:	e635      	b.n	800964a <_scanf_float+0x82>
 80099de:	bf00      	nop
 80099e0:	0800ddb2 	.word	0x0800ddb2
 80099e4:	0800e160 	.word	0x0800e160

080099e8 <std>:
 80099e8:	2300      	movs	r3, #0
 80099ea:	b510      	push	{r4, lr}
 80099ec:	4604      	mov	r4, r0
 80099ee:	e9c0 3300 	strd	r3, r3, [r0]
 80099f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099f6:	6083      	str	r3, [r0, #8]
 80099f8:	8181      	strh	r1, [r0, #12]
 80099fa:	6643      	str	r3, [r0, #100]	; 0x64
 80099fc:	81c2      	strh	r2, [r0, #14]
 80099fe:	6183      	str	r3, [r0, #24]
 8009a00:	4619      	mov	r1, r3
 8009a02:	2208      	movs	r2, #8
 8009a04:	305c      	adds	r0, #92	; 0x5c
 8009a06:	f000 f942 	bl	8009c8e <memset>
 8009a0a:	4b0d      	ldr	r3, [pc, #52]	; (8009a40 <std+0x58>)
 8009a0c:	6263      	str	r3, [r4, #36]	; 0x24
 8009a0e:	4b0d      	ldr	r3, [pc, #52]	; (8009a44 <std+0x5c>)
 8009a10:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a12:	4b0d      	ldr	r3, [pc, #52]	; (8009a48 <std+0x60>)
 8009a14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a16:	4b0d      	ldr	r3, [pc, #52]	; (8009a4c <std+0x64>)
 8009a18:	6323      	str	r3, [r4, #48]	; 0x30
 8009a1a:	4b0d      	ldr	r3, [pc, #52]	; (8009a50 <std+0x68>)
 8009a1c:	6224      	str	r4, [r4, #32]
 8009a1e:	429c      	cmp	r4, r3
 8009a20:	d006      	beq.n	8009a30 <std+0x48>
 8009a22:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009a26:	4294      	cmp	r4, r2
 8009a28:	d002      	beq.n	8009a30 <std+0x48>
 8009a2a:	33d0      	adds	r3, #208	; 0xd0
 8009a2c:	429c      	cmp	r4, r3
 8009a2e:	d105      	bne.n	8009a3c <std+0x54>
 8009a30:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a38:	f000 b9a6 	b.w	8009d88 <__retarget_lock_init_recursive>
 8009a3c:	bd10      	pop	{r4, pc}
 8009a3e:	bf00      	nop
 8009a40:	08009c05 	.word	0x08009c05
 8009a44:	08009c2b 	.word	0x08009c2b
 8009a48:	08009c63 	.word	0x08009c63
 8009a4c:	08009c87 	.word	0x08009c87
 8009a50:	200004a4 	.word	0x200004a4

08009a54 <stdio_exit_handler>:
 8009a54:	4a02      	ldr	r2, [pc, #8]	; (8009a60 <stdio_exit_handler+0xc>)
 8009a56:	4903      	ldr	r1, [pc, #12]	; (8009a64 <stdio_exit_handler+0x10>)
 8009a58:	4803      	ldr	r0, [pc, #12]	; (8009a68 <stdio_exit_handler+0x14>)
 8009a5a:	f000 b869 	b.w	8009b30 <_fwalk_sglue>
 8009a5e:	bf00      	nop
 8009a60:	2000000c 	.word	0x2000000c
 8009a64:	0800cd19 	.word	0x0800cd19
 8009a68:	20000018 	.word	0x20000018

08009a6c <cleanup_stdio>:
 8009a6c:	6841      	ldr	r1, [r0, #4]
 8009a6e:	4b0c      	ldr	r3, [pc, #48]	; (8009aa0 <cleanup_stdio+0x34>)
 8009a70:	4299      	cmp	r1, r3
 8009a72:	b510      	push	{r4, lr}
 8009a74:	4604      	mov	r4, r0
 8009a76:	d001      	beq.n	8009a7c <cleanup_stdio+0x10>
 8009a78:	f003 f94e 	bl	800cd18 <_fflush_r>
 8009a7c:	68a1      	ldr	r1, [r4, #8]
 8009a7e:	4b09      	ldr	r3, [pc, #36]	; (8009aa4 <cleanup_stdio+0x38>)
 8009a80:	4299      	cmp	r1, r3
 8009a82:	d002      	beq.n	8009a8a <cleanup_stdio+0x1e>
 8009a84:	4620      	mov	r0, r4
 8009a86:	f003 f947 	bl	800cd18 <_fflush_r>
 8009a8a:	68e1      	ldr	r1, [r4, #12]
 8009a8c:	4b06      	ldr	r3, [pc, #24]	; (8009aa8 <cleanup_stdio+0x3c>)
 8009a8e:	4299      	cmp	r1, r3
 8009a90:	d004      	beq.n	8009a9c <cleanup_stdio+0x30>
 8009a92:	4620      	mov	r0, r4
 8009a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a98:	f003 b93e 	b.w	800cd18 <_fflush_r>
 8009a9c:	bd10      	pop	{r4, pc}
 8009a9e:	bf00      	nop
 8009aa0:	200004a4 	.word	0x200004a4
 8009aa4:	2000050c 	.word	0x2000050c
 8009aa8:	20000574 	.word	0x20000574

08009aac <global_stdio_init.part.0>:
 8009aac:	b510      	push	{r4, lr}
 8009aae:	4b0b      	ldr	r3, [pc, #44]	; (8009adc <global_stdio_init.part.0+0x30>)
 8009ab0:	4c0b      	ldr	r4, [pc, #44]	; (8009ae0 <global_stdio_init.part.0+0x34>)
 8009ab2:	4a0c      	ldr	r2, [pc, #48]	; (8009ae4 <global_stdio_init.part.0+0x38>)
 8009ab4:	601a      	str	r2, [r3, #0]
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	2200      	movs	r2, #0
 8009aba:	2104      	movs	r1, #4
 8009abc:	f7ff ff94 	bl	80099e8 <std>
 8009ac0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	2109      	movs	r1, #9
 8009ac8:	f7ff ff8e 	bl	80099e8 <std>
 8009acc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009ad0:	2202      	movs	r2, #2
 8009ad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ad6:	2112      	movs	r1, #18
 8009ad8:	f7ff bf86 	b.w	80099e8 <std>
 8009adc:	200005dc 	.word	0x200005dc
 8009ae0:	200004a4 	.word	0x200004a4
 8009ae4:	08009a55 	.word	0x08009a55

08009ae8 <__sfp_lock_acquire>:
 8009ae8:	4801      	ldr	r0, [pc, #4]	; (8009af0 <__sfp_lock_acquire+0x8>)
 8009aea:	f000 b94e 	b.w	8009d8a <__retarget_lock_acquire_recursive>
 8009aee:	bf00      	nop
 8009af0:	200005e5 	.word	0x200005e5

08009af4 <__sfp_lock_release>:
 8009af4:	4801      	ldr	r0, [pc, #4]	; (8009afc <__sfp_lock_release+0x8>)
 8009af6:	f000 b949 	b.w	8009d8c <__retarget_lock_release_recursive>
 8009afa:	bf00      	nop
 8009afc:	200005e5 	.word	0x200005e5

08009b00 <__sinit>:
 8009b00:	b510      	push	{r4, lr}
 8009b02:	4604      	mov	r4, r0
 8009b04:	f7ff fff0 	bl	8009ae8 <__sfp_lock_acquire>
 8009b08:	6a23      	ldr	r3, [r4, #32]
 8009b0a:	b11b      	cbz	r3, 8009b14 <__sinit+0x14>
 8009b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b10:	f7ff bff0 	b.w	8009af4 <__sfp_lock_release>
 8009b14:	4b04      	ldr	r3, [pc, #16]	; (8009b28 <__sinit+0x28>)
 8009b16:	6223      	str	r3, [r4, #32]
 8009b18:	4b04      	ldr	r3, [pc, #16]	; (8009b2c <__sinit+0x2c>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d1f5      	bne.n	8009b0c <__sinit+0xc>
 8009b20:	f7ff ffc4 	bl	8009aac <global_stdio_init.part.0>
 8009b24:	e7f2      	b.n	8009b0c <__sinit+0xc>
 8009b26:	bf00      	nop
 8009b28:	08009a6d 	.word	0x08009a6d
 8009b2c:	200005dc 	.word	0x200005dc

08009b30 <_fwalk_sglue>:
 8009b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b34:	4607      	mov	r7, r0
 8009b36:	4688      	mov	r8, r1
 8009b38:	4614      	mov	r4, r2
 8009b3a:	2600      	movs	r6, #0
 8009b3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b40:	f1b9 0901 	subs.w	r9, r9, #1
 8009b44:	d505      	bpl.n	8009b52 <_fwalk_sglue+0x22>
 8009b46:	6824      	ldr	r4, [r4, #0]
 8009b48:	2c00      	cmp	r4, #0
 8009b4a:	d1f7      	bne.n	8009b3c <_fwalk_sglue+0xc>
 8009b4c:	4630      	mov	r0, r6
 8009b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b52:	89ab      	ldrh	r3, [r5, #12]
 8009b54:	2b01      	cmp	r3, #1
 8009b56:	d907      	bls.n	8009b68 <_fwalk_sglue+0x38>
 8009b58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b5c:	3301      	adds	r3, #1
 8009b5e:	d003      	beq.n	8009b68 <_fwalk_sglue+0x38>
 8009b60:	4629      	mov	r1, r5
 8009b62:	4638      	mov	r0, r7
 8009b64:	47c0      	blx	r8
 8009b66:	4306      	orrs	r6, r0
 8009b68:	3568      	adds	r5, #104	; 0x68
 8009b6a:	e7e9      	b.n	8009b40 <_fwalk_sglue+0x10>

08009b6c <siprintf>:
 8009b6c:	b40e      	push	{r1, r2, r3}
 8009b6e:	b500      	push	{lr}
 8009b70:	b09c      	sub	sp, #112	; 0x70
 8009b72:	ab1d      	add	r3, sp, #116	; 0x74
 8009b74:	9002      	str	r0, [sp, #8]
 8009b76:	9006      	str	r0, [sp, #24]
 8009b78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009b7c:	4809      	ldr	r0, [pc, #36]	; (8009ba4 <siprintf+0x38>)
 8009b7e:	9107      	str	r1, [sp, #28]
 8009b80:	9104      	str	r1, [sp, #16]
 8009b82:	4909      	ldr	r1, [pc, #36]	; (8009ba8 <siprintf+0x3c>)
 8009b84:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b88:	9105      	str	r1, [sp, #20]
 8009b8a:	6800      	ldr	r0, [r0, #0]
 8009b8c:	9301      	str	r3, [sp, #4]
 8009b8e:	a902      	add	r1, sp, #8
 8009b90:	f002 fc1e 	bl	800c3d0 <_svfiprintf_r>
 8009b94:	9b02      	ldr	r3, [sp, #8]
 8009b96:	2200      	movs	r2, #0
 8009b98:	701a      	strb	r2, [r3, #0]
 8009b9a:	b01c      	add	sp, #112	; 0x70
 8009b9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ba0:	b003      	add	sp, #12
 8009ba2:	4770      	bx	lr
 8009ba4:	20000064 	.word	0x20000064
 8009ba8:	ffff0208 	.word	0xffff0208

08009bac <siscanf>:
 8009bac:	b40e      	push	{r1, r2, r3}
 8009bae:	b510      	push	{r4, lr}
 8009bb0:	b09f      	sub	sp, #124	; 0x7c
 8009bb2:	ac21      	add	r4, sp, #132	; 0x84
 8009bb4:	f44f 7101 	mov.w	r1, #516	; 0x204
 8009bb8:	f854 2b04 	ldr.w	r2, [r4], #4
 8009bbc:	9201      	str	r2, [sp, #4]
 8009bbe:	f8ad 101c 	strh.w	r1, [sp, #28]
 8009bc2:	9004      	str	r0, [sp, #16]
 8009bc4:	9008      	str	r0, [sp, #32]
 8009bc6:	f7f6 fb73 	bl	80002b0 <strlen>
 8009bca:	4b0c      	ldr	r3, [pc, #48]	; (8009bfc <siscanf+0x50>)
 8009bcc:	9005      	str	r0, [sp, #20]
 8009bce:	9009      	str	r0, [sp, #36]	; 0x24
 8009bd0:	930d      	str	r3, [sp, #52]	; 0x34
 8009bd2:	480b      	ldr	r0, [pc, #44]	; (8009c00 <siscanf+0x54>)
 8009bd4:	9a01      	ldr	r2, [sp, #4]
 8009bd6:	6800      	ldr	r0, [r0, #0]
 8009bd8:	9403      	str	r4, [sp, #12]
 8009bda:	2300      	movs	r3, #0
 8009bdc:	9311      	str	r3, [sp, #68]	; 0x44
 8009bde:	9316      	str	r3, [sp, #88]	; 0x58
 8009be0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009be4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009be8:	a904      	add	r1, sp, #16
 8009bea:	4623      	mov	r3, r4
 8009bec:	f002 fd48 	bl	800c680 <__ssvfiscanf_r>
 8009bf0:	b01f      	add	sp, #124	; 0x7c
 8009bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bf6:	b003      	add	sp, #12
 8009bf8:	4770      	bx	lr
 8009bfa:	bf00      	nop
 8009bfc:	08009c27 	.word	0x08009c27
 8009c00:	20000064 	.word	0x20000064

08009c04 <__sread>:
 8009c04:	b510      	push	{r4, lr}
 8009c06:	460c      	mov	r4, r1
 8009c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c0c:	f000 f86e 	bl	8009cec <_read_r>
 8009c10:	2800      	cmp	r0, #0
 8009c12:	bfab      	itete	ge
 8009c14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009c16:	89a3      	ldrhlt	r3, [r4, #12]
 8009c18:	181b      	addge	r3, r3, r0
 8009c1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009c1e:	bfac      	ite	ge
 8009c20:	6563      	strge	r3, [r4, #84]	; 0x54
 8009c22:	81a3      	strhlt	r3, [r4, #12]
 8009c24:	bd10      	pop	{r4, pc}

08009c26 <__seofread>:
 8009c26:	2000      	movs	r0, #0
 8009c28:	4770      	bx	lr

08009c2a <__swrite>:
 8009c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c2e:	461f      	mov	r7, r3
 8009c30:	898b      	ldrh	r3, [r1, #12]
 8009c32:	05db      	lsls	r3, r3, #23
 8009c34:	4605      	mov	r5, r0
 8009c36:	460c      	mov	r4, r1
 8009c38:	4616      	mov	r6, r2
 8009c3a:	d505      	bpl.n	8009c48 <__swrite+0x1e>
 8009c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c40:	2302      	movs	r3, #2
 8009c42:	2200      	movs	r2, #0
 8009c44:	f000 f840 	bl	8009cc8 <_lseek_r>
 8009c48:	89a3      	ldrh	r3, [r4, #12]
 8009c4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c52:	81a3      	strh	r3, [r4, #12]
 8009c54:	4632      	mov	r2, r6
 8009c56:	463b      	mov	r3, r7
 8009c58:	4628      	mov	r0, r5
 8009c5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c5e:	f000 b857 	b.w	8009d10 <_write_r>

08009c62 <__sseek>:
 8009c62:	b510      	push	{r4, lr}
 8009c64:	460c      	mov	r4, r1
 8009c66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c6a:	f000 f82d 	bl	8009cc8 <_lseek_r>
 8009c6e:	1c43      	adds	r3, r0, #1
 8009c70:	89a3      	ldrh	r3, [r4, #12]
 8009c72:	bf15      	itete	ne
 8009c74:	6560      	strne	r0, [r4, #84]	; 0x54
 8009c76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009c7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009c7e:	81a3      	strheq	r3, [r4, #12]
 8009c80:	bf18      	it	ne
 8009c82:	81a3      	strhne	r3, [r4, #12]
 8009c84:	bd10      	pop	{r4, pc}

08009c86 <__sclose>:
 8009c86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c8a:	f000 b80d 	b.w	8009ca8 <_close_r>

08009c8e <memset>:
 8009c8e:	4402      	add	r2, r0
 8009c90:	4603      	mov	r3, r0
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d100      	bne.n	8009c98 <memset+0xa>
 8009c96:	4770      	bx	lr
 8009c98:	f803 1b01 	strb.w	r1, [r3], #1
 8009c9c:	e7f9      	b.n	8009c92 <memset+0x4>
	...

08009ca0 <_localeconv_r>:
 8009ca0:	4800      	ldr	r0, [pc, #0]	; (8009ca4 <_localeconv_r+0x4>)
 8009ca2:	4770      	bx	lr
 8009ca4:	20000158 	.word	0x20000158

08009ca8 <_close_r>:
 8009ca8:	b538      	push	{r3, r4, r5, lr}
 8009caa:	4d06      	ldr	r5, [pc, #24]	; (8009cc4 <_close_r+0x1c>)
 8009cac:	2300      	movs	r3, #0
 8009cae:	4604      	mov	r4, r0
 8009cb0:	4608      	mov	r0, r1
 8009cb2:	602b      	str	r3, [r5, #0]
 8009cb4:	f7f8 fdc3 	bl	800283e <_close>
 8009cb8:	1c43      	adds	r3, r0, #1
 8009cba:	d102      	bne.n	8009cc2 <_close_r+0x1a>
 8009cbc:	682b      	ldr	r3, [r5, #0]
 8009cbe:	b103      	cbz	r3, 8009cc2 <_close_r+0x1a>
 8009cc0:	6023      	str	r3, [r4, #0]
 8009cc2:	bd38      	pop	{r3, r4, r5, pc}
 8009cc4:	200005e0 	.word	0x200005e0

08009cc8 <_lseek_r>:
 8009cc8:	b538      	push	{r3, r4, r5, lr}
 8009cca:	4d07      	ldr	r5, [pc, #28]	; (8009ce8 <_lseek_r+0x20>)
 8009ccc:	4604      	mov	r4, r0
 8009cce:	4608      	mov	r0, r1
 8009cd0:	4611      	mov	r1, r2
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	602a      	str	r2, [r5, #0]
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	f7f8 fdd8 	bl	800288c <_lseek>
 8009cdc:	1c43      	adds	r3, r0, #1
 8009cde:	d102      	bne.n	8009ce6 <_lseek_r+0x1e>
 8009ce0:	682b      	ldr	r3, [r5, #0]
 8009ce2:	b103      	cbz	r3, 8009ce6 <_lseek_r+0x1e>
 8009ce4:	6023      	str	r3, [r4, #0]
 8009ce6:	bd38      	pop	{r3, r4, r5, pc}
 8009ce8:	200005e0 	.word	0x200005e0

08009cec <_read_r>:
 8009cec:	b538      	push	{r3, r4, r5, lr}
 8009cee:	4d07      	ldr	r5, [pc, #28]	; (8009d0c <_read_r+0x20>)
 8009cf0:	4604      	mov	r4, r0
 8009cf2:	4608      	mov	r0, r1
 8009cf4:	4611      	mov	r1, r2
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	602a      	str	r2, [r5, #0]
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	f7f8 fd66 	bl	80027cc <_read>
 8009d00:	1c43      	adds	r3, r0, #1
 8009d02:	d102      	bne.n	8009d0a <_read_r+0x1e>
 8009d04:	682b      	ldr	r3, [r5, #0]
 8009d06:	b103      	cbz	r3, 8009d0a <_read_r+0x1e>
 8009d08:	6023      	str	r3, [r4, #0]
 8009d0a:	bd38      	pop	{r3, r4, r5, pc}
 8009d0c:	200005e0 	.word	0x200005e0

08009d10 <_write_r>:
 8009d10:	b538      	push	{r3, r4, r5, lr}
 8009d12:	4d07      	ldr	r5, [pc, #28]	; (8009d30 <_write_r+0x20>)
 8009d14:	4604      	mov	r4, r0
 8009d16:	4608      	mov	r0, r1
 8009d18:	4611      	mov	r1, r2
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	602a      	str	r2, [r5, #0]
 8009d1e:	461a      	mov	r2, r3
 8009d20:	f7f8 fd71 	bl	8002806 <_write>
 8009d24:	1c43      	adds	r3, r0, #1
 8009d26:	d102      	bne.n	8009d2e <_write_r+0x1e>
 8009d28:	682b      	ldr	r3, [r5, #0]
 8009d2a:	b103      	cbz	r3, 8009d2e <_write_r+0x1e>
 8009d2c:	6023      	str	r3, [r4, #0]
 8009d2e:	bd38      	pop	{r3, r4, r5, pc}
 8009d30:	200005e0 	.word	0x200005e0

08009d34 <__errno>:
 8009d34:	4b01      	ldr	r3, [pc, #4]	; (8009d3c <__errno+0x8>)
 8009d36:	6818      	ldr	r0, [r3, #0]
 8009d38:	4770      	bx	lr
 8009d3a:	bf00      	nop
 8009d3c:	20000064 	.word	0x20000064

08009d40 <__libc_init_array>:
 8009d40:	b570      	push	{r4, r5, r6, lr}
 8009d42:	4d0d      	ldr	r5, [pc, #52]	; (8009d78 <__libc_init_array+0x38>)
 8009d44:	4c0d      	ldr	r4, [pc, #52]	; (8009d7c <__libc_init_array+0x3c>)
 8009d46:	1b64      	subs	r4, r4, r5
 8009d48:	10a4      	asrs	r4, r4, #2
 8009d4a:	2600      	movs	r6, #0
 8009d4c:	42a6      	cmp	r6, r4
 8009d4e:	d109      	bne.n	8009d64 <__libc_init_array+0x24>
 8009d50:	4d0b      	ldr	r5, [pc, #44]	; (8009d80 <__libc_init_array+0x40>)
 8009d52:	4c0c      	ldr	r4, [pc, #48]	; (8009d84 <__libc_init_array+0x44>)
 8009d54:	f003 ffe0 	bl	800dd18 <_init>
 8009d58:	1b64      	subs	r4, r4, r5
 8009d5a:	10a4      	asrs	r4, r4, #2
 8009d5c:	2600      	movs	r6, #0
 8009d5e:	42a6      	cmp	r6, r4
 8009d60:	d105      	bne.n	8009d6e <__libc_init_array+0x2e>
 8009d62:	bd70      	pop	{r4, r5, r6, pc}
 8009d64:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d68:	4798      	blx	r3
 8009d6a:	3601      	adds	r6, #1
 8009d6c:	e7ee      	b.n	8009d4c <__libc_init_array+0xc>
 8009d6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d72:	4798      	blx	r3
 8009d74:	3601      	adds	r6, #1
 8009d76:	e7f2      	b.n	8009d5e <__libc_init_array+0x1e>
 8009d78:	0800e1cc 	.word	0x0800e1cc
 8009d7c:	0800e1cc 	.word	0x0800e1cc
 8009d80:	0800e1cc 	.word	0x0800e1cc
 8009d84:	0800e1d0 	.word	0x0800e1d0

08009d88 <__retarget_lock_init_recursive>:
 8009d88:	4770      	bx	lr

08009d8a <__retarget_lock_acquire_recursive>:
 8009d8a:	4770      	bx	lr

08009d8c <__retarget_lock_release_recursive>:
 8009d8c:	4770      	bx	lr
	...

08009d90 <nanf>:
 8009d90:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009d98 <nanf+0x8>
 8009d94:	4770      	bx	lr
 8009d96:	bf00      	nop
 8009d98:	7fc00000 	.word	0x7fc00000

08009d9c <quorem>:
 8009d9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009da0:	6903      	ldr	r3, [r0, #16]
 8009da2:	690c      	ldr	r4, [r1, #16]
 8009da4:	42a3      	cmp	r3, r4
 8009da6:	4607      	mov	r7, r0
 8009da8:	db7e      	blt.n	8009ea8 <quorem+0x10c>
 8009daa:	3c01      	subs	r4, #1
 8009dac:	f101 0814 	add.w	r8, r1, #20
 8009db0:	f100 0514 	add.w	r5, r0, #20
 8009db4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009db8:	9301      	str	r3, [sp, #4]
 8009dba:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009dbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009dca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009dce:	fbb2 f6f3 	udiv	r6, r2, r3
 8009dd2:	d331      	bcc.n	8009e38 <quorem+0x9c>
 8009dd4:	f04f 0e00 	mov.w	lr, #0
 8009dd8:	4640      	mov	r0, r8
 8009dda:	46ac      	mov	ip, r5
 8009ddc:	46f2      	mov	sl, lr
 8009dde:	f850 2b04 	ldr.w	r2, [r0], #4
 8009de2:	b293      	uxth	r3, r2
 8009de4:	fb06 e303 	mla	r3, r6, r3, lr
 8009de8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009dec:	0c1a      	lsrs	r2, r3, #16
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	ebaa 0303 	sub.w	r3, sl, r3
 8009df4:	f8dc a000 	ldr.w	sl, [ip]
 8009df8:	fa13 f38a 	uxtah	r3, r3, sl
 8009dfc:	fb06 220e 	mla	r2, r6, lr, r2
 8009e00:	9300      	str	r3, [sp, #0]
 8009e02:	9b00      	ldr	r3, [sp, #0]
 8009e04:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009e08:	b292      	uxth	r2, r2
 8009e0a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009e0e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e12:	f8bd 3000 	ldrh.w	r3, [sp]
 8009e16:	4581      	cmp	r9, r0
 8009e18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e1c:	f84c 3b04 	str.w	r3, [ip], #4
 8009e20:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009e24:	d2db      	bcs.n	8009dde <quorem+0x42>
 8009e26:	f855 300b 	ldr.w	r3, [r5, fp]
 8009e2a:	b92b      	cbnz	r3, 8009e38 <quorem+0x9c>
 8009e2c:	9b01      	ldr	r3, [sp, #4]
 8009e2e:	3b04      	subs	r3, #4
 8009e30:	429d      	cmp	r5, r3
 8009e32:	461a      	mov	r2, r3
 8009e34:	d32c      	bcc.n	8009e90 <quorem+0xf4>
 8009e36:	613c      	str	r4, [r7, #16]
 8009e38:	4638      	mov	r0, r7
 8009e3a:	f001 f9f1 	bl	800b220 <__mcmp>
 8009e3e:	2800      	cmp	r0, #0
 8009e40:	db22      	blt.n	8009e88 <quorem+0xec>
 8009e42:	3601      	adds	r6, #1
 8009e44:	4629      	mov	r1, r5
 8009e46:	2000      	movs	r0, #0
 8009e48:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e4c:	f8d1 c000 	ldr.w	ip, [r1]
 8009e50:	b293      	uxth	r3, r2
 8009e52:	1ac3      	subs	r3, r0, r3
 8009e54:	0c12      	lsrs	r2, r2, #16
 8009e56:	fa13 f38c 	uxtah	r3, r3, ip
 8009e5a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009e5e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e68:	45c1      	cmp	r9, r8
 8009e6a:	f841 3b04 	str.w	r3, [r1], #4
 8009e6e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009e72:	d2e9      	bcs.n	8009e48 <quorem+0xac>
 8009e74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e7c:	b922      	cbnz	r2, 8009e88 <quorem+0xec>
 8009e7e:	3b04      	subs	r3, #4
 8009e80:	429d      	cmp	r5, r3
 8009e82:	461a      	mov	r2, r3
 8009e84:	d30a      	bcc.n	8009e9c <quorem+0x100>
 8009e86:	613c      	str	r4, [r7, #16]
 8009e88:	4630      	mov	r0, r6
 8009e8a:	b003      	add	sp, #12
 8009e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e90:	6812      	ldr	r2, [r2, #0]
 8009e92:	3b04      	subs	r3, #4
 8009e94:	2a00      	cmp	r2, #0
 8009e96:	d1ce      	bne.n	8009e36 <quorem+0x9a>
 8009e98:	3c01      	subs	r4, #1
 8009e9a:	e7c9      	b.n	8009e30 <quorem+0x94>
 8009e9c:	6812      	ldr	r2, [r2, #0]
 8009e9e:	3b04      	subs	r3, #4
 8009ea0:	2a00      	cmp	r2, #0
 8009ea2:	d1f0      	bne.n	8009e86 <quorem+0xea>
 8009ea4:	3c01      	subs	r4, #1
 8009ea6:	e7eb      	b.n	8009e80 <quorem+0xe4>
 8009ea8:	2000      	movs	r0, #0
 8009eaa:	e7ee      	b.n	8009e8a <quorem+0xee>
 8009eac:	0000      	movs	r0, r0
	...

08009eb0 <_dtoa_r>:
 8009eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb4:	ed2d 8b04 	vpush	{d8-d9}
 8009eb8:	69c5      	ldr	r5, [r0, #28]
 8009eba:	b093      	sub	sp, #76	; 0x4c
 8009ebc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009ec0:	ec57 6b10 	vmov	r6, r7, d0
 8009ec4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009ec8:	9107      	str	r1, [sp, #28]
 8009eca:	4604      	mov	r4, r0
 8009ecc:	920a      	str	r2, [sp, #40]	; 0x28
 8009ece:	930d      	str	r3, [sp, #52]	; 0x34
 8009ed0:	b975      	cbnz	r5, 8009ef0 <_dtoa_r+0x40>
 8009ed2:	2010      	movs	r0, #16
 8009ed4:	f000 fe2a 	bl	800ab2c <malloc>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	61e0      	str	r0, [r4, #28]
 8009edc:	b920      	cbnz	r0, 8009ee8 <_dtoa_r+0x38>
 8009ede:	4bae      	ldr	r3, [pc, #696]	; (800a198 <_dtoa_r+0x2e8>)
 8009ee0:	21ef      	movs	r1, #239	; 0xef
 8009ee2:	48ae      	ldr	r0, [pc, #696]	; (800a19c <_dtoa_r+0x2ec>)
 8009ee4:	f003 f808 	bl	800cef8 <__assert_func>
 8009ee8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009eec:	6005      	str	r5, [r0, #0]
 8009eee:	60c5      	str	r5, [r0, #12]
 8009ef0:	69e3      	ldr	r3, [r4, #28]
 8009ef2:	6819      	ldr	r1, [r3, #0]
 8009ef4:	b151      	cbz	r1, 8009f0c <_dtoa_r+0x5c>
 8009ef6:	685a      	ldr	r2, [r3, #4]
 8009ef8:	604a      	str	r2, [r1, #4]
 8009efa:	2301      	movs	r3, #1
 8009efc:	4093      	lsls	r3, r2
 8009efe:	608b      	str	r3, [r1, #8]
 8009f00:	4620      	mov	r0, r4
 8009f02:	f000 ff07 	bl	800ad14 <_Bfree>
 8009f06:	69e3      	ldr	r3, [r4, #28]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	601a      	str	r2, [r3, #0]
 8009f0c:	1e3b      	subs	r3, r7, #0
 8009f0e:	bfbb      	ittet	lt
 8009f10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009f14:	9303      	strlt	r3, [sp, #12]
 8009f16:	2300      	movge	r3, #0
 8009f18:	2201      	movlt	r2, #1
 8009f1a:	bfac      	ite	ge
 8009f1c:	f8c8 3000 	strge.w	r3, [r8]
 8009f20:	f8c8 2000 	strlt.w	r2, [r8]
 8009f24:	4b9e      	ldr	r3, [pc, #632]	; (800a1a0 <_dtoa_r+0x2f0>)
 8009f26:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009f2a:	ea33 0308 	bics.w	r3, r3, r8
 8009f2e:	d11b      	bne.n	8009f68 <_dtoa_r+0xb8>
 8009f30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f32:	f242 730f 	movw	r3, #9999	; 0x270f
 8009f36:	6013      	str	r3, [r2, #0]
 8009f38:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009f3c:	4333      	orrs	r3, r6
 8009f3e:	f000 8593 	beq.w	800aa68 <_dtoa_r+0xbb8>
 8009f42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f44:	b963      	cbnz	r3, 8009f60 <_dtoa_r+0xb0>
 8009f46:	4b97      	ldr	r3, [pc, #604]	; (800a1a4 <_dtoa_r+0x2f4>)
 8009f48:	e027      	b.n	8009f9a <_dtoa_r+0xea>
 8009f4a:	4b97      	ldr	r3, [pc, #604]	; (800a1a8 <_dtoa_r+0x2f8>)
 8009f4c:	9300      	str	r3, [sp, #0]
 8009f4e:	3308      	adds	r3, #8
 8009f50:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f52:	6013      	str	r3, [r2, #0]
 8009f54:	9800      	ldr	r0, [sp, #0]
 8009f56:	b013      	add	sp, #76	; 0x4c
 8009f58:	ecbd 8b04 	vpop	{d8-d9}
 8009f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f60:	4b90      	ldr	r3, [pc, #576]	; (800a1a4 <_dtoa_r+0x2f4>)
 8009f62:	9300      	str	r3, [sp, #0]
 8009f64:	3303      	adds	r3, #3
 8009f66:	e7f3      	b.n	8009f50 <_dtoa_r+0xa0>
 8009f68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	ec51 0b17 	vmov	r0, r1, d7
 8009f72:	eeb0 8a47 	vmov.f32	s16, s14
 8009f76:	eef0 8a67 	vmov.f32	s17, s15
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	f7f6 fdc4 	bl	8000b08 <__aeabi_dcmpeq>
 8009f80:	4681      	mov	r9, r0
 8009f82:	b160      	cbz	r0, 8009f9e <_dtoa_r+0xee>
 8009f84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f86:	2301      	movs	r3, #1
 8009f88:	6013      	str	r3, [r2, #0]
 8009f8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	f000 8568 	beq.w	800aa62 <_dtoa_r+0xbb2>
 8009f92:	4b86      	ldr	r3, [pc, #536]	; (800a1ac <_dtoa_r+0x2fc>)
 8009f94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f96:	6013      	str	r3, [r2, #0]
 8009f98:	3b01      	subs	r3, #1
 8009f9a:	9300      	str	r3, [sp, #0]
 8009f9c:	e7da      	b.n	8009f54 <_dtoa_r+0xa4>
 8009f9e:	aa10      	add	r2, sp, #64	; 0x40
 8009fa0:	a911      	add	r1, sp, #68	; 0x44
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	eeb0 0a48 	vmov.f32	s0, s16
 8009fa8:	eef0 0a68 	vmov.f32	s1, s17
 8009fac:	f001 fa4e 	bl	800b44c <__d2b>
 8009fb0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009fb4:	4682      	mov	sl, r0
 8009fb6:	2d00      	cmp	r5, #0
 8009fb8:	d07f      	beq.n	800a0ba <_dtoa_r+0x20a>
 8009fba:	ee18 3a90 	vmov	r3, s17
 8009fbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009fc2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009fc6:	ec51 0b18 	vmov	r0, r1, d8
 8009fca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009fce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009fd2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	2200      	movs	r2, #0
 8009fda:	4b75      	ldr	r3, [pc, #468]	; (800a1b0 <_dtoa_r+0x300>)
 8009fdc:	f7f6 f974 	bl	80002c8 <__aeabi_dsub>
 8009fe0:	a367      	add	r3, pc, #412	; (adr r3, 800a180 <_dtoa_r+0x2d0>)
 8009fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe6:	f7f6 fb27 	bl	8000638 <__aeabi_dmul>
 8009fea:	a367      	add	r3, pc, #412	; (adr r3, 800a188 <_dtoa_r+0x2d8>)
 8009fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff0:	f7f6 f96c 	bl	80002cc <__adddf3>
 8009ff4:	4606      	mov	r6, r0
 8009ff6:	4628      	mov	r0, r5
 8009ff8:	460f      	mov	r7, r1
 8009ffa:	f7f6 fab3 	bl	8000564 <__aeabi_i2d>
 8009ffe:	a364      	add	r3, pc, #400	; (adr r3, 800a190 <_dtoa_r+0x2e0>)
 800a000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a004:	f7f6 fb18 	bl	8000638 <__aeabi_dmul>
 800a008:	4602      	mov	r2, r0
 800a00a:	460b      	mov	r3, r1
 800a00c:	4630      	mov	r0, r6
 800a00e:	4639      	mov	r1, r7
 800a010:	f7f6 f95c 	bl	80002cc <__adddf3>
 800a014:	4606      	mov	r6, r0
 800a016:	460f      	mov	r7, r1
 800a018:	f7f6 fdbe 	bl	8000b98 <__aeabi_d2iz>
 800a01c:	2200      	movs	r2, #0
 800a01e:	4683      	mov	fp, r0
 800a020:	2300      	movs	r3, #0
 800a022:	4630      	mov	r0, r6
 800a024:	4639      	mov	r1, r7
 800a026:	f7f6 fd79 	bl	8000b1c <__aeabi_dcmplt>
 800a02a:	b148      	cbz	r0, 800a040 <_dtoa_r+0x190>
 800a02c:	4658      	mov	r0, fp
 800a02e:	f7f6 fa99 	bl	8000564 <__aeabi_i2d>
 800a032:	4632      	mov	r2, r6
 800a034:	463b      	mov	r3, r7
 800a036:	f7f6 fd67 	bl	8000b08 <__aeabi_dcmpeq>
 800a03a:	b908      	cbnz	r0, 800a040 <_dtoa_r+0x190>
 800a03c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a040:	f1bb 0f16 	cmp.w	fp, #22
 800a044:	d857      	bhi.n	800a0f6 <_dtoa_r+0x246>
 800a046:	4b5b      	ldr	r3, [pc, #364]	; (800a1b4 <_dtoa_r+0x304>)
 800a048:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a050:	ec51 0b18 	vmov	r0, r1, d8
 800a054:	f7f6 fd62 	bl	8000b1c <__aeabi_dcmplt>
 800a058:	2800      	cmp	r0, #0
 800a05a:	d04e      	beq.n	800a0fa <_dtoa_r+0x24a>
 800a05c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a060:	2300      	movs	r3, #0
 800a062:	930c      	str	r3, [sp, #48]	; 0x30
 800a064:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a066:	1b5b      	subs	r3, r3, r5
 800a068:	1e5a      	subs	r2, r3, #1
 800a06a:	bf45      	ittet	mi
 800a06c:	f1c3 0301 	rsbmi	r3, r3, #1
 800a070:	9305      	strmi	r3, [sp, #20]
 800a072:	2300      	movpl	r3, #0
 800a074:	2300      	movmi	r3, #0
 800a076:	9206      	str	r2, [sp, #24]
 800a078:	bf54      	ite	pl
 800a07a:	9305      	strpl	r3, [sp, #20]
 800a07c:	9306      	strmi	r3, [sp, #24]
 800a07e:	f1bb 0f00 	cmp.w	fp, #0
 800a082:	db3c      	blt.n	800a0fe <_dtoa_r+0x24e>
 800a084:	9b06      	ldr	r3, [sp, #24]
 800a086:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a08a:	445b      	add	r3, fp
 800a08c:	9306      	str	r3, [sp, #24]
 800a08e:	2300      	movs	r3, #0
 800a090:	9308      	str	r3, [sp, #32]
 800a092:	9b07      	ldr	r3, [sp, #28]
 800a094:	2b09      	cmp	r3, #9
 800a096:	d868      	bhi.n	800a16a <_dtoa_r+0x2ba>
 800a098:	2b05      	cmp	r3, #5
 800a09a:	bfc4      	itt	gt
 800a09c:	3b04      	subgt	r3, #4
 800a09e:	9307      	strgt	r3, [sp, #28]
 800a0a0:	9b07      	ldr	r3, [sp, #28]
 800a0a2:	f1a3 0302 	sub.w	r3, r3, #2
 800a0a6:	bfcc      	ite	gt
 800a0a8:	2500      	movgt	r5, #0
 800a0aa:	2501      	movle	r5, #1
 800a0ac:	2b03      	cmp	r3, #3
 800a0ae:	f200 8085 	bhi.w	800a1bc <_dtoa_r+0x30c>
 800a0b2:	e8df f003 	tbb	[pc, r3]
 800a0b6:	3b2e      	.short	0x3b2e
 800a0b8:	5839      	.short	0x5839
 800a0ba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a0be:	441d      	add	r5, r3
 800a0c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a0c4:	2b20      	cmp	r3, #32
 800a0c6:	bfc1      	itttt	gt
 800a0c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a0cc:	fa08 f803 	lslgt.w	r8, r8, r3
 800a0d0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a0d4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a0d8:	bfd6      	itet	le
 800a0da:	f1c3 0320 	rsble	r3, r3, #32
 800a0de:	ea48 0003 	orrgt.w	r0, r8, r3
 800a0e2:	fa06 f003 	lslle.w	r0, r6, r3
 800a0e6:	f7f6 fa2d 	bl	8000544 <__aeabi_ui2d>
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a0f0:	3d01      	subs	r5, #1
 800a0f2:	920e      	str	r2, [sp, #56]	; 0x38
 800a0f4:	e76f      	b.n	8009fd6 <_dtoa_r+0x126>
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e7b3      	b.n	800a062 <_dtoa_r+0x1b2>
 800a0fa:	900c      	str	r0, [sp, #48]	; 0x30
 800a0fc:	e7b2      	b.n	800a064 <_dtoa_r+0x1b4>
 800a0fe:	9b05      	ldr	r3, [sp, #20]
 800a100:	eba3 030b 	sub.w	r3, r3, fp
 800a104:	9305      	str	r3, [sp, #20]
 800a106:	f1cb 0300 	rsb	r3, fp, #0
 800a10a:	9308      	str	r3, [sp, #32]
 800a10c:	2300      	movs	r3, #0
 800a10e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a110:	e7bf      	b.n	800a092 <_dtoa_r+0x1e2>
 800a112:	2300      	movs	r3, #0
 800a114:	9309      	str	r3, [sp, #36]	; 0x24
 800a116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a118:	2b00      	cmp	r3, #0
 800a11a:	dc52      	bgt.n	800a1c2 <_dtoa_r+0x312>
 800a11c:	2301      	movs	r3, #1
 800a11e:	9301      	str	r3, [sp, #4]
 800a120:	9304      	str	r3, [sp, #16]
 800a122:	461a      	mov	r2, r3
 800a124:	920a      	str	r2, [sp, #40]	; 0x28
 800a126:	e00b      	b.n	800a140 <_dtoa_r+0x290>
 800a128:	2301      	movs	r3, #1
 800a12a:	e7f3      	b.n	800a114 <_dtoa_r+0x264>
 800a12c:	2300      	movs	r3, #0
 800a12e:	9309      	str	r3, [sp, #36]	; 0x24
 800a130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a132:	445b      	add	r3, fp
 800a134:	9301      	str	r3, [sp, #4]
 800a136:	3301      	adds	r3, #1
 800a138:	2b01      	cmp	r3, #1
 800a13a:	9304      	str	r3, [sp, #16]
 800a13c:	bfb8      	it	lt
 800a13e:	2301      	movlt	r3, #1
 800a140:	69e0      	ldr	r0, [r4, #28]
 800a142:	2100      	movs	r1, #0
 800a144:	2204      	movs	r2, #4
 800a146:	f102 0614 	add.w	r6, r2, #20
 800a14a:	429e      	cmp	r6, r3
 800a14c:	d93d      	bls.n	800a1ca <_dtoa_r+0x31a>
 800a14e:	6041      	str	r1, [r0, #4]
 800a150:	4620      	mov	r0, r4
 800a152:	f000 fd9f 	bl	800ac94 <_Balloc>
 800a156:	9000      	str	r0, [sp, #0]
 800a158:	2800      	cmp	r0, #0
 800a15a:	d139      	bne.n	800a1d0 <_dtoa_r+0x320>
 800a15c:	4b16      	ldr	r3, [pc, #88]	; (800a1b8 <_dtoa_r+0x308>)
 800a15e:	4602      	mov	r2, r0
 800a160:	f240 11af 	movw	r1, #431	; 0x1af
 800a164:	e6bd      	b.n	8009ee2 <_dtoa_r+0x32>
 800a166:	2301      	movs	r3, #1
 800a168:	e7e1      	b.n	800a12e <_dtoa_r+0x27e>
 800a16a:	2501      	movs	r5, #1
 800a16c:	2300      	movs	r3, #0
 800a16e:	9307      	str	r3, [sp, #28]
 800a170:	9509      	str	r5, [sp, #36]	; 0x24
 800a172:	f04f 33ff 	mov.w	r3, #4294967295
 800a176:	9301      	str	r3, [sp, #4]
 800a178:	9304      	str	r3, [sp, #16]
 800a17a:	2200      	movs	r2, #0
 800a17c:	2312      	movs	r3, #18
 800a17e:	e7d1      	b.n	800a124 <_dtoa_r+0x274>
 800a180:	636f4361 	.word	0x636f4361
 800a184:	3fd287a7 	.word	0x3fd287a7
 800a188:	8b60c8b3 	.word	0x8b60c8b3
 800a18c:	3fc68a28 	.word	0x3fc68a28
 800a190:	509f79fb 	.word	0x509f79fb
 800a194:	3fd34413 	.word	0x3fd34413
 800a198:	0800ddc4 	.word	0x0800ddc4
 800a19c:	0800dddb 	.word	0x0800dddb
 800a1a0:	7ff00000 	.word	0x7ff00000
 800a1a4:	0800ddc0 	.word	0x0800ddc0
 800a1a8:	0800ddb7 	.word	0x0800ddb7
 800a1ac:	0800e119 	.word	0x0800e119
 800a1b0:	3ff80000 	.word	0x3ff80000
 800a1b4:	0800dec8 	.word	0x0800dec8
 800a1b8:	0800de33 	.word	0x0800de33
 800a1bc:	2301      	movs	r3, #1
 800a1be:	9309      	str	r3, [sp, #36]	; 0x24
 800a1c0:	e7d7      	b.n	800a172 <_dtoa_r+0x2c2>
 800a1c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1c4:	9301      	str	r3, [sp, #4]
 800a1c6:	9304      	str	r3, [sp, #16]
 800a1c8:	e7ba      	b.n	800a140 <_dtoa_r+0x290>
 800a1ca:	3101      	adds	r1, #1
 800a1cc:	0052      	lsls	r2, r2, #1
 800a1ce:	e7ba      	b.n	800a146 <_dtoa_r+0x296>
 800a1d0:	69e3      	ldr	r3, [r4, #28]
 800a1d2:	9a00      	ldr	r2, [sp, #0]
 800a1d4:	601a      	str	r2, [r3, #0]
 800a1d6:	9b04      	ldr	r3, [sp, #16]
 800a1d8:	2b0e      	cmp	r3, #14
 800a1da:	f200 80a8 	bhi.w	800a32e <_dtoa_r+0x47e>
 800a1de:	2d00      	cmp	r5, #0
 800a1e0:	f000 80a5 	beq.w	800a32e <_dtoa_r+0x47e>
 800a1e4:	f1bb 0f00 	cmp.w	fp, #0
 800a1e8:	dd38      	ble.n	800a25c <_dtoa_r+0x3ac>
 800a1ea:	4bc0      	ldr	r3, [pc, #768]	; (800a4ec <_dtoa_r+0x63c>)
 800a1ec:	f00b 020f 	and.w	r2, fp, #15
 800a1f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1f4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a1f8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a1fc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a200:	d019      	beq.n	800a236 <_dtoa_r+0x386>
 800a202:	4bbb      	ldr	r3, [pc, #748]	; (800a4f0 <_dtoa_r+0x640>)
 800a204:	ec51 0b18 	vmov	r0, r1, d8
 800a208:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a20c:	f7f6 fb3e 	bl	800088c <__aeabi_ddiv>
 800a210:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a214:	f008 080f 	and.w	r8, r8, #15
 800a218:	2503      	movs	r5, #3
 800a21a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a4f0 <_dtoa_r+0x640>
 800a21e:	f1b8 0f00 	cmp.w	r8, #0
 800a222:	d10a      	bne.n	800a23a <_dtoa_r+0x38a>
 800a224:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a228:	4632      	mov	r2, r6
 800a22a:	463b      	mov	r3, r7
 800a22c:	f7f6 fb2e 	bl	800088c <__aeabi_ddiv>
 800a230:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a234:	e02b      	b.n	800a28e <_dtoa_r+0x3de>
 800a236:	2502      	movs	r5, #2
 800a238:	e7ef      	b.n	800a21a <_dtoa_r+0x36a>
 800a23a:	f018 0f01 	tst.w	r8, #1
 800a23e:	d008      	beq.n	800a252 <_dtoa_r+0x3a2>
 800a240:	4630      	mov	r0, r6
 800a242:	4639      	mov	r1, r7
 800a244:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a248:	f7f6 f9f6 	bl	8000638 <__aeabi_dmul>
 800a24c:	3501      	adds	r5, #1
 800a24e:	4606      	mov	r6, r0
 800a250:	460f      	mov	r7, r1
 800a252:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a256:	f109 0908 	add.w	r9, r9, #8
 800a25a:	e7e0      	b.n	800a21e <_dtoa_r+0x36e>
 800a25c:	f000 809f 	beq.w	800a39e <_dtoa_r+0x4ee>
 800a260:	f1cb 0600 	rsb	r6, fp, #0
 800a264:	4ba1      	ldr	r3, [pc, #644]	; (800a4ec <_dtoa_r+0x63c>)
 800a266:	4fa2      	ldr	r7, [pc, #648]	; (800a4f0 <_dtoa_r+0x640>)
 800a268:	f006 020f 	and.w	r2, r6, #15
 800a26c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a274:	ec51 0b18 	vmov	r0, r1, d8
 800a278:	f7f6 f9de 	bl	8000638 <__aeabi_dmul>
 800a27c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a280:	1136      	asrs	r6, r6, #4
 800a282:	2300      	movs	r3, #0
 800a284:	2502      	movs	r5, #2
 800a286:	2e00      	cmp	r6, #0
 800a288:	d17e      	bne.n	800a388 <_dtoa_r+0x4d8>
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d1d0      	bne.n	800a230 <_dtoa_r+0x380>
 800a28e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a290:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a294:	2b00      	cmp	r3, #0
 800a296:	f000 8084 	beq.w	800a3a2 <_dtoa_r+0x4f2>
 800a29a:	4b96      	ldr	r3, [pc, #600]	; (800a4f4 <_dtoa_r+0x644>)
 800a29c:	2200      	movs	r2, #0
 800a29e:	4640      	mov	r0, r8
 800a2a0:	4649      	mov	r1, r9
 800a2a2:	f7f6 fc3b 	bl	8000b1c <__aeabi_dcmplt>
 800a2a6:	2800      	cmp	r0, #0
 800a2a8:	d07b      	beq.n	800a3a2 <_dtoa_r+0x4f2>
 800a2aa:	9b04      	ldr	r3, [sp, #16]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d078      	beq.n	800a3a2 <_dtoa_r+0x4f2>
 800a2b0:	9b01      	ldr	r3, [sp, #4]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	dd39      	ble.n	800a32a <_dtoa_r+0x47a>
 800a2b6:	4b90      	ldr	r3, [pc, #576]	; (800a4f8 <_dtoa_r+0x648>)
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	4640      	mov	r0, r8
 800a2bc:	4649      	mov	r1, r9
 800a2be:	f7f6 f9bb 	bl	8000638 <__aeabi_dmul>
 800a2c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2c6:	9e01      	ldr	r6, [sp, #4]
 800a2c8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a2cc:	3501      	adds	r5, #1
 800a2ce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a2d2:	4628      	mov	r0, r5
 800a2d4:	f7f6 f946 	bl	8000564 <__aeabi_i2d>
 800a2d8:	4642      	mov	r2, r8
 800a2da:	464b      	mov	r3, r9
 800a2dc:	f7f6 f9ac 	bl	8000638 <__aeabi_dmul>
 800a2e0:	4b86      	ldr	r3, [pc, #536]	; (800a4fc <_dtoa_r+0x64c>)
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	f7f5 fff2 	bl	80002cc <__adddf3>
 800a2e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a2ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2f0:	9303      	str	r3, [sp, #12]
 800a2f2:	2e00      	cmp	r6, #0
 800a2f4:	d158      	bne.n	800a3a8 <_dtoa_r+0x4f8>
 800a2f6:	4b82      	ldr	r3, [pc, #520]	; (800a500 <_dtoa_r+0x650>)
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	4640      	mov	r0, r8
 800a2fc:	4649      	mov	r1, r9
 800a2fe:	f7f5 ffe3 	bl	80002c8 <__aeabi_dsub>
 800a302:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a306:	4680      	mov	r8, r0
 800a308:	4689      	mov	r9, r1
 800a30a:	f7f6 fc25 	bl	8000b58 <__aeabi_dcmpgt>
 800a30e:	2800      	cmp	r0, #0
 800a310:	f040 8296 	bne.w	800a840 <_dtoa_r+0x990>
 800a314:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a318:	4640      	mov	r0, r8
 800a31a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a31e:	4649      	mov	r1, r9
 800a320:	f7f6 fbfc 	bl	8000b1c <__aeabi_dcmplt>
 800a324:	2800      	cmp	r0, #0
 800a326:	f040 8289 	bne.w	800a83c <_dtoa_r+0x98c>
 800a32a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a32e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a330:	2b00      	cmp	r3, #0
 800a332:	f2c0 814e 	blt.w	800a5d2 <_dtoa_r+0x722>
 800a336:	f1bb 0f0e 	cmp.w	fp, #14
 800a33a:	f300 814a 	bgt.w	800a5d2 <_dtoa_r+0x722>
 800a33e:	4b6b      	ldr	r3, [pc, #428]	; (800a4ec <_dtoa_r+0x63c>)
 800a340:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a344:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	f280 80dc 	bge.w	800a508 <_dtoa_r+0x658>
 800a350:	9b04      	ldr	r3, [sp, #16]
 800a352:	2b00      	cmp	r3, #0
 800a354:	f300 80d8 	bgt.w	800a508 <_dtoa_r+0x658>
 800a358:	f040 826f 	bne.w	800a83a <_dtoa_r+0x98a>
 800a35c:	4b68      	ldr	r3, [pc, #416]	; (800a500 <_dtoa_r+0x650>)
 800a35e:	2200      	movs	r2, #0
 800a360:	4640      	mov	r0, r8
 800a362:	4649      	mov	r1, r9
 800a364:	f7f6 f968 	bl	8000638 <__aeabi_dmul>
 800a368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a36c:	f7f6 fbea 	bl	8000b44 <__aeabi_dcmpge>
 800a370:	9e04      	ldr	r6, [sp, #16]
 800a372:	4637      	mov	r7, r6
 800a374:	2800      	cmp	r0, #0
 800a376:	f040 8245 	bne.w	800a804 <_dtoa_r+0x954>
 800a37a:	9d00      	ldr	r5, [sp, #0]
 800a37c:	2331      	movs	r3, #49	; 0x31
 800a37e:	f805 3b01 	strb.w	r3, [r5], #1
 800a382:	f10b 0b01 	add.w	fp, fp, #1
 800a386:	e241      	b.n	800a80c <_dtoa_r+0x95c>
 800a388:	07f2      	lsls	r2, r6, #31
 800a38a:	d505      	bpl.n	800a398 <_dtoa_r+0x4e8>
 800a38c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a390:	f7f6 f952 	bl	8000638 <__aeabi_dmul>
 800a394:	3501      	adds	r5, #1
 800a396:	2301      	movs	r3, #1
 800a398:	1076      	asrs	r6, r6, #1
 800a39a:	3708      	adds	r7, #8
 800a39c:	e773      	b.n	800a286 <_dtoa_r+0x3d6>
 800a39e:	2502      	movs	r5, #2
 800a3a0:	e775      	b.n	800a28e <_dtoa_r+0x3de>
 800a3a2:	9e04      	ldr	r6, [sp, #16]
 800a3a4:	465f      	mov	r7, fp
 800a3a6:	e792      	b.n	800a2ce <_dtoa_r+0x41e>
 800a3a8:	9900      	ldr	r1, [sp, #0]
 800a3aa:	4b50      	ldr	r3, [pc, #320]	; (800a4ec <_dtoa_r+0x63c>)
 800a3ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a3b0:	4431      	add	r1, r6
 800a3b2:	9102      	str	r1, [sp, #8]
 800a3b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a3b6:	eeb0 9a47 	vmov.f32	s18, s14
 800a3ba:	eef0 9a67 	vmov.f32	s19, s15
 800a3be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a3c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a3c6:	2900      	cmp	r1, #0
 800a3c8:	d044      	beq.n	800a454 <_dtoa_r+0x5a4>
 800a3ca:	494e      	ldr	r1, [pc, #312]	; (800a504 <_dtoa_r+0x654>)
 800a3cc:	2000      	movs	r0, #0
 800a3ce:	f7f6 fa5d 	bl	800088c <__aeabi_ddiv>
 800a3d2:	ec53 2b19 	vmov	r2, r3, d9
 800a3d6:	f7f5 ff77 	bl	80002c8 <__aeabi_dsub>
 800a3da:	9d00      	ldr	r5, [sp, #0]
 800a3dc:	ec41 0b19 	vmov	d9, r0, r1
 800a3e0:	4649      	mov	r1, r9
 800a3e2:	4640      	mov	r0, r8
 800a3e4:	f7f6 fbd8 	bl	8000b98 <__aeabi_d2iz>
 800a3e8:	4606      	mov	r6, r0
 800a3ea:	f7f6 f8bb 	bl	8000564 <__aeabi_i2d>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	4640      	mov	r0, r8
 800a3f4:	4649      	mov	r1, r9
 800a3f6:	f7f5 ff67 	bl	80002c8 <__aeabi_dsub>
 800a3fa:	3630      	adds	r6, #48	; 0x30
 800a3fc:	f805 6b01 	strb.w	r6, [r5], #1
 800a400:	ec53 2b19 	vmov	r2, r3, d9
 800a404:	4680      	mov	r8, r0
 800a406:	4689      	mov	r9, r1
 800a408:	f7f6 fb88 	bl	8000b1c <__aeabi_dcmplt>
 800a40c:	2800      	cmp	r0, #0
 800a40e:	d164      	bne.n	800a4da <_dtoa_r+0x62a>
 800a410:	4642      	mov	r2, r8
 800a412:	464b      	mov	r3, r9
 800a414:	4937      	ldr	r1, [pc, #220]	; (800a4f4 <_dtoa_r+0x644>)
 800a416:	2000      	movs	r0, #0
 800a418:	f7f5 ff56 	bl	80002c8 <__aeabi_dsub>
 800a41c:	ec53 2b19 	vmov	r2, r3, d9
 800a420:	f7f6 fb7c 	bl	8000b1c <__aeabi_dcmplt>
 800a424:	2800      	cmp	r0, #0
 800a426:	f040 80b6 	bne.w	800a596 <_dtoa_r+0x6e6>
 800a42a:	9b02      	ldr	r3, [sp, #8]
 800a42c:	429d      	cmp	r5, r3
 800a42e:	f43f af7c 	beq.w	800a32a <_dtoa_r+0x47a>
 800a432:	4b31      	ldr	r3, [pc, #196]	; (800a4f8 <_dtoa_r+0x648>)
 800a434:	ec51 0b19 	vmov	r0, r1, d9
 800a438:	2200      	movs	r2, #0
 800a43a:	f7f6 f8fd 	bl	8000638 <__aeabi_dmul>
 800a43e:	4b2e      	ldr	r3, [pc, #184]	; (800a4f8 <_dtoa_r+0x648>)
 800a440:	ec41 0b19 	vmov	d9, r0, r1
 800a444:	2200      	movs	r2, #0
 800a446:	4640      	mov	r0, r8
 800a448:	4649      	mov	r1, r9
 800a44a:	f7f6 f8f5 	bl	8000638 <__aeabi_dmul>
 800a44e:	4680      	mov	r8, r0
 800a450:	4689      	mov	r9, r1
 800a452:	e7c5      	b.n	800a3e0 <_dtoa_r+0x530>
 800a454:	ec51 0b17 	vmov	r0, r1, d7
 800a458:	f7f6 f8ee 	bl	8000638 <__aeabi_dmul>
 800a45c:	9b02      	ldr	r3, [sp, #8]
 800a45e:	9d00      	ldr	r5, [sp, #0]
 800a460:	930f      	str	r3, [sp, #60]	; 0x3c
 800a462:	ec41 0b19 	vmov	d9, r0, r1
 800a466:	4649      	mov	r1, r9
 800a468:	4640      	mov	r0, r8
 800a46a:	f7f6 fb95 	bl	8000b98 <__aeabi_d2iz>
 800a46e:	4606      	mov	r6, r0
 800a470:	f7f6 f878 	bl	8000564 <__aeabi_i2d>
 800a474:	3630      	adds	r6, #48	; 0x30
 800a476:	4602      	mov	r2, r0
 800a478:	460b      	mov	r3, r1
 800a47a:	4640      	mov	r0, r8
 800a47c:	4649      	mov	r1, r9
 800a47e:	f7f5 ff23 	bl	80002c8 <__aeabi_dsub>
 800a482:	f805 6b01 	strb.w	r6, [r5], #1
 800a486:	9b02      	ldr	r3, [sp, #8]
 800a488:	429d      	cmp	r5, r3
 800a48a:	4680      	mov	r8, r0
 800a48c:	4689      	mov	r9, r1
 800a48e:	f04f 0200 	mov.w	r2, #0
 800a492:	d124      	bne.n	800a4de <_dtoa_r+0x62e>
 800a494:	4b1b      	ldr	r3, [pc, #108]	; (800a504 <_dtoa_r+0x654>)
 800a496:	ec51 0b19 	vmov	r0, r1, d9
 800a49a:	f7f5 ff17 	bl	80002cc <__adddf3>
 800a49e:	4602      	mov	r2, r0
 800a4a0:	460b      	mov	r3, r1
 800a4a2:	4640      	mov	r0, r8
 800a4a4:	4649      	mov	r1, r9
 800a4a6:	f7f6 fb57 	bl	8000b58 <__aeabi_dcmpgt>
 800a4aa:	2800      	cmp	r0, #0
 800a4ac:	d173      	bne.n	800a596 <_dtoa_r+0x6e6>
 800a4ae:	ec53 2b19 	vmov	r2, r3, d9
 800a4b2:	4914      	ldr	r1, [pc, #80]	; (800a504 <_dtoa_r+0x654>)
 800a4b4:	2000      	movs	r0, #0
 800a4b6:	f7f5 ff07 	bl	80002c8 <__aeabi_dsub>
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	460b      	mov	r3, r1
 800a4be:	4640      	mov	r0, r8
 800a4c0:	4649      	mov	r1, r9
 800a4c2:	f7f6 fb2b 	bl	8000b1c <__aeabi_dcmplt>
 800a4c6:	2800      	cmp	r0, #0
 800a4c8:	f43f af2f 	beq.w	800a32a <_dtoa_r+0x47a>
 800a4cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a4ce:	1e6b      	subs	r3, r5, #1
 800a4d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a4d6:	2b30      	cmp	r3, #48	; 0x30
 800a4d8:	d0f8      	beq.n	800a4cc <_dtoa_r+0x61c>
 800a4da:	46bb      	mov	fp, r7
 800a4dc:	e04a      	b.n	800a574 <_dtoa_r+0x6c4>
 800a4de:	4b06      	ldr	r3, [pc, #24]	; (800a4f8 <_dtoa_r+0x648>)
 800a4e0:	f7f6 f8aa 	bl	8000638 <__aeabi_dmul>
 800a4e4:	4680      	mov	r8, r0
 800a4e6:	4689      	mov	r9, r1
 800a4e8:	e7bd      	b.n	800a466 <_dtoa_r+0x5b6>
 800a4ea:	bf00      	nop
 800a4ec:	0800dec8 	.word	0x0800dec8
 800a4f0:	0800dea0 	.word	0x0800dea0
 800a4f4:	3ff00000 	.word	0x3ff00000
 800a4f8:	40240000 	.word	0x40240000
 800a4fc:	401c0000 	.word	0x401c0000
 800a500:	40140000 	.word	0x40140000
 800a504:	3fe00000 	.word	0x3fe00000
 800a508:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a50c:	9d00      	ldr	r5, [sp, #0]
 800a50e:	4642      	mov	r2, r8
 800a510:	464b      	mov	r3, r9
 800a512:	4630      	mov	r0, r6
 800a514:	4639      	mov	r1, r7
 800a516:	f7f6 f9b9 	bl	800088c <__aeabi_ddiv>
 800a51a:	f7f6 fb3d 	bl	8000b98 <__aeabi_d2iz>
 800a51e:	9001      	str	r0, [sp, #4]
 800a520:	f7f6 f820 	bl	8000564 <__aeabi_i2d>
 800a524:	4642      	mov	r2, r8
 800a526:	464b      	mov	r3, r9
 800a528:	f7f6 f886 	bl	8000638 <__aeabi_dmul>
 800a52c:	4602      	mov	r2, r0
 800a52e:	460b      	mov	r3, r1
 800a530:	4630      	mov	r0, r6
 800a532:	4639      	mov	r1, r7
 800a534:	f7f5 fec8 	bl	80002c8 <__aeabi_dsub>
 800a538:	9e01      	ldr	r6, [sp, #4]
 800a53a:	9f04      	ldr	r7, [sp, #16]
 800a53c:	3630      	adds	r6, #48	; 0x30
 800a53e:	f805 6b01 	strb.w	r6, [r5], #1
 800a542:	9e00      	ldr	r6, [sp, #0]
 800a544:	1bae      	subs	r6, r5, r6
 800a546:	42b7      	cmp	r7, r6
 800a548:	4602      	mov	r2, r0
 800a54a:	460b      	mov	r3, r1
 800a54c:	d134      	bne.n	800a5b8 <_dtoa_r+0x708>
 800a54e:	f7f5 febd 	bl	80002cc <__adddf3>
 800a552:	4642      	mov	r2, r8
 800a554:	464b      	mov	r3, r9
 800a556:	4606      	mov	r6, r0
 800a558:	460f      	mov	r7, r1
 800a55a:	f7f6 fafd 	bl	8000b58 <__aeabi_dcmpgt>
 800a55e:	b9c8      	cbnz	r0, 800a594 <_dtoa_r+0x6e4>
 800a560:	4642      	mov	r2, r8
 800a562:	464b      	mov	r3, r9
 800a564:	4630      	mov	r0, r6
 800a566:	4639      	mov	r1, r7
 800a568:	f7f6 face 	bl	8000b08 <__aeabi_dcmpeq>
 800a56c:	b110      	cbz	r0, 800a574 <_dtoa_r+0x6c4>
 800a56e:	9b01      	ldr	r3, [sp, #4]
 800a570:	07db      	lsls	r3, r3, #31
 800a572:	d40f      	bmi.n	800a594 <_dtoa_r+0x6e4>
 800a574:	4651      	mov	r1, sl
 800a576:	4620      	mov	r0, r4
 800a578:	f000 fbcc 	bl	800ad14 <_Bfree>
 800a57c:	2300      	movs	r3, #0
 800a57e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a580:	702b      	strb	r3, [r5, #0]
 800a582:	f10b 0301 	add.w	r3, fp, #1
 800a586:	6013      	str	r3, [r2, #0]
 800a588:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	f43f ace2 	beq.w	8009f54 <_dtoa_r+0xa4>
 800a590:	601d      	str	r5, [r3, #0]
 800a592:	e4df      	b.n	8009f54 <_dtoa_r+0xa4>
 800a594:	465f      	mov	r7, fp
 800a596:	462b      	mov	r3, r5
 800a598:	461d      	mov	r5, r3
 800a59a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a59e:	2a39      	cmp	r2, #57	; 0x39
 800a5a0:	d106      	bne.n	800a5b0 <_dtoa_r+0x700>
 800a5a2:	9a00      	ldr	r2, [sp, #0]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d1f7      	bne.n	800a598 <_dtoa_r+0x6e8>
 800a5a8:	9900      	ldr	r1, [sp, #0]
 800a5aa:	2230      	movs	r2, #48	; 0x30
 800a5ac:	3701      	adds	r7, #1
 800a5ae:	700a      	strb	r2, [r1, #0]
 800a5b0:	781a      	ldrb	r2, [r3, #0]
 800a5b2:	3201      	adds	r2, #1
 800a5b4:	701a      	strb	r2, [r3, #0]
 800a5b6:	e790      	b.n	800a4da <_dtoa_r+0x62a>
 800a5b8:	4ba3      	ldr	r3, [pc, #652]	; (800a848 <_dtoa_r+0x998>)
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	f7f6 f83c 	bl	8000638 <__aeabi_dmul>
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	4606      	mov	r6, r0
 800a5c6:	460f      	mov	r7, r1
 800a5c8:	f7f6 fa9e 	bl	8000b08 <__aeabi_dcmpeq>
 800a5cc:	2800      	cmp	r0, #0
 800a5ce:	d09e      	beq.n	800a50e <_dtoa_r+0x65e>
 800a5d0:	e7d0      	b.n	800a574 <_dtoa_r+0x6c4>
 800a5d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5d4:	2a00      	cmp	r2, #0
 800a5d6:	f000 80ca 	beq.w	800a76e <_dtoa_r+0x8be>
 800a5da:	9a07      	ldr	r2, [sp, #28]
 800a5dc:	2a01      	cmp	r2, #1
 800a5de:	f300 80ad 	bgt.w	800a73c <_dtoa_r+0x88c>
 800a5e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5e4:	2a00      	cmp	r2, #0
 800a5e6:	f000 80a5 	beq.w	800a734 <_dtoa_r+0x884>
 800a5ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a5ee:	9e08      	ldr	r6, [sp, #32]
 800a5f0:	9d05      	ldr	r5, [sp, #20]
 800a5f2:	9a05      	ldr	r2, [sp, #20]
 800a5f4:	441a      	add	r2, r3
 800a5f6:	9205      	str	r2, [sp, #20]
 800a5f8:	9a06      	ldr	r2, [sp, #24]
 800a5fa:	2101      	movs	r1, #1
 800a5fc:	441a      	add	r2, r3
 800a5fe:	4620      	mov	r0, r4
 800a600:	9206      	str	r2, [sp, #24]
 800a602:	f000 fc87 	bl	800af14 <__i2b>
 800a606:	4607      	mov	r7, r0
 800a608:	b165      	cbz	r5, 800a624 <_dtoa_r+0x774>
 800a60a:	9b06      	ldr	r3, [sp, #24]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	dd09      	ble.n	800a624 <_dtoa_r+0x774>
 800a610:	42ab      	cmp	r3, r5
 800a612:	9a05      	ldr	r2, [sp, #20]
 800a614:	bfa8      	it	ge
 800a616:	462b      	movge	r3, r5
 800a618:	1ad2      	subs	r2, r2, r3
 800a61a:	9205      	str	r2, [sp, #20]
 800a61c:	9a06      	ldr	r2, [sp, #24]
 800a61e:	1aed      	subs	r5, r5, r3
 800a620:	1ad3      	subs	r3, r2, r3
 800a622:	9306      	str	r3, [sp, #24]
 800a624:	9b08      	ldr	r3, [sp, #32]
 800a626:	b1f3      	cbz	r3, 800a666 <_dtoa_r+0x7b6>
 800a628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	f000 80a3 	beq.w	800a776 <_dtoa_r+0x8c6>
 800a630:	2e00      	cmp	r6, #0
 800a632:	dd10      	ble.n	800a656 <_dtoa_r+0x7a6>
 800a634:	4639      	mov	r1, r7
 800a636:	4632      	mov	r2, r6
 800a638:	4620      	mov	r0, r4
 800a63a:	f000 fd2b 	bl	800b094 <__pow5mult>
 800a63e:	4652      	mov	r2, sl
 800a640:	4601      	mov	r1, r0
 800a642:	4607      	mov	r7, r0
 800a644:	4620      	mov	r0, r4
 800a646:	f000 fc7b 	bl	800af40 <__multiply>
 800a64a:	4651      	mov	r1, sl
 800a64c:	4680      	mov	r8, r0
 800a64e:	4620      	mov	r0, r4
 800a650:	f000 fb60 	bl	800ad14 <_Bfree>
 800a654:	46c2      	mov	sl, r8
 800a656:	9b08      	ldr	r3, [sp, #32]
 800a658:	1b9a      	subs	r2, r3, r6
 800a65a:	d004      	beq.n	800a666 <_dtoa_r+0x7b6>
 800a65c:	4651      	mov	r1, sl
 800a65e:	4620      	mov	r0, r4
 800a660:	f000 fd18 	bl	800b094 <__pow5mult>
 800a664:	4682      	mov	sl, r0
 800a666:	2101      	movs	r1, #1
 800a668:	4620      	mov	r0, r4
 800a66a:	f000 fc53 	bl	800af14 <__i2b>
 800a66e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a670:	2b00      	cmp	r3, #0
 800a672:	4606      	mov	r6, r0
 800a674:	f340 8081 	ble.w	800a77a <_dtoa_r+0x8ca>
 800a678:	461a      	mov	r2, r3
 800a67a:	4601      	mov	r1, r0
 800a67c:	4620      	mov	r0, r4
 800a67e:	f000 fd09 	bl	800b094 <__pow5mult>
 800a682:	9b07      	ldr	r3, [sp, #28]
 800a684:	2b01      	cmp	r3, #1
 800a686:	4606      	mov	r6, r0
 800a688:	dd7a      	ble.n	800a780 <_dtoa_r+0x8d0>
 800a68a:	f04f 0800 	mov.w	r8, #0
 800a68e:	6933      	ldr	r3, [r6, #16]
 800a690:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a694:	6918      	ldr	r0, [r3, #16]
 800a696:	f000 fbef 	bl	800ae78 <__hi0bits>
 800a69a:	f1c0 0020 	rsb	r0, r0, #32
 800a69e:	9b06      	ldr	r3, [sp, #24]
 800a6a0:	4418      	add	r0, r3
 800a6a2:	f010 001f 	ands.w	r0, r0, #31
 800a6a6:	f000 8094 	beq.w	800a7d2 <_dtoa_r+0x922>
 800a6aa:	f1c0 0320 	rsb	r3, r0, #32
 800a6ae:	2b04      	cmp	r3, #4
 800a6b0:	f340 8085 	ble.w	800a7be <_dtoa_r+0x90e>
 800a6b4:	9b05      	ldr	r3, [sp, #20]
 800a6b6:	f1c0 001c 	rsb	r0, r0, #28
 800a6ba:	4403      	add	r3, r0
 800a6bc:	9305      	str	r3, [sp, #20]
 800a6be:	9b06      	ldr	r3, [sp, #24]
 800a6c0:	4403      	add	r3, r0
 800a6c2:	4405      	add	r5, r0
 800a6c4:	9306      	str	r3, [sp, #24]
 800a6c6:	9b05      	ldr	r3, [sp, #20]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	dd05      	ble.n	800a6d8 <_dtoa_r+0x828>
 800a6cc:	4651      	mov	r1, sl
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	f000 fd39 	bl	800b148 <__lshift>
 800a6d6:	4682      	mov	sl, r0
 800a6d8:	9b06      	ldr	r3, [sp, #24]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	dd05      	ble.n	800a6ea <_dtoa_r+0x83a>
 800a6de:	4631      	mov	r1, r6
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	4620      	mov	r0, r4
 800a6e4:	f000 fd30 	bl	800b148 <__lshift>
 800a6e8:	4606      	mov	r6, r0
 800a6ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d072      	beq.n	800a7d6 <_dtoa_r+0x926>
 800a6f0:	4631      	mov	r1, r6
 800a6f2:	4650      	mov	r0, sl
 800a6f4:	f000 fd94 	bl	800b220 <__mcmp>
 800a6f8:	2800      	cmp	r0, #0
 800a6fa:	da6c      	bge.n	800a7d6 <_dtoa_r+0x926>
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	4651      	mov	r1, sl
 800a700:	220a      	movs	r2, #10
 800a702:	4620      	mov	r0, r4
 800a704:	f000 fb28 	bl	800ad58 <__multadd>
 800a708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a70a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a70e:	4682      	mov	sl, r0
 800a710:	2b00      	cmp	r3, #0
 800a712:	f000 81b0 	beq.w	800aa76 <_dtoa_r+0xbc6>
 800a716:	2300      	movs	r3, #0
 800a718:	4639      	mov	r1, r7
 800a71a:	220a      	movs	r2, #10
 800a71c:	4620      	mov	r0, r4
 800a71e:	f000 fb1b 	bl	800ad58 <__multadd>
 800a722:	9b01      	ldr	r3, [sp, #4]
 800a724:	2b00      	cmp	r3, #0
 800a726:	4607      	mov	r7, r0
 800a728:	f300 8096 	bgt.w	800a858 <_dtoa_r+0x9a8>
 800a72c:	9b07      	ldr	r3, [sp, #28]
 800a72e:	2b02      	cmp	r3, #2
 800a730:	dc59      	bgt.n	800a7e6 <_dtoa_r+0x936>
 800a732:	e091      	b.n	800a858 <_dtoa_r+0x9a8>
 800a734:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a736:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a73a:	e758      	b.n	800a5ee <_dtoa_r+0x73e>
 800a73c:	9b04      	ldr	r3, [sp, #16]
 800a73e:	1e5e      	subs	r6, r3, #1
 800a740:	9b08      	ldr	r3, [sp, #32]
 800a742:	42b3      	cmp	r3, r6
 800a744:	bfbf      	itttt	lt
 800a746:	9b08      	ldrlt	r3, [sp, #32]
 800a748:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a74a:	9608      	strlt	r6, [sp, #32]
 800a74c:	1af3      	sublt	r3, r6, r3
 800a74e:	bfb4      	ite	lt
 800a750:	18d2      	addlt	r2, r2, r3
 800a752:	1b9e      	subge	r6, r3, r6
 800a754:	9b04      	ldr	r3, [sp, #16]
 800a756:	bfbc      	itt	lt
 800a758:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a75a:	2600      	movlt	r6, #0
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	bfb7      	itett	lt
 800a760:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a764:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a768:	1a9d      	sublt	r5, r3, r2
 800a76a:	2300      	movlt	r3, #0
 800a76c:	e741      	b.n	800a5f2 <_dtoa_r+0x742>
 800a76e:	9e08      	ldr	r6, [sp, #32]
 800a770:	9d05      	ldr	r5, [sp, #20]
 800a772:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a774:	e748      	b.n	800a608 <_dtoa_r+0x758>
 800a776:	9a08      	ldr	r2, [sp, #32]
 800a778:	e770      	b.n	800a65c <_dtoa_r+0x7ac>
 800a77a:	9b07      	ldr	r3, [sp, #28]
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	dc19      	bgt.n	800a7b4 <_dtoa_r+0x904>
 800a780:	9b02      	ldr	r3, [sp, #8]
 800a782:	b9bb      	cbnz	r3, 800a7b4 <_dtoa_r+0x904>
 800a784:	9b03      	ldr	r3, [sp, #12]
 800a786:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a78a:	b99b      	cbnz	r3, 800a7b4 <_dtoa_r+0x904>
 800a78c:	9b03      	ldr	r3, [sp, #12]
 800a78e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a792:	0d1b      	lsrs	r3, r3, #20
 800a794:	051b      	lsls	r3, r3, #20
 800a796:	b183      	cbz	r3, 800a7ba <_dtoa_r+0x90a>
 800a798:	9b05      	ldr	r3, [sp, #20]
 800a79a:	3301      	adds	r3, #1
 800a79c:	9305      	str	r3, [sp, #20]
 800a79e:	9b06      	ldr	r3, [sp, #24]
 800a7a0:	3301      	adds	r3, #1
 800a7a2:	9306      	str	r3, [sp, #24]
 800a7a4:	f04f 0801 	mov.w	r8, #1
 800a7a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	f47f af6f 	bne.w	800a68e <_dtoa_r+0x7de>
 800a7b0:	2001      	movs	r0, #1
 800a7b2:	e774      	b.n	800a69e <_dtoa_r+0x7ee>
 800a7b4:	f04f 0800 	mov.w	r8, #0
 800a7b8:	e7f6      	b.n	800a7a8 <_dtoa_r+0x8f8>
 800a7ba:	4698      	mov	r8, r3
 800a7bc:	e7f4      	b.n	800a7a8 <_dtoa_r+0x8f8>
 800a7be:	d082      	beq.n	800a6c6 <_dtoa_r+0x816>
 800a7c0:	9a05      	ldr	r2, [sp, #20]
 800a7c2:	331c      	adds	r3, #28
 800a7c4:	441a      	add	r2, r3
 800a7c6:	9205      	str	r2, [sp, #20]
 800a7c8:	9a06      	ldr	r2, [sp, #24]
 800a7ca:	441a      	add	r2, r3
 800a7cc:	441d      	add	r5, r3
 800a7ce:	9206      	str	r2, [sp, #24]
 800a7d0:	e779      	b.n	800a6c6 <_dtoa_r+0x816>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	e7f4      	b.n	800a7c0 <_dtoa_r+0x910>
 800a7d6:	9b04      	ldr	r3, [sp, #16]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	dc37      	bgt.n	800a84c <_dtoa_r+0x99c>
 800a7dc:	9b07      	ldr	r3, [sp, #28]
 800a7de:	2b02      	cmp	r3, #2
 800a7e0:	dd34      	ble.n	800a84c <_dtoa_r+0x99c>
 800a7e2:	9b04      	ldr	r3, [sp, #16]
 800a7e4:	9301      	str	r3, [sp, #4]
 800a7e6:	9b01      	ldr	r3, [sp, #4]
 800a7e8:	b963      	cbnz	r3, 800a804 <_dtoa_r+0x954>
 800a7ea:	4631      	mov	r1, r6
 800a7ec:	2205      	movs	r2, #5
 800a7ee:	4620      	mov	r0, r4
 800a7f0:	f000 fab2 	bl	800ad58 <__multadd>
 800a7f4:	4601      	mov	r1, r0
 800a7f6:	4606      	mov	r6, r0
 800a7f8:	4650      	mov	r0, sl
 800a7fa:	f000 fd11 	bl	800b220 <__mcmp>
 800a7fe:	2800      	cmp	r0, #0
 800a800:	f73f adbb 	bgt.w	800a37a <_dtoa_r+0x4ca>
 800a804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a806:	9d00      	ldr	r5, [sp, #0]
 800a808:	ea6f 0b03 	mvn.w	fp, r3
 800a80c:	f04f 0800 	mov.w	r8, #0
 800a810:	4631      	mov	r1, r6
 800a812:	4620      	mov	r0, r4
 800a814:	f000 fa7e 	bl	800ad14 <_Bfree>
 800a818:	2f00      	cmp	r7, #0
 800a81a:	f43f aeab 	beq.w	800a574 <_dtoa_r+0x6c4>
 800a81e:	f1b8 0f00 	cmp.w	r8, #0
 800a822:	d005      	beq.n	800a830 <_dtoa_r+0x980>
 800a824:	45b8      	cmp	r8, r7
 800a826:	d003      	beq.n	800a830 <_dtoa_r+0x980>
 800a828:	4641      	mov	r1, r8
 800a82a:	4620      	mov	r0, r4
 800a82c:	f000 fa72 	bl	800ad14 <_Bfree>
 800a830:	4639      	mov	r1, r7
 800a832:	4620      	mov	r0, r4
 800a834:	f000 fa6e 	bl	800ad14 <_Bfree>
 800a838:	e69c      	b.n	800a574 <_dtoa_r+0x6c4>
 800a83a:	2600      	movs	r6, #0
 800a83c:	4637      	mov	r7, r6
 800a83e:	e7e1      	b.n	800a804 <_dtoa_r+0x954>
 800a840:	46bb      	mov	fp, r7
 800a842:	4637      	mov	r7, r6
 800a844:	e599      	b.n	800a37a <_dtoa_r+0x4ca>
 800a846:	bf00      	nop
 800a848:	40240000 	.word	0x40240000
 800a84c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a84e:	2b00      	cmp	r3, #0
 800a850:	f000 80c8 	beq.w	800a9e4 <_dtoa_r+0xb34>
 800a854:	9b04      	ldr	r3, [sp, #16]
 800a856:	9301      	str	r3, [sp, #4]
 800a858:	2d00      	cmp	r5, #0
 800a85a:	dd05      	ble.n	800a868 <_dtoa_r+0x9b8>
 800a85c:	4639      	mov	r1, r7
 800a85e:	462a      	mov	r2, r5
 800a860:	4620      	mov	r0, r4
 800a862:	f000 fc71 	bl	800b148 <__lshift>
 800a866:	4607      	mov	r7, r0
 800a868:	f1b8 0f00 	cmp.w	r8, #0
 800a86c:	d05b      	beq.n	800a926 <_dtoa_r+0xa76>
 800a86e:	6879      	ldr	r1, [r7, #4]
 800a870:	4620      	mov	r0, r4
 800a872:	f000 fa0f 	bl	800ac94 <_Balloc>
 800a876:	4605      	mov	r5, r0
 800a878:	b928      	cbnz	r0, 800a886 <_dtoa_r+0x9d6>
 800a87a:	4b83      	ldr	r3, [pc, #524]	; (800aa88 <_dtoa_r+0xbd8>)
 800a87c:	4602      	mov	r2, r0
 800a87e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a882:	f7ff bb2e 	b.w	8009ee2 <_dtoa_r+0x32>
 800a886:	693a      	ldr	r2, [r7, #16]
 800a888:	3202      	adds	r2, #2
 800a88a:	0092      	lsls	r2, r2, #2
 800a88c:	f107 010c 	add.w	r1, r7, #12
 800a890:	300c      	adds	r0, #12
 800a892:	f002 fb19 	bl	800cec8 <memcpy>
 800a896:	2201      	movs	r2, #1
 800a898:	4629      	mov	r1, r5
 800a89a:	4620      	mov	r0, r4
 800a89c:	f000 fc54 	bl	800b148 <__lshift>
 800a8a0:	9b00      	ldr	r3, [sp, #0]
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	9304      	str	r3, [sp, #16]
 800a8a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8aa:	4413      	add	r3, r2
 800a8ac:	9308      	str	r3, [sp, #32]
 800a8ae:	9b02      	ldr	r3, [sp, #8]
 800a8b0:	f003 0301 	and.w	r3, r3, #1
 800a8b4:	46b8      	mov	r8, r7
 800a8b6:	9306      	str	r3, [sp, #24]
 800a8b8:	4607      	mov	r7, r0
 800a8ba:	9b04      	ldr	r3, [sp, #16]
 800a8bc:	4631      	mov	r1, r6
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	4650      	mov	r0, sl
 800a8c2:	9301      	str	r3, [sp, #4]
 800a8c4:	f7ff fa6a 	bl	8009d9c <quorem>
 800a8c8:	4641      	mov	r1, r8
 800a8ca:	9002      	str	r0, [sp, #8]
 800a8cc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a8d0:	4650      	mov	r0, sl
 800a8d2:	f000 fca5 	bl	800b220 <__mcmp>
 800a8d6:	463a      	mov	r2, r7
 800a8d8:	9005      	str	r0, [sp, #20]
 800a8da:	4631      	mov	r1, r6
 800a8dc:	4620      	mov	r0, r4
 800a8de:	f000 fcbb 	bl	800b258 <__mdiff>
 800a8e2:	68c2      	ldr	r2, [r0, #12]
 800a8e4:	4605      	mov	r5, r0
 800a8e6:	bb02      	cbnz	r2, 800a92a <_dtoa_r+0xa7a>
 800a8e8:	4601      	mov	r1, r0
 800a8ea:	4650      	mov	r0, sl
 800a8ec:	f000 fc98 	bl	800b220 <__mcmp>
 800a8f0:	4602      	mov	r2, r0
 800a8f2:	4629      	mov	r1, r5
 800a8f4:	4620      	mov	r0, r4
 800a8f6:	9209      	str	r2, [sp, #36]	; 0x24
 800a8f8:	f000 fa0c 	bl	800ad14 <_Bfree>
 800a8fc:	9b07      	ldr	r3, [sp, #28]
 800a8fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a900:	9d04      	ldr	r5, [sp, #16]
 800a902:	ea43 0102 	orr.w	r1, r3, r2
 800a906:	9b06      	ldr	r3, [sp, #24]
 800a908:	4319      	orrs	r1, r3
 800a90a:	d110      	bne.n	800a92e <_dtoa_r+0xa7e>
 800a90c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a910:	d029      	beq.n	800a966 <_dtoa_r+0xab6>
 800a912:	9b05      	ldr	r3, [sp, #20]
 800a914:	2b00      	cmp	r3, #0
 800a916:	dd02      	ble.n	800a91e <_dtoa_r+0xa6e>
 800a918:	9b02      	ldr	r3, [sp, #8]
 800a91a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a91e:	9b01      	ldr	r3, [sp, #4]
 800a920:	f883 9000 	strb.w	r9, [r3]
 800a924:	e774      	b.n	800a810 <_dtoa_r+0x960>
 800a926:	4638      	mov	r0, r7
 800a928:	e7ba      	b.n	800a8a0 <_dtoa_r+0x9f0>
 800a92a:	2201      	movs	r2, #1
 800a92c:	e7e1      	b.n	800a8f2 <_dtoa_r+0xa42>
 800a92e:	9b05      	ldr	r3, [sp, #20]
 800a930:	2b00      	cmp	r3, #0
 800a932:	db04      	blt.n	800a93e <_dtoa_r+0xa8e>
 800a934:	9907      	ldr	r1, [sp, #28]
 800a936:	430b      	orrs	r3, r1
 800a938:	9906      	ldr	r1, [sp, #24]
 800a93a:	430b      	orrs	r3, r1
 800a93c:	d120      	bne.n	800a980 <_dtoa_r+0xad0>
 800a93e:	2a00      	cmp	r2, #0
 800a940:	dded      	ble.n	800a91e <_dtoa_r+0xa6e>
 800a942:	4651      	mov	r1, sl
 800a944:	2201      	movs	r2, #1
 800a946:	4620      	mov	r0, r4
 800a948:	f000 fbfe 	bl	800b148 <__lshift>
 800a94c:	4631      	mov	r1, r6
 800a94e:	4682      	mov	sl, r0
 800a950:	f000 fc66 	bl	800b220 <__mcmp>
 800a954:	2800      	cmp	r0, #0
 800a956:	dc03      	bgt.n	800a960 <_dtoa_r+0xab0>
 800a958:	d1e1      	bne.n	800a91e <_dtoa_r+0xa6e>
 800a95a:	f019 0f01 	tst.w	r9, #1
 800a95e:	d0de      	beq.n	800a91e <_dtoa_r+0xa6e>
 800a960:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a964:	d1d8      	bne.n	800a918 <_dtoa_r+0xa68>
 800a966:	9a01      	ldr	r2, [sp, #4]
 800a968:	2339      	movs	r3, #57	; 0x39
 800a96a:	7013      	strb	r3, [r2, #0]
 800a96c:	462b      	mov	r3, r5
 800a96e:	461d      	mov	r5, r3
 800a970:	3b01      	subs	r3, #1
 800a972:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a976:	2a39      	cmp	r2, #57	; 0x39
 800a978:	d06c      	beq.n	800aa54 <_dtoa_r+0xba4>
 800a97a:	3201      	adds	r2, #1
 800a97c:	701a      	strb	r2, [r3, #0]
 800a97e:	e747      	b.n	800a810 <_dtoa_r+0x960>
 800a980:	2a00      	cmp	r2, #0
 800a982:	dd07      	ble.n	800a994 <_dtoa_r+0xae4>
 800a984:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a988:	d0ed      	beq.n	800a966 <_dtoa_r+0xab6>
 800a98a:	9a01      	ldr	r2, [sp, #4]
 800a98c:	f109 0301 	add.w	r3, r9, #1
 800a990:	7013      	strb	r3, [r2, #0]
 800a992:	e73d      	b.n	800a810 <_dtoa_r+0x960>
 800a994:	9b04      	ldr	r3, [sp, #16]
 800a996:	9a08      	ldr	r2, [sp, #32]
 800a998:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d043      	beq.n	800aa28 <_dtoa_r+0xb78>
 800a9a0:	4651      	mov	r1, sl
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	220a      	movs	r2, #10
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	f000 f9d6 	bl	800ad58 <__multadd>
 800a9ac:	45b8      	cmp	r8, r7
 800a9ae:	4682      	mov	sl, r0
 800a9b0:	f04f 0300 	mov.w	r3, #0
 800a9b4:	f04f 020a 	mov.w	r2, #10
 800a9b8:	4641      	mov	r1, r8
 800a9ba:	4620      	mov	r0, r4
 800a9bc:	d107      	bne.n	800a9ce <_dtoa_r+0xb1e>
 800a9be:	f000 f9cb 	bl	800ad58 <__multadd>
 800a9c2:	4680      	mov	r8, r0
 800a9c4:	4607      	mov	r7, r0
 800a9c6:	9b04      	ldr	r3, [sp, #16]
 800a9c8:	3301      	adds	r3, #1
 800a9ca:	9304      	str	r3, [sp, #16]
 800a9cc:	e775      	b.n	800a8ba <_dtoa_r+0xa0a>
 800a9ce:	f000 f9c3 	bl	800ad58 <__multadd>
 800a9d2:	4639      	mov	r1, r7
 800a9d4:	4680      	mov	r8, r0
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	220a      	movs	r2, #10
 800a9da:	4620      	mov	r0, r4
 800a9dc:	f000 f9bc 	bl	800ad58 <__multadd>
 800a9e0:	4607      	mov	r7, r0
 800a9e2:	e7f0      	b.n	800a9c6 <_dtoa_r+0xb16>
 800a9e4:	9b04      	ldr	r3, [sp, #16]
 800a9e6:	9301      	str	r3, [sp, #4]
 800a9e8:	9d00      	ldr	r5, [sp, #0]
 800a9ea:	4631      	mov	r1, r6
 800a9ec:	4650      	mov	r0, sl
 800a9ee:	f7ff f9d5 	bl	8009d9c <quorem>
 800a9f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a9f6:	9b00      	ldr	r3, [sp, #0]
 800a9f8:	f805 9b01 	strb.w	r9, [r5], #1
 800a9fc:	1aea      	subs	r2, r5, r3
 800a9fe:	9b01      	ldr	r3, [sp, #4]
 800aa00:	4293      	cmp	r3, r2
 800aa02:	dd07      	ble.n	800aa14 <_dtoa_r+0xb64>
 800aa04:	4651      	mov	r1, sl
 800aa06:	2300      	movs	r3, #0
 800aa08:	220a      	movs	r2, #10
 800aa0a:	4620      	mov	r0, r4
 800aa0c:	f000 f9a4 	bl	800ad58 <__multadd>
 800aa10:	4682      	mov	sl, r0
 800aa12:	e7ea      	b.n	800a9ea <_dtoa_r+0xb3a>
 800aa14:	9b01      	ldr	r3, [sp, #4]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	bfc8      	it	gt
 800aa1a:	461d      	movgt	r5, r3
 800aa1c:	9b00      	ldr	r3, [sp, #0]
 800aa1e:	bfd8      	it	le
 800aa20:	2501      	movle	r5, #1
 800aa22:	441d      	add	r5, r3
 800aa24:	f04f 0800 	mov.w	r8, #0
 800aa28:	4651      	mov	r1, sl
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	f000 fb8b 	bl	800b148 <__lshift>
 800aa32:	4631      	mov	r1, r6
 800aa34:	4682      	mov	sl, r0
 800aa36:	f000 fbf3 	bl	800b220 <__mcmp>
 800aa3a:	2800      	cmp	r0, #0
 800aa3c:	dc96      	bgt.n	800a96c <_dtoa_r+0xabc>
 800aa3e:	d102      	bne.n	800aa46 <_dtoa_r+0xb96>
 800aa40:	f019 0f01 	tst.w	r9, #1
 800aa44:	d192      	bne.n	800a96c <_dtoa_r+0xabc>
 800aa46:	462b      	mov	r3, r5
 800aa48:	461d      	mov	r5, r3
 800aa4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa4e:	2a30      	cmp	r2, #48	; 0x30
 800aa50:	d0fa      	beq.n	800aa48 <_dtoa_r+0xb98>
 800aa52:	e6dd      	b.n	800a810 <_dtoa_r+0x960>
 800aa54:	9a00      	ldr	r2, [sp, #0]
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d189      	bne.n	800a96e <_dtoa_r+0xabe>
 800aa5a:	f10b 0b01 	add.w	fp, fp, #1
 800aa5e:	2331      	movs	r3, #49	; 0x31
 800aa60:	e796      	b.n	800a990 <_dtoa_r+0xae0>
 800aa62:	4b0a      	ldr	r3, [pc, #40]	; (800aa8c <_dtoa_r+0xbdc>)
 800aa64:	f7ff ba99 	b.w	8009f9a <_dtoa_r+0xea>
 800aa68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	f47f aa6d 	bne.w	8009f4a <_dtoa_r+0x9a>
 800aa70:	4b07      	ldr	r3, [pc, #28]	; (800aa90 <_dtoa_r+0xbe0>)
 800aa72:	f7ff ba92 	b.w	8009f9a <_dtoa_r+0xea>
 800aa76:	9b01      	ldr	r3, [sp, #4]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	dcb5      	bgt.n	800a9e8 <_dtoa_r+0xb38>
 800aa7c:	9b07      	ldr	r3, [sp, #28]
 800aa7e:	2b02      	cmp	r3, #2
 800aa80:	f73f aeb1 	bgt.w	800a7e6 <_dtoa_r+0x936>
 800aa84:	e7b0      	b.n	800a9e8 <_dtoa_r+0xb38>
 800aa86:	bf00      	nop
 800aa88:	0800de33 	.word	0x0800de33
 800aa8c:	0800e118 	.word	0x0800e118
 800aa90:	0800ddb7 	.word	0x0800ddb7

0800aa94 <_free_r>:
 800aa94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa96:	2900      	cmp	r1, #0
 800aa98:	d044      	beq.n	800ab24 <_free_r+0x90>
 800aa9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa9e:	9001      	str	r0, [sp, #4]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	f1a1 0404 	sub.w	r4, r1, #4
 800aaa6:	bfb8      	it	lt
 800aaa8:	18e4      	addlt	r4, r4, r3
 800aaaa:	f000 f8e7 	bl	800ac7c <__malloc_lock>
 800aaae:	4a1e      	ldr	r2, [pc, #120]	; (800ab28 <_free_r+0x94>)
 800aab0:	9801      	ldr	r0, [sp, #4]
 800aab2:	6813      	ldr	r3, [r2, #0]
 800aab4:	b933      	cbnz	r3, 800aac4 <_free_r+0x30>
 800aab6:	6063      	str	r3, [r4, #4]
 800aab8:	6014      	str	r4, [r2, #0]
 800aaba:	b003      	add	sp, #12
 800aabc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aac0:	f000 b8e2 	b.w	800ac88 <__malloc_unlock>
 800aac4:	42a3      	cmp	r3, r4
 800aac6:	d908      	bls.n	800aada <_free_r+0x46>
 800aac8:	6825      	ldr	r5, [r4, #0]
 800aaca:	1961      	adds	r1, r4, r5
 800aacc:	428b      	cmp	r3, r1
 800aace:	bf01      	itttt	eq
 800aad0:	6819      	ldreq	r1, [r3, #0]
 800aad2:	685b      	ldreq	r3, [r3, #4]
 800aad4:	1949      	addeq	r1, r1, r5
 800aad6:	6021      	streq	r1, [r4, #0]
 800aad8:	e7ed      	b.n	800aab6 <_free_r+0x22>
 800aada:	461a      	mov	r2, r3
 800aadc:	685b      	ldr	r3, [r3, #4]
 800aade:	b10b      	cbz	r3, 800aae4 <_free_r+0x50>
 800aae0:	42a3      	cmp	r3, r4
 800aae2:	d9fa      	bls.n	800aada <_free_r+0x46>
 800aae4:	6811      	ldr	r1, [r2, #0]
 800aae6:	1855      	adds	r5, r2, r1
 800aae8:	42a5      	cmp	r5, r4
 800aaea:	d10b      	bne.n	800ab04 <_free_r+0x70>
 800aaec:	6824      	ldr	r4, [r4, #0]
 800aaee:	4421      	add	r1, r4
 800aaf0:	1854      	adds	r4, r2, r1
 800aaf2:	42a3      	cmp	r3, r4
 800aaf4:	6011      	str	r1, [r2, #0]
 800aaf6:	d1e0      	bne.n	800aaba <_free_r+0x26>
 800aaf8:	681c      	ldr	r4, [r3, #0]
 800aafa:	685b      	ldr	r3, [r3, #4]
 800aafc:	6053      	str	r3, [r2, #4]
 800aafe:	440c      	add	r4, r1
 800ab00:	6014      	str	r4, [r2, #0]
 800ab02:	e7da      	b.n	800aaba <_free_r+0x26>
 800ab04:	d902      	bls.n	800ab0c <_free_r+0x78>
 800ab06:	230c      	movs	r3, #12
 800ab08:	6003      	str	r3, [r0, #0]
 800ab0a:	e7d6      	b.n	800aaba <_free_r+0x26>
 800ab0c:	6825      	ldr	r5, [r4, #0]
 800ab0e:	1961      	adds	r1, r4, r5
 800ab10:	428b      	cmp	r3, r1
 800ab12:	bf04      	itt	eq
 800ab14:	6819      	ldreq	r1, [r3, #0]
 800ab16:	685b      	ldreq	r3, [r3, #4]
 800ab18:	6063      	str	r3, [r4, #4]
 800ab1a:	bf04      	itt	eq
 800ab1c:	1949      	addeq	r1, r1, r5
 800ab1e:	6021      	streq	r1, [r4, #0]
 800ab20:	6054      	str	r4, [r2, #4]
 800ab22:	e7ca      	b.n	800aaba <_free_r+0x26>
 800ab24:	b003      	add	sp, #12
 800ab26:	bd30      	pop	{r4, r5, pc}
 800ab28:	200005e8 	.word	0x200005e8

0800ab2c <malloc>:
 800ab2c:	4b02      	ldr	r3, [pc, #8]	; (800ab38 <malloc+0xc>)
 800ab2e:	4601      	mov	r1, r0
 800ab30:	6818      	ldr	r0, [r3, #0]
 800ab32:	f000 b823 	b.w	800ab7c <_malloc_r>
 800ab36:	bf00      	nop
 800ab38:	20000064 	.word	0x20000064

0800ab3c <sbrk_aligned>:
 800ab3c:	b570      	push	{r4, r5, r6, lr}
 800ab3e:	4e0e      	ldr	r6, [pc, #56]	; (800ab78 <sbrk_aligned+0x3c>)
 800ab40:	460c      	mov	r4, r1
 800ab42:	6831      	ldr	r1, [r6, #0]
 800ab44:	4605      	mov	r5, r0
 800ab46:	b911      	cbnz	r1, 800ab4e <sbrk_aligned+0x12>
 800ab48:	f002 f9ae 	bl	800cea8 <_sbrk_r>
 800ab4c:	6030      	str	r0, [r6, #0]
 800ab4e:	4621      	mov	r1, r4
 800ab50:	4628      	mov	r0, r5
 800ab52:	f002 f9a9 	bl	800cea8 <_sbrk_r>
 800ab56:	1c43      	adds	r3, r0, #1
 800ab58:	d00a      	beq.n	800ab70 <sbrk_aligned+0x34>
 800ab5a:	1cc4      	adds	r4, r0, #3
 800ab5c:	f024 0403 	bic.w	r4, r4, #3
 800ab60:	42a0      	cmp	r0, r4
 800ab62:	d007      	beq.n	800ab74 <sbrk_aligned+0x38>
 800ab64:	1a21      	subs	r1, r4, r0
 800ab66:	4628      	mov	r0, r5
 800ab68:	f002 f99e 	bl	800cea8 <_sbrk_r>
 800ab6c:	3001      	adds	r0, #1
 800ab6e:	d101      	bne.n	800ab74 <sbrk_aligned+0x38>
 800ab70:	f04f 34ff 	mov.w	r4, #4294967295
 800ab74:	4620      	mov	r0, r4
 800ab76:	bd70      	pop	{r4, r5, r6, pc}
 800ab78:	200005ec 	.word	0x200005ec

0800ab7c <_malloc_r>:
 800ab7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab80:	1ccd      	adds	r5, r1, #3
 800ab82:	f025 0503 	bic.w	r5, r5, #3
 800ab86:	3508      	adds	r5, #8
 800ab88:	2d0c      	cmp	r5, #12
 800ab8a:	bf38      	it	cc
 800ab8c:	250c      	movcc	r5, #12
 800ab8e:	2d00      	cmp	r5, #0
 800ab90:	4607      	mov	r7, r0
 800ab92:	db01      	blt.n	800ab98 <_malloc_r+0x1c>
 800ab94:	42a9      	cmp	r1, r5
 800ab96:	d905      	bls.n	800aba4 <_malloc_r+0x28>
 800ab98:	230c      	movs	r3, #12
 800ab9a:	603b      	str	r3, [r7, #0]
 800ab9c:	2600      	movs	r6, #0
 800ab9e:	4630      	mov	r0, r6
 800aba0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aba4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ac78 <_malloc_r+0xfc>
 800aba8:	f000 f868 	bl	800ac7c <__malloc_lock>
 800abac:	f8d8 3000 	ldr.w	r3, [r8]
 800abb0:	461c      	mov	r4, r3
 800abb2:	bb5c      	cbnz	r4, 800ac0c <_malloc_r+0x90>
 800abb4:	4629      	mov	r1, r5
 800abb6:	4638      	mov	r0, r7
 800abb8:	f7ff ffc0 	bl	800ab3c <sbrk_aligned>
 800abbc:	1c43      	adds	r3, r0, #1
 800abbe:	4604      	mov	r4, r0
 800abc0:	d155      	bne.n	800ac6e <_malloc_r+0xf2>
 800abc2:	f8d8 4000 	ldr.w	r4, [r8]
 800abc6:	4626      	mov	r6, r4
 800abc8:	2e00      	cmp	r6, #0
 800abca:	d145      	bne.n	800ac58 <_malloc_r+0xdc>
 800abcc:	2c00      	cmp	r4, #0
 800abce:	d048      	beq.n	800ac62 <_malloc_r+0xe6>
 800abd0:	6823      	ldr	r3, [r4, #0]
 800abd2:	4631      	mov	r1, r6
 800abd4:	4638      	mov	r0, r7
 800abd6:	eb04 0903 	add.w	r9, r4, r3
 800abda:	f002 f965 	bl	800cea8 <_sbrk_r>
 800abde:	4581      	cmp	r9, r0
 800abe0:	d13f      	bne.n	800ac62 <_malloc_r+0xe6>
 800abe2:	6821      	ldr	r1, [r4, #0]
 800abe4:	1a6d      	subs	r5, r5, r1
 800abe6:	4629      	mov	r1, r5
 800abe8:	4638      	mov	r0, r7
 800abea:	f7ff ffa7 	bl	800ab3c <sbrk_aligned>
 800abee:	3001      	adds	r0, #1
 800abf0:	d037      	beq.n	800ac62 <_malloc_r+0xe6>
 800abf2:	6823      	ldr	r3, [r4, #0]
 800abf4:	442b      	add	r3, r5
 800abf6:	6023      	str	r3, [r4, #0]
 800abf8:	f8d8 3000 	ldr.w	r3, [r8]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d038      	beq.n	800ac72 <_malloc_r+0xf6>
 800ac00:	685a      	ldr	r2, [r3, #4]
 800ac02:	42a2      	cmp	r2, r4
 800ac04:	d12b      	bne.n	800ac5e <_malloc_r+0xe2>
 800ac06:	2200      	movs	r2, #0
 800ac08:	605a      	str	r2, [r3, #4]
 800ac0a:	e00f      	b.n	800ac2c <_malloc_r+0xb0>
 800ac0c:	6822      	ldr	r2, [r4, #0]
 800ac0e:	1b52      	subs	r2, r2, r5
 800ac10:	d41f      	bmi.n	800ac52 <_malloc_r+0xd6>
 800ac12:	2a0b      	cmp	r2, #11
 800ac14:	d917      	bls.n	800ac46 <_malloc_r+0xca>
 800ac16:	1961      	adds	r1, r4, r5
 800ac18:	42a3      	cmp	r3, r4
 800ac1a:	6025      	str	r5, [r4, #0]
 800ac1c:	bf18      	it	ne
 800ac1e:	6059      	strne	r1, [r3, #4]
 800ac20:	6863      	ldr	r3, [r4, #4]
 800ac22:	bf08      	it	eq
 800ac24:	f8c8 1000 	streq.w	r1, [r8]
 800ac28:	5162      	str	r2, [r4, r5]
 800ac2a:	604b      	str	r3, [r1, #4]
 800ac2c:	4638      	mov	r0, r7
 800ac2e:	f104 060b 	add.w	r6, r4, #11
 800ac32:	f000 f829 	bl	800ac88 <__malloc_unlock>
 800ac36:	f026 0607 	bic.w	r6, r6, #7
 800ac3a:	1d23      	adds	r3, r4, #4
 800ac3c:	1af2      	subs	r2, r6, r3
 800ac3e:	d0ae      	beq.n	800ab9e <_malloc_r+0x22>
 800ac40:	1b9b      	subs	r3, r3, r6
 800ac42:	50a3      	str	r3, [r4, r2]
 800ac44:	e7ab      	b.n	800ab9e <_malloc_r+0x22>
 800ac46:	42a3      	cmp	r3, r4
 800ac48:	6862      	ldr	r2, [r4, #4]
 800ac4a:	d1dd      	bne.n	800ac08 <_malloc_r+0x8c>
 800ac4c:	f8c8 2000 	str.w	r2, [r8]
 800ac50:	e7ec      	b.n	800ac2c <_malloc_r+0xb0>
 800ac52:	4623      	mov	r3, r4
 800ac54:	6864      	ldr	r4, [r4, #4]
 800ac56:	e7ac      	b.n	800abb2 <_malloc_r+0x36>
 800ac58:	4634      	mov	r4, r6
 800ac5a:	6876      	ldr	r6, [r6, #4]
 800ac5c:	e7b4      	b.n	800abc8 <_malloc_r+0x4c>
 800ac5e:	4613      	mov	r3, r2
 800ac60:	e7cc      	b.n	800abfc <_malloc_r+0x80>
 800ac62:	230c      	movs	r3, #12
 800ac64:	603b      	str	r3, [r7, #0]
 800ac66:	4638      	mov	r0, r7
 800ac68:	f000 f80e 	bl	800ac88 <__malloc_unlock>
 800ac6c:	e797      	b.n	800ab9e <_malloc_r+0x22>
 800ac6e:	6025      	str	r5, [r4, #0]
 800ac70:	e7dc      	b.n	800ac2c <_malloc_r+0xb0>
 800ac72:	605b      	str	r3, [r3, #4]
 800ac74:	deff      	udf	#255	; 0xff
 800ac76:	bf00      	nop
 800ac78:	200005e8 	.word	0x200005e8

0800ac7c <__malloc_lock>:
 800ac7c:	4801      	ldr	r0, [pc, #4]	; (800ac84 <__malloc_lock+0x8>)
 800ac7e:	f7ff b884 	b.w	8009d8a <__retarget_lock_acquire_recursive>
 800ac82:	bf00      	nop
 800ac84:	200005e4 	.word	0x200005e4

0800ac88 <__malloc_unlock>:
 800ac88:	4801      	ldr	r0, [pc, #4]	; (800ac90 <__malloc_unlock+0x8>)
 800ac8a:	f7ff b87f 	b.w	8009d8c <__retarget_lock_release_recursive>
 800ac8e:	bf00      	nop
 800ac90:	200005e4 	.word	0x200005e4

0800ac94 <_Balloc>:
 800ac94:	b570      	push	{r4, r5, r6, lr}
 800ac96:	69c6      	ldr	r6, [r0, #28]
 800ac98:	4604      	mov	r4, r0
 800ac9a:	460d      	mov	r5, r1
 800ac9c:	b976      	cbnz	r6, 800acbc <_Balloc+0x28>
 800ac9e:	2010      	movs	r0, #16
 800aca0:	f7ff ff44 	bl	800ab2c <malloc>
 800aca4:	4602      	mov	r2, r0
 800aca6:	61e0      	str	r0, [r4, #28]
 800aca8:	b920      	cbnz	r0, 800acb4 <_Balloc+0x20>
 800acaa:	4b18      	ldr	r3, [pc, #96]	; (800ad0c <_Balloc+0x78>)
 800acac:	4818      	ldr	r0, [pc, #96]	; (800ad10 <_Balloc+0x7c>)
 800acae:	216b      	movs	r1, #107	; 0x6b
 800acb0:	f002 f922 	bl	800cef8 <__assert_func>
 800acb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800acb8:	6006      	str	r6, [r0, #0]
 800acba:	60c6      	str	r6, [r0, #12]
 800acbc:	69e6      	ldr	r6, [r4, #28]
 800acbe:	68f3      	ldr	r3, [r6, #12]
 800acc0:	b183      	cbz	r3, 800ace4 <_Balloc+0x50>
 800acc2:	69e3      	ldr	r3, [r4, #28]
 800acc4:	68db      	ldr	r3, [r3, #12]
 800acc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800acca:	b9b8      	cbnz	r0, 800acfc <_Balloc+0x68>
 800accc:	2101      	movs	r1, #1
 800acce:	fa01 f605 	lsl.w	r6, r1, r5
 800acd2:	1d72      	adds	r2, r6, #5
 800acd4:	0092      	lsls	r2, r2, #2
 800acd6:	4620      	mov	r0, r4
 800acd8:	f002 f92c 	bl	800cf34 <_calloc_r>
 800acdc:	b160      	cbz	r0, 800acf8 <_Balloc+0x64>
 800acde:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ace2:	e00e      	b.n	800ad02 <_Balloc+0x6e>
 800ace4:	2221      	movs	r2, #33	; 0x21
 800ace6:	2104      	movs	r1, #4
 800ace8:	4620      	mov	r0, r4
 800acea:	f002 f923 	bl	800cf34 <_calloc_r>
 800acee:	69e3      	ldr	r3, [r4, #28]
 800acf0:	60f0      	str	r0, [r6, #12]
 800acf2:	68db      	ldr	r3, [r3, #12]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d1e4      	bne.n	800acc2 <_Balloc+0x2e>
 800acf8:	2000      	movs	r0, #0
 800acfa:	bd70      	pop	{r4, r5, r6, pc}
 800acfc:	6802      	ldr	r2, [r0, #0]
 800acfe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ad02:	2300      	movs	r3, #0
 800ad04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ad08:	e7f7      	b.n	800acfa <_Balloc+0x66>
 800ad0a:	bf00      	nop
 800ad0c:	0800ddc4 	.word	0x0800ddc4
 800ad10:	0800de44 	.word	0x0800de44

0800ad14 <_Bfree>:
 800ad14:	b570      	push	{r4, r5, r6, lr}
 800ad16:	69c6      	ldr	r6, [r0, #28]
 800ad18:	4605      	mov	r5, r0
 800ad1a:	460c      	mov	r4, r1
 800ad1c:	b976      	cbnz	r6, 800ad3c <_Bfree+0x28>
 800ad1e:	2010      	movs	r0, #16
 800ad20:	f7ff ff04 	bl	800ab2c <malloc>
 800ad24:	4602      	mov	r2, r0
 800ad26:	61e8      	str	r0, [r5, #28]
 800ad28:	b920      	cbnz	r0, 800ad34 <_Bfree+0x20>
 800ad2a:	4b09      	ldr	r3, [pc, #36]	; (800ad50 <_Bfree+0x3c>)
 800ad2c:	4809      	ldr	r0, [pc, #36]	; (800ad54 <_Bfree+0x40>)
 800ad2e:	218f      	movs	r1, #143	; 0x8f
 800ad30:	f002 f8e2 	bl	800cef8 <__assert_func>
 800ad34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad38:	6006      	str	r6, [r0, #0]
 800ad3a:	60c6      	str	r6, [r0, #12]
 800ad3c:	b13c      	cbz	r4, 800ad4e <_Bfree+0x3a>
 800ad3e:	69eb      	ldr	r3, [r5, #28]
 800ad40:	6862      	ldr	r2, [r4, #4]
 800ad42:	68db      	ldr	r3, [r3, #12]
 800ad44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad48:	6021      	str	r1, [r4, #0]
 800ad4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ad4e:	bd70      	pop	{r4, r5, r6, pc}
 800ad50:	0800ddc4 	.word	0x0800ddc4
 800ad54:	0800de44 	.word	0x0800de44

0800ad58 <__multadd>:
 800ad58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad5c:	690d      	ldr	r5, [r1, #16]
 800ad5e:	4607      	mov	r7, r0
 800ad60:	460c      	mov	r4, r1
 800ad62:	461e      	mov	r6, r3
 800ad64:	f101 0c14 	add.w	ip, r1, #20
 800ad68:	2000      	movs	r0, #0
 800ad6a:	f8dc 3000 	ldr.w	r3, [ip]
 800ad6e:	b299      	uxth	r1, r3
 800ad70:	fb02 6101 	mla	r1, r2, r1, r6
 800ad74:	0c1e      	lsrs	r6, r3, #16
 800ad76:	0c0b      	lsrs	r3, r1, #16
 800ad78:	fb02 3306 	mla	r3, r2, r6, r3
 800ad7c:	b289      	uxth	r1, r1
 800ad7e:	3001      	adds	r0, #1
 800ad80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ad84:	4285      	cmp	r5, r0
 800ad86:	f84c 1b04 	str.w	r1, [ip], #4
 800ad8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ad8e:	dcec      	bgt.n	800ad6a <__multadd+0x12>
 800ad90:	b30e      	cbz	r6, 800add6 <__multadd+0x7e>
 800ad92:	68a3      	ldr	r3, [r4, #8]
 800ad94:	42ab      	cmp	r3, r5
 800ad96:	dc19      	bgt.n	800adcc <__multadd+0x74>
 800ad98:	6861      	ldr	r1, [r4, #4]
 800ad9a:	4638      	mov	r0, r7
 800ad9c:	3101      	adds	r1, #1
 800ad9e:	f7ff ff79 	bl	800ac94 <_Balloc>
 800ada2:	4680      	mov	r8, r0
 800ada4:	b928      	cbnz	r0, 800adb2 <__multadd+0x5a>
 800ada6:	4602      	mov	r2, r0
 800ada8:	4b0c      	ldr	r3, [pc, #48]	; (800addc <__multadd+0x84>)
 800adaa:	480d      	ldr	r0, [pc, #52]	; (800ade0 <__multadd+0x88>)
 800adac:	21ba      	movs	r1, #186	; 0xba
 800adae:	f002 f8a3 	bl	800cef8 <__assert_func>
 800adb2:	6922      	ldr	r2, [r4, #16]
 800adb4:	3202      	adds	r2, #2
 800adb6:	f104 010c 	add.w	r1, r4, #12
 800adba:	0092      	lsls	r2, r2, #2
 800adbc:	300c      	adds	r0, #12
 800adbe:	f002 f883 	bl	800cec8 <memcpy>
 800adc2:	4621      	mov	r1, r4
 800adc4:	4638      	mov	r0, r7
 800adc6:	f7ff ffa5 	bl	800ad14 <_Bfree>
 800adca:	4644      	mov	r4, r8
 800adcc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800add0:	3501      	adds	r5, #1
 800add2:	615e      	str	r6, [r3, #20]
 800add4:	6125      	str	r5, [r4, #16]
 800add6:	4620      	mov	r0, r4
 800add8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800addc:	0800de33 	.word	0x0800de33
 800ade0:	0800de44 	.word	0x0800de44

0800ade4 <__s2b>:
 800ade4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ade8:	460c      	mov	r4, r1
 800adea:	4615      	mov	r5, r2
 800adec:	461f      	mov	r7, r3
 800adee:	2209      	movs	r2, #9
 800adf0:	3308      	adds	r3, #8
 800adf2:	4606      	mov	r6, r0
 800adf4:	fb93 f3f2 	sdiv	r3, r3, r2
 800adf8:	2100      	movs	r1, #0
 800adfa:	2201      	movs	r2, #1
 800adfc:	429a      	cmp	r2, r3
 800adfe:	db09      	blt.n	800ae14 <__s2b+0x30>
 800ae00:	4630      	mov	r0, r6
 800ae02:	f7ff ff47 	bl	800ac94 <_Balloc>
 800ae06:	b940      	cbnz	r0, 800ae1a <__s2b+0x36>
 800ae08:	4602      	mov	r2, r0
 800ae0a:	4b19      	ldr	r3, [pc, #100]	; (800ae70 <__s2b+0x8c>)
 800ae0c:	4819      	ldr	r0, [pc, #100]	; (800ae74 <__s2b+0x90>)
 800ae0e:	21d3      	movs	r1, #211	; 0xd3
 800ae10:	f002 f872 	bl	800cef8 <__assert_func>
 800ae14:	0052      	lsls	r2, r2, #1
 800ae16:	3101      	adds	r1, #1
 800ae18:	e7f0      	b.n	800adfc <__s2b+0x18>
 800ae1a:	9b08      	ldr	r3, [sp, #32]
 800ae1c:	6143      	str	r3, [r0, #20]
 800ae1e:	2d09      	cmp	r5, #9
 800ae20:	f04f 0301 	mov.w	r3, #1
 800ae24:	6103      	str	r3, [r0, #16]
 800ae26:	dd16      	ble.n	800ae56 <__s2b+0x72>
 800ae28:	f104 0909 	add.w	r9, r4, #9
 800ae2c:	46c8      	mov	r8, r9
 800ae2e:	442c      	add	r4, r5
 800ae30:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ae34:	4601      	mov	r1, r0
 800ae36:	3b30      	subs	r3, #48	; 0x30
 800ae38:	220a      	movs	r2, #10
 800ae3a:	4630      	mov	r0, r6
 800ae3c:	f7ff ff8c 	bl	800ad58 <__multadd>
 800ae40:	45a0      	cmp	r8, r4
 800ae42:	d1f5      	bne.n	800ae30 <__s2b+0x4c>
 800ae44:	f1a5 0408 	sub.w	r4, r5, #8
 800ae48:	444c      	add	r4, r9
 800ae4a:	1b2d      	subs	r5, r5, r4
 800ae4c:	1963      	adds	r3, r4, r5
 800ae4e:	42bb      	cmp	r3, r7
 800ae50:	db04      	blt.n	800ae5c <__s2b+0x78>
 800ae52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae56:	340a      	adds	r4, #10
 800ae58:	2509      	movs	r5, #9
 800ae5a:	e7f6      	b.n	800ae4a <__s2b+0x66>
 800ae5c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ae60:	4601      	mov	r1, r0
 800ae62:	3b30      	subs	r3, #48	; 0x30
 800ae64:	220a      	movs	r2, #10
 800ae66:	4630      	mov	r0, r6
 800ae68:	f7ff ff76 	bl	800ad58 <__multadd>
 800ae6c:	e7ee      	b.n	800ae4c <__s2b+0x68>
 800ae6e:	bf00      	nop
 800ae70:	0800de33 	.word	0x0800de33
 800ae74:	0800de44 	.word	0x0800de44

0800ae78 <__hi0bits>:
 800ae78:	0c03      	lsrs	r3, r0, #16
 800ae7a:	041b      	lsls	r3, r3, #16
 800ae7c:	b9d3      	cbnz	r3, 800aeb4 <__hi0bits+0x3c>
 800ae7e:	0400      	lsls	r0, r0, #16
 800ae80:	2310      	movs	r3, #16
 800ae82:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ae86:	bf04      	itt	eq
 800ae88:	0200      	lsleq	r0, r0, #8
 800ae8a:	3308      	addeq	r3, #8
 800ae8c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ae90:	bf04      	itt	eq
 800ae92:	0100      	lsleq	r0, r0, #4
 800ae94:	3304      	addeq	r3, #4
 800ae96:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ae9a:	bf04      	itt	eq
 800ae9c:	0080      	lsleq	r0, r0, #2
 800ae9e:	3302      	addeq	r3, #2
 800aea0:	2800      	cmp	r0, #0
 800aea2:	db05      	blt.n	800aeb0 <__hi0bits+0x38>
 800aea4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800aea8:	f103 0301 	add.w	r3, r3, #1
 800aeac:	bf08      	it	eq
 800aeae:	2320      	moveq	r3, #32
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	4770      	bx	lr
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	e7e4      	b.n	800ae82 <__hi0bits+0xa>

0800aeb8 <__lo0bits>:
 800aeb8:	6803      	ldr	r3, [r0, #0]
 800aeba:	f013 0207 	ands.w	r2, r3, #7
 800aebe:	d00c      	beq.n	800aeda <__lo0bits+0x22>
 800aec0:	07d9      	lsls	r1, r3, #31
 800aec2:	d422      	bmi.n	800af0a <__lo0bits+0x52>
 800aec4:	079a      	lsls	r2, r3, #30
 800aec6:	bf49      	itett	mi
 800aec8:	085b      	lsrmi	r3, r3, #1
 800aeca:	089b      	lsrpl	r3, r3, #2
 800aecc:	6003      	strmi	r3, [r0, #0]
 800aece:	2201      	movmi	r2, #1
 800aed0:	bf5c      	itt	pl
 800aed2:	6003      	strpl	r3, [r0, #0]
 800aed4:	2202      	movpl	r2, #2
 800aed6:	4610      	mov	r0, r2
 800aed8:	4770      	bx	lr
 800aeda:	b299      	uxth	r1, r3
 800aedc:	b909      	cbnz	r1, 800aee2 <__lo0bits+0x2a>
 800aede:	0c1b      	lsrs	r3, r3, #16
 800aee0:	2210      	movs	r2, #16
 800aee2:	b2d9      	uxtb	r1, r3
 800aee4:	b909      	cbnz	r1, 800aeea <__lo0bits+0x32>
 800aee6:	3208      	adds	r2, #8
 800aee8:	0a1b      	lsrs	r3, r3, #8
 800aeea:	0719      	lsls	r1, r3, #28
 800aeec:	bf04      	itt	eq
 800aeee:	091b      	lsreq	r3, r3, #4
 800aef0:	3204      	addeq	r2, #4
 800aef2:	0799      	lsls	r1, r3, #30
 800aef4:	bf04      	itt	eq
 800aef6:	089b      	lsreq	r3, r3, #2
 800aef8:	3202      	addeq	r2, #2
 800aefa:	07d9      	lsls	r1, r3, #31
 800aefc:	d403      	bmi.n	800af06 <__lo0bits+0x4e>
 800aefe:	085b      	lsrs	r3, r3, #1
 800af00:	f102 0201 	add.w	r2, r2, #1
 800af04:	d003      	beq.n	800af0e <__lo0bits+0x56>
 800af06:	6003      	str	r3, [r0, #0]
 800af08:	e7e5      	b.n	800aed6 <__lo0bits+0x1e>
 800af0a:	2200      	movs	r2, #0
 800af0c:	e7e3      	b.n	800aed6 <__lo0bits+0x1e>
 800af0e:	2220      	movs	r2, #32
 800af10:	e7e1      	b.n	800aed6 <__lo0bits+0x1e>
	...

0800af14 <__i2b>:
 800af14:	b510      	push	{r4, lr}
 800af16:	460c      	mov	r4, r1
 800af18:	2101      	movs	r1, #1
 800af1a:	f7ff febb 	bl	800ac94 <_Balloc>
 800af1e:	4602      	mov	r2, r0
 800af20:	b928      	cbnz	r0, 800af2e <__i2b+0x1a>
 800af22:	4b05      	ldr	r3, [pc, #20]	; (800af38 <__i2b+0x24>)
 800af24:	4805      	ldr	r0, [pc, #20]	; (800af3c <__i2b+0x28>)
 800af26:	f240 1145 	movw	r1, #325	; 0x145
 800af2a:	f001 ffe5 	bl	800cef8 <__assert_func>
 800af2e:	2301      	movs	r3, #1
 800af30:	6144      	str	r4, [r0, #20]
 800af32:	6103      	str	r3, [r0, #16]
 800af34:	bd10      	pop	{r4, pc}
 800af36:	bf00      	nop
 800af38:	0800de33 	.word	0x0800de33
 800af3c:	0800de44 	.word	0x0800de44

0800af40 <__multiply>:
 800af40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af44:	4691      	mov	r9, r2
 800af46:	690a      	ldr	r2, [r1, #16]
 800af48:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800af4c:	429a      	cmp	r2, r3
 800af4e:	bfb8      	it	lt
 800af50:	460b      	movlt	r3, r1
 800af52:	460c      	mov	r4, r1
 800af54:	bfbc      	itt	lt
 800af56:	464c      	movlt	r4, r9
 800af58:	4699      	movlt	r9, r3
 800af5a:	6927      	ldr	r7, [r4, #16]
 800af5c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800af60:	68a3      	ldr	r3, [r4, #8]
 800af62:	6861      	ldr	r1, [r4, #4]
 800af64:	eb07 060a 	add.w	r6, r7, sl
 800af68:	42b3      	cmp	r3, r6
 800af6a:	b085      	sub	sp, #20
 800af6c:	bfb8      	it	lt
 800af6e:	3101      	addlt	r1, #1
 800af70:	f7ff fe90 	bl	800ac94 <_Balloc>
 800af74:	b930      	cbnz	r0, 800af84 <__multiply+0x44>
 800af76:	4602      	mov	r2, r0
 800af78:	4b44      	ldr	r3, [pc, #272]	; (800b08c <__multiply+0x14c>)
 800af7a:	4845      	ldr	r0, [pc, #276]	; (800b090 <__multiply+0x150>)
 800af7c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800af80:	f001 ffba 	bl	800cef8 <__assert_func>
 800af84:	f100 0514 	add.w	r5, r0, #20
 800af88:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800af8c:	462b      	mov	r3, r5
 800af8e:	2200      	movs	r2, #0
 800af90:	4543      	cmp	r3, r8
 800af92:	d321      	bcc.n	800afd8 <__multiply+0x98>
 800af94:	f104 0314 	add.w	r3, r4, #20
 800af98:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800af9c:	f109 0314 	add.w	r3, r9, #20
 800afa0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800afa4:	9202      	str	r2, [sp, #8]
 800afa6:	1b3a      	subs	r2, r7, r4
 800afa8:	3a15      	subs	r2, #21
 800afaa:	f022 0203 	bic.w	r2, r2, #3
 800afae:	3204      	adds	r2, #4
 800afb0:	f104 0115 	add.w	r1, r4, #21
 800afb4:	428f      	cmp	r7, r1
 800afb6:	bf38      	it	cc
 800afb8:	2204      	movcc	r2, #4
 800afba:	9201      	str	r2, [sp, #4]
 800afbc:	9a02      	ldr	r2, [sp, #8]
 800afbe:	9303      	str	r3, [sp, #12]
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d80c      	bhi.n	800afde <__multiply+0x9e>
 800afc4:	2e00      	cmp	r6, #0
 800afc6:	dd03      	ble.n	800afd0 <__multiply+0x90>
 800afc8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d05b      	beq.n	800b088 <__multiply+0x148>
 800afd0:	6106      	str	r6, [r0, #16]
 800afd2:	b005      	add	sp, #20
 800afd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afd8:	f843 2b04 	str.w	r2, [r3], #4
 800afdc:	e7d8      	b.n	800af90 <__multiply+0x50>
 800afde:	f8b3 a000 	ldrh.w	sl, [r3]
 800afe2:	f1ba 0f00 	cmp.w	sl, #0
 800afe6:	d024      	beq.n	800b032 <__multiply+0xf2>
 800afe8:	f104 0e14 	add.w	lr, r4, #20
 800afec:	46a9      	mov	r9, r5
 800afee:	f04f 0c00 	mov.w	ip, #0
 800aff2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aff6:	f8d9 1000 	ldr.w	r1, [r9]
 800affa:	fa1f fb82 	uxth.w	fp, r2
 800affe:	b289      	uxth	r1, r1
 800b000:	fb0a 110b 	mla	r1, sl, fp, r1
 800b004:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b008:	f8d9 2000 	ldr.w	r2, [r9]
 800b00c:	4461      	add	r1, ip
 800b00e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b012:	fb0a c20b 	mla	r2, sl, fp, ip
 800b016:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b01a:	b289      	uxth	r1, r1
 800b01c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b020:	4577      	cmp	r7, lr
 800b022:	f849 1b04 	str.w	r1, [r9], #4
 800b026:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b02a:	d8e2      	bhi.n	800aff2 <__multiply+0xb2>
 800b02c:	9a01      	ldr	r2, [sp, #4]
 800b02e:	f845 c002 	str.w	ip, [r5, r2]
 800b032:	9a03      	ldr	r2, [sp, #12]
 800b034:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b038:	3304      	adds	r3, #4
 800b03a:	f1b9 0f00 	cmp.w	r9, #0
 800b03e:	d021      	beq.n	800b084 <__multiply+0x144>
 800b040:	6829      	ldr	r1, [r5, #0]
 800b042:	f104 0c14 	add.w	ip, r4, #20
 800b046:	46ae      	mov	lr, r5
 800b048:	f04f 0a00 	mov.w	sl, #0
 800b04c:	f8bc b000 	ldrh.w	fp, [ip]
 800b050:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b054:	fb09 220b 	mla	r2, r9, fp, r2
 800b058:	4452      	add	r2, sl
 800b05a:	b289      	uxth	r1, r1
 800b05c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b060:	f84e 1b04 	str.w	r1, [lr], #4
 800b064:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b068:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b06c:	f8be 1000 	ldrh.w	r1, [lr]
 800b070:	fb09 110a 	mla	r1, r9, sl, r1
 800b074:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b078:	4567      	cmp	r7, ip
 800b07a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b07e:	d8e5      	bhi.n	800b04c <__multiply+0x10c>
 800b080:	9a01      	ldr	r2, [sp, #4]
 800b082:	50a9      	str	r1, [r5, r2]
 800b084:	3504      	adds	r5, #4
 800b086:	e799      	b.n	800afbc <__multiply+0x7c>
 800b088:	3e01      	subs	r6, #1
 800b08a:	e79b      	b.n	800afc4 <__multiply+0x84>
 800b08c:	0800de33 	.word	0x0800de33
 800b090:	0800de44 	.word	0x0800de44

0800b094 <__pow5mult>:
 800b094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b098:	4615      	mov	r5, r2
 800b09a:	f012 0203 	ands.w	r2, r2, #3
 800b09e:	4606      	mov	r6, r0
 800b0a0:	460f      	mov	r7, r1
 800b0a2:	d007      	beq.n	800b0b4 <__pow5mult+0x20>
 800b0a4:	4c25      	ldr	r4, [pc, #148]	; (800b13c <__pow5mult+0xa8>)
 800b0a6:	3a01      	subs	r2, #1
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b0ae:	f7ff fe53 	bl	800ad58 <__multadd>
 800b0b2:	4607      	mov	r7, r0
 800b0b4:	10ad      	asrs	r5, r5, #2
 800b0b6:	d03d      	beq.n	800b134 <__pow5mult+0xa0>
 800b0b8:	69f4      	ldr	r4, [r6, #28]
 800b0ba:	b97c      	cbnz	r4, 800b0dc <__pow5mult+0x48>
 800b0bc:	2010      	movs	r0, #16
 800b0be:	f7ff fd35 	bl	800ab2c <malloc>
 800b0c2:	4602      	mov	r2, r0
 800b0c4:	61f0      	str	r0, [r6, #28]
 800b0c6:	b928      	cbnz	r0, 800b0d4 <__pow5mult+0x40>
 800b0c8:	4b1d      	ldr	r3, [pc, #116]	; (800b140 <__pow5mult+0xac>)
 800b0ca:	481e      	ldr	r0, [pc, #120]	; (800b144 <__pow5mult+0xb0>)
 800b0cc:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b0d0:	f001 ff12 	bl	800cef8 <__assert_func>
 800b0d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b0d8:	6004      	str	r4, [r0, #0]
 800b0da:	60c4      	str	r4, [r0, #12]
 800b0dc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b0e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b0e4:	b94c      	cbnz	r4, 800b0fa <__pow5mult+0x66>
 800b0e6:	f240 2171 	movw	r1, #625	; 0x271
 800b0ea:	4630      	mov	r0, r6
 800b0ec:	f7ff ff12 	bl	800af14 <__i2b>
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b0f6:	4604      	mov	r4, r0
 800b0f8:	6003      	str	r3, [r0, #0]
 800b0fa:	f04f 0900 	mov.w	r9, #0
 800b0fe:	07eb      	lsls	r3, r5, #31
 800b100:	d50a      	bpl.n	800b118 <__pow5mult+0x84>
 800b102:	4639      	mov	r1, r7
 800b104:	4622      	mov	r2, r4
 800b106:	4630      	mov	r0, r6
 800b108:	f7ff ff1a 	bl	800af40 <__multiply>
 800b10c:	4639      	mov	r1, r7
 800b10e:	4680      	mov	r8, r0
 800b110:	4630      	mov	r0, r6
 800b112:	f7ff fdff 	bl	800ad14 <_Bfree>
 800b116:	4647      	mov	r7, r8
 800b118:	106d      	asrs	r5, r5, #1
 800b11a:	d00b      	beq.n	800b134 <__pow5mult+0xa0>
 800b11c:	6820      	ldr	r0, [r4, #0]
 800b11e:	b938      	cbnz	r0, 800b130 <__pow5mult+0x9c>
 800b120:	4622      	mov	r2, r4
 800b122:	4621      	mov	r1, r4
 800b124:	4630      	mov	r0, r6
 800b126:	f7ff ff0b 	bl	800af40 <__multiply>
 800b12a:	6020      	str	r0, [r4, #0]
 800b12c:	f8c0 9000 	str.w	r9, [r0]
 800b130:	4604      	mov	r4, r0
 800b132:	e7e4      	b.n	800b0fe <__pow5mult+0x6a>
 800b134:	4638      	mov	r0, r7
 800b136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b13a:	bf00      	nop
 800b13c:	0800df90 	.word	0x0800df90
 800b140:	0800ddc4 	.word	0x0800ddc4
 800b144:	0800de44 	.word	0x0800de44

0800b148 <__lshift>:
 800b148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b14c:	460c      	mov	r4, r1
 800b14e:	6849      	ldr	r1, [r1, #4]
 800b150:	6923      	ldr	r3, [r4, #16]
 800b152:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b156:	68a3      	ldr	r3, [r4, #8]
 800b158:	4607      	mov	r7, r0
 800b15a:	4691      	mov	r9, r2
 800b15c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b160:	f108 0601 	add.w	r6, r8, #1
 800b164:	42b3      	cmp	r3, r6
 800b166:	db0b      	blt.n	800b180 <__lshift+0x38>
 800b168:	4638      	mov	r0, r7
 800b16a:	f7ff fd93 	bl	800ac94 <_Balloc>
 800b16e:	4605      	mov	r5, r0
 800b170:	b948      	cbnz	r0, 800b186 <__lshift+0x3e>
 800b172:	4602      	mov	r2, r0
 800b174:	4b28      	ldr	r3, [pc, #160]	; (800b218 <__lshift+0xd0>)
 800b176:	4829      	ldr	r0, [pc, #164]	; (800b21c <__lshift+0xd4>)
 800b178:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b17c:	f001 febc 	bl	800cef8 <__assert_func>
 800b180:	3101      	adds	r1, #1
 800b182:	005b      	lsls	r3, r3, #1
 800b184:	e7ee      	b.n	800b164 <__lshift+0x1c>
 800b186:	2300      	movs	r3, #0
 800b188:	f100 0114 	add.w	r1, r0, #20
 800b18c:	f100 0210 	add.w	r2, r0, #16
 800b190:	4618      	mov	r0, r3
 800b192:	4553      	cmp	r3, sl
 800b194:	db33      	blt.n	800b1fe <__lshift+0xb6>
 800b196:	6920      	ldr	r0, [r4, #16]
 800b198:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b19c:	f104 0314 	add.w	r3, r4, #20
 800b1a0:	f019 091f 	ands.w	r9, r9, #31
 800b1a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b1a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b1ac:	d02b      	beq.n	800b206 <__lshift+0xbe>
 800b1ae:	f1c9 0e20 	rsb	lr, r9, #32
 800b1b2:	468a      	mov	sl, r1
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	6818      	ldr	r0, [r3, #0]
 800b1b8:	fa00 f009 	lsl.w	r0, r0, r9
 800b1bc:	4310      	orrs	r0, r2
 800b1be:	f84a 0b04 	str.w	r0, [sl], #4
 800b1c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1c6:	459c      	cmp	ip, r3
 800b1c8:	fa22 f20e 	lsr.w	r2, r2, lr
 800b1cc:	d8f3      	bhi.n	800b1b6 <__lshift+0x6e>
 800b1ce:	ebac 0304 	sub.w	r3, ip, r4
 800b1d2:	3b15      	subs	r3, #21
 800b1d4:	f023 0303 	bic.w	r3, r3, #3
 800b1d8:	3304      	adds	r3, #4
 800b1da:	f104 0015 	add.w	r0, r4, #21
 800b1de:	4584      	cmp	ip, r0
 800b1e0:	bf38      	it	cc
 800b1e2:	2304      	movcc	r3, #4
 800b1e4:	50ca      	str	r2, [r1, r3]
 800b1e6:	b10a      	cbz	r2, 800b1ec <__lshift+0xa4>
 800b1e8:	f108 0602 	add.w	r6, r8, #2
 800b1ec:	3e01      	subs	r6, #1
 800b1ee:	4638      	mov	r0, r7
 800b1f0:	612e      	str	r6, [r5, #16]
 800b1f2:	4621      	mov	r1, r4
 800b1f4:	f7ff fd8e 	bl	800ad14 <_Bfree>
 800b1f8:	4628      	mov	r0, r5
 800b1fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1fe:	f842 0f04 	str.w	r0, [r2, #4]!
 800b202:	3301      	adds	r3, #1
 800b204:	e7c5      	b.n	800b192 <__lshift+0x4a>
 800b206:	3904      	subs	r1, #4
 800b208:	f853 2b04 	ldr.w	r2, [r3], #4
 800b20c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b210:	459c      	cmp	ip, r3
 800b212:	d8f9      	bhi.n	800b208 <__lshift+0xc0>
 800b214:	e7ea      	b.n	800b1ec <__lshift+0xa4>
 800b216:	bf00      	nop
 800b218:	0800de33 	.word	0x0800de33
 800b21c:	0800de44 	.word	0x0800de44

0800b220 <__mcmp>:
 800b220:	b530      	push	{r4, r5, lr}
 800b222:	6902      	ldr	r2, [r0, #16]
 800b224:	690c      	ldr	r4, [r1, #16]
 800b226:	1b12      	subs	r2, r2, r4
 800b228:	d10e      	bne.n	800b248 <__mcmp+0x28>
 800b22a:	f100 0314 	add.w	r3, r0, #20
 800b22e:	3114      	adds	r1, #20
 800b230:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b234:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b238:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b23c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b240:	42a5      	cmp	r5, r4
 800b242:	d003      	beq.n	800b24c <__mcmp+0x2c>
 800b244:	d305      	bcc.n	800b252 <__mcmp+0x32>
 800b246:	2201      	movs	r2, #1
 800b248:	4610      	mov	r0, r2
 800b24a:	bd30      	pop	{r4, r5, pc}
 800b24c:	4283      	cmp	r3, r0
 800b24e:	d3f3      	bcc.n	800b238 <__mcmp+0x18>
 800b250:	e7fa      	b.n	800b248 <__mcmp+0x28>
 800b252:	f04f 32ff 	mov.w	r2, #4294967295
 800b256:	e7f7      	b.n	800b248 <__mcmp+0x28>

0800b258 <__mdiff>:
 800b258:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b25c:	460c      	mov	r4, r1
 800b25e:	4606      	mov	r6, r0
 800b260:	4611      	mov	r1, r2
 800b262:	4620      	mov	r0, r4
 800b264:	4690      	mov	r8, r2
 800b266:	f7ff ffdb 	bl	800b220 <__mcmp>
 800b26a:	1e05      	subs	r5, r0, #0
 800b26c:	d110      	bne.n	800b290 <__mdiff+0x38>
 800b26e:	4629      	mov	r1, r5
 800b270:	4630      	mov	r0, r6
 800b272:	f7ff fd0f 	bl	800ac94 <_Balloc>
 800b276:	b930      	cbnz	r0, 800b286 <__mdiff+0x2e>
 800b278:	4b3a      	ldr	r3, [pc, #232]	; (800b364 <__mdiff+0x10c>)
 800b27a:	4602      	mov	r2, r0
 800b27c:	f240 2137 	movw	r1, #567	; 0x237
 800b280:	4839      	ldr	r0, [pc, #228]	; (800b368 <__mdiff+0x110>)
 800b282:	f001 fe39 	bl	800cef8 <__assert_func>
 800b286:	2301      	movs	r3, #1
 800b288:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b28c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b290:	bfa4      	itt	ge
 800b292:	4643      	movge	r3, r8
 800b294:	46a0      	movge	r8, r4
 800b296:	4630      	mov	r0, r6
 800b298:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b29c:	bfa6      	itte	ge
 800b29e:	461c      	movge	r4, r3
 800b2a0:	2500      	movge	r5, #0
 800b2a2:	2501      	movlt	r5, #1
 800b2a4:	f7ff fcf6 	bl	800ac94 <_Balloc>
 800b2a8:	b920      	cbnz	r0, 800b2b4 <__mdiff+0x5c>
 800b2aa:	4b2e      	ldr	r3, [pc, #184]	; (800b364 <__mdiff+0x10c>)
 800b2ac:	4602      	mov	r2, r0
 800b2ae:	f240 2145 	movw	r1, #581	; 0x245
 800b2b2:	e7e5      	b.n	800b280 <__mdiff+0x28>
 800b2b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b2b8:	6926      	ldr	r6, [r4, #16]
 800b2ba:	60c5      	str	r5, [r0, #12]
 800b2bc:	f104 0914 	add.w	r9, r4, #20
 800b2c0:	f108 0514 	add.w	r5, r8, #20
 800b2c4:	f100 0e14 	add.w	lr, r0, #20
 800b2c8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b2cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b2d0:	f108 0210 	add.w	r2, r8, #16
 800b2d4:	46f2      	mov	sl, lr
 800b2d6:	2100      	movs	r1, #0
 800b2d8:	f859 3b04 	ldr.w	r3, [r9], #4
 800b2dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b2e0:	fa11 f88b 	uxtah	r8, r1, fp
 800b2e4:	b299      	uxth	r1, r3
 800b2e6:	0c1b      	lsrs	r3, r3, #16
 800b2e8:	eba8 0801 	sub.w	r8, r8, r1
 800b2ec:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b2f0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b2f4:	fa1f f888 	uxth.w	r8, r8
 800b2f8:	1419      	asrs	r1, r3, #16
 800b2fa:	454e      	cmp	r6, r9
 800b2fc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b300:	f84a 3b04 	str.w	r3, [sl], #4
 800b304:	d8e8      	bhi.n	800b2d8 <__mdiff+0x80>
 800b306:	1b33      	subs	r3, r6, r4
 800b308:	3b15      	subs	r3, #21
 800b30a:	f023 0303 	bic.w	r3, r3, #3
 800b30e:	3304      	adds	r3, #4
 800b310:	3415      	adds	r4, #21
 800b312:	42a6      	cmp	r6, r4
 800b314:	bf38      	it	cc
 800b316:	2304      	movcc	r3, #4
 800b318:	441d      	add	r5, r3
 800b31a:	4473      	add	r3, lr
 800b31c:	469e      	mov	lr, r3
 800b31e:	462e      	mov	r6, r5
 800b320:	4566      	cmp	r6, ip
 800b322:	d30e      	bcc.n	800b342 <__mdiff+0xea>
 800b324:	f10c 0203 	add.w	r2, ip, #3
 800b328:	1b52      	subs	r2, r2, r5
 800b32a:	f022 0203 	bic.w	r2, r2, #3
 800b32e:	3d03      	subs	r5, #3
 800b330:	45ac      	cmp	ip, r5
 800b332:	bf38      	it	cc
 800b334:	2200      	movcc	r2, #0
 800b336:	4413      	add	r3, r2
 800b338:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b33c:	b17a      	cbz	r2, 800b35e <__mdiff+0x106>
 800b33e:	6107      	str	r7, [r0, #16]
 800b340:	e7a4      	b.n	800b28c <__mdiff+0x34>
 800b342:	f856 8b04 	ldr.w	r8, [r6], #4
 800b346:	fa11 f288 	uxtah	r2, r1, r8
 800b34a:	1414      	asrs	r4, r2, #16
 800b34c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b350:	b292      	uxth	r2, r2
 800b352:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b356:	f84e 2b04 	str.w	r2, [lr], #4
 800b35a:	1421      	asrs	r1, r4, #16
 800b35c:	e7e0      	b.n	800b320 <__mdiff+0xc8>
 800b35e:	3f01      	subs	r7, #1
 800b360:	e7ea      	b.n	800b338 <__mdiff+0xe0>
 800b362:	bf00      	nop
 800b364:	0800de33 	.word	0x0800de33
 800b368:	0800de44 	.word	0x0800de44

0800b36c <__ulp>:
 800b36c:	b082      	sub	sp, #8
 800b36e:	ed8d 0b00 	vstr	d0, [sp]
 800b372:	9a01      	ldr	r2, [sp, #4]
 800b374:	4b0f      	ldr	r3, [pc, #60]	; (800b3b4 <__ulp+0x48>)
 800b376:	4013      	ands	r3, r2
 800b378:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	dc08      	bgt.n	800b392 <__ulp+0x26>
 800b380:	425b      	negs	r3, r3
 800b382:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b386:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b38a:	da04      	bge.n	800b396 <__ulp+0x2a>
 800b38c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b390:	4113      	asrs	r3, r2
 800b392:	2200      	movs	r2, #0
 800b394:	e008      	b.n	800b3a8 <__ulp+0x3c>
 800b396:	f1a2 0314 	sub.w	r3, r2, #20
 800b39a:	2b1e      	cmp	r3, #30
 800b39c:	bfda      	itte	le
 800b39e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b3a2:	40da      	lsrle	r2, r3
 800b3a4:	2201      	movgt	r2, #1
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	4619      	mov	r1, r3
 800b3aa:	4610      	mov	r0, r2
 800b3ac:	ec41 0b10 	vmov	d0, r0, r1
 800b3b0:	b002      	add	sp, #8
 800b3b2:	4770      	bx	lr
 800b3b4:	7ff00000 	.word	0x7ff00000

0800b3b8 <__b2d>:
 800b3b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3bc:	6906      	ldr	r6, [r0, #16]
 800b3be:	f100 0814 	add.w	r8, r0, #20
 800b3c2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b3c6:	1f37      	subs	r7, r6, #4
 800b3c8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b3cc:	4610      	mov	r0, r2
 800b3ce:	f7ff fd53 	bl	800ae78 <__hi0bits>
 800b3d2:	f1c0 0320 	rsb	r3, r0, #32
 800b3d6:	280a      	cmp	r0, #10
 800b3d8:	600b      	str	r3, [r1, #0]
 800b3da:	491b      	ldr	r1, [pc, #108]	; (800b448 <__b2d+0x90>)
 800b3dc:	dc15      	bgt.n	800b40a <__b2d+0x52>
 800b3de:	f1c0 0c0b 	rsb	ip, r0, #11
 800b3e2:	fa22 f30c 	lsr.w	r3, r2, ip
 800b3e6:	45b8      	cmp	r8, r7
 800b3e8:	ea43 0501 	orr.w	r5, r3, r1
 800b3ec:	bf34      	ite	cc
 800b3ee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b3f2:	2300      	movcs	r3, #0
 800b3f4:	3015      	adds	r0, #21
 800b3f6:	fa02 f000 	lsl.w	r0, r2, r0
 800b3fa:	fa23 f30c 	lsr.w	r3, r3, ip
 800b3fe:	4303      	orrs	r3, r0
 800b400:	461c      	mov	r4, r3
 800b402:	ec45 4b10 	vmov	d0, r4, r5
 800b406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b40a:	45b8      	cmp	r8, r7
 800b40c:	bf3a      	itte	cc
 800b40e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b412:	f1a6 0708 	subcc.w	r7, r6, #8
 800b416:	2300      	movcs	r3, #0
 800b418:	380b      	subs	r0, #11
 800b41a:	d012      	beq.n	800b442 <__b2d+0x8a>
 800b41c:	f1c0 0120 	rsb	r1, r0, #32
 800b420:	fa23 f401 	lsr.w	r4, r3, r1
 800b424:	4082      	lsls	r2, r0
 800b426:	4322      	orrs	r2, r4
 800b428:	4547      	cmp	r7, r8
 800b42a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800b42e:	bf8c      	ite	hi
 800b430:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b434:	2200      	movls	r2, #0
 800b436:	4083      	lsls	r3, r0
 800b438:	40ca      	lsrs	r2, r1
 800b43a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b43e:	4313      	orrs	r3, r2
 800b440:	e7de      	b.n	800b400 <__b2d+0x48>
 800b442:	ea42 0501 	orr.w	r5, r2, r1
 800b446:	e7db      	b.n	800b400 <__b2d+0x48>
 800b448:	3ff00000 	.word	0x3ff00000

0800b44c <__d2b>:
 800b44c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b450:	460f      	mov	r7, r1
 800b452:	2101      	movs	r1, #1
 800b454:	ec59 8b10 	vmov	r8, r9, d0
 800b458:	4616      	mov	r6, r2
 800b45a:	f7ff fc1b 	bl	800ac94 <_Balloc>
 800b45e:	4604      	mov	r4, r0
 800b460:	b930      	cbnz	r0, 800b470 <__d2b+0x24>
 800b462:	4602      	mov	r2, r0
 800b464:	4b24      	ldr	r3, [pc, #144]	; (800b4f8 <__d2b+0xac>)
 800b466:	4825      	ldr	r0, [pc, #148]	; (800b4fc <__d2b+0xb0>)
 800b468:	f240 310f 	movw	r1, #783	; 0x30f
 800b46c:	f001 fd44 	bl	800cef8 <__assert_func>
 800b470:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b474:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b478:	bb2d      	cbnz	r5, 800b4c6 <__d2b+0x7a>
 800b47a:	9301      	str	r3, [sp, #4]
 800b47c:	f1b8 0300 	subs.w	r3, r8, #0
 800b480:	d026      	beq.n	800b4d0 <__d2b+0x84>
 800b482:	4668      	mov	r0, sp
 800b484:	9300      	str	r3, [sp, #0]
 800b486:	f7ff fd17 	bl	800aeb8 <__lo0bits>
 800b48a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b48e:	b1e8      	cbz	r0, 800b4cc <__d2b+0x80>
 800b490:	f1c0 0320 	rsb	r3, r0, #32
 800b494:	fa02 f303 	lsl.w	r3, r2, r3
 800b498:	430b      	orrs	r3, r1
 800b49a:	40c2      	lsrs	r2, r0
 800b49c:	6163      	str	r3, [r4, #20]
 800b49e:	9201      	str	r2, [sp, #4]
 800b4a0:	9b01      	ldr	r3, [sp, #4]
 800b4a2:	61a3      	str	r3, [r4, #24]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	bf14      	ite	ne
 800b4a8:	2202      	movne	r2, #2
 800b4aa:	2201      	moveq	r2, #1
 800b4ac:	6122      	str	r2, [r4, #16]
 800b4ae:	b1bd      	cbz	r5, 800b4e0 <__d2b+0x94>
 800b4b0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b4b4:	4405      	add	r5, r0
 800b4b6:	603d      	str	r5, [r7, #0]
 800b4b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b4bc:	6030      	str	r0, [r6, #0]
 800b4be:	4620      	mov	r0, r4
 800b4c0:	b003      	add	sp, #12
 800b4c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4ca:	e7d6      	b.n	800b47a <__d2b+0x2e>
 800b4cc:	6161      	str	r1, [r4, #20]
 800b4ce:	e7e7      	b.n	800b4a0 <__d2b+0x54>
 800b4d0:	a801      	add	r0, sp, #4
 800b4d2:	f7ff fcf1 	bl	800aeb8 <__lo0bits>
 800b4d6:	9b01      	ldr	r3, [sp, #4]
 800b4d8:	6163      	str	r3, [r4, #20]
 800b4da:	3020      	adds	r0, #32
 800b4dc:	2201      	movs	r2, #1
 800b4de:	e7e5      	b.n	800b4ac <__d2b+0x60>
 800b4e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b4e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b4e8:	6038      	str	r0, [r7, #0]
 800b4ea:	6918      	ldr	r0, [r3, #16]
 800b4ec:	f7ff fcc4 	bl	800ae78 <__hi0bits>
 800b4f0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b4f4:	e7e2      	b.n	800b4bc <__d2b+0x70>
 800b4f6:	bf00      	nop
 800b4f8:	0800de33 	.word	0x0800de33
 800b4fc:	0800de44 	.word	0x0800de44

0800b500 <__ratio>:
 800b500:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b504:	4688      	mov	r8, r1
 800b506:	4669      	mov	r1, sp
 800b508:	4681      	mov	r9, r0
 800b50a:	f7ff ff55 	bl	800b3b8 <__b2d>
 800b50e:	a901      	add	r1, sp, #4
 800b510:	4640      	mov	r0, r8
 800b512:	ec55 4b10 	vmov	r4, r5, d0
 800b516:	f7ff ff4f 	bl	800b3b8 <__b2d>
 800b51a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b51e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b522:	eba3 0c02 	sub.w	ip, r3, r2
 800b526:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b52a:	1a9b      	subs	r3, r3, r2
 800b52c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b530:	ec51 0b10 	vmov	r0, r1, d0
 800b534:	2b00      	cmp	r3, #0
 800b536:	bfd6      	itet	le
 800b538:	460a      	movle	r2, r1
 800b53a:	462a      	movgt	r2, r5
 800b53c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b540:	468b      	mov	fp, r1
 800b542:	462f      	mov	r7, r5
 800b544:	bfd4      	ite	le
 800b546:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b54a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b54e:	4620      	mov	r0, r4
 800b550:	ee10 2a10 	vmov	r2, s0
 800b554:	465b      	mov	r3, fp
 800b556:	4639      	mov	r1, r7
 800b558:	f7f5 f998 	bl	800088c <__aeabi_ddiv>
 800b55c:	ec41 0b10 	vmov	d0, r0, r1
 800b560:	b003      	add	sp, #12
 800b562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b566 <__copybits>:
 800b566:	3901      	subs	r1, #1
 800b568:	b570      	push	{r4, r5, r6, lr}
 800b56a:	1149      	asrs	r1, r1, #5
 800b56c:	6914      	ldr	r4, [r2, #16]
 800b56e:	3101      	adds	r1, #1
 800b570:	f102 0314 	add.w	r3, r2, #20
 800b574:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b578:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b57c:	1f05      	subs	r5, r0, #4
 800b57e:	42a3      	cmp	r3, r4
 800b580:	d30c      	bcc.n	800b59c <__copybits+0x36>
 800b582:	1aa3      	subs	r3, r4, r2
 800b584:	3b11      	subs	r3, #17
 800b586:	f023 0303 	bic.w	r3, r3, #3
 800b58a:	3211      	adds	r2, #17
 800b58c:	42a2      	cmp	r2, r4
 800b58e:	bf88      	it	hi
 800b590:	2300      	movhi	r3, #0
 800b592:	4418      	add	r0, r3
 800b594:	2300      	movs	r3, #0
 800b596:	4288      	cmp	r0, r1
 800b598:	d305      	bcc.n	800b5a6 <__copybits+0x40>
 800b59a:	bd70      	pop	{r4, r5, r6, pc}
 800b59c:	f853 6b04 	ldr.w	r6, [r3], #4
 800b5a0:	f845 6f04 	str.w	r6, [r5, #4]!
 800b5a4:	e7eb      	b.n	800b57e <__copybits+0x18>
 800b5a6:	f840 3b04 	str.w	r3, [r0], #4
 800b5aa:	e7f4      	b.n	800b596 <__copybits+0x30>

0800b5ac <__any_on>:
 800b5ac:	f100 0214 	add.w	r2, r0, #20
 800b5b0:	6900      	ldr	r0, [r0, #16]
 800b5b2:	114b      	asrs	r3, r1, #5
 800b5b4:	4298      	cmp	r0, r3
 800b5b6:	b510      	push	{r4, lr}
 800b5b8:	db11      	blt.n	800b5de <__any_on+0x32>
 800b5ba:	dd0a      	ble.n	800b5d2 <__any_on+0x26>
 800b5bc:	f011 011f 	ands.w	r1, r1, #31
 800b5c0:	d007      	beq.n	800b5d2 <__any_on+0x26>
 800b5c2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b5c6:	fa24 f001 	lsr.w	r0, r4, r1
 800b5ca:	fa00 f101 	lsl.w	r1, r0, r1
 800b5ce:	428c      	cmp	r4, r1
 800b5d0:	d10b      	bne.n	800b5ea <__any_on+0x3e>
 800b5d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d803      	bhi.n	800b5e2 <__any_on+0x36>
 800b5da:	2000      	movs	r0, #0
 800b5dc:	bd10      	pop	{r4, pc}
 800b5de:	4603      	mov	r3, r0
 800b5e0:	e7f7      	b.n	800b5d2 <__any_on+0x26>
 800b5e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b5e6:	2900      	cmp	r1, #0
 800b5e8:	d0f5      	beq.n	800b5d6 <__any_on+0x2a>
 800b5ea:	2001      	movs	r0, #1
 800b5ec:	e7f6      	b.n	800b5dc <__any_on+0x30>

0800b5ee <sulp>:
 800b5ee:	b570      	push	{r4, r5, r6, lr}
 800b5f0:	4604      	mov	r4, r0
 800b5f2:	460d      	mov	r5, r1
 800b5f4:	ec45 4b10 	vmov	d0, r4, r5
 800b5f8:	4616      	mov	r6, r2
 800b5fa:	f7ff feb7 	bl	800b36c <__ulp>
 800b5fe:	ec51 0b10 	vmov	r0, r1, d0
 800b602:	b17e      	cbz	r6, 800b624 <sulp+0x36>
 800b604:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b608:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	dd09      	ble.n	800b624 <sulp+0x36>
 800b610:	051b      	lsls	r3, r3, #20
 800b612:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b616:	2400      	movs	r4, #0
 800b618:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b61c:	4622      	mov	r2, r4
 800b61e:	462b      	mov	r3, r5
 800b620:	f7f5 f80a 	bl	8000638 <__aeabi_dmul>
 800b624:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b628 <_strtod_l>:
 800b628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b62c:	ed2d 8b02 	vpush	{d8}
 800b630:	b09b      	sub	sp, #108	; 0x6c
 800b632:	4604      	mov	r4, r0
 800b634:	9213      	str	r2, [sp, #76]	; 0x4c
 800b636:	2200      	movs	r2, #0
 800b638:	9216      	str	r2, [sp, #88]	; 0x58
 800b63a:	460d      	mov	r5, r1
 800b63c:	f04f 0800 	mov.w	r8, #0
 800b640:	f04f 0900 	mov.w	r9, #0
 800b644:	460a      	mov	r2, r1
 800b646:	9215      	str	r2, [sp, #84]	; 0x54
 800b648:	7811      	ldrb	r1, [r2, #0]
 800b64a:	292b      	cmp	r1, #43	; 0x2b
 800b64c:	d04c      	beq.n	800b6e8 <_strtod_l+0xc0>
 800b64e:	d83a      	bhi.n	800b6c6 <_strtod_l+0x9e>
 800b650:	290d      	cmp	r1, #13
 800b652:	d834      	bhi.n	800b6be <_strtod_l+0x96>
 800b654:	2908      	cmp	r1, #8
 800b656:	d834      	bhi.n	800b6c2 <_strtod_l+0x9a>
 800b658:	2900      	cmp	r1, #0
 800b65a:	d03d      	beq.n	800b6d8 <_strtod_l+0xb0>
 800b65c:	2200      	movs	r2, #0
 800b65e:	920a      	str	r2, [sp, #40]	; 0x28
 800b660:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800b662:	7832      	ldrb	r2, [r6, #0]
 800b664:	2a30      	cmp	r2, #48	; 0x30
 800b666:	f040 80b4 	bne.w	800b7d2 <_strtod_l+0x1aa>
 800b66a:	7872      	ldrb	r2, [r6, #1]
 800b66c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b670:	2a58      	cmp	r2, #88	; 0x58
 800b672:	d170      	bne.n	800b756 <_strtod_l+0x12e>
 800b674:	9302      	str	r3, [sp, #8]
 800b676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b678:	9301      	str	r3, [sp, #4]
 800b67a:	ab16      	add	r3, sp, #88	; 0x58
 800b67c:	9300      	str	r3, [sp, #0]
 800b67e:	4a8e      	ldr	r2, [pc, #568]	; (800b8b8 <_strtod_l+0x290>)
 800b680:	ab17      	add	r3, sp, #92	; 0x5c
 800b682:	a915      	add	r1, sp, #84	; 0x54
 800b684:	4620      	mov	r0, r4
 800b686:	f001 fcd3 	bl	800d030 <__gethex>
 800b68a:	f010 070f 	ands.w	r7, r0, #15
 800b68e:	4605      	mov	r5, r0
 800b690:	d005      	beq.n	800b69e <_strtod_l+0x76>
 800b692:	2f06      	cmp	r7, #6
 800b694:	d12a      	bne.n	800b6ec <_strtod_l+0xc4>
 800b696:	3601      	adds	r6, #1
 800b698:	2300      	movs	r3, #0
 800b69a:	9615      	str	r6, [sp, #84]	; 0x54
 800b69c:	930a      	str	r3, [sp, #40]	; 0x28
 800b69e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	f040 857f 	bne.w	800c1a4 <_strtod_l+0xb7c>
 800b6a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6a8:	b1db      	cbz	r3, 800b6e2 <_strtod_l+0xba>
 800b6aa:	4642      	mov	r2, r8
 800b6ac:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b6b0:	ec43 2b10 	vmov	d0, r2, r3
 800b6b4:	b01b      	add	sp, #108	; 0x6c
 800b6b6:	ecbd 8b02 	vpop	{d8}
 800b6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6be:	2920      	cmp	r1, #32
 800b6c0:	d1cc      	bne.n	800b65c <_strtod_l+0x34>
 800b6c2:	3201      	adds	r2, #1
 800b6c4:	e7bf      	b.n	800b646 <_strtod_l+0x1e>
 800b6c6:	292d      	cmp	r1, #45	; 0x2d
 800b6c8:	d1c8      	bne.n	800b65c <_strtod_l+0x34>
 800b6ca:	2101      	movs	r1, #1
 800b6cc:	910a      	str	r1, [sp, #40]	; 0x28
 800b6ce:	1c51      	adds	r1, r2, #1
 800b6d0:	9115      	str	r1, [sp, #84]	; 0x54
 800b6d2:	7852      	ldrb	r2, [r2, #1]
 800b6d4:	2a00      	cmp	r2, #0
 800b6d6:	d1c3      	bne.n	800b660 <_strtod_l+0x38>
 800b6d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b6da:	9515      	str	r5, [sp, #84]	; 0x54
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	f040 855f 	bne.w	800c1a0 <_strtod_l+0xb78>
 800b6e2:	4642      	mov	r2, r8
 800b6e4:	464b      	mov	r3, r9
 800b6e6:	e7e3      	b.n	800b6b0 <_strtod_l+0x88>
 800b6e8:	2100      	movs	r1, #0
 800b6ea:	e7ef      	b.n	800b6cc <_strtod_l+0xa4>
 800b6ec:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b6ee:	b13a      	cbz	r2, 800b700 <_strtod_l+0xd8>
 800b6f0:	2135      	movs	r1, #53	; 0x35
 800b6f2:	a818      	add	r0, sp, #96	; 0x60
 800b6f4:	f7ff ff37 	bl	800b566 <__copybits>
 800b6f8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b6fa:	4620      	mov	r0, r4
 800b6fc:	f7ff fb0a 	bl	800ad14 <_Bfree>
 800b700:	3f01      	subs	r7, #1
 800b702:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b704:	2f04      	cmp	r7, #4
 800b706:	d806      	bhi.n	800b716 <_strtod_l+0xee>
 800b708:	e8df f007 	tbb	[pc, r7]
 800b70c:	201d0314 	.word	0x201d0314
 800b710:	14          	.byte	0x14
 800b711:	00          	.byte	0x00
 800b712:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800b716:	05e9      	lsls	r1, r5, #23
 800b718:	bf48      	it	mi
 800b71a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800b71e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b722:	0d1b      	lsrs	r3, r3, #20
 800b724:	051b      	lsls	r3, r3, #20
 800b726:	2b00      	cmp	r3, #0
 800b728:	d1b9      	bne.n	800b69e <_strtod_l+0x76>
 800b72a:	f7fe fb03 	bl	8009d34 <__errno>
 800b72e:	2322      	movs	r3, #34	; 0x22
 800b730:	6003      	str	r3, [r0, #0]
 800b732:	e7b4      	b.n	800b69e <_strtod_l+0x76>
 800b734:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800b738:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b73c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b740:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800b744:	e7e7      	b.n	800b716 <_strtod_l+0xee>
 800b746:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b8c0 <_strtod_l+0x298>
 800b74a:	e7e4      	b.n	800b716 <_strtod_l+0xee>
 800b74c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800b750:	f04f 38ff 	mov.w	r8, #4294967295
 800b754:	e7df      	b.n	800b716 <_strtod_l+0xee>
 800b756:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b758:	1c5a      	adds	r2, r3, #1
 800b75a:	9215      	str	r2, [sp, #84]	; 0x54
 800b75c:	785b      	ldrb	r3, [r3, #1]
 800b75e:	2b30      	cmp	r3, #48	; 0x30
 800b760:	d0f9      	beq.n	800b756 <_strtod_l+0x12e>
 800b762:	2b00      	cmp	r3, #0
 800b764:	d09b      	beq.n	800b69e <_strtod_l+0x76>
 800b766:	2301      	movs	r3, #1
 800b768:	f04f 0a00 	mov.w	sl, #0
 800b76c:	9304      	str	r3, [sp, #16]
 800b76e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b770:	930b      	str	r3, [sp, #44]	; 0x2c
 800b772:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b776:	46d3      	mov	fp, sl
 800b778:	220a      	movs	r2, #10
 800b77a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800b77c:	7806      	ldrb	r6, [r0, #0]
 800b77e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b782:	b2d9      	uxtb	r1, r3
 800b784:	2909      	cmp	r1, #9
 800b786:	d926      	bls.n	800b7d6 <_strtod_l+0x1ae>
 800b788:	494c      	ldr	r1, [pc, #304]	; (800b8bc <_strtod_l+0x294>)
 800b78a:	2201      	movs	r2, #1
 800b78c:	f001 fb79 	bl	800ce82 <strncmp>
 800b790:	2800      	cmp	r0, #0
 800b792:	d030      	beq.n	800b7f6 <_strtod_l+0x1ce>
 800b794:	2000      	movs	r0, #0
 800b796:	4632      	mov	r2, r6
 800b798:	9005      	str	r0, [sp, #20]
 800b79a:	465e      	mov	r6, fp
 800b79c:	4603      	mov	r3, r0
 800b79e:	2a65      	cmp	r2, #101	; 0x65
 800b7a0:	d001      	beq.n	800b7a6 <_strtod_l+0x17e>
 800b7a2:	2a45      	cmp	r2, #69	; 0x45
 800b7a4:	d113      	bne.n	800b7ce <_strtod_l+0x1a6>
 800b7a6:	b91e      	cbnz	r6, 800b7b0 <_strtod_l+0x188>
 800b7a8:	9a04      	ldr	r2, [sp, #16]
 800b7aa:	4302      	orrs	r2, r0
 800b7ac:	d094      	beq.n	800b6d8 <_strtod_l+0xb0>
 800b7ae:	2600      	movs	r6, #0
 800b7b0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b7b2:	1c6a      	adds	r2, r5, #1
 800b7b4:	9215      	str	r2, [sp, #84]	; 0x54
 800b7b6:	786a      	ldrb	r2, [r5, #1]
 800b7b8:	2a2b      	cmp	r2, #43	; 0x2b
 800b7ba:	d074      	beq.n	800b8a6 <_strtod_l+0x27e>
 800b7bc:	2a2d      	cmp	r2, #45	; 0x2d
 800b7be:	d078      	beq.n	800b8b2 <_strtod_l+0x28a>
 800b7c0:	f04f 0c00 	mov.w	ip, #0
 800b7c4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b7c8:	2909      	cmp	r1, #9
 800b7ca:	d97f      	bls.n	800b8cc <_strtod_l+0x2a4>
 800b7cc:	9515      	str	r5, [sp, #84]	; 0x54
 800b7ce:	2700      	movs	r7, #0
 800b7d0:	e09e      	b.n	800b910 <_strtod_l+0x2e8>
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	e7c8      	b.n	800b768 <_strtod_l+0x140>
 800b7d6:	f1bb 0f08 	cmp.w	fp, #8
 800b7da:	bfd8      	it	le
 800b7dc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b7de:	f100 0001 	add.w	r0, r0, #1
 800b7e2:	bfda      	itte	le
 800b7e4:	fb02 3301 	mlale	r3, r2, r1, r3
 800b7e8:	9309      	strle	r3, [sp, #36]	; 0x24
 800b7ea:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800b7ee:	f10b 0b01 	add.w	fp, fp, #1
 800b7f2:	9015      	str	r0, [sp, #84]	; 0x54
 800b7f4:	e7c1      	b.n	800b77a <_strtod_l+0x152>
 800b7f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b7f8:	1c5a      	adds	r2, r3, #1
 800b7fa:	9215      	str	r2, [sp, #84]	; 0x54
 800b7fc:	785a      	ldrb	r2, [r3, #1]
 800b7fe:	f1bb 0f00 	cmp.w	fp, #0
 800b802:	d037      	beq.n	800b874 <_strtod_l+0x24c>
 800b804:	9005      	str	r0, [sp, #20]
 800b806:	465e      	mov	r6, fp
 800b808:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b80c:	2b09      	cmp	r3, #9
 800b80e:	d912      	bls.n	800b836 <_strtod_l+0x20e>
 800b810:	2301      	movs	r3, #1
 800b812:	e7c4      	b.n	800b79e <_strtod_l+0x176>
 800b814:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b816:	1c5a      	adds	r2, r3, #1
 800b818:	9215      	str	r2, [sp, #84]	; 0x54
 800b81a:	785a      	ldrb	r2, [r3, #1]
 800b81c:	3001      	adds	r0, #1
 800b81e:	2a30      	cmp	r2, #48	; 0x30
 800b820:	d0f8      	beq.n	800b814 <_strtod_l+0x1ec>
 800b822:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b826:	2b08      	cmp	r3, #8
 800b828:	f200 84c1 	bhi.w	800c1ae <_strtod_l+0xb86>
 800b82c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b82e:	9005      	str	r0, [sp, #20]
 800b830:	2000      	movs	r0, #0
 800b832:	930b      	str	r3, [sp, #44]	; 0x2c
 800b834:	4606      	mov	r6, r0
 800b836:	3a30      	subs	r2, #48	; 0x30
 800b838:	f100 0301 	add.w	r3, r0, #1
 800b83c:	d014      	beq.n	800b868 <_strtod_l+0x240>
 800b83e:	9905      	ldr	r1, [sp, #20]
 800b840:	4419      	add	r1, r3
 800b842:	9105      	str	r1, [sp, #20]
 800b844:	4633      	mov	r3, r6
 800b846:	eb00 0c06 	add.w	ip, r0, r6
 800b84a:	210a      	movs	r1, #10
 800b84c:	4563      	cmp	r3, ip
 800b84e:	d113      	bne.n	800b878 <_strtod_l+0x250>
 800b850:	1833      	adds	r3, r6, r0
 800b852:	2b08      	cmp	r3, #8
 800b854:	f106 0601 	add.w	r6, r6, #1
 800b858:	4406      	add	r6, r0
 800b85a:	dc1a      	bgt.n	800b892 <_strtod_l+0x26a>
 800b85c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b85e:	230a      	movs	r3, #10
 800b860:	fb03 2301 	mla	r3, r3, r1, r2
 800b864:	9309      	str	r3, [sp, #36]	; 0x24
 800b866:	2300      	movs	r3, #0
 800b868:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b86a:	1c51      	adds	r1, r2, #1
 800b86c:	9115      	str	r1, [sp, #84]	; 0x54
 800b86e:	7852      	ldrb	r2, [r2, #1]
 800b870:	4618      	mov	r0, r3
 800b872:	e7c9      	b.n	800b808 <_strtod_l+0x1e0>
 800b874:	4658      	mov	r0, fp
 800b876:	e7d2      	b.n	800b81e <_strtod_l+0x1f6>
 800b878:	2b08      	cmp	r3, #8
 800b87a:	f103 0301 	add.w	r3, r3, #1
 800b87e:	dc03      	bgt.n	800b888 <_strtod_l+0x260>
 800b880:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b882:	434f      	muls	r7, r1
 800b884:	9709      	str	r7, [sp, #36]	; 0x24
 800b886:	e7e1      	b.n	800b84c <_strtod_l+0x224>
 800b888:	2b10      	cmp	r3, #16
 800b88a:	bfd8      	it	le
 800b88c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800b890:	e7dc      	b.n	800b84c <_strtod_l+0x224>
 800b892:	2e10      	cmp	r6, #16
 800b894:	bfdc      	itt	le
 800b896:	230a      	movle	r3, #10
 800b898:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800b89c:	e7e3      	b.n	800b866 <_strtod_l+0x23e>
 800b89e:	2300      	movs	r3, #0
 800b8a0:	9305      	str	r3, [sp, #20]
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	e780      	b.n	800b7a8 <_strtod_l+0x180>
 800b8a6:	f04f 0c00 	mov.w	ip, #0
 800b8aa:	1caa      	adds	r2, r5, #2
 800b8ac:	9215      	str	r2, [sp, #84]	; 0x54
 800b8ae:	78aa      	ldrb	r2, [r5, #2]
 800b8b0:	e788      	b.n	800b7c4 <_strtod_l+0x19c>
 800b8b2:	f04f 0c01 	mov.w	ip, #1
 800b8b6:	e7f8      	b.n	800b8aa <_strtod_l+0x282>
 800b8b8:	0800dfa0 	.word	0x0800dfa0
 800b8bc:	0800df9c 	.word	0x0800df9c
 800b8c0:	7ff00000 	.word	0x7ff00000
 800b8c4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b8c6:	1c51      	adds	r1, r2, #1
 800b8c8:	9115      	str	r1, [sp, #84]	; 0x54
 800b8ca:	7852      	ldrb	r2, [r2, #1]
 800b8cc:	2a30      	cmp	r2, #48	; 0x30
 800b8ce:	d0f9      	beq.n	800b8c4 <_strtod_l+0x29c>
 800b8d0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b8d4:	2908      	cmp	r1, #8
 800b8d6:	f63f af7a 	bhi.w	800b7ce <_strtod_l+0x1a6>
 800b8da:	3a30      	subs	r2, #48	; 0x30
 800b8dc:	9208      	str	r2, [sp, #32]
 800b8de:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b8e0:	920c      	str	r2, [sp, #48]	; 0x30
 800b8e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b8e4:	1c57      	adds	r7, r2, #1
 800b8e6:	9715      	str	r7, [sp, #84]	; 0x54
 800b8e8:	7852      	ldrb	r2, [r2, #1]
 800b8ea:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b8ee:	f1be 0f09 	cmp.w	lr, #9
 800b8f2:	d938      	bls.n	800b966 <_strtod_l+0x33e>
 800b8f4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b8f6:	1a7f      	subs	r7, r7, r1
 800b8f8:	2f08      	cmp	r7, #8
 800b8fa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b8fe:	dc03      	bgt.n	800b908 <_strtod_l+0x2e0>
 800b900:	9908      	ldr	r1, [sp, #32]
 800b902:	428f      	cmp	r7, r1
 800b904:	bfa8      	it	ge
 800b906:	460f      	movge	r7, r1
 800b908:	f1bc 0f00 	cmp.w	ip, #0
 800b90c:	d000      	beq.n	800b910 <_strtod_l+0x2e8>
 800b90e:	427f      	negs	r7, r7
 800b910:	2e00      	cmp	r6, #0
 800b912:	d14f      	bne.n	800b9b4 <_strtod_l+0x38c>
 800b914:	9904      	ldr	r1, [sp, #16]
 800b916:	4301      	orrs	r1, r0
 800b918:	f47f aec1 	bne.w	800b69e <_strtod_l+0x76>
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	f47f aedb 	bne.w	800b6d8 <_strtod_l+0xb0>
 800b922:	2a69      	cmp	r2, #105	; 0x69
 800b924:	d029      	beq.n	800b97a <_strtod_l+0x352>
 800b926:	dc26      	bgt.n	800b976 <_strtod_l+0x34e>
 800b928:	2a49      	cmp	r2, #73	; 0x49
 800b92a:	d026      	beq.n	800b97a <_strtod_l+0x352>
 800b92c:	2a4e      	cmp	r2, #78	; 0x4e
 800b92e:	f47f aed3 	bne.w	800b6d8 <_strtod_l+0xb0>
 800b932:	499b      	ldr	r1, [pc, #620]	; (800bba0 <_strtod_l+0x578>)
 800b934:	a815      	add	r0, sp, #84	; 0x54
 800b936:	f001 fdbb 	bl	800d4b0 <__match>
 800b93a:	2800      	cmp	r0, #0
 800b93c:	f43f aecc 	beq.w	800b6d8 <_strtod_l+0xb0>
 800b940:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	2b28      	cmp	r3, #40	; 0x28
 800b946:	d12f      	bne.n	800b9a8 <_strtod_l+0x380>
 800b948:	4996      	ldr	r1, [pc, #600]	; (800bba4 <_strtod_l+0x57c>)
 800b94a:	aa18      	add	r2, sp, #96	; 0x60
 800b94c:	a815      	add	r0, sp, #84	; 0x54
 800b94e:	f001 fdc3 	bl	800d4d8 <__hexnan>
 800b952:	2805      	cmp	r0, #5
 800b954:	d128      	bne.n	800b9a8 <_strtod_l+0x380>
 800b956:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b958:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b95c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b960:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b964:	e69b      	b.n	800b69e <_strtod_l+0x76>
 800b966:	9f08      	ldr	r7, [sp, #32]
 800b968:	210a      	movs	r1, #10
 800b96a:	fb01 2107 	mla	r1, r1, r7, r2
 800b96e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b972:	9208      	str	r2, [sp, #32]
 800b974:	e7b5      	b.n	800b8e2 <_strtod_l+0x2ba>
 800b976:	2a6e      	cmp	r2, #110	; 0x6e
 800b978:	e7d9      	b.n	800b92e <_strtod_l+0x306>
 800b97a:	498b      	ldr	r1, [pc, #556]	; (800bba8 <_strtod_l+0x580>)
 800b97c:	a815      	add	r0, sp, #84	; 0x54
 800b97e:	f001 fd97 	bl	800d4b0 <__match>
 800b982:	2800      	cmp	r0, #0
 800b984:	f43f aea8 	beq.w	800b6d8 <_strtod_l+0xb0>
 800b988:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b98a:	4988      	ldr	r1, [pc, #544]	; (800bbac <_strtod_l+0x584>)
 800b98c:	3b01      	subs	r3, #1
 800b98e:	a815      	add	r0, sp, #84	; 0x54
 800b990:	9315      	str	r3, [sp, #84]	; 0x54
 800b992:	f001 fd8d 	bl	800d4b0 <__match>
 800b996:	b910      	cbnz	r0, 800b99e <_strtod_l+0x376>
 800b998:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b99a:	3301      	adds	r3, #1
 800b99c:	9315      	str	r3, [sp, #84]	; 0x54
 800b99e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800bbbc <_strtod_l+0x594>
 800b9a2:	f04f 0800 	mov.w	r8, #0
 800b9a6:	e67a      	b.n	800b69e <_strtod_l+0x76>
 800b9a8:	4881      	ldr	r0, [pc, #516]	; (800bbb0 <_strtod_l+0x588>)
 800b9aa:	f001 fa9d 	bl	800cee8 <nan>
 800b9ae:	ec59 8b10 	vmov	r8, r9, d0
 800b9b2:	e674      	b.n	800b69e <_strtod_l+0x76>
 800b9b4:	9b05      	ldr	r3, [sp, #20]
 800b9b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9b8:	1afb      	subs	r3, r7, r3
 800b9ba:	f1bb 0f00 	cmp.w	fp, #0
 800b9be:	bf08      	it	eq
 800b9c0:	46b3      	moveq	fp, r6
 800b9c2:	2e10      	cmp	r6, #16
 800b9c4:	9308      	str	r3, [sp, #32]
 800b9c6:	4635      	mov	r5, r6
 800b9c8:	bfa8      	it	ge
 800b9ca:	2510      	movge	r5, #16
 800b9cc:	f7f4 fdba 	bl	8000544 <__aeabi_ui2d>
 800b9d0:	2e09      	cmp	r6, #9
 800b9d2:	4680      	mov	r8, r0
 800b9d4:	4689      	mov	r9, r1
 800b9d6:	dd13      	ble.n	800ba00 <_strtod_l+0x3d8>
 800b9d8:	4b76      	ldr	r3, [pc, #472]	; (800bbb4 <_strtod_l+0x58c>)
 800b9da:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b9de:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b9e2:	f7f4 fe29 	bl	8000638 <__aeabi_dmul>
 800b9e6:	4680      	mov	r8, r0
 800b9e8:	4650      	mov	r0, sl
 800b9ea:	4689      	mov	r9, r1
 800b9ec:	f7f4 fdaa 	bl	8000544 <__aeabi_ui2d>
 800b9f0:	4602      	mov	r2, r0
 800b9f2:	460b      	mov	r3, r1
 800b9f4:	4640      	mov	r0, r8
 800b9f6:	4649      	mov	r1, r9
 800b9f8:	f7f4 fc68 	bl	80002cc <__adddf3>
 800b9fc:	4680      	mov	r8, r0
 800b9fe:	4689      	mov	r9, r1
 800ba00:	2e0f      	cmp	r6, #15
 800ba02:	dc38      	bgt.n	800ba76 <_strtod_l+0x44e>
 800ba04:	9b08      	ldr	r3, [sp, #32]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	f43f ae49 	beq.w	800b69e <_strtod_l+0x76>
 800ba0c:	dd24      	ble.n	800ba58 <_strtod_l+0x430>
 800ba0e:	2b16      	cmp	r3, #22
 800ba10:	dc0b      	bgt.n	800ba2a <_strtod_l+0x402>
 800ba12:	4968      	ldr	r1, [pc, #416]	; (800bbb4 <_strtod_l+0x58c>)
 800ba14:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ba18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba1c:	4642      	mov	r2, r8
 800ba1e:	464b      	mov	r3, r9
 800ba20:	f7f4 fe0a 	bl	8000638 <__aeabi_dmul>
 800ba24:	4680      	mov	r8, r0
 800ba26:	4689      	mov	r9, r1
 800ba28:	e639      	b.n	800b69e <_strtod_l+0x76>
 800ba2a:	9a08      	ldr	r2, [sp, #32]
 800ba2c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800ba30:	4293      	cmp	r3, r2
 800ba32:	db20      	blt.n	800ba76 <_strtod_l+0x44e>
 800ba34:	4c5f      	ldr	r4, [pc, #380]	; (800bbb4 <_strtod_l+0x58c>)
 800ba36:	f1c6 060f 	rsb	r6, r6, #15
 800ba3a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800ba3e:	4642      	mov	r2, r8
 800ba40:	464b      	mov	r3, r9
 800ba42:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba46:	f7f4 fdf7 	bl	8000638 <__aeabi_dmul>
 800ba4a:	9b08      	ldr	r3, [sp, #32]
 800ba4c:	1b9e      	subs	r6, r3, r6
 800ba4e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800ba52:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ba56:	e7e3      	b.n	800ba20 <_strtod_l+0x3f8>
 800ba58:	9b08      	ldr	r3, [sp, #32]
 800ba5a:	3316      	adds	r3, #22
 800ba5c:	db0b      	blt.n	800ba76 <_strtod_l+0x44e>
 800ba5e:	9b05      	ldr	r3, [sp, #20]
 800ba60:	1bdf      	subs	r7, r3, r7
 800ba62:	4b54      	ldr	r3, [pc, #336]	; (800bbb4 <_strtod_l+0x58c>)
 800ba64:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ba68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba6c:	4640      	mov	r0, r8
 800ba6e:	4649      	mov	r1, r9
 800ba70:	f7f4 ff0c 	bl	800088c <__aeabi_ddiv>
 800ba74:	e7d6      	b.n	800ba24 <_strtod_l+0x3fc>
 800ba76:	9b08      	ldr	r3, [sp, #32]
 800ba78:	1b75      	subs	r5, r6, r5
 800ba7a:	441d      	add	r5, r3
 800ba7c:	2d00      	cmp	r5, #0
 800ba7e:	dd70      	ble.n	800bb62 <_strtod_l+0x53a>
 800ba80:	f015 030f 	ands.w	r3, r5, #15
 800ba84:	d00a      	beq.n	800ba9c <_strtod_l+0x474>
 800ba86:	494b      	ldr	r1, [pc, #300]	; (800bbb4 <_strtod_l+0x58c>)
 800ba88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ba8c:	4642      	mov	r2, r8
 800ba8e:	464b      	mov	r3, r9
 800ba90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba94:	f7f4 fdd0 	bl	8000638 <__aeabi_dmul>
 800ba98:	4680      	mov	r8, r0
 800ba9a:	4689      	mov	r9, r1
 800ba9c:	f035 050f 	bics.w	r5, r5, #15
 800baa0:	d04d      	beq.n	800bb3e <_strtod_l+0x516>
 800baa2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800baa6:	dd22      	ble.n	800baee <_strtod_l+0x4c6>
 800baa8:	2500      	movs	r5, #0
 800baaa:	46ab      	mov	fp, r5
 800baac:	9509      	str	r5, [sp, #36]	; 0x24
 800baae:	9505      	str	r5, [sp, #20]
 800bab0:	2322      	movs	r3, #34	; 0x22
 800bab2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800bbbc <_strtod_l+0x594>
 800bab6:	6023      	str	r3, [r4, #0]
 800bab8:	f04f 0800 	mov.w	r8, #0
 800babc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800babe:	2b00      	cmp	r3, #0
 800bac0:	f43f aded 	beq.w	800b69e <_strtod_l+0x76>
 800bac4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bac6:	4620      	mov	r0, r4
 800bac8:	f7ff f924 	bl	800ad14 <_Bfree>
 800bacc:	9905      	ldr	r1, [sp, #20]
 800bace:	4620      	mov	r0, r4
 800bad0:	f7ff f920 	bl	800ad14 <_Bfree>
 800bad4:	4659      	mov	r1, fp
 800bad6:	4620      	mov	r0, r4
 800bad8:	f7ff f91c 	bl	800ad14 <_Bfree>
 800badc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bade:	4620      	mov	r0, r4
 800bae0:	f7ff f918 	bl	800ad14 <_Bfree>
 800bae4:	4629      	mov	r1, r5
 800bae6:	4620      	mov	r0, r4
 800bae8:	f7ff f914 	bl	800ad14 <_Bfree>
 800baec:	e5d7      	b.n	800b69e <_strtod_l+0x76>
 800baee:	4b32      	ldr	r3, [pc, #200]	; (800bbb8 <_strtod_l+0x590>)
 800baf0:	9304      	str	r3, [sp, #16]
 800baf2:	2300      	movs	r3, #0
 800baf4:	112d      	asrs	r5, r5, #4
 800baf6:	4640      	mov	r0, r8
 800baf8:	4649      	mov	r1, r9
 800bafa:	469a      	mov	sl, r3
 800bafc:	2d01      	cmp	r5, #1
 800bafe:	dc21      	bgt.n	800bb44 <_strtod_l+0x51c>
 800bb00:	b10b      	cbz	r3, 800bb06 <_strtod_l+0x4de>
 800bb02:	4680      	mov	r8, r0
 800bb04:	4689      	mov	r9, r1
 800bb06:	492c      	ldr	r1, [pc, #176]	; (800bbb8 <_strtod_l+0x590>)
 800bb08:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800bb0c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800bb10:	4642      	mov	r2, r8
 800bb12:	464b      	mov	r3, r9
 800bb14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb18:	f7f4 fd8e 	bl	8000638 <__aeabi_dmul>
 800bb1c:	4b27      	ldr	r3, [pc, #156]	; (800bbbc <_strtod_l+0x594>)
 800bb1e:	460a      	mov	r2, r1
 800bb20:	400b      	ands	r3, r1
 800bb22:	4927      	ldr	r1, [pc, #156]	; (800bbc0 <_strtod_l+0x598>)
 800bb24:	428b      	cmp	r3, r1
 800bb26:	4680      	mov	r8, r0
 800bb28:	d8be      	bhi.n	800baa8 <_strtod_l+0x480>
 800bb2a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bb2e:	428b      	cmp	r3, r1
 800bb30:	bf86      	itte	hi
 800bb32:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800bbc4 <_strtod_l+0x59c>
 800bb36:	f04f 38ff 	movhi.w	r8, #4294967295
 800bb3a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800bb3e:	2300      	movs	r3, #0
 800bb40:	9304      	str	r3, [sp, #16]
 800bb42:	e07b      	b.n	800bc3c <_strtod_l+0x614>
 800bb44:	07ea      	lsls	r2, r5, #31
 800bb46:	d505      	bpl.n	800bb54 <_strtod_l+0x52c>
 800bb48:	9b04      	ldr	r3, [sp, #16]
 800bb4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb4e:	f7f4 fd73 	bl	8000638 <__aeabi_dmul>
 800bb52:	2301      	movs	r3, #1
 800bb54:	9a04      	ldr	r2, [sp, #16]
 800bb56:	3208      	adds	r2, #8
 800bb58:	f10a 0a01 	add.w	sl, sl, #1
 800bb5c:	106d      	asrs	r5, r5, #1
 800bb5e:	9204      	str	r2, [sp, #16]
 800bb60:	e7cc      	b.n	800bafc <_strtod_l+0x4d4>
 800bb62:	d0ec      	beq.n	800bb3e <_strtod_l+0x516>
 800bb64:	426d      	negs	r5, r5
 800bb66:	f015 020f 	ands.w	r2, r5, #15
 800bb6a:	d00a      	beq.n	800bb82 <_strtod_l+0x55a>
 800bb6c:	4b11      	ldr	r3, [pc, #68]	; (800bbb4 <_strtod_l+0x58c>)
 800bb6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb72:	4640      	mov	r0, r8
 800bb74:	4649      	mov	r1, r9
 800bb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7a:	f7f4 fe87 	bl	800088c <__aeabi_ddiv>
 800bb7e:	4680      	mov	r8, r0
 800bb80:	4689      	mov	r9, r1
 800bb82:	112d      	asrs	r5, r5, #4
 800bb84:	d0db      	beq.n	800bb3e <_strtod_l+0x516>
 800bb86:	2d1f      	cmp	r5, #31
 800bb88:	dd1e      	ble.n	800bbc8 <_strtod_l+0x5a0>
 800bb8a:	2500      	movs	r5, #0
 800bb8c:	46ab      	mov	fp, r5
 800bb8e:	9509      	str	r5, [sp, #36]	; 0x24
 800bb90:	9505      	str	r5, [sp, #20]
 800bb92:	2322      	movs	r3, #34	; 0x22
 800bb94:	f04f 0800 	mov.w	r8, #0
 800bb98:	f04f 0900 	mov.w	r9, #0
 800bb9c:	6023      	str	r3, [r4, #0]
 800bb9e:	e78d      	b.n	800babc <_strtod_l+0x494>
 800bba0:	0800dd8d 	.word	0x0800dd8d
 800bba4:	0800dfb4 	.word	0x0800dfb4
 800bba8:	0800dd85 	.word	0x0800dd85
 800bbac:	0800ddba 	.word	0x0800ddba
 800bbb0:	0800e160 	.word	0x0800e160
 800bbb4:	0800dec8 	.word	0x0800dec8
 800bbb8:	0800dea0 	.word	0x0800dea0
 800bbbc:	7ff00000 	.word	0x7ff00000
 800bbc0:	7ca00000 	.word	0x7ca00000
 800bbc4:	7fefffff 	.word	0x7fefffff
 800bbc8:	f015 0310 	ands.w	r3, r5, #16
 800bbcc:	bf18      	it	ne
 800bbce:	236a      	movne	r3, #106	; 0x6a
 800bbd0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800bf74 <_strtod_l+0x94c>
 800bbd4:	9304      	str	r3, [sp, #16]
 800bbd6:	4640      	mov	r0, r8
 800bbd8:	4649      	mov	r1, r9
 800bbda:	2300      	movs	r3, #0
 800bbdc:	07ea      	lsls	r2, r5, #31
 800bbde:	d504      	bpl.n	800bbea <_strtod_l+0x5c2>
 800bbe0:	e9da 2300 	ldrd	r2, r3, [sl]
 800bbe4:	f7f4 fd28 	bl	8000638 <__aeabi_dmul>
 800bbe8:	2301      	movs	r3, #1
 800bbea:	106d      	asrs	r5, r5, #1
 800bbec:	f10a 0a08 	add.w	sl, sl, #8
 800bbf0:	d1f4      	bne.n	800bbdc <_strtod_l+0x5b4>
 800bbf2:	b10b      	cbz	r3, 800bbf8 <_strtod_l+0x5d0>
 800bbf4:	4680      	mov	r8, r0
 800bbf6:	4689      	mov	r9, r1
 800bbf8:	9b04      	ldr	r3, [sp, #16]
 800bbfa:	b1bb      	cbz	r3, 800bc2c <_strtod_l+0x604>
 800bbfc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800bc00:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	4649      	mov	r1, r9
 800bc08:	dd10      	ble.n	800bc2c <_strtod_l+0x604>
 800bc0a:	2b1f      	cmp	r3, #31
 800bc0c:	f340 811e 	ble.w	800be4c <_strtod_l+0x824>
 800bc10:	2b34      	cmp	r3, #52	; 0x34
 800bc12:	bfde      	ittt	le
 800bc14:	f04f 33ff 	movle.w	r3, #4294967295
 800bc18:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800bc1c:	4093      	lslle	r3, r2
 800bc1e:	f04f 0800 	mov.w	r8, #0
 800bc22:	bfcc      	ite	gt
 800bc24:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800bc28:	ea03 0901 	andle.w	r9, r3, r1
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	2300      	movs	r3, #0
 800bc30:	4640      	mov	r0, r8
 800bc32:	4649      	mov	r1, r9
 800bc34:	f7f4 ff68 	bl	8000b08 <__aeabi_dcmpeq>
 800bc38:	2800      	cmp	r0, #0
 800bc3a:	d1a6      	bne.n	800bb8a <_strtod_l+0x562>
 800bc3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc3e:	9300      	str	r3, [sp, #0]
 800bc40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bc42:	4633      	mov	r3, r6
 800bc44:	465a      	mov	r2, fp
 800bc46:	4620      	mov	r0, r4
 800bc48:	f7ff f8cc 	bl	800ade4 <__s2b>
 800bc4c:	9009      	str	r0, [sp, #36]	; 0x24
 800bc4e:	2800      	cmp	r0, #0
 800bc50:	f43f af2a 	beq.w	800baa8 <_strtod_l+0x480>
 800bc54:	9a08      	ldr	r2, [sp, #32]
 800bc56:	9b05      	ldr	r3, [sp, #20]
 800bc58:	2a00      	cmp	r2, #0
 800bc5a:	eba3 0307 	sub.w	r3, r3, r7
 800bc5e:	bfa8      	it	ge
 800bc60:	2300      	movge	r3, #0
 800bc62:	930c      	str	r3, [sp, #48]	; 0x30
 800bc64:	2500      	movs	r5, #0
 800bc66:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bc6a:	9312      	str	r3, [sp, #72]	; 0x48
 800bc6c:	46ab      	mov	fp, r5
 800bc6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc70:	4620      	mov	r0, r4
 800bc72:	6859      	ldr	r1, [r3, #4]
 800bc74:	f7ff f80e 	bl	800ac94 <_Balloc>
 800bc78:	9005      	str	r0, [sp, #20]
 800bc7a:	2800      	cmp	r0, #0
 800bc7c:	f43f af18 	beq.w	800bab0 <_strtod_l+0x488>
 800bc80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc82:	691a      	ldr	r2, [r3, #16]
 800bc84:	3202      	adds	r2, #2
 800bc86:	f103 010c 	add.w	r1, r3, #12
 800bc8a:	0092      	lsls	r2, r2, #2
 800bc8c:	300c      	adds	r0, #12
 800bc8e:	f001 f91b 	bl	800cec8 <memcpy>
 800bc92:	ec49 8b10 	vmov	d0, r8, r9
 800bc96:	aa18      	add	r2, sp, #96	; 0x60
 800bc98:	a917      	add	r1, sp, #92	; 0x5c
 800bc9a:	4620      	mov	r0, r4
 800bc9c:	f7ff fbd6 	bl	800b44c <__d2b>
 800bca0:	ec49 8b18 	vmov	d8, r8, r9
 800bca4:	9016      	str	r0, [sp, #88]	; 0x58
 800bca6:	2800      	cmp	r0, #0
 800bca8:	f43f af02 	beq.w	800bab0 <_strtod_l+0x488>
 800bcac:	2101      	movs	r1, #1
 800bcae:	4620      	mov	r0, r4
 800bcb0:	f7ff f930 	bl	800af14 <__i2b>
 800bcb4:	4683      	mov	fp, r0
 800bcb6:	2800      	cmp	r0, #0
 800bcb8:	f43f aefa 	beq.w	800bab0 <_strtod_l+0x488>
 800bcbc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800bcbe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bcc0:	2e00      	cmp	r6, #0
 800bcc2:	bfab      	itete	ge
 800bcc4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800bcc6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800bcc8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800bcca:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800bcce:	bfac      	ite	ge
 800bcd0:	eb06 0a03 	addge.w	sl, r6, r3
 800bcd4:	1b9f      	sublt	r7, r3, r6
 800bcd6:	9b04      	ldr	r3, [sp, #16]
 800bcd8:	1af6      	subs	r6, r6, r3
 800bcda:	4416      	add	r6, r2
 800bcdc:	4ba0      	ldr	r3, [pc, #640]	; (800bf60 <_strtod_l+0x938>)
 800bcde:	3e01      	subs	r6, #1
 800bce0:	429e      	cmp	r6, r3
 800bce2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bce6:	f280 80c4 	bge.w	800be72 <_strtod_l+0x84a>
 800bcea:	1b9b      	subs	r3, r3, r6
 800bcec:	2b1f      	cmp	r3, #31
 800bcee:	eba2 0203 	sub.w	r2, r2, r3
 800bcf2:	f04f 0101 	mov.w	r1, #1
 800bcf6:	f300 80b0 	bgt.w	800be5a <_strtod_l+0x832>
 800bcfa:	fa01 f303 	lsl.w	r3, r1, r3
 800bcfe:	930e      	str	r3, [sp, #56]	; 0x38
 800bd00:	2300      	movs	r3, #0
 800bd02:	930d      	str	r3, [sp, #52]	; 0x34
 800bd04:	eb0a 0602 	add.w	r6, sl, r2
 800bd08:	9b04      	ldr	r3, [sp, #16]
 800bd0a:	45b2      	cmp	sl, r6
 800bd0c:	4417      	add	r7, r2
 800bd0e:	441f      	add	r7, r3
 800bd10:	4653      	mov	r3, sl
 800bd12:	bfa8      	it	ge
 800bd14:	4633      	movge	r3, r6
 800bd16:	42bb      	cmp	r3, r7
 800bd18:	bfa8      	it	ge
 800bd1a:	463b      	movge	r3, r7
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	bfc2      	ittt	gt
 800bd20:	1af6      	subgt	r6, r6, r3
 800bd22:	1aff      	subgt	r7, r7, r3
 800bd24:	ebaa 0a03 	subgt.w	sl, sl, r3
 800bd28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	dd17      	ble.n	800bd5e <_strtod_l+0x736>
 800bd2e:	4659      	mov	r1, fp
 800bd30:	461a      	mov	r2, r3
 800bd32:	4620      	mov	r0, r4
 800bd34:	f7ff f9ae 	bl	800b094 <__pow5mult>
 800bd38:	4683      	mov	fp, r0
 800bd3a:	2800      	cmp	r0, #0
 800bd3c:	f43f aeb8 	beq.w	800bab0 <_strtod_l+0x488>
 800bd40:	4601      	mov	r1, r0
 800bd42:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bd44:	4620      	mov	r0, r4
 800bd46:	f7ff f8fb 	bl	800af40 <__multiply>
 800bd4a:	900b      	str	r0, [sp, #44]	; 0x2c
 800bd4c:	2800      	cmp	r0, #0
 800bd4e:	f43f aeaf 	beq.w	800bab0 <_strtod_l+0x488>
 800bd52:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bd54:	4620      	mov	r0, r4
 800bd56:	f7fe ffdd 	bl	800ad14 <_Bfree>
 800bd5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd5c:	9316      	str	r3, [sp, #88]	; 0x58
 800bd5e:	2e00      	cmp	r6, #0
 800bd60:	f300 808c 	bgt.w	800be7c <_strtod_l+0x854>
 800bd64:	9b08      	ldr	r3, [sp, #32]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	dd08      	ble.n	800bd7c <_strtod_l+0x754>
 800bd6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bd6c:	9905      	ldr	r1, [sp, #20]
 800bd6e:	4620      	mov	r0, r4
 800bd70:	f7ff f990 	bl	800b094 <__pow5mult>
 800bd74:	9005      	str	r0, [sp, #20]
 800bd76:	2800      	cmp	r0, #0
 800bd78:	f43f ae9a 	beq.w	800bab0 <_strtod_l+0x488>
 800bd7c:	2f00      	cmp	r7, #0
 800bd7e:	dd08      	ble.n	800bd92 <_strtod_l+0x76a>
 800bd80:	9905      	ldr	r1, [sp, #20]
 800bd82:	463a      	mov	r2, r7
 800bd84:	4620      	mov	r0, r4
 800bd86:	f7ff f9df 	bl	800b148 <__lshift>
 800bd8a:	9005      	str	r0, [sp, #20]
 800bd8c:	2800      	cmp	r0, #0
 800bd8e:	f43f ae8f 	beq.w	800bab0 <_strtod_l+0x488>
 800bd92:	f1ba 0f00 	cmp.w	sl, #0
 800bd96:	dd08      	ble.n	800bdaa <_strtod_l+0x782>
 800bd98:	4659      	mov	r1, fp
 800bd9a:	4652      	mov	r2, sl
 800bd9c:	4620      	mov	r0, r4
 800bd9e:	f7ff f9d3 	bl	800b148 <__lshift>
 800bda2:	4683      	mov	fp, r0
 800bda4:	2800      	cmp	r0, #0
 800bda6:	f43f ae83 	beq.w	800bab0 <_strtod_l+0x488>
 800bdaa:	9a05      	ldr	r2, [sp, #20]
 800bdac:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bdae:	4620      	mov	r0, r4
 800bdb0:	f7ff fa52 	bl	800b258 <__mdiff>
 800bdb4:	4605      	mov	r5, r0
 800bdb6:	2800      	cmp	r0, #0
 800bdb8:	f43f ae7a 	beq.w	800bab0 <_strtod_l+0x488>
 800bdbc:	68c3      	ldr	r3, [r0, #12]
 800bdbe:	930b      	str	r3, [sp, #44]	; 0x2c
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	60c3      	str	r3, [r0, #12]
 800bdc4:	4659      	mov	r1, fp
 800bdc6:	f7ff fa2b 	bl	800b220 <__mcmp>
 800bdca:	2800      	cmp	r0, #0
 800bdcc:	da60      	bge.n	800be90 <_strtod_l+0x868>
 800bdce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bdd0:	ea53 0308 	orrs.w	r3, r3, r8
 800bdd4:	f040 8084 	bne.w	800bee0 <_strtod_l+0x8b8>
 800bdd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d17f      	bne.n	800bee0 <_strtod_l+0x8b8>
 800bde0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bde4:	0d1b      	lsrs	r3, r3, #20
 800bde6:	051b      	lsls	r3, r3, #20
 800bde8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bdec:	d978      	bls.n	800bee0 <_strtod_l+0x8b8>
 800bdee:	696b      	ldr	r3, [r5, #20]
 800bdf0:	b913      	cbnz	r3, 800bdf8 <_strtod_l+0x7d0>
 800bdf2:	692b      	ldr	r3, [r5, #16]
 800bdf4:	2b01      	cmp	r3, #1
 800bdf6:	dd73      	ble.n	800bee0 <_strtod_l+0x8b8>
 800bdf8:	4629      	mov	r1, r5
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	4620      	mov	r0, r4
 800bdfe:	f7ff f9a3 	bl	800b148 <__lshift>
 800be02:	4659      	mov	r1, fp
 800be04:	4605      	mov	r5, r0
 800be06:	f7ff fa0b 	bl	800b220 <__mcmp>
 800be0a:	2800      	cmp	r0, #0
 800be0c:	dd68      	ble.n	800bee0 <_strtod_l+0x8b8>
 800be0e:	9904      	ldr	r1, [sp, #16]
 800be10:	4a54      	ldr	r2, [pc, #336]	; (800bf64 <_strtod_l+0x93c>)
 800be12:	464b      	mov	r3, r9
 800be14:	2900      	cmp	r1, #0
 800be16:	f000 8084 	beq.w	800bf22 <_strtod_l+0x8fa>
 800be1a:	ea02 0109 	and.w	r1, r2, r9
 800be1e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800be22:	dc7e      	bgt.n	800bf22 <_strtod_l+0x8fa>
 800be24:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800be28:	f77f aeb3 	ble.w	800bb92 <_strtod_l+0x56a>
 800be2c:	4b4e      	ldr	r3, [pc, #312]	; (800bf68 <_strtod_l+0x940>)
 800be2e:	4640      	mov	r0, r8
 800be30:	4649      	mov	r1, r9
 800be32:	2200      	movs	r2, #0
 800be34:	f7f4 fc00 	bl	8000638 <__aeabi_dmul>
 800be38:	4b4a      	ldr	r3, [pc, #296]	; (800bf64 <_strtod_l+0x93c>)
 800be3a:	400b      	ands	r3, r1
 800be3c:	4680      	mov	r8, r0
 800be3e:	4689      	mov	r9, r1
 800be40:	2b00      	cmp	r3, #0
 800be42:	f47f ae3f 	bne.w	800bac4 <_strtod_l+0x49c>
 800be46:	2322      	movs	r3, #34	; 0x22
 800be48:	6023      	str	r3, [r4, #0]
 800be4a:	e63b      	b.n	800bac4 <_strtod_l+0x49c>
 800be4c:	f04f 32ff 	mov.w	r2, #4294967295
 800be50:	fa02 f303 	lsl.w	r3, r2, r3
 800be54:	ea03 0808 	and.w	r8, r3, r8
 800be58:	e6e8      	b.n	800bc2c <_strtod_l+0x604>
 800be5a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800be5e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800be62:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800be66:	36e2      	adds	r6, #226	; 0xe2
 800be68:	fa01 f306 	lsl.w	r3, r1, r6
 800be6c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800be70:	e748      	b.n	800bd04 <_strtod_l+0x6dc>
 800be72:	2100      	movs	r1, #0
 800be74:	2301      	movs	r3, #1
 800be76:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800be7a:	e743      	b.n	800bd04 <_strtod_l+0x6dc>
 800be7c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800be7e:	4632      	mov	r2, r6
 800be80:	4620      	mov	r0, r4
 800be82:	f7ff f961 	bl	800b148 <__lshift>
 800be86:	9016      	str	r0, [sp, #88]	; 0x58
 800be88:	2800      	cmp	r0, #0
 800be8a:	f47f af6b 	bne.w	800bd64 <_strtod_l+0x73c>
 800be8e:	e60f      	b.n	800bab0 <_strtod_l+0x488>
 800be90:	46ca      	mov	sl, r9
 800be92:	d171      	bne.n	800bf78 <_strtod_l+0x950>
 800be94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800be96:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800be9a:	b352      	cbz	r2, 800bef2 <_strtod_l+0x8ca>
 800be9c:	4a33      	ldr	r2, [pc, #204]	; (800bf6c <_strtod_l+0x944>)
 800be9e:	4293      	cmp	r3, r2
 800bea0:	d12a      	bne.n	800bef8 <_strtod_l+0x8d0>
 800bea2:	9b04      	ldr	r3, [sp, #16]
 800bea4:	4641      	mov	r1, r8
 800bea6:	b1fb      	cbz	r3, 800bee8 <_strtod_l+0x8c0>
 800bea8:	4b2e      	ldr	r3, [pc, #184]	; (800bf64 <_strtod_l+0x93c>)
 800beaa:	ea09 0303 	and.w	r3, r9, r3
 800beae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800beb2:	f04f 32ff 	mov.w	r2, #4294967295
 800beb6:	d81a      	bhi.n	800beee <_strtod_l+0x8c6>
 800beb8:	0d1b      	lsrs	r3, r3, #20
 800beba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bebe:	fa02 f303 	lsl.w	r3, r2, r3
 800bec2:	4299      	cmp	r1, r3
 800bec4:	d118      	bne.n	800bef8 <_strtod_l+0x8d0>
 800bec6:	4b2a      	ldr	r3, [pc, #168]	; (800bf70 <_strtod_l+0x948>)
 800bec8:	459a      	cmp	sl, r3
 800beca:	d102      	bne.n	800bed2 <_strtod_l+0x8aa>
 800becc:	3101      	adds	r1, #1
 800bece:	f43f adef 	beq.w	800bab0 <_strtod_l+0x488>
 800bed2:	4b24      	ldr	r3, [pc, #144]	; (800bf64 <_strtod_l+0x93c>)
 800bed4:	ea0a 0303 	and.w	r3, sl, r3
 800bed8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800bedc:	f04f 0800 	mov.w	r8, #0
 800bee0:	9b04      	ldr	r3, [sp, #16]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d1a2      	bne.n	800be2c <_strtod_l+0x804>
 800bee6:	e5ed      	b.n	800bac4 <_strtod_l+0x49c>
 800bee8:	f04f 33ff 	mov.w	r3, #4294967295
 800beec:	e7e9      	b.n	800bec2 <_strtod_l+0x89a>
 800beee:	4613      	mov	r3, r2
 800bef0:	e7e7      	b.n	800bec2 <_strtod_l+0x89a>
 800bef2:	ea53 0308 	orrs.w	r3, r3, r8
 800bef6:	d08a      	beq.n	800be0e <_strtod_l+0x7e6>
 800bef8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800befa:	b1e3      	cbz	r3, 800bf36 <_strtod_l+0x90e>
 800befc:	ea13 0f0a 	tst.w	r3, sl
 800bf00:	d0ee      	beq.n	800bee0 <_strtod_l+0x8b8>
 800bf02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf04:	9a04      	ldr	r2, [sp, #16]
 800bf06:	4640      	mov	r0, r8
 800bf08:	4649      	mov	r1, r9
 800bf0a:	b1c3      	cbz	r3, 800bf3e <_strtod_l+0x916>
 800bf0c:	f7ff fb6f 	bl	800b5ee <sulp>
 800bf10:	4602      	mov	r2, r0
 800bf12:	460b      	mov	r3, r1
 800bf14:	ec51 0b18 	vmov	r0, r1, d8
 800bf18:	f7f4 f9d8 	bl	80002cc <__adddf3>
 800bf1c:	4680      	mov	r8, r0
 800bf1e:	4689      	mov	r9, r1
 800bf20:	e7de      	b.n	800bee0 <_strtod_l+0x8b8>
 800bf22:	4013      	ands	r3, r2
 800bf24:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bf28:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800bf2c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800bf30:	f04f 38ff 	mov.w	r8, #4294967295
 800bf34:	e7d4      	b.n	800bee0 <_strtod_l+0x8b8>
 800bf36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf38:	ea13 0f08 	tst.w	r3, r8
 800bf3c:	e7e0      	b.n	800bf00 <_strtod_l+0x8d8>
 800bf3e:	f7ff fb56 	bl	800b5ee <sulp>
 800bf42:	4602      	mov	r2, r0
 800bf44:	460b      	mov	r3, r1
 800bf46:	ec51 0b18 	vmov	r0, r1, d8
 800bf4a:	f7f4 f9bd 	bl	80002c8 <__aeabi_dsub>
 800bf4e:	2200      	movs	r2, #0
 800bf50:	2300      	movs	r3, #0
 800bf52:	4680      	mov	r8, r0
 800bf54:	4689      	mov	r9, r1
 800bf56:	f7f4 fdd7 	bl	8000b08 <__aeabi_dcmpeq>
 800bf5a:	2800      	cmp	r0, #0
 800bf5c:	d0c0      	beq.n	800bee0 <_strtod_l+0x8b8>
 800bf5e:	e618      	b.n	800bb92 <_strtod_l+0x56a>
 800bf60:	fffffc02 	.word	0xfffffc02
 800bf64:	7ff00000 	.word	0x7ff00000
 800bf68:	39500000 	.word	0x39500000
 800bf6c:	000fffff 	.word	0x000fffff
 800bf70:	7fefffff 	.word	0x7fefffff
 800bf74:	0800dfc8 	.word	0x0800dfc8
 800bf78:	4659      	mov	r1, fp
 800bf7a:	4628      	mov	r0, r5
 800bf7c:	f7ff fac0 	bl	800b500 <__ratio>
 800bf80:	ec57 6b10 	vmov	r6, r7, d0
 800bf84:	ee10 0a10 	vmov	r0, s0
 800bf88:	2200      	movs	r2, #0
 800bf8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bf8e:	4639      	mov	r1, r7
 800bf90:	f7f4 fdce 	bl	8000b30 <__aeabi_dcmple>
 800bf94:	2800      	cmp	r0, #0
 800bf96:	d071      	beq.n	800c07c <_strtod_l+0xa54>
 800bf98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d17c      	bne.n	800c098 <_strtod_l+0xa70>
 800bf9e:	f1b8 0f00 	cmp.w	r8, #0
 800bfa2:	d15a      	bne.n	800c05a <_strtod_l+0xa32>
 800bfa4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d15d      	bne.n	800c068 <_strtod_l+0xa40>
 800bfac:	4b90      	ldr	r3, [pc, #576]	; (800c1f0 <_strtod_l+0xbc8>)
 800bfae:	2200      	movs	r2, #0
 800bfb0:	4630      	mov	r0, r6
 800bfb2:	4639      	mov	r1, r7
 800bfb4:	f7f4 fdb2 	bl	8000b1c <__aeabi_dcmplt>
 800bfb8:	2800      	cmp	r0, #0
 800bfba:	d15c      	bne.n	800c076 <_strtod_l+0xa4e>
 800bfbc:	4630      	mov	r0, r6
 800bfbe:	4639      	mov	r1, r7
 800bfc0:	4b8c      	ldr	r3, [pc, #560]	; (800c1f4 <_strtod_l+0xbcc>)
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	f7f4 fb38 	bl	8000638 <__aeabi_dmul>
 800bfc8:	4606      	mov	r6, r0
 800bfca:	460f      	mov	r7, r1
 800bfcc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800bfd0:	9606      	str	r6, [sp, #24]
 800bfd2:	9307      	str	r3, [sp, #28]
 800bfd4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bfd8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800bfdc:	4b86      	ldr	r3, [pc, #536]	; (800c1f8 <_strtod_l+0xbd0>)
 800bfde:	ea0a 0303 	and.w	r3, sl, r3
 800bfe2:	930d      	str	r3, [sp, #52]	; 0x34
 800bfe4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bfe6:	4b85      	ldr	r3, [pc, #532]	; (800c1fc <_strtod_l+0xbd4>)
 800bfe8:	429a      	cmp	r2, r3
 800bfea:	f040 8090 	bne.w	800c10e <_strtod_l+0xae6>
 800bfee:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800bff2:	ec49 8b10 	vmov	d0, r8, r9
 800bff6:	f7ff f9b9 	bl	800b36c <__ulp>
 800bffa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bffe:	ec51 0b10 	vmov	r0, r1, d0
 800c002:	f7f4 fb19 	bl	8000638 <__aeabi_dmul>
 800c006:	4642      	mov	r2, r8
 800c008:	464b      	mov	r3, r9
 800c00a:	f7f4 f95f 	bl	80002cc <__adddf3>
 800c00e:	460b      	mov	r3, r1
 800c010:	4979      	ldr	r1, [pc, #484]	; (800c1f8 <_strtod_l+0xbd0>)
 800c012:	4a7b      	ldr	r2, [pc, #492]	; (800c200 <_strtod_l+0xbd8>)
 800c014:	4019      	ands	r1, r3
 800c016:	4291      	cmp	r1, r2
 800c018:	4680      	mov	r8, r0
 800c01a:	d944      	bls.n	800c0a6 <_strtod_l+0xa7e>
 800c01c:	ee18 2a90 	vmov	r2, s17
 800c020:	4b78      	ldr	r3, [pc, #480]	; (800c204 <_strtod_l+0xbdc>)
 800c022:	429a      	cmp	r2, r3
 800c024:	d104      	bne.n	800c030 <_strtod_l+0xa08>
 800c026:	ee18 3a10 	vmov	r3, s16
 800c02a:	3301      	adds	r3, #1
 800c02c:	f43f ad40 	beq.w	800bab0 <_strtod_l+0x488>
 800c030:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800c204 <_strtod_l+0xbdc>
 800c034:	f04f 38ff 	mov.w	r8, #4294967295
 800c038:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c03a:	4620      	mov	r0, r4
 800c03c:	f7fe fe6a 	bl	800ad14 <_Bfree>
 800c040:	9905      	ldr	r1, [sp, #20]
 800c042:	4620      	mov	r0, r4
 800c044:	f7fe fe66 	bl	800ad14 <_Bfree>
 800c048:	4659      	mov	r1, fp
 800c04a:	4620      	mov	r0, r4
 800c04c:	f7fe fe62 	bl	800ad14 <_Bfree>
 800c050:	4629      	mov	r1, r5
 800c052:	4620      	mov	r0, r4
 800c054:	f7fe fe5e 	bl	800ad14 <_Bfree>
 800c058:	e609      	b.n	800bc6e <_strtod_l+0x646>
 800c05a:	f1b8 0f01 	cmp.w	r8, #1
 800c05e:	d103      	bne.n	800c068 <_strtod_l+0xa40>
 800c060:	f1b9 0f00 	cmp.w	r9, #0
 800c064:	f43f ad95 	beq.w	800bb92 <_strtod_l+0x56a>
 800c068:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800c1c0 <_strtod_l+0xb98>
 800c06c:	4f60      	ldr	r7, [pc, #384]	; (800c1f0 <_strtod_l+0xbc8>)
 800c06e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c072:	2600      	movs	r6, #0
 800c074:	e7ae      	b.n	800bfd4 <_strtod_l+0x9ac>
 800c076:	4f5f      	ldr	r7, [pc, #380]	; (800c1f4 <_strtod_l+0xbcc>)
 800c078:	2600      	movs	r6, #0
 800c07a:	e7a7      	b.n	800bfcc <_strtod_l+0x9a4>
 800c07c:	4b5d      	ldr	r3, [pc, #372]	; (800c1f4 <_strtod_l+0xbcc>)
 800c07e:	4630      	mov	r0, r6
 800c080:	4639      	mov	r1, r7
 800c082:	2200      	movs	r2, #0
 800c084:	f7f4 fad8 	bl	8000638 <__aeabi_dmul>
 800c088:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c08a:	4606      	mov	r6, r0
 800c08c:	460f      	mov	r7, r1
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d09c      	beq.n	800bfcc <_strtod_l+0x9a4>
 800c092:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c096:	e79d      	b.n	800bfd4 <_strtod_l+0x9ac>
 800c098:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800c1c8 <_strtod_l+0xba0>
 800c09c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c0a0:	ec57 6b17 	vmov	r6, r7, d7
 800c0a4:	e796      	b.n	800bfd4 <_strtod_l+0x9ac>
 800c0a6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c0aa:	9b04      	ldr	r3, [sp, #16]
 800c0ac:	46ca      	mov	sl, r9
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d1c2      	bne.n	800c038 <_strtod_l+0xa10>
 800c0b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c0b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c0b8:	0d1b      	lsrs	r3, r3, #20
 800c0ba:	051b      	lsls	r3, r3, #20
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d1bb      	bne.n	800c038 <_strtod_l+0xa10>
 800c0c0:	4630      	mov	r0, r6
 800c0c2:	4639      	mov	r1, r7
 800c0c4:	f7f4 fe68 	bl	8000d98 <__aeabi_d2lz>
 800c0c8:	f7f4 fa88 	bl	80005dc <__aeabi_l2d>
 800c0cc:	4602      	mov	r2, r0
 800c0ce:	460b      	mov	r3, r1
 800c0d0:	4630      	mov	r0, r6
 800c0d2:	4639      	mov	r1, r7
 800c0d4:	f7f4 f8f8 	bl	80002c8 <__aeabi_dsub>
 800c0d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c0da:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c0de:	ea43 0308 	orr.w	r3, r3, r8
 800c0e2:	4313      	orrs	r3, r2
 800c0e4:	4606      	mov	r6, r0
 800c0e6:	460f      	mov	r7, r1
 800c0e8:	d054      	beq.n	800c194 <_strtod_l+0xb6c>
 800c0ea:	a339      	add	r3, pc, #228	; (adr r3, 800c1d0 <_strtod_l+0xba8>)
 800c0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f0:	f7f4 fd14 	bl	8000b1c <__aeabi_dcmplt>
 800c0f4:	2800      	cmp	r0, #0
 800c0f6:	f47f ace5 	bne.w	800bac4 <_strtod_l+0x49c>
 800c0fa:	a337      	add	r3, pc, #220	; (adr r3, 800c1d8 <_strtod_l+0xbb0>)
 800c0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c100:	4630      	mov	r0, r6
 800c102:	4639      	mov	r1, r7
 800c104:	f7f4 fd28 	bl	8000b58 <__aeabi_dcmpgt>
 800c108:	2800      	cmp	r0, #0
 800c10a:	d095      	beq.n	800c038 <_strtod_l+0xa10>
 800c10c:	e4da      	b.n	800bac4 <_strtod_l+0x49c>
 800c10e:	9b04      	ldr	r3, [sp, #16]
 800c110:	b333      	cbz	r3, 800c160 <_strtod_l+0xb38>
 800c112:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c114:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c118:	d822      	bhi.n	800c160 <_strtod_l+0xb38>
 800c11a:	a331      	add	r3, pc, #196	; (adr r3, 800c1e0 <_strtod_l+0xbb8>)
 800c11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c120:	4630      	mov	r0, r6
 800c122:	4639      	mov	r1, r7
 800c124:	f7f4 fd04 	bl	8000b30 <__aeabi_dcmple>
 800c128:	b1a0      	cbz	r0, 800c154 <_strtod_l+0xb2c>
 800c12a:	4639      	mov	r1, r7
 800c12c:	4630      	mov	r0, r6
 800c12e:	f7f4 fd5b 	bl	8000be8 <__aeabi_d2uiz>
 800c132:	2801      	cmp	r0, #1
 800c134:	bf38      	it	cc
 800c136:	2001      	movcc	r0, #1
 800c138:	f7f4 fa04 	bl	8000544 <__aeabi_ui2d>
 800c13c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c13e:	4606      	mov	r6, r0
 800c140:	460f      	mov	r7, r1
 800c142:	bb23      	cbnz	r3, 800c18e <_strtod_l+0xb66>
 800c144:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c148:	9010      	str	r0, [sp, #64]	; 0x40
 800c14a:	9311      	str	r3, [sp, #68]	; 0x44
 800c14c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c150:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c154:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c156:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c158:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c15c:	1a9b      	subs	r3, r3, r2
 800c15e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c160:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c164:	eeb0 0a48 	vmov.f32	s0, s16
 800c168:	eef0 0a68 	vmov.f32	s1, s17
 800c16c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c170:	f7ff f8fc 	bl	800b36c <__ulp>
 800c174:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c178:	ec53 2b10 	vmov	r2, r3, d0
 800c17c:	f7f4 fa5c 	bl	8000638 <__aeabi_dmul>
 800c180:	ec53 2b18 	vmov	r2, r3, d8
 800c184:	f7f4 f8a2 	bl	80002cc <__adddf3>
 800c188:	4680      	mov	r8, r0
 800c18a:	4689      	mov	r9, r1
 800c18c:	e78d      	b.n	800c0aa <_strtod_l+0xa82>
 800c18e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c192:	e7db      	b.n	800c14c <_strtod_l+0xb24>
 800c194:	a314      	add	r3, pc, #80	; (adr r3, 800c1e8 <_strtod_l+0xbc0>)
 800c196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c19a:	f7f4 fcbf 	bl	8000b1c <__aeabi_dcmplt>
 800c19e:	e7b3      	b.n	800c108 <_strtod_l+0xae0>
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	930a      	str	r3, [sp, #40]	; 0x28
 800c1a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c1a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c1a8:	6013      	str	r3, [r2, #0]
 800c1aa:	f7ff ba7c 	b.w	800b6a6 <_strtod_l+0x7e>
 800c1ae:	2a65      	cmp	r2, #101	; 0x65
 800c1b0:	f43f ab75 	beq.w	800b89e <_strtod_l+0x276>
 800c1b4:	2a45      	cmp	r2, #69	; 0x45
 800c1b6:	f43f ab72 	beq.w	800b89e <_strtod_l+0x276>
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	f7ff bbaa 	b.w	800b914 <_strtod_l+0x2ec>
 800c1c0:	00000000 	.word	0x00000000
 800c1c4:	bff00000 	.word	0xbff00000
 800c1c8:	00000000 	.word	0x00000000
 800c1cc:	3ff00000 	.word	0x3ff00000
 800c1d0:	94a03595 	.word	0x94a03595
 800c1d4:	3fdfffff 	.word	0x3fdfffff
 800c1d8:	35afe535 	.word	0x35afe535
 800c1dc:	3fe00000 	.word	0x3fe00000
 800c1e0:	ffc00000 	.word	0xffc00000
 800c1e4:	41dfffff 	.word	0x41dfffff
 800c1e8:	94a03595 	.word	0x94a03595
 800c1ec:	3fcfffff 	.word	0x3fcfffff
 800c1f0:	3ff00000 	.word	0x3ff00000
 800c1f4:	3fe00000 	.word	0x3fe00000
 800c1f8:	7ff00000 	.word	0x7ff00000
 800c1fc:	7fe00000 	.word	0x7fe00000
 800c200:	7c9fffff 	.word	0x7c9fffff
 800c204:	7fefffff 	.word	0x7fefffff

0800c208 <_strtod_r>:
 800c208:	4b01      	ldr	r3, [pc, #4]	; (800c210 <_strtod_r+0x8>)
 800c20a:	f7ff ba0d 	b.w	800b628 <_strtod_l>
 800c20e:	bf00      	nop
 800c210:	20000068 	.word	0x20000068

0800c214 <_strtol_l.constprop.0>:
 800c214:	2b01      	cmp	r3, #1
 800c216:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c21a:	d001      	beq.n	800c220 <_strtol_l.constprop.0+0xc>
 800c21c:	2b24      	cmp	r3, #36	; 0x24
 800c21e:	d906      	bls.n	800c22e <_strtol_l.constprop.0+0x1a>
 800c220:	f7fd fd88 	bl	8009d34 <__errno>
 800c224:	2316      	movs	r3, #22
 800c226:	6003      	str	r3, [r0, #0]
 800c228:	2000      	movs	r0, #0
 800c22a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c22e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c314 <_strtol_l.constprop.0+0x100>
 800c232:	460d      	mov	r5, r1
 800c234:	462e      	mov	r6, r5
 800c236:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c23a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800c23e:	f017 0708 	ands.w	r7, r7, #8
 800c242:	d1f7      	bne.n	800c234 <_strtol_l.constprop.0+0x20>
 800c244:	2c2d      	cmp	r4, #45	; 0x2d
 800c246:	d132      	bne.n	800c2ae <_strtol_l.constprop.0+0x9a>
 800c248:	782c      	ldrb	r4, [r5, #0]
 800c24a:	2701      	movs	r7, #1
 800c24c:	1cb5      	adds	r5, r6, #2
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d05b      	beq.n	800c30a <_strtol_l.constprop.0+0xf6>
 800c252:	2b10      	cmp	r3, #16
 800c254:	d109      	bne.n	800c26a <_strtol_l.constprop.0+0x56>
 800c256:	2c30      	cmp	r4, #48	; 0x30
 800c258:	d107      	bne.n	800c26a <_strtol_l.constprop.0+0x56>
 800c25a:	782c      	ldrb	r4, [r5, #0]
 800c25c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c260:	2c58      	cmp	r4, #88	; 0x58
 800c262:	d14d      	bne.n	800c300 <_strtol_l.constprop.0+0xec>
 800c264:	786c      	ldrb	r4, [r5, #1]
 800c266:	2310      	movs	r3, #16
 800c268:	3502      	adds	r5, #2
 800c26a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c26e:	f108 38ff 	add.w	r8, r8, #4294967295
 800c272:	f04f 0e00 	mov.w	lr, #0
 800c276:	fbb8 f9f3 	udiv	r9, r8, r3
 800c27a:	4676      	mov	r6, lr
 800c27c:	fb03 8a19 	mls	sl, r3, r9, r8
 800c280:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c284:	f1bc 0f09 	cmp.w	ip, #9
 800c288:	d816      	bhi.n	800c2b8 <_strtol_l.constprop.0+0xa4>
 800c28a:	4664      	mov	r4, ip
 800c28c:	42a3      	cmp	r3, r4
 800c28e:	dd24      	ble.n	800c2da <_strtol_l.constprop.0+0xc6>
 800c290:	f1be 3fff 	cmp.w	lr, #4294967295
 800c294:	d008      	beq.n	800c2a8 <_strtol_l.constprop.0+0x94>
 800c296:	45b1      	cmp	r9, r6
 800c298:	d31c      	bcc.n	800c2d4 <_strtol_l.constprop.0+0xc0>
 800c29a:	d101      	bne.n	800c2a0 <_strtol_l.constprop.0+0x8c>
 800c29c:	45a2      	cmp	sl, r4
 800c29e:	db19      	blt.n	800c2d4 <_strtol_l.constprop.0+0xc0>
 800c2a0:	fb06 4603 	mla	r6, r6, r3, r4
 800c2a4:	f04f 0e01 	mov.w	lr, #1
 800c2a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c2ac:	e7e8      	b.n	800c280 <_strtol_l.constprop.0+0x6c>
 800c2ae:	2c2b      	cmp	r4, #43	; 0x2b
 800c2b0:	bf04      	itt	eq
 800c2b2:	782c      	ldrbeq	r4, [r5, #0]
 800c2b4:	1cb5      	addeq	r5, r6, #2
 800c2b6:	e7ca      	b.n	800c24e <_strtol_l.constprop.0+0x3a>
 800c2b8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c2bc:	f1bc 0f19 	cmp.w	ip, #25
 800c2c0:	d801      	bhi.n	800c2c6 <_strtol_l.constprop.0+0xb2>
 800c2c2:	3c37      	subs	r4, #55	; 0x37
 800c2c4:	e7e2      	b.n	800c28c <_strtol_l.constprop.0+0x78>
 800c2c6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c2ca:	f1bc 0f19 	cmp.w	ip, #25
 800c2ce:	d804      	bhi.n	800c2da <_strtol_l.constprop.0+0xc6>
 800c2d0:	3c57      	subs	r4, #87	; 0x57
 800c2d2:	e7db      	b.n	800c28c <_strtol_l.constprop.0+0x78>
 800c2d4:	f04f 3eff 	mov.w	lr, #4294967295
 800c2d8:	e7e6      	b.n	800c2a8 <_strtol_l.constprop.0+0x94>
 800c2da:	f1be 3fff 	cmp.w	lr, #4294967295
 800c2de:	d105      	bne.n	800c2ec <_strtol_l.constprop.0+0xd8>
 800c2e0:	2322      	movs	r3, #34	; 0x22
 800c2e2:	6003      	str	r3, [r0, #0]
 800c2e4:	4646      	mov	r6, r8
 800c2e6:	b942      	cbnz	r2, 800c2fa <_strtol_l.constprop.0+0xe6>
 800c2e8:	4630      	mov	r0, r6
 800c2ea:	e79e      	b.n	800c22a <_strtol_l.constprop.0+0x16>
 800c2ec:	b107      	cbz	r7, 800c2f0 <_strtol_l.constprop.0+0xdc>
 800c2ee:	4276      	negs	r6, r6
 800c2f0:	2a00      	cmp	r2, #0
 800c2f2:	d0f9      	beq.n	800c2e8 <_strtol_l.constprop.0+0xd4>
 800c2f4:	f1be 0f00 	cmp.w	lr, #0
 800c2f8:	d000      	beq.n	800c2fc <_strtol_l.constprop.0+0xe8>
 800c2fa:	1e69      	subs	r1, r5, #1
 800c2fc:	6011      	str	r1, [r2, #0]
 800c2fe:	e7f3      	b.n	800c2e8 <_strtol_l.constprop.0+0xd4>
 800c300:	2430      	movs	r4, #48	; 0x30
 800c302:	2b00      	cmp	r3, #0
 800c304:	d1b1      	bne.n	800c26a <_strtol_l.constprop.0+0x56>
 800c306:	2308      	movs	r3, #8
 800c308:	e7af      	b.n	800c26a <_strtol_l.constprop.0+0x56>
 800c30a:	2c30      	cmp	r4, #48	; 0x30
 800c30c:	d0a5      	beq.n	800c25a <_strtol_l.constprop.0+0x46>
 800c30e:	230a      	movs	r3, #10
 800c310:	e7ab      	b.n	800c26a <_strtol_l.constprop.0+0x56>
 800c312:	bf00      	nop
 800c314:	0800dff1 	.word	0x0800dff1

0800c318 <_strtol_r>:
 800c318:	f7ff bf7c 	b.w	800c214 <_strtol_l.constprop.0>

0800c31c <__ssputs_r>:
 800c31c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c320:	688e      	ldr	r6, [r1, #8]
 800c322:	461f      	mov	r7, r3
 800c324:	42be      	cmp	r6, r7
 800c326:	680b      	ldr	r3, [r1, #0]
 800c328:	4682      	mov	sl, r0
 800c32a:	460c      	mov	r4, r1
 800c32c:	4690      	mov	r8, r2
 800c32e:	d82c      	bhi.n	800c38a <__ssputs_r+0x6e>
 800c330:	898a      	ldrh	r2, [r1, #12]
 800c332:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c336:	d026      	beq.n	800c386 <__ssputs_r+0x6a>
 800c338:	6965      	ldr	r5, [r4, #20]
 800c33a:	6909      	ldr	r1, [r1, #16]
 800c33c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c340:	eba3 0901 	sub.w	r9, r3, r1
 800c344:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c348:	1c7b      	adds	r3, r7, #1
 800c34a:	444b      	add	r3, r9
 800c34c:	106d      	asrs	r5, r5, #1
 800c34e:	429d      	cmp	r5, r3
 800c350:	bf38      	it	cc
 800c352:	461d      	movcc	r5, r3
 800c354:	0553      	lsls	r3, r2, #21
 800c356:	d527      	bpl.n	800c3a8 <__ssputs_r+0x8c>
 800c358:	4629      	mov	r1, r5
 800c35a:	f7fe fc0f 	bl	800ab7c <_malloc_r>
 800c35e:	4606      	mov	r6, r0
 800c360:	b360      	cbz	r0, 800c3bc <__ssputs_r+0xa0>
 800c362:	6921      	ldr	r1, [r4, #16]
 800c364:	464a      	mov	r2, r9
 800c366:	f000 fdaf 	bl	800cec8 <memcpy>
 800c36a:	89a3      	ldrh	r3, [r4, #12]
 800c36c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c374:	81a3      	strh	r3, [r4, #12]
 800c376:	6126      	str	r6, [r4, #16]
 800c378:	6165      	str	r5, [r4, #20]
 800c37a:	444e      	add	r6, r9
 800c37c:	eba5 0509 	sub.w	r5, r5, r9
 800c380:	6026      	str	r6, [r4, #0]
 800c382:	60a5      	str	r5, [r4, #8]
 800c384:	463e      	mov	r6, r7
 800c386:	42be      	cmp	r6, r7
 800c388:	d900      	bls.n	800c38c <__ssputs_r+0x70>
 800c38a:	463e      	mov	r6, r7
 800c38c:	6820      	ldr	r0, [r4, #0]
 800c38e:	4632      	mov	r2, r6
 800c390:	4641      	mov	r1, r8
 800c392:	f000 fd5c 	bl	800ce4e <memmove>
 800c396:	68a3      	ldr	r3, [r4, #8]
 800c398:	1b9b      	subs	r3, r3, r6
 800c39a:	60a3      	str	r3, [r4, #8]
 800c39c:	6823      	ldr	r3, [r4, #0]
 800c39e:	4433      	add	r3, r6
 800c3a0:	6023      	str	r3, [r4, #0]
 800c3a2:	2000      	movs	r0, #0
 800c3a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3a8:	462a      	mov	r2, r5
 800c3aa:	f001 f942 	bl	800d632 <_realloc_r>
 800c3ae:	4606      	mov	r6, r0
 800c3b0:	2800      	cmp	r0, #0
 800c3b2:	d1e0      	bne.n	800c376 <__ssputs_r+0x5a>
 800c3b4:	6921      	ldr	r1, [r4, #16]
 800c3b6:	4650      	mov	r0, sl
 800c3b8:	f7fe fb6c 	bl	800aa94 <_free_r>
 800c3bc:	230c      	movs	r3, #12
 800c3be:	f8ca 3000 	str.w	r3, [sl]
 800c3c2:	89a3      	ldrh	r3, [r4, #12]
 800c3c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3c8:	81a3      	strh	r3, [r4, #12]
 800c3ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c3ce:	e7e9      	b.n	800c3a4 <__ssputs_r+0x88>

0800c3d0 <_svfiprintf_r>:
 800c3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3d4:	4698      	mov	r8, r3
 800c3d6:	898b      	ldrh	r3, [r1, #12]
 800c3d8:	061b      	lsls	r3, r3, #24
 800c3da:	b09d      	sub	sp, #116	; 0x74
 800c3dc:	4607      	mov	r7, r0
 800c3de:	460d      	mov	r5, r1
 800c3e0:	4614      	mov	r4, r2
 800c3e2:	d50e      	bpl.n	800c402 <_svfiprintf_r+0x32>
 800c3e4:	690b      	ldr	r3, [r1, #16]
 800c3e6:	b963      	cbnz	r3, 800c402 <_svfiprintf_r+0x32>
 800c3e8:	2140      	movs	r1, #64	; 0x40
 800c3ea:	f7fe fbc7 	bl	800ab7c <_malloc_r>
 800c3ee:	6028      	str	r0, [r5, #0]
 800c3f0:	6128      	str	r0, [r5, #16]
 800c3f2:	b920      	cbnz	r0, 800c3fe <_svfiprintf_r+0x2e>
 800c3f4:	230c      	movs	r3, #12
 800c3f6:	603b      	str	r3, [r7, #0]
 800c3f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c3fc:	e0d0      	b.n	800c5a0 <_svfiprintf_r+0x1d0>
 800c3fe:	2340      	movs	r3, #64	; 0x40
 800c400:	616b      	str	r3, [r5, #20]
 800c402:	2300      	movs	r3, #0
 800c404:	9309      	str	r3, [sp, #36]	; 0x24
 800c406:	2320      	movs	r3, #32
 800c408:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c40c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c410:	2330      	movs	r3, #48	; 0x30
 800c412:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c5b8 <_svfiprintf_r+0x1e8>
 800c416:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c41a:	f04f 0901 	mov.w	r9, #1
 800c41e:	4623      	mov	r3, r4
 800c420:	469a      	mov	sl, r3
 800c422:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c426:	b10a      	cbz	r2, 800c42c <_svfiprintf_r+0x5c>
 800c428:	2a25      	cmp	r2, #37	; 0x25
 800c42a:	d1f9      	bne.n	800c420 <_svfiprintf_r+0x50>
 800c42c:	ebba 0b04 	subs.w	fp, sl, r4
 800c430:	d00b      	beq.n	800c44a <_svfiprintf_r+0x7a>
 800c432:	465b      	mov	r3, fp
 800c434:	4622      	mov	r2, r4
 800c436:	4629      	mov	r1, r5
 800c438:	4638      	mov	r0, r7
 800c43a:	f7ff ff6f 	bl	800c31c <__ssputs_r>
 800c43e:	3001      	adds	r0, #1
 800c440:	f000 80a9 	beq.w	800c596 <_svfiprintf_r+0x1c6>
 800c444:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c446:	445a      	add	r2, fp
 800c448:	9209      	str	r2, [sp, #36]	; 0x24
 800c44a:	f89a 3000 	ldrb.w	r3, [sl]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	f000 80a1 	beq.w	800c596 <_svfiprintf_r+0x1c6>
 800c454:	2300      	movs	r3, #0
 800c456:	f04f 32ff 	mov.w	r2, #4294967295
 800c45a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c45e:	f10a 0a01 	add.w	sl, sl, #1
 800c462:	9304      	str	r3, [sp, #16]
 800c464:	9307      	str	r3, [sp, #28]
 800c466:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c46a:	931a      	str	r3, [sp, #104]	; 0x68
 800c46c:	4654      	mov	r4, sl
 800c46e:	2205      	movs	r2, #5
 800c470:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c474:	4850      	ldr	r0, [pc, #320]	; (800c5b8 <_svfiprintf_r+0x1e8>)
 800c476:	f7f3 fecb 	bl	8000210 <memchr>
 800c47a:	9a04      	ldr	r2, [sp, #16]
 800c47c:	b9d8      	cbnz	r0, 800c4b6 <_svfiprintf_r+0xe6>
 800c47e:	06d0      	lsls	r0, r2, #27
 800c480:	bf44      	itt	mi
 800c482:	2320      	movmi	r3, #32
 800c484:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c488:	0711      	lsls	r1, r2, #28
 800c48a:	bf44      	itt	mi
 800c48c:	232b      	movmi	r3, #43	; 0x2b
 800c48e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c492:	f89a 3000 	ldrb.w	r3, [sl]
 800c496:	2b2a      	cmp	r3, #42	; 0x2a
 800c498:	d015      	beq.n	800c4c6 <_svfiprintf_r+0xf6>
 800c49a:	9a07      	ldr	r2, [sp, #28]
 800c49c:	4654      	mov	r4, sl
 800c49e:	2000      	movs	r0, #0
 800c4a0:	f04f 0c0a 	mov.w	ip, #10
 800c4a4:	4621      	mov	r1, r4
 800c4a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4aa:	3b30      	subs	r3, #48	; 0x30
 800c4ac:	2b09      	cmp	r3, #9
 800c4ae:	d94d      	bls.n	800c54c <_svfiprintf_r+0x17c>
 800c4b0:	b1b0      	cbz	r0, 800c4e0 <_svfiprintf_r+0x110>
 800c4b2:	9207      	str	r2, [sp, #28]
 800c4b4:	e014      	b.n	800c4e0 <_svfiprintf_r+0x110>
 800c4b6:	eba0 0308 	sub.w	r3, r0, r8
 800c4ba:	fa09 f303 	lsl.w	r3, r9, r3
 800c4be:	4313      	orrs	r3, r2
 800c4c0:	9304      	str	r3, [sp, #16]
 800c4c2:	46a2      	mov	sl, r4
 800c4c4:	e7d2      	b.n	800c46c <_svfiprintf_r+0x9c>
 800c4c6:	9b03      	ldr	r3, [sp, #12]
 800c4c8:	1d19      	adds	r1, r3, #4
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	9103      	str	r1, [sp, #12]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	bfbb      	ittet	lt
 800c4d2:	425b      	neglt	r3, r3
 800c4d4:	f042 0202 	orrlt.w	r2, r2, #2
 800c4d8:	9307      	strge	r3, [sp, #28]
 800c4da:	9307      	strlt	r3, [sp, #28]
 800c4dc:	bfb8      	it	lt
 800c4de:	9204      	strlt	r2, [sp, #16]
 800c4e0:	7823      	ldrb	r3, [r4, #0]
 800c4e2:	2b2e      	cmp	r3, #46	; 0x2e
 800c4e4:	d10c      	bne.n	800c500 <_svfiprintf_r+0x130>
 800c4e6:	7863      	ldrb	r3, [r4, #1]
 800c4e8:	2b2a      	cmp	r3, #42	; 0x2a
 800c4ea:	d134      	bne.n	800c556 <_svfiprintf_r+0x186>
 800c4ec:	9b03      	ldr	r3, [sp, #12]
 800c4ee:	1d1a      	adds	r2, r3, #4
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	9203      	str	r2, [sp, #12]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	bfb8      	it	lt
 800c4f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c4fc:	3402      	adds	r4, #2
 800c4fe:	9305      	str	r3, [sp, #20]
 800c500:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c5c8 <_svfiprintf_r+0x1f8>
 800c504:	7821      	ldrb	r1, [r4, #0]
 800c506:	2203      	movs	r2, #3
 800c508:	4650      	mov	r0, sl
 800c50a:	f7f3 fe81 	bl	8000210 <memchr>
 800c50e:	b138      	cbz	r0, 800c520 <_svfiprintf_r+0x150>
 800c510:	9b04      	ldr	r3, [sp, #16]
 800c512:	eba0 000a 	sub.w	r0, r0, sl
 800c516:	2240      	movs	r2, #64	; 0x40
 800c518:	4082      	lsls	r2, r0
 800c51a:	4313      	orrs	r3, r2
 800c51c:	3401      	adds	r4, #1
 800c51e:	9304      	str	r3, [sp, #16]
 800c520:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c524:	4825      	ldr	r0, [pc, #148]	; (800c5bc <_svfiprintf_r+0x1ec>)
 800c526:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c52a:	2206      	movs	r2, #6
 800c52c:	f7f3 fe70 	bl	8000210 <memchr>
 800c530:	2800      	cmp	r0, #0
 800c532:	d038      	beq.n	800c5a6 <_svfiprintf_r+0x1d6>
 800c534:	4b22      	ldr	r3, [pc, #136]	; (800c5c0 <_svfiprintf_r+0x1f0>)
 800c536:	bb1b      	cbnz	r3, 800c580 <_svfiprintf_r+0x1b0>
 800c538:	9b03      	ldr	r3, [sp, #12]
 800c53a:	3307      	adds	r3, #7
 800c53c:	f023 0307 	bic.w	r3, r3, #7
 800c540:	3308      	adds	r3, #8
 800c542:	9303      	str	r3, [sp, #12]
 800c544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c546:	4433      	add	r3, r6
 800c548:	9309      	str	r3, [sp, #36]	; 0x24
 800c54a:	e768      	b.n	800c41e <_svfiprintf_r+0x4e>
 800c54c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c550:	460c      	mov	r4, r1
 800c552:	2001      	movs	r0, #1
 800c554:	e7a6      	b.n	800c4a4 <_svfiprintf_r+0xd4>
 800c556:	2300      	movs	r3, #0
 800c558:	3401      	adds	r4, #1
 800c55a:	9305      	str	r3, [sp, #20]
 800c55c:	4619      	mov	r1, r3
 800c55e:	f04f 0c0a 	mov.w	ip, #10
 800c562:	4620      	mov	r0, r4
 800c564:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c568:	3a30      	subs	r2, #48	; 0x30
 800c56a:	2a09      	cmp	r2, #9
 800c56c:	d903      	bls.n	800c576 <_svfiprintf_r+0x1a6>
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d0c6      	beq.n	800c500 <_svfiprintf_r+0x130>
 800c572:	9105      	str	r1, [sp, #20]
 800c574:	e7c4      	b.n	800c500 <_svfiprintf_r+0x130>
 800c576:	fb0c 2101 	mla	r1, ip, r1, r2
 800c57a:	4604      	mov	r4, r0
 800c57c:	2301      	movs	r3, #1
 800c57e:	e7f0      	b.n	800c562 <_svfiprintf_r+0x192>
 800c580:	ab03      	add	r3, sp, #12
 800c582:	9300      	str	r3, [sp, #0]
 800c584:	462a      	mov	r2, r5
 800c586:	4b0f      	ldr	r3, [pc, #60]	; (800c5c4 <_svfiprintf_r+0x1f4>)
 800c588:	a904      	add	r1, sp, #16
 800c58a:	4638      	mov	r0, r7
 800c58c:	f7fc fc56 	bl	8008e3c <_printf_float>
 800c590:	1c42      	adds	r2, r0, #1
 800c592:	4606      	mov	r6, r0
 800c594:	d1d6      	bne.n	800c544 <_svfiprintf_r+0x174>
 800c596:	89ab      	ldrh	r3, [r5, #12]
 800c598:	065b      	lsls	r3, r3, #25
 800c59a:	f53f af2d 	bmi.w	800c3f8 <_svfiprintf_r+0x28>
 800c59e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5a0:	b01d      	add	sp, #116	; 0x74
 800c5a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5a6:	ab03      	add	r3, sp, #12
 800c5a8:	9300      	str	r3, [sp, #0]
 800c5aa:	462a      	mov	r2, r5
 800c5ac:	4b05      	ldr	r3, [pc, #20]	; (800c5c4 <_svfiprintf_r+0x1f4>)
 800c5ae:	a904      	add	r1, sp, #16
 800c5b0:	4638      	mov	r0, r7
 800c5b2:	f7fc fee7 	bl	8009384 <_printf_i>
 800c5b6:	e7eb      	b.n	800c590 <_svfiprintf_r+0x1c0>
 800c5b8:	0800e0f1 	.word	0x0800e0f1
 800c5bc:	0800e0fb 	.word	0x0800e0fb
 800c5c0:	08008e3d 	.word	0x08008e3d
 800c5c4:	0800c31d 	.word	0x0800c31d
 800c5c8:	0800e0f7 	.word	0x0800e0f7

0800c5cc <_sungetc_r>:
 800c5cc:	b538      	push	{r3, r4, r5, lr}
 800c5ce:	1c4b      	adds	r3, r1, #1
 800c5d0:	4614      	mov	r4, r2
 800c5d2:	d103      	bne.n	800c5dc <_sungetc_r+0x10>
 800c5d4:	f04f 35ff 	mov.w	r5, #4294967295
 800c5d8:	4628      	mov	r0, r5
 800c5da:	bd38      	pop	{r3, r4, r5, pc}
 800c5dc:	8993      	ldrh	r3, [r2, #12]
 800c5de:	f023 0320 	bic.w	r3, r3, #32
 800c5e2:	8193      	strh	r3, [r2, #12]
 800c5e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c5e6:	6852      	ldr	r2, [r2, #4]
 800c5e8:	b2cd      	uxtb	r5, r1
 800c5ea:	b18b      	cbz	r3, 800c610 <_sungetc_r+0x44>
 800c5ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c5ee:	4293      	cmp	r3, r2
 800c5f0:	dd08      	ble.n	800c604 <_sungetc_r+0x38>
 800c5f2:	6823      	ldr	r3, [r4, #0]
 800c5f4:	1e5a      	subs	r2, r3, #1
 800c5f6:	6022      	str	r2, [r4, #0]
 800c5f8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c5fc:	6863      	ldr	r3, [r4, #4]
 800c5fe:	3301      	adds	r3, #1
 800c600:	6063      	str	r3, [r4, #4]
 800c602:	e7e9      	b.n	800c5d8 <_sungetc_r+0xc>
 800c604:	4621      	mov	r1, r4
 800c606:	f000 fbe8 	bl	800cdda <__submore>
 800c60a:	2800      	cmp	r0, #0
 800c60c:	d0f1      	beq.n	800c5f2 <_sungetc_r+0x26>
 800c60e:	e7e1      	b.n	800c5d4 <_sungetc_r+0x8>
 800c610:	6921      	ldr	r1, [r4, #16]
 800c612:	6823      	ldr	r3, [r4, #0]
 800c614:	b151      	cbz	r1, 800c62c <_sungetc_r+0x60>
 800c616:	4299      	cmp	r1, r3
 800c618:	d208      	bcs.n	800c62c <_sungetc_r+0x60>
 800c61a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c61e:	42a9      	cmp	r1, r5
 800c620:	d104      	bne.n	800c62c <_sungetc_r+0x60>
 800c622:	3b01      	subs	r3, #1
 800c624:	3201      	adds	r2, #1
 800c626:	6023      	str	r3, [r4, #0]
 800c628:	6062      	str	r2, [r4, #4]
 800c62a:	e7d5      	b.n	800c5d8 <_sungetc_r+0xc>
 800c62c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c630:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c634:	6363      	str	r3, [r4, #52]	; 0x34
 800c636:	2303      	movs	r3, #3
 800c638:	63a3      	str	r3, [r4, #56]	; 0x38
 800c63a:	4623      	mov	r3, r4
 800c63c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c640:	6023      	str	r3, [r4, #0]
 800c642:	2301      	movs	r3, #1
 800c644:	e7dc      	b.n	800c600 <_sungetc_r+0x34>

0800c646 <__ssrefill_r>:
 800c646:	b510      	push	{r4, lr}
 800c648:	460c      	mov	r4, r1
 800c64a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c64c:	b169      	cbz	r1, 800c66a <__ssrefill_r+0x24>
 800c64e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c652:	4299      	cmp	r1, r3
 800c654:	d001      	beq.n	800c65a <__ssrefill_r+0x14>
 800c656:	f7fe fa1d 	bl	800aa94 <_free_r>
 800c65a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c65c:	6063      	str	r3, [r4, #4]
 800c65e:	2000      	movs	r0, #0
 800c660:	6360      	str	r0, [r4, #52]	; 0x34
 800c662:	b113      	cbz	r3, 800c66a <__ssrefill_r+0x24>
 800c664:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c666:	6023      	str	r3, [r4, #0]
 800c668:	bd10      	pop	{r4, pc}
 800c66a:	6923      	ldr	r3, [r4, #16]
 800c66c:	6023      	str	r3, [r4, #0]
 800c66e:	2300      	movs	r3, #0
 800c670:	6063      	str	r3, [r4, #4]
 800c672:	89a3      	ldrh	r3, [r4, #12]
 800c674:	f043 0320 	orr.w	r3, r3, #32
 800c678:	81a3      	strh	r3, [r4, #12]
 800c67a:	f04f 30ff 	mov.w	r0, #4294967295
 800c67e:	e7f3      	b.n	800c668 <__ssrefill_r+0x22>

0800c680 <__ssvfiscanf_r>:
 800c680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c684:	460c      	mov	r4, r1
 800c686:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c68a:	2100      	movs	r1, #0
 800c68c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c690:	49a6      	ldr	r1, [pc, #664]	; (800c92c <__ssvfiscanf_r+0x2ac>)
 800c692:	91a0      	str	r1, [sp, #640]	; 0x280
 800c694:	f10d 0804 	add.w	r8, sp, #4
 800c698:	49a5      	ldr	r1, [pc, #660]	; (800c930 <__ssvfiscanf_r+0x2b0>)
 800c69a:	4fa6      	ldr	r7, [pc, #664]	; (800c934 <__ssvfiscanf_r+0x2b4>)
 800c69c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c938 <__ssvfiscanf_r+0x2b8>
 800c6a0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c6a4:	4606      	mov	r6, r0
 800c6a6:	91a1      	str	r1, [sp, #644]	; 0x284
 800c6a8:	9300      	str	r3, [sp, #0]
 800c6aa:	7813      	ldrb	r3, [r2, #0]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	f000 815a 	beq.w	800c966 <__ssvfiscanf_r+0x2e6>
 800c6b2:	5cf9      	ldrb	r1, [r7, r3]
 800c6b4:	f011 0108 	ands.w	r1, r1, #8
 800c6b8:	f102 0501 	add.w	r5, r2, #1
 800c6bc:	d019      	beq.n	800c6f2 <__ssvfiscanf_r+0x72>
 800c6be:	6863      	ldr	r3, [r4, #4]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	dd0f      	ble.n	800c6e4 <__ssvfiscanf_r+0x64>
 800c6c4:	6823      	ldr	r3, [r4, #0]
 800c6c6:	781a      	ldrb	r2, [r3, #0]
 800c6c8:	5cba      	ldrb	r2, [r7, r2]
 800c6ca:	0712      	lsls	r2, r2, #28
 800c6cc:	d401      	bmi.n	800c6d2 <__ssvfiscanf_r+0x52>
 800c6ce:	462a      	mov	r2, r5
 800c6d0:	e7eb      	b.n	800c6aa <__ssvfiscanf_r+0x2a>
 800c6d2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c6d4:	3201      	adds	r2, #1
 800c6d6:	9245      	str	r2, [sp, #276]	; 0x114
 800c6d8:	6862      	ldr	r2, [r4, #4]
 800c6da:	3301      	adds	r3, #1
 800c6dc:	3a01      	subs	r2, #1
 800c6de:	6062      	str	r2, [r4, #4]
 800c6e0:	6023      	str	r3, [r4, #0]
 800c6e2:	e7ec      	b.n	800c6be <__ssvfiscanf_r+0x3e>
 800c6e4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c6e6:	4621      	mov	r1, r4
 800c6e8:	4630      	mov	r0, r6
 800c6ea:	4798      	blx	r3
 800c6ec:	2800      	cmp	r0, #0
 800c6ee:	d0e9      	beq.n	800c6c4 <__ssvfiscanf_r+0x44>
 800c6f0:	e7ed      	b.n	800c6ce <__ssvfiscanf_r+0x4e>
 800c6f2:	2b25      	cmp	r3, #37	; 0x25
 800c6f4:	d012      	beq.n	800c71c <__ssvfiscanf_r+0x9c>
 800c6f6:	469a      	mov	sl, r3
 800c6f8:	6863      	ldr	r3, [r4, #4]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	f340 8091 	ble.w	800c822 <__ssvfiscanf_r+0x1a2>
 800c700:	6822      	ldr	r2, [r4, #0]
 800c702:	7813      	ldrb	r3, [r2, #0]
 800c704:	4553      	cmp	r3, sl
 800c706:	f040 812e 	bne.w	800c966 <__ssvfiscanf_r+0x2e6>
 800c70a:	6863      	ldr	r3, [r4, #4]
 800c70c:	3b01      	subs	r3, #1
 800c70e:	6063      	str	r3, [r4, #4]
 800c710:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c712:	3201      	adds	r2, #1
 800c714:	3301      	adds	r3, #1
 800c716:	6022      	str	r2, [r4, #0]
 800c718:	9345      	str	r3, [sp, #276]	; 0x114
 800c71a:	e7d8      	b.n	800c6ce <__ssvfiscanf_r+0x4e>
 800c71c:	9141      	str	r1, [sp, #260]	; 0x104
 800c71e:	9143      	str	r1, [sp, #268]	; 0x10c
 800c720:	7853      	ldrb	r3, [r2, #1]
 800c722:	2b2a      	cmp	r3, #42	; 0x2a
 800c724:	bf02      	ittt	eq
 800c726:	2310      	moveq	r3, #16
 800c728:	1c95      	addeq	r5, r2, #2
 800c72a:	9341      	streq	r3, [sp, #260]	; 0x104
 800c72c:	220a      	movs	r2, #10
 800c72e:	46aa      	mov	sl, r5
 800c730:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c734:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c738:	2b09      	cmp	r3, #9
 800c73a:	d91c      	bls.n	800c776 <__ssvfiscanf_r+0xf6>
 800c73c:	487e      	ldr	r0, [pc, #504]	; (800c938 <__ssvfiscanf_r+0x2b8>)
 800c73e:	2203      	movs	r2, #3
 800c740:	f7f3 fd66 	bl	8000210 <memchr>
 800c744:	b138      	cbz	r0, 800c756 <__ssvfiscanf_r+0xd6>
 800c746:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c748:	eba0 0009 	sub.w	r0, r0, r9
 800c74c:	2301      	movs	r3, #1
 800c74e:	4083      	lsls	r3, r0
 800c750:	4313      	orrs	r3, r2
 800c752:	9341      	str	r3, [sp, #260]	; 0x104
 800c754:	4655      	mov	r5, sl
 800c756:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c75a:	2b78      	cmp	r3, #120	; 0x78
 800c75c:	d806      	bhi.n	800c76c <__ssvfiscanf_r+0xec>
 800c75e:	2b57      	cmp	r3, #87	; 0x57
 800c760:	d810      	bhi.n	800c784 <__ssvfiscanf_r+0x104>
 800c762:	2b25      	cmp	r3, #37	; 0x25
 800c764:	d0c7      	beq.n	800c6f6 <__ssvfiscanf_r+0x76>
 800c766:	d857      	bhi.n	800c818 <__ssvfiscanf_r+0x198>
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d065      	beq.n	800c838 <__ssvfiscanf_r+0x1b8>
 800c76c:	2303      	movs	r3, #3
 800c76e:	9347      	str	r3, [sp, #284]	; 0x11c
 800c770:	230a      	movs	r3, #10
 800c772:	9342      	str	r3, [sp, #264]	; 0x108
 800c774:	e076      	b.n	800c864 <__ssvfiscanf_r+0x1e4>
 800c776:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c778:	fb02 1103 	mla	r1, r2, r3, r1
 800c77c:	3930      	subs	r1, #48	; 0x30
 800c77e:	9143      	str	r1, [sp, #268]	; 0x10c
 800c780:	4655      	mov	r5, sl
 800c782:	e7d4      	b.n	800c72e <__ssvfiscanf_r+0xae>
 800c784:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c788:	2a20      	cmp	r2, #32
 800c78a:	d8ef      	bhi.n	800c76c <__ssvfiscanf_r+0xec>
 800c78c:	a101      	add	r1, pc, #4	; (adr r1, 800c794 <__ssvfiscanf_r+0x114>)
 800c78e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c792:	bf00      	nop
 800c794:	0800c847 	.word	0x0800c847
 800c798:	0800c76d 	.word	0x0800c76d
 800c79c:	0800c76d 	.word	0x0800c76d
 800c7a0:	0800c8a5 	.word	0x0800c8a5
 800c7a4:	0800c76d 	.word	0x0800c76d
 800c7a8:	0800c76d 	.word	0x0800c76d
 800c7ac:	0800c76d 	.word	0x0800c76d
 800c7b0:	0800c76d 	.word	0x0800c76d
 800c7b4:	0800c76d 	.word	0x0800c76d
 800c7b8:	0800c76d 	.word	0x0800c76d
 800c7bc:	0800c76d 	.word	0x0800c76d
 800c7c0:	0800c8bb 	.word	0x0800c8bb
 800c7c4:	0800c8a1 	.word	0x0800c8a1
 800c7c8:	0800c81f 	.word	0x0800c81f
 800c7cc:	0800c81f 	.word	0x0800c81f
 800c7d0:	0800c81f 	.word	0x0800c81f
 800c7d4:	0800c76d 	.word	0x0800c76d
 800c7d8:	0800c85d 	.word	0x0800c85d
 800c7dc:	0800c76d 	.word	0x0800c76d
 800c7e0:	0800c76d 	.word	0x0800c76d
 800c7e4:	0800c76d 	.word	0x0800c76d
 800c7e8:	0800c76d 	.word	0x0800c76d
 800c7ec:	0800c8cb 	.word	0x0800c8cb
 800c7f0:	0800c899 	.word	0x0800c899
 800c7f4:	0800c83f 	.word	0x0800c83f
 800c7f8:	0800c76d 	.word	0x0800c76d
 800c7fc:	0800c76d 	.word	0x0800c76d
 800c800:	0800c8c7 	.word	0x0800c8c7
 800c804:	0800c76d 	.word	0x0800c76d
 800c808:	0800c8a1 	.word	0x0800c8a1
 800c80c:	0800c76d 	.word	0x0800c76d
 800c810:	0800c76d 	.word	0x0800c76d
 800c814:	0800c847 	.word	0x0800c847
 800c818:	3b45      	subs	r3, #69	; 0x45
 800c81a:	2b02      	cmp	r3, #2
 800c81c:	d8a6      	bhi.n	800c76c <__ssvfiscanf_r+0xec>
 800c81e:	2305      	movs	r3, #5
 800c820:	e01f      	b.n	800c862 <__ssvfiscanf_r+0x1e2>
 800c822:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c824:	4621      	mov	r1, r4
 800c826:	4630      	mov	r0, r6
 800c828:	4798      	blx	r3
 800c82a:	2800      	cmp	r0, #0
 800c82c:	f43f af68 	beq.w	800c700 <__ssvfiscanf_r+0x80>
 800c830:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c832:	2800      	cmp	r0, #0
 800c834:	f040 808d 	bne.w	800c952 <__ssvfiscanf_r+0x2d2>
 800c838:	f04f 30ff 	mov.w	r0, #4294967295
 800c83c:	e08f      	b.n	800c95e <__ssvfiscanf_r+0x2de>
 800c83e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c840:	f042 0220 	orr.w	r2, r2, #32
 800c844:	9241      	str	r2, [sp, #260]	; 0x104
 800c846:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c848:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c84c:	9241      	str	r2, [sp, #260]	; 0x104
 800c84e:	2210      	movs	r2, #16
 800c850:	2b6f      	cmp	r3, #111	; 0x6f
 800c852:	9242      	str	r2, [sp, #264]	; 0x108
 800c854:	bf34      	ite	cc
 800c856:	2303      	movcc	r3, #3
 800c858:	2304      	movcs	r3, #4
 800c85a:	e002      	b.n	800c862 <__ssvfiscanf_r+0x1e2>
 800c85c:	2300      	movs	r3, #0
 800c85e:	9342      	str	r3, [sp, #264]	; 0x108
 800c860:	2303      	movs	r3, #3
 800c862:	9347      	str	r3, [sp, #284]	; 0x11c
 800c864:	6863      	ldr	r3, [r4, #4]
 800c866:	2b00      	cmp	r3, #0
 800c868:	dd3d      	ble.n	800c8e6 <__ssvfiscanf_r+0x266>
 800c86a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c86c:	0659      	lsls	r1, r3, #25
 800c86e:	d404      	bmi.n	800c87a <__ssvfiscanf_r+0x1fa>
 800c870:	6823      	ldr	r3, [r4, #0]
 800c872:	781a      	ldrb	r2, [r3, #0]
 800c874:	5cba      	ldrb	r2, [r7, r2]
 800c876:	0712      	lsls	r2, r2, #28
 800c878:	d43c      	bmi.n	800c8f4 <__ssvfiscanf_r+0x274>
 800c87a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c87c:	2b02      	cmp	r3, #2
 800c87e:	dc4b      	bgt.n	800c918 <__ssvfiscanf_r+0x298>
 800c880:	466b      	mov	r3, sp
 800c882:	4622      	mov	r2, r4
 800c884:	a941      	add	r1, sp, #260	; 0x104
 800c886:	4630      	mov	r0, r6
 800c888:	f000 f872 	bl	800c970 <_scanf_chars>
 800c88c:	2801      	cmp	r0, #1
 800c88e:	d06a      	beq.n	800c966 <__ssvfiscanf_r+0x2e6>
 800c890:	2802      	cmp	r0, #2
 800c892:	f47f af1c 	bne.w	800c6ce <__ssvfiscanf_r+0x4e>
 800c896:	e7cb      	b.n	800c830 <__ssvfiscanf_r+0x1b0>
 800c898:	2308      	movs	r3, #8
 800c89a:	9342      	str	r3, [sp, #264]	; 0x108
 800c89c:	2304      	movs	r3, #4
 800c89e:	e7e0      	b.n	800c862 <__ssvfiscanf_r+0x1e2>
 800c8a0:	220a      	movs	r2, #10
 800c8a2:	e7d5      	b.n	800c850 <__ssvfiscanf_r+0x1d0>
 800c8a4:	4629      	mov	r1, r5
 800c8a6:	4640      	mov	r0, r8
 800c8a8:	f000 fa5e 	bl	800cd68 <__sccl>
 800c8ac:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c8ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8b2:	9341      	str	r3, [sp, #260]	; 0x104
 800c8b4:	4605      	mov	r5, r0
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	e7d3      	b.n	800c862 <__ssvfiscanf_r+0x1e2>
 800c8ba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c8bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8c0:	9341      	str	r3, [sp, #260]	; 0x104
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	e7cd      	b.n	800c862 <__ssvfiscanf_r+0x1e2>
 800c8c6:	2302      	movs	r3, #2
 800c8c8:	e7cb      	b.n	800c862 <__ssvfiscanf_r+0x1e2>
 800c8ca:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c8cc:	06c3      	lsls	r3, r0, #27
 800c8ce:	f53f aefe 	bmi.w	800c6ce <__ssvfiscanf_r+0x4e>
 800c8d2:	9b00      	ldr	r3, [sp, #0]
 800c8d4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c8d6:	1d19      	adds	r1, r3, #4
 800c8d8:	9100      	str	r1, [sp, #0]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	07c0      	lsls	r0, r0, #31
 800c8de:	bf4c      	ite	mi
 800c8e0:	801a      	strhmi	r2, [r3, #0]
 800c8e2:	601a      	strpl	r2, [r3, #0]
 800c8e4:	e6f3      	b.n	800c6ce <__ssvfiscanf_r+0x4e>
 800c8e6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c8e8:	4621      	mov	r1, r4
 800c8ea:	4630      	mov	r0, r6
 800c8ec:	4798      	blx	r3
 800c8ee:	2800      	cmp	r0, #0
 800c8f0:	d0bb      	beq.n	800c86a <__ssvfiscanf_r+0x1ea>
 800c8f2:	e79d      	b.n	800c830 <__ssvfiscanf_r+0x1b0>
 800c8f4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c8f6:	3201      	adds	r2, #1
 800c8f8:	9245      	str	r2, [sp, #276]	; 0x114
 800c8fa:	6862      	ldr	r2, [r4, #4]
 800c8fc:	3a01      	subs	r2, #1
 800c8fe:	2a00      	cmp	r2, #0
 800c900:	6062      	str	r2, [r4, #4]
 800c902:	dd02      	ble.n	800c90a <__ssvfiscanf_r+0x28a>
 800c904:	3301      	adds	r3, #1
 800c906:	6023      	str	r3, [r4, #0]
 800c908:	e7b2      	b.n	800c870 <__ssvfiscanf_r+0x1f0>
 800c90a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c90c:	4621      	mov	r1, r4
 800c90e:	4630      	mov	r0, r6
 800c910:	4798      	blx	r3
 800c912:	2800      	cmp	r0, #0
 800c914:	d0ac      	beq.n	800c870 <__ssvfiscanf_r+0x1f0>
 800c916:	e78b      	b.n	800c830 <__ssvfiscanf_r+0x1b0>
 800c918:	2b04      	cmp	r3, #4
 800c91a:	dc0f      	bgt.n	800c93c <__ssvfiscanf_r+0x2bc>
 800c91c:	466b      	mov	r3, sp
 800c91e:	4622      	mov	r2, r4
 800c920:	a941      	add	r1, sp, #260	; 0x104
 800c922:	4630      	mov	r0, r6
 800c924:	f000 f87e 	bl	800ca24 <_scanf_i>
 800c928:	e7b0      	b.n	800c88c <__ssvfiscanf_r+0x20c>
 800c92a:	bf00      	nop
 800c92c:	0800c5cd 	.word	0x0800c5cd
 800c930:	0800c647 	.word	0x0800c647
 800c934:	0800dff1 	.word	0x0800dff1
 800c938:	0800e0f7 	.word	0x0800e0f7
 800c93c:	4b0b      	ldr	r3, [pc, #44]	; (800c96c <__ssvfiscanf_r+0x2ec>)
 800c93e:	2b00      	cmp	r3, #0
 800c940:	f43f aec5 	beq.w	800c6ce <__ssvfiscanf_r+0x4e>
 800c944:	466b      	mov	r3, sp
 800c946:	4622      	mov	r2, r4
 800c948:	a941      	add	r1, sp, #260	; 0x104
 800c94a:	4630      	mov	r0, r6
 800c94c:	f7fc fe3c 	bl	80095c8 <_scanf_float>
 800c950:	e79c      	b.n	800c88c <__ssvfiscanf_r+0x20c>
 800c952:	89a3      	ldrh	r3, [r4, #12]
 800c954:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c958:	bf18      	it	ne
 800c95a:	f04f 30ff 	movne.w	r0, #4294967295
 800c95e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c966:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c968:	e7f9      	b.n	800c95e <__ssvfiscanf_r+0x2de>
 800c96a:	bf00      	nop
 800c96c:	080095c9 	.word	0x080095c9

0800c970 <_scanf_chars>:
 800c970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c974:	4615      	mov	r5, r2
 800c976:	688a      	ldr	r2, [r1, #8]
 800c978:	4680      	mov	r8, r0
 800c97a:	460c      	mov	r4, r1
 800c97c:	b932      	cbnz	r2, 800c98c <_scanf_chars+0x1c>
 800c97e:	698a      	ldr	r2, [r1, #24]
 800c980:	2a00      	cmp	r2, #0
 800c982:	bf0c      	ite	eq
 800c984:	2201      	moveq	r2, #1
 800c986:	f04f 32ff 	movne.w	r2, #4294967295
 800c98a:	608a      	str	r2, [r1, #8]
 800c98c:	6822      	ldr	r2, [r4, #0]
 800c98e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800ca20 <_scanf_chars+0xb0>
 800c992:	06d1      	lsls	r1, r2, #27
 800c994:	bf5f      	itttt	pl
 800c996:	681a      	ldrpl	r2, [r3, #0]
 800c998:	1d11      	addpl	r1, r2, #4
 800c99a:	6019      	strpl	r1, [r3, #0]
 800c99c:	6816      	ldrpl	r6, [r2, #0]
 800c99e:	2700      	movs	r7, #0
 800c9a0:	69a0      	ldr	r0, [r4, #24]
 800c9a2:	b188      	cbz	r0, 800c9c8 <_scanf_chars+0x58>
 800c9a4:	2801      	cmp	r0, #1
 800c9a6:	d107      	bne.n	800c9b8 <_scanf_chars+0x48>
 800c9a8:	682a      	ldr	r2, [r5, #0]
 800c9aa:	7811      	ldrb	r1, [r2, #0]
 800c9ac:	6962      	ldr	r2, [r4, #20]
 800c9ae:	5c52      	ldrb	r2, [r2, r1]
 800c9b0:	b952      	cbnz	r2, 800c9c8 <_scanf_chars+0x58>
 800c9b2:	2f00      	cmp	r7, #0
 800c9b4:	d031      	beq.n	800ca1a <_scanf_chars+0xaa>
 800c9b6:	e022      	b.n	800c9fe <_scanf_chars+0x8e>
 800c9b8:	2802      	cmp	r0, #2
 800c9ba:	d120      	bne.n	800c9fe <_scanf_chars+0x8e>
 800c9bc:	682b      	ldr	r3, [r5, #0]
 800c9be:	781b      	ldrb	r3, [r3, #0]
 800c9c0:	f819 3003 	ldrb.w	r3, [r9, r3]
 800c9c4:	071b      	lsls	r3, r3, #28
 800c9c6:	d41a      	bmi.n	800c9fe <_scanf_chars+0x8e>
 800c9c8:	6823      	ldr	r3, [r4, #0]
 800c9ca:	06da      	lsls	r2, r3, #27
 800c9cc:	bf5e      	ittt	pl
 800c9ce:	682b      	ldrpl	r3, [r5, #0]
 800c9d0:	781b      	ldrbpl	r3, [r3, #0]
 800c9d2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c9d6:	682a      	ldr	r2, [r5, #0]
 800c9d8:	686b      	ldr	r3, [r5, #4]
 800c9da:	3201      	adds	r2, #1
 800c9dc:	602a      	str	r2, [r5, #0]
 800c9de:	68a2      	ldr	r2, [r4, #8]
 800c9e0:	3b01      	subs	r3, #1
 800c9e2:	3a01      	subs	r2, #1
 800c9e4:	606b      	str	r3, [r5, #4]
 800c9e6:	3701      	adds	r7, #1
 800c9e8:	60a2      	str	r2, [r4, #8]
 800c9ea:	b142      	cbz	r2, 800c9fe <_scanf_chars+0x8e>
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	dcd7      	bgt.n	800c9a0 <_scanf_chars+0x30>
 800c9f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c9f4:	4629      	mov	r1, r5
 800c9f6:	4640      	mov	r0, r8
 800c9f8:	4798      	blx	r3
 800c9fa:	2800      	cmp	r0, #0
 800c9fc:	d0d0      	beq.n	800c9a0 <_scanf_chars+0x30>
 800c9fe:	6823      	ldr	r3, [r4, #0]
 800ca00:	f013 0310 	ands.w	r3, r3, #16
 800ca04:	d105      	bne.n	800ca12 <_scanf_chars+0xa2>
 800ca06:	68e2      	ldr	r2, [r4, #12]
 800ca08:	3201      	adds	r2, #1
 800ca0a:	60e2      	str	r2, [r4, #12]
 800ca0c:	69a2      	ldr	r2, [r4, #24]
 800ca0e:	b102      	cbz	r2, 800ca12 <_scanf_chars+0xa2>
 800ca10:	7033      	strb	r3, [r6, #0]
 800ca12:	6923      	ldr	r3, [r4, #16]
 800ca14:	443b      	add	r3, r7
 800ca16:	6123      	str	r3, [r4, #16]
 800ca18:	2000      	movs	r0, #0
 800ca1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca1e:	bf00      	nop
 800ca20:	0800dff1 	.word	0x0800dff1

0800ca24 <_scanf_i>:
 800ca24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca28:	4698      	mov	r8, r3
 800ca2a:	4b74      	ldr	r3, [pc, #464]	; (800cbfc <_scanf_i+0x1d8>)
 800ca2c:	460c      	mov	r4, r1
 800ca2e:	4682      	mov	sl, r0
 800ca30:	4616      	mov	r6, r2
 800ca32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ca36:	b087      	sub	sp, #28
 800ca38:	ab03      	add	r3, sp, #12
 800ca3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ca3e:	4b70      	ldr	r3, [pc, #448]	; (800cc00 <_scanf_i+0x1dc>)
 800ca40:	69a1      	ldr	r1, [r4, #24]
 800ca42:	4a70      	ldr	r2, [pc, #448]	; (800cc04 <_scanf_i+0x1e0>)
 800ca44:	2903      	cmp	r1, #3
 800ca46:	bf18      	it	ne
 800ca48:	461a      	movne	r2, r3
 800ca4a:	68a3      	ldr	r3, [r4, #8]
 800ca4c:	9201      	str	r2, [sp, #4]
 800ca4e:	1e5a      	subs	r2, r3, #1
 800ca50:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ca54:	bf88      	it	hi
 800ca56:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ca5a:	4627      	mov	r7, r4
 800ca5c:	bf82      	ittt	hi
 800ca5e:	eb03 0905 	addhi.w	r9, r3, r5
 800ca62:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ca66:	60a3      	strhi	r3, [r4, #8]
 800ca68:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ca6c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800ca70:	bf98      	it	ls
 800ca72:	f04f 0900 	movls.w	r9, #0
 800ca76:	6023      	str	r3, [r4, #0]
 800ca78:	463d      	mov	r5, r7
 800ca7a:	f04f 0b00 	mov.w	fp, #0
 800ca7e:	6831      	ldr	r1, [r6, #0]
 800ca80:	ab03      	add	r3, sp, #12
 800ca82:	7809      	ldrb	r1, [r1, #0]
 800ca84:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ca88:	2202      	movs	r2, #2
 800ca8a:	f7f3 fbc1 	bl	8000210 <memchr>
 800ca8e:	b328      	cbz	r0, 800cadc <_scanf_i+0xb8>
 800ca90:	f1bb 0f01 	cmp.w	fp, #1
 800ca94:	d159      	bne.n	800cb4a <_scanf_i+0x126>
 800ca96:	6862      	ldr	r2, [r4, #4]
 800ca98:	b92a      	cbnz	r2, 800caa6 <_scanf_i+0x82>
 800ca9a:	6822      	ldr	r2, [r4, #0]
 800ca9c:	2308      	movs	r3, #8
 800ca9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800caa2:	6063      	str	r3, [r4, #4]
 800caa4:	6022      	str	r2, [r4, #0]
 800caa6:	6822      	ldr	r2, [r4, #0]
 800caa8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800caac:	6022      	str	r2, [r4, #0]
 800caae:	68a2      	ldr	r2, [r4, #8]
 800cab0:	1e51      	subs	r1, r2, #1
 800cab2:	60a1      	str	r1, [r4, #8]
 800cab4:	b192      	cbz	r2, 800cadc <_scanf_i+0xb8>
 800cab6:	6832      	ldr	r2, [r6, #0]
 800cab8:	1c51      	adds	r1, r2, #1
 800caba:	6031      	str	r1, [r6, #0]
 800cabc:	7812      	ldrb	r2, [r2, #0]
 800cabe:	f805 2b01 	strb.w	r2, [r5], #1
 800cac2:	6872      	ldr	r2, [r6, #4]
 800cac4:	3a01      	subs	r2, #1
 800cac6:	2a00      	cmp	r2, #0
 800cac8:	6072      	str	r2, [r6, #4]
 800caca:	dc07      	bgt.n	800cadc <_scanf_i+0xb8>
 800cacc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800cad0:	4631      	mov	r1, r6
 800cad2:	4650      	mov	r0, sl
 800cad4:	4790      	blx	r2
 800cad6:	2800      	cmp	r0, #0
 800cad8:	f040 8085 	bne.w	800cbe6 <_scanf_i+0x1c2>
 800cadc:	f10b 0b01 	add.w	fp, fp, #1
 800cae0:	f1bb 0f03 	cmp.w	fp, #3
 800cae4:	d1cb      	bne.n	800ca7e <_scanf_i+0x5a>
 800cae6:	6863      	ldr	r3, [r4, #4]
 800cae8:	b90b      	cbnz	r3, 800caee <_scanf_i+0xca>
 800caea:	230a      	movs	r3, #10
 800caec:	6063      	str	r3, [r4, #4]
 800caee:	6863      	ldr	r3, [r4, #4]
 800caf0:	4945      	ldr	r1, [pc, #276]	; (800cc08 <_scanf_i+0x1e4>)
 800caf2:	6960      	ldr	r0, [r4, #20]
 800caf4:	1ac9      	subs	r1, r1, r3
 800caf6:	f000 f937 	bl	800cd68 <__sccl>
 800cafa:	f04f 0b00 	mov.w	fp, #0
 800cafe:	68a3      	ldr	r3, [r4, #8]
 800cb00:	6822      	ldr	r2, [r4, #0]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d03d      	beq.n	800cb82 <_scanf_i+0x15e>
 800cb06:	6831      	ldr	r1, [r6, #0]
 800cb08:	6960      	ldr	r0, [r4, #20]
 800cb0a:	f891 c000 	ldrb.w	ip, [r1]
 800cb0e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800cb12:	2800      	cmp	r0, #0
 800cb14:	d035      	beq.n	800cb82 <_scanf_i+0x15e>
 800cb16:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800cb1a:	d124      	bne.n	800cb66 <_scanf_i+0x142>
 800cb1c:	0510      	lsls	r0, r2, #20
 800cb1e:	d522      	bpl.n	800cb66 <_scanf_i+0x142>
 800cb20:	f10b 0b01 	add.w	fp, fp, #1
 800cb24:	f1b9 0f00 	cmp.w	r9, #0
 800cb28:	d003      	beq.n	800cb32 <_scanf_i+0x10e>
 800cb2a:	3301      	adds	r3, #1
 800cb2c:	f109 39ff 	add.w	r9, r9, #4294967295
 800cb30:	60a3      	str	r3, [r4, #8]
 800cb32:	6873      	ldr	r3, [r6, #4]
 800cb34:	3b01      	subs	r3, #1
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	6073      	str	r3, [r6, #4]
 800cb3a:	dd1b      	ble.n	800cb74 <_scanf_i+0x150>
 800cb3c:	6833      	ldr	r3, [r6, #0]
 800cb3e:	3301      	adds	r3, #1
 800cb40:	6033      	str	r3, [r6, #0]
 800cb42:	68a3      	ldr	r3, [r4, #8]
 800cb44:	3b01      	subs	r3, #1
 800cb46:	60a3      	str	r3, [r4, #8]
 800cb48:	e7d9      	b.n	800cafe <_scanf_i+0xda>
 800cb4a:	f1bb 0f02 	cmp.w	fp, #2
 800cb4e:	d1ae      	bne.n	800caae <_scanf_i+0x8a>
 800cb50:	6822      	ldr	r2, [r4, #0]
 800cb52:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800cb56:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800cb5a:	d1bf      	bne.n	800cadc <_scanf_i+0xb8>
 800cb5c:	2310      	movs	r3, #16
 800cb5e:	6063      	str	r3, [r4, #4]
 800cb60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cb64:	e7a2      	b.n	800caac <_scanf_i+0x88>
 800cb66:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800cb6a:	6022      	str	r2, [r4, #0]
 800cb6c:	780b      	ldrb	r3, [r1, #0]
 800cb6e:	f805 3b01 	strb.w	r3, [r5], #1
 800cb72:	e7de      	b.n	800cb32 <_scanf_i+0x10e>
 800cb74:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cb78:	4631      	mov	r1, r6
 800cb7a:	4650      	mov	r0, sl
 800cb7c:	4798      	blx	r3
 800cb7e:	2800      	cmp	r0, #0
 800cb80:	d0df      	beq.n	800cb42 <_scanf_i+0x11e>
 800cb82:	6823      	ldr	r3, [r4, #0]
 800cb84:	05d9      	lsls	r1, r3, #23
 800cb86:	d50d      	bpl.n	800cba4 <_scanf_i+0x180>
 800cb88:	42bd      	cmp	r5, r7
 800cb8a:	d909      	bls.n	800cba0 <_scanf_i+0x17c>
 800cb8c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800cb90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cb94:	4632      	mov	r2, r6
 800cb96:	4650      	mov	r0, sl
 800cb98:	4798      	blx	r3
 800cb9a:	f105 39ff 	add.w	r9, r5, #4294967295
 800cb9e:	464d      	mov	r5, r9
 800cba0:	42bd      	cmp	r5, r7
 800cba2:	d028      	beq.n	800cbf6 <_scanf_i+0x1d2>
 800cba4:	6822      	ldr	r2, [r4, #0]
 800cba6:	f012 0210 	ands.w	r2, r2, #16
 800cbaa:	d113      	bne.n	800cbd4 <_scanf_i+0x1b0>
 800cbac:	702a      	strb	r2, [r5, #0]
 800cbae:	6863      	ldr	r3, [r4, #4]
 800cbb0:	9e01      	ldr	r6, [sp, #4]
 800cbb2:	4639      	mov	r1, r7
 800cbb4:	4650      	mov	r0, sl
 800cbb6:	47b0      	blx	r6
 800cbb8:	f8d8 3000 	ldr.w	r3, [r8]
 800cbbc:	6821      	ldr	r1, [r4, #0]
 800cbbe:	1d1a      	adds	r2, r3, #4
 800cbc0:	f8c8 2000 	str.w	r2, [r8]
 800cbc4:	f011 0f20 	tst.w	r1, #32
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	d00f      	beq.n	800cbec <_scanf_i+0x1c8>
 800cbcc:	6018      	str	r0, [r3, #0]
 800cbce:	68e3      	ldr	r3, [r4, #12]
 800cbd0:	3301      	adds	r3, #1
 800cbd2:	60e3      	str	r3, [r4, #12]
 800cbd4:	6923      	ldr	r3, [r4, #16]
 800cbd6:	1bed      	subs	r5, r5, r7
 800cbd8:	445d      	add	r5, fp
 800cbda:	442b      	add	r3, r5
 800cbdc:	6123      	str	r3, [r4, #16]
 800cbde:	2000      	movs	r0, #0
 800cbe0:	b007      	add	sp, #28
 800cbe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbe6:	f04f 0b00 	mov.w	fp, #0
 800cbea:	e7ca      	b.n	800cb82 <_scanf_i+0x15e>
 800cbec:	07ca      	lsls	r2, r1, #31
 800cbee:	bf4c      	ite	mi
 800cbf0:	8018      	strhmi	r0, [r3, #0]
 800cbf2:	6018      	strpl	r0, [r3, #0]
 800cbf4:	e7eb      	b.n	800cbce <_scanf_i+0x1aa>
 800cbf6:	2001      	movs	r0, #1
 800cbf8:	e7f2      	b.n	800cbe0 <_scanf_i+0x1bc>
 800cbfa:	bf00      	nop
 800cbfc:	0800dd54 	.word	0x0800dd54
 800cc00:	0800d775 	.word	0x0800d775
 800cc04:	0800c319 	.word	0x0800c319
 800cc08:	0800e112 	.word	0x0800e112

0800cc0c <__sflush_r>:
 800cc0c:	898a      	ldrh	r2, [r1, #12]
 800cc0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc12:	4605      	mov	r5, r0
 800cc14:	0710      	lsls	r0, r2, #28
 800cc16:	460c      	mov	r4, r1
 800cc18:	d458      	bmi.n	800cccc <__sflush_r+0xc0>
 800cc1a:	684b      	ldr	r3, [r1, #4]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	dc05      	bgt.n	800cc2c <__sflush_r+0x20>
 800cc20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	dc02      	bgt.n	800cc2c <__sflush_r+0x20>
 800cc26:	2000      	movs	r0, #0
 800cc28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc2e:	2e00      	cmp	r6, #0
 800cc30:	d0f9      	beq.n	800cc26 <__sflush_r+0x1a>
 800cc32:	2300      	movs	r3, #0
 800cc34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cc38:	682f      	ldr	r7, [r5, #0]
 800cc3a:	6a21      	ldr	r1, [r4, #32]
 800cc3c:	602b      	str	r3, [r5, #0]
 800cc3e:	d032      	beq.n	800cca6 <__sflush_r+0x9a>
 800cc40:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cc42:	89a3      	ldrh	r3, [r4, #12]
 800cc44:	075a      	lsls	r2, r3, #29
 800cc46:	d505      	bpl.n	800cc54 <__sflush_r+0x48>
 800cc48:	6863      	ldr	r3, [r4, #4]
 800cc4a:	1ac0      	subs	r0, r0, r3
 800cc4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc4e:	b10b      	cbz	r3, 800cc54 <__sflush_r+0x48>
 800cc50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc52:	1ac0      	subs	r0, r0, r3
 800cc54:	2300      	movs	r3, #0
 800cc56:	4602      	mov	r2, r0
 800cc58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc5a:	6a21      	ldr	r1, [r4, #32]
 800cc5c:	4628      	mov	r0, r5
 800cc5e:	47b0      	blx	r6
 800cc60:	1c43      	adds	r3, r0, #1
 800cc62:	89a3      	ldrh	r3, [r4, #12]
 800cc64:	d106      	bne.n	800cc74 <__sflush_r+0x68>
 800cc66:	6829      	ldr	r1, [r5, #0]
 800cc68:	291d      	cmp	r1, #29
 800cc6a:	d82b      	bhi.n	800ccc4 <__sflush_r+0xb8>
 800cc6c:	4a29      	ldr	r2, [pc, #164]	; (800cd14 <__sflush_r+0x108>)
 800cc6e:	410a      	asrs	r2, r1
 800cc70:	07d6      	lsls	r6, r2, #31
 800cc72:	d427      	bmi.n	800ccc4 <__sflush_r+0xb8>
 800cc74:	2200      	movs	r2, #0
 800cc76:	6062      	str	r2, [r4, #4]
 800cc78:	04d9      	lsls	r1, r3, #19
 800cc7a:	6922      	ldr	r2, [r4, #16]
 800cc7c:	6022      	str	r2, [r4, #0]
 800cc7e:	d504      	bpl.n	800cc8a <__sflush_r+0x7e>
 800cc80:	1c42      	adds	r2, r0, #1
 800cc82:	d101      	bne.n	800cc88 <__sflush_r+0x7c>
 800cc84:	682b      	ldr	r3, [r5, #0]
 800cc86:	b903      	cbnz	r3, 800cc8a <__sflush_r+0x7e>
 800cc88:	6560      	str	r0, [r4, #84]	; 0x54
 800cc8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc8c:	602f      	str	r7, [r5, #0]
 800cc8e:	2900      	cmp	r1, #0
 800cc90:	d0c9      	beq.n	800cc26 <__sflush_r+0x1a>
 800cc92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc96:	4299      	cmp	r1, r3
 800cc98:	d002      	beq.n	800cca0 <__sflush_r+0x94>
 800cc9a:	4628      	mov	r0, r5
 800cc9c:	f7fd fefa 	bl	800aa94 <_free_r>
 800cca0:	2000      	movs	r0, #0
 800cca2:	6360      	str	r0, [r4, #52]	; 0x34
 800cca4:	e7c0      	b.n	800cc28 <__sflush_r+0x1c>
 800cca6:	2301      	movs	r3, #1
 800cca8:	4628      	mov	r0, r5
 800ccaa:	47b0      	blx	r6
 800ccac:	1c41      	adds	r1, r0, #1
 800ccae:	d1c8      	bne.n	800cc42 <__sflush_r+0x36>
 800ccb0:	682b      	ldr	r3, [r5, #0]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d0c5      	beq.n	800cc42 <__sflush_r+0x36>
 800ccb6:	2b1d      	cmp	r3, #29
 800ccb8:	d001      	beq.n	800ccbe <__sflush_r+0xb2>
 800ccba:	2b16      	cmp	r3, #22
 800ccbc:	d101      	bne.n	800ccc2 <__sflush_r+0xb6>
 800ccbe:	602f      	str	r7, [r5, #0]
 800ccc0:	e7b1      	b.n	800cc26 <__sflush_r+0x1a>
 800ccc2:	89a3      	ldrh	r3, [r4, #12]
 800ccc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccc8:	81a3      	strh	r3, [r4, #12]
 800ccca:	e7ad      	b.n	800cc28 <__sflush_r+0x1c>
 800cccc:	690f      	ldr	r7, [r1, #16]
 800ccce:	2f00      	cmp	r7, #0
 800ccd0:	d0a9      	beq.n	800cc26 <__sflush_r+0x1a>
 800ccd2:	0793      	lsls	r3, r2, #30
 800ccd4:	680e      	ldr	r6, [r1, #0]
 800ccd6:	bf08      	it	eq
 800ccd8:	694b      	ldreq	r3, [r1, #20]
 800ccda:	600f      	str	r7, [r1, #0]
 800ccdc:	bf18      	it	ne
 800ccde:	2300      	movne	r3, #0
 800cce0:	eba6 0807 	sub.w	r8, r6, r7
 800cce4:	608b      	str	r3, [r1, #8]
 800cce6:	f1b8 0f00 	cmp.w	r8, #0
 800ccea:	dd9c      	ble.n	800cc26 <__sflush_r+0x1a>
 800ccec:	6a21      	ldr	r1, [r4, #32]
 800ccee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ccf0:	4643      	mov	r3, r8
 800ccf2:	463a      	mov	r2, r7
 800ccf4:	4628      	mov	r0, r5
 800ccf6:	47b0      	blx	r6
 800ccf8:	2800      	cmp	r0, #0
 800ccfa:	dc06      	bgt.n	800cd0a <__sflush_r+0xfe>
 800ccfc:	89a3      	ldrh	r3, [r4, #12]
 800ccfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd02:	81a3      	strh	r3, [r4, #12]
 800cd04:	f04f 30ff 	mov.w	r0, #4294967295
 800cd08:	e78e      	b.n	800cc28 <__sflush_r+0x1c>
 800cd0a:	4407      	add	r7, r0
 800cd0c:	eba8 0800 	sub.w	r8, r8, r0
 800cd10:	e7e9      	b.n	800cce6 <__sflush_r+0xda>
 800cd12:	bf00      	nop
 800cd14:	dfbffffe 	.word	0xdfbffffe

0800cd18 <_fflush_r>:
 800cd18:	b538      	push	{r3, r4, r5, lr}
 800cd1a:	690b      	ldr	r3, [r1, #16]
 800cd1c:	4605      	mov	r5, r0
 800cd1e:	460c      	mov	r4, r1
 800cd20:	b913      	cbnz	r3, 800cd28 <_fflush_r+0x10>
 800cd22:	2500      	movs	r5, #0
 800cd24:	4628      	mov	r0, r5
 800cd26:	bd38      	pop	{r3, r4, r5, pc}
 800cd28:	b118      	cbz	r0, 800cd32 <_fflush_r+0x1a>
 800cd2a:	6a03      	ldr	r3, [r0, #32]
 800cd2c:	b90b      	cbnz	r3, 800cd32 <_fflush_r+0x1a>
 800cd2e:	f7fc fee7 	bl	8009b00 <__sinit>
 800cd32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d0f3      	beq.n	800cd22 <_fflush_r+0xa>
 800cd3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cd3c:	07d0      	lsls	r0, r2, #31
 800cd3e:	d404      	bmi.n	800cd4a <_fflush_r+0x32>
 800cd40:	0599      	lsls	r1, r3, #22
 800cd42:	d402      	bmi.n	800cd4a <_fflush_r+0x32>
 800cd44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd46:	f7fd f820 	bl	8009d8a <__retarget_lock_acquire_recursive>
 800cd4a:	4628      	mov	r0, r5
 800cd4c:	4621      	mov	r1, r4
 800cd4e:	f7ff ff5d 	bl	800cc0c <__sflush_r>
 800cd52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd54:	07da      	lsls	r2, r3, #31
 800cd56:	4605      	mov	r5, r0
 800cd58:	d4e4      	bmi.n	800cd24 <_fflush_r+0xc>
 800cd5a:	89a3      	ldrh	r3, [r4, #12]
 800cd5c:	059b      	lsls	r3, r3, #22
 800cd5e:	d4e1      	bmi.n	800cd24 <_fflush_r+0xc>
 800cd60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd62:	f7fd f813 	bl	8009d8c <__retarget_lock_release_recursive>
 800cd66:	e7dd      	b.n	800cd24 <_fflush_r+0xc>

0800cd68 <__sccl>:
 800cd68:	b570      	push	{r4, r5, r6, lr}
 800cd6a:	780b      	ldrb	r3, [r1, #0]
 800cd6c:	4604      	mov	r4, r0
 800cd6e:	2b5e      	cmp	r3, #94	; 0x5e
 800cd70:	bf0b      	itete	eq
 800cd72:	784b      	ldrbeq	r3, [r1, #1]
 800cd74:	1c4a      	addne	r2, r1, #1
 800cd76:	1c8a      	addeq	r2, r1, #2
 800cd78:	2100      	movne	r1, #0
 800cd7a:	bf08      	it	eq
 800cd7c:	2101      	moveq	r1, #1
 800cd7e:	3801      	subs	r0, #1
 800cd80:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800cd84:	f800 1f01 	strb.w	r1, [r0, #1]!
 800cd88:	42a8      	cmp	r0, r5
 800cd8a:	d1fb      	bne.n	800cd84 <__sccl+0x1c>
 800cd8c:	b90b      	cbnz	r3, 800cd92 <__sccl+0x2a>
 800cd8e:	1e50      	subs	r0, r2, #1
 800cd90:	bd70      	pop	{r4, r5, r6, pc}
 800cd92:	f081 0101 	eor.w	r1, r1, #1
 800cd96:	54e1      	strb	r1, [r4, r3]
 800cd98:	4610      	mov	r0, r2
 800cd9a:	4602      	mov	r2, r0
 800cd9c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800cda0:	2d2d      	cmp	r5, #45	; 0x2d
 800cda2:	d005      	beq.n	800cdb0 <__sccl+0x48>
 800cda4:	2d5d      	cmp	r5, #93	; 0x5d
 800cda6:	d016      	beq.n	800cdd6 <__sccl+0x6e>
 800cda8:	2d00      	cmp	r5, #0
 800cdaa:	d0f1      	beq.n	800cd90 <__sccl+0x28>
 800cdac:	462b      	mov	r3, r5
 800cdae:	e7f2      	b.n	800cd96 <__sccl+0x2e>
 800cdb0:	7846      	ldrb	r6, [r0, #1]
 800cdb2:	2e5d      	cmp	r6, #93	; 0x5d
 800cdb4:	d0fa      	beq.n	800cdac <__sccl+0x44>
 800cdb6:	42b3      	cmp	r3, r6
 800cdb8:	dcf8      	bgt.n	800cdac <__sccl+0x44>
 800cdba:	3002      	adds	r0, #2
 800cdbc:	461a      	mov	r2, r3
 800cdbe:	3201      	adds	r2, #1
 800cdc0:	4296      	cmp	r6, r2
 800cdc2:	54a1      	strb	r1, [r4, r2]
 800cdc4:	dcfb      	bgt.n	800cdbe <__sccl+0x56>
 800cdc6:	1af2      	subs	r2, r6, r3
 800cdc8:	3a01      	subs	r2, #1
 800cdca:	1c5d      	adds	r5, r3, #1
 800cdcc:	42b3      	cmp	r3, r6
 800cdce:	bfa8      	it	ge
 800cdd0:	2200      	movge	r2, #0
 800cdd2:	18ab      	adds	r3, r5, r2
 800cdd4:	e7e1      	b.n	800cd9a <__sccl+0x32>
 800cdd6:	4610      	mov	r0, r2
 800cdd8:	e7da      	b.n	800cd90 <__sccl+0x28>

0800cdda <__submore>:
 800cdda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdde:	460c      	mov	r4, r1
 800cde0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cde2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cde6:	4299      	cmp	r1, r3
 800cde8:	d11d      	bne.n	800ce26 <__submore+0x4c>
 800cdea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800cdee:	f7fd fec5 	bl	800ab7c <_malloc_r>
 800cdf2:	b918      	cbnz	r0, 800cdfc <__submore+0x22>
 800cdf4:	f04f 30ff 	mov.w	r0, #4294967295
 800cdf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce00:	63a3      	str	r3, [r4, #56]	; 0x38
 800ce02:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ce06:	6360      	str	r0, [r4, #52]	; 0x34
 800ce08:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ce0c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ce10:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ce14:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ce18:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ce1c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ce20:	6020      	str	r0, [r4, #0]
 800ce22:	2000      	movs	r0, #0
 800ce24:	e7e8      	b.n	800cdf8 <__submore+0x1e>
 800ce26:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ce28:	0077      	lsls	r7, r6, #1
 800ce2a:	463a      	mov	r2, r7
 800ce2c:	f000 fc01 	bl	800d632 <_realloc_r>
 800ce30:	4605      	mov	r5, r0
 800ce32:	2800      	cmp	r0, #0
 800ce34:	d0de      	beq.n	800cdf4 <__submore+0x1a>
 800ce36:	eb00 0806 	add.w	r8, r0, r6
 800ce3a:	4601      	mov	r1, r0
 800ce3c:	4632      	mov	r2, r6
 800ce3e:	4640      	mov	r0, r8
 800ce40:	f000 f842 	bl	800cec8 <memcpy>
 800ce44:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ce48:	f8c4 8000 	str.w	r8, [r4]
 800ce4c:	e7e9      	b.n	800ce22 <__submore+0x48>

0800ce4e <memmove>:
 800ce4e:	4288      	cmp	r0, r1
 800ce50:	b510      	push	{r4, lr}
 800ce52:	eb01 0402 	add.w	r4, r1, r2
 800ce56:	d902      	bls.n	800ce5e <memmove+0x10>
 800ce58:	4284      	cmp	r4, r0
 800ce5a:	4623      	mov	r3, r4
 800ce5c:	d807      	bhi.n	800ce6e <memmove+0x20>
 800ce5e:	1e43      	subs	r3, r0, #1
 800ce60:	42a1      	cmp	r1, r4
 800ce62:	d008      	beq.n	800ce76 <memmove+0x28>
 800ce64:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce68:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce6c:	e7f8      	b.n	800ce60 <memmove+0x12>
 800ce6e:	4402      	add	r2, r0
 800ce70:	4601      	mov	r1, r0
 800ce72:	428a      	cmp	r2, r1
 800ce74:	d100      	bne.n	800ce78 <memmove+0x2a>
 800ce76:	bd10      	pop	{r4, pc}
 800ce78:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce7c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce80:	e7f7      	b.n	800ce72 <memmove+0x24>

0800ce82 <strncmp>:
 800ce82:	b510      	push	{r4, lr}
 800ce84:	b16a      	cbz	r2, 800cea2 <strncmp+0x20>
 800ce86:	3901      	subs	r1, #1
 800ce88:	1884      	adds	r4, r0, r2
 800ce8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce8e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ce92:	429a      	cmp	r2, r3
 800ce94:	d103      	bne.n	800ce9e <strncmp+0x1c>
 800ce96:	42a0      	cmp	r0, r4
 800ce98:	d001      	beq.n	800ce9e <strncmp+0x1c>
 800ce9a:	2a00      	cmp	r2, #0
 800ce9c:	d1f5      	bne.n	800ce8a <strncmp+0x8>
 800ce9e:	1ad0      	subs	r0, r2, r3
 800cea0:	bd10      	pop	{r4, pc}
 800cea2:	4610      	mov	r0, r2
 800cea4:	e7fc      	b.n	800cea0 <strncmp+0x1e>
	...

0800cea8 <_sbrk_r>:
 800cea8:	b538      	push	{r3, r4, r5, lr}
 800ceaa:	4d06      	ldr	r5, [pc, #24]	; (800cec4 <_sbrk_r+0x1c>)
 800ceac:	2300      	movs	r3, #0
 800ceae:	4604      	mov	r4, r0
 800ceb0:	4608      	mov	r0, r1
 800ceb2:	602b      	str	r3, [r5, #0]
 800ceb4:	f7f5 fcf8 	bl	80028a8 <_sbrk>
 800ceb8:	1c43      	adds	r3, r0, #1
 800ceba:	d102      	bne.n	800cec2 <_sbrk_r+0x1a>
 800cebc:	682b      	ldr	r3, [r5, #0]
 800cebe:	b103      	cbz	r3, 800cec2 <_sbrk_r+0x1a>
 800cec0:	6023      	str	r3, [r4, #0]
 800cec2:	bd38      	pop	{r3, r4, r5, pc}
 800cec4:	200005e0 	.word	0x200005e0

0800cec8 <memcpy>:
 800cec8:	440a      	add	r2, r1
 800ceca:	4291      	cmp	r1, r2
 800cecc:	f100 33ff 	add.w	r3, r0, #4294967295
 800ced0:	d100      	bne.n	800ced4 <memcpy+0xc>
 800ced2:	4770      	bx	lr
 800ced4:	b510      	push	{r4, lr}
 800ced6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ceda:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cede:	4291      	cmp	r1, r2
 800cee0:	d1f9      	bne.n	800ced6 <memcpy+0xe>
 800cee2:	bd10      	pop	{r4, pc}
 800cee4:	0000      	movs	r0, r0
	...

0800cee8 <nan>:
 800cee8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cef0 <nan+0x8>
 800ceec:	4770      	bx	lr
 800ceee:	bf00      	nop
 800cef0:	00000000 	.word	0x00000000
 800cef4:	7ff80000 	.word	0x7ff80000

0800cef8 <__assert_func>:
 800cef8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cefa:	4614      	mov	r4, r2
 800cefc:	461a      	mov	r2, r3
 800cefe:	4b09      	ldr	r3, [pc, #36]	; (800cf24 <__assert_func+0x2c>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	4605      	mov	r5, r0
 800cf04:	68d8      	ldr	r0, [r3, #12]
 800cf06:	b14c      	cbz	r4, 800cf1c <__assert_func+0x24>
 800cf08:	4b07      	ldr	r3, [pc, #28]	; (800cf28 <__assert_func+0x30>)
 800cf0a:	9100      	str	r1, [sp, #0]
 800cf0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cf10:	4906      	ldr	r1, [pc, #24]	; (800cf2c <__assert_func+0x34>)
 800cf12:	462b      	mov	r3, r5
 800cf14:	f000 fc3e 	bl	800d794 <fiprintf>
 800cf18:	f000 fc4e 	bl	800d7b8 <abort>
 800cf1c:	4b04      	ldr	r3, [pc, #16]	; (800cf30 <__assert_func+0x38>)
 800cf1e:	461c      	mov	r4, r3
 800cf20:	e7f3      	b.n	800cf0a <__assert_func+0x12>
 800cf22:	bf00      	nop
 800cf24:	20000064 	.word	0x20000064
 800cf28:	0800e125 	.word	0x0800e125
 800cf2c:	0800e132 	.word	0x0800e132
 800cf30:	0800e160 	.word	0x0800e160

0800cf34 <_calloc_r>:
 800cf34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf36:	fba1 2402 	umull	r2, r4, r1, r2
 800cf3a:	b94c      	cbnz	r4, 800cf50 <_calloc_r+0x1c>
 800cf3c:	4611      	mov	r1, r2
 800cf3e:	9201      	str	r2, [sp, #4]
 800cf40:	f7fd fe1c 	bl	800ab7c <_malloc_r>
 800cf44:	9a01      	ldr	r2, [sp, #4]
 800cf46:	4605      	mov	r5, r0
 800cf48:	b930      	cbnz	r0, 800cf58 <_calloc_r+0x24>
 800cf4a:	4628      	mov	r0, r5
 800cf4c:	b003      	add	sp, #12
 800cf4e:	bd30      	pop	{r4, r5, pc}
 800cf50:	220c      	movs	r2, #12
 800cf52:	6002      	str	r2, [r0, #0]
 800cf54:	2500      	movs	r5, #0
 800cf56:	e7f8      	b.n	800cf4a <_calloc_r+0x16>
 800cf58:	4621      	mov	r1, r4
 800cf5a:	f7fc fe98 	bl	8009c8e <memset>
 800cf5e:	e7f4      	b.n	800cf4a <_calloc_r+0x16>

0800cf60 <rshift>:
 800cf60:	6903      	ldr	r3, [r0, #16]
 800cf62:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cf66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf6a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cf6e:	f100 0414 	add.w	r4, r0, #20
 800cf72:	dd45      	ble.n	800d000 <rshift+0xa0>
 800cf74:	f011 011f 	ands.w	r1, r1, #31
 800cf78:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cf7c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cf80:	d10c      	bne.n	800cf9c <rshift+0x3c>
 800cf82:	f100 0710 	add.w	r7, r0, #16
 800cf86:	4629      	mov	r1, r5
 800cf88:	42b1      	cmp	r1, r6
 800cf8a:	d334      	bcc.n	800cff6 <rshift+0x96>
 800cf8c:	1a9b      	subs	r3, r3, r2
 800cf8e:	009b      	lsls	r3, r3, #2
 800cf90:	1eea      	subs	r2, r5, #3
 800cf92:	4296      	cmp	r6, r2
 800cf94:	bf38      	it	cc
 800cf96:	2300      	movcc	r3, #0
 800cf98:	4423      	add	r3, r4
 800cf9a:	e015      	b.n	800cfc8 <rshift+0x68>
 800cf9c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cfa0:	f1c1 0820 	rsb	r8, r1, #32
 800cfa4:	40cf      	lsrs	r7, r1
 800cfa6:	f105 0e04 	add.w	lr, r5, #4
 800cfaa:	46a1      	mov	r9, r4
 800cfac:	4576      	cmp	r6, lr
 800cfae:	46f4      	mov	ip, lr
 800cfb0:	d815      	bhi.n	800cfde <rshift+0x7e>
 800cfb2:	1a9a      	subs	r2, r3, r2
 800cfb4:	0092      	lsls	r2, r2, #2
 800cfb6:	3a04      	subs	r2, #4
 800cfb8:	3501      	adds	r5, #1
 800cfba:	42ae      	cmp	r6, r5
 800cfbc:	bf38      	it	cc
 800cfbe:	2200      	movcc	r2, #0
 800cfc0:	18a3      	adds	r3, r4, r2
 800cfc2:	50a7      	str	r7, [r4, r2]
 800cfc4:	b107      	cbz	r7, 800cfc8 <rshift+0x68>
 800cfc6:	3304      	adds	r3, #4
 800cfc8:	1b1a      	subs	r2, r3, r4
 800cfca:	42a3      	cmp	r3, r4
 800cfcc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cfd0:	bf08      	it	eq
 800cfd2:	2300      	moveq	r3, #0
 800cfd4:	6102      	str	r2, [r0, #16]
 800cfd6:	bf08      	it	eq
 800cfd8:	6143      	streq	r3, [r0, #20]
 800cfda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfde:	f8dc c000 	ldr.w	ip, [ip]
 800cfe2:	fa0c fc08 	lsl.w	ip, ip, r8
 800cfe6:	ea4c 0707 	orr.w	r7, ip, r7
 800cfea:	f849 7b04 	str.w	r7, [r9], #4
 800cfee:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cff2:	40cf      	lsrs	r7, r1
 800cff4:	e7da      	b.n	800cfac <rshift+0x4c>
 800cff6:	f851 cb04 	ldr.w	ip, [r1], #4
 800cffa:	f847 cf04 	str.w	ip, [r7, #4]!
 800cffe:	e7c3      	b.n	800cf88 <rshift+0x28>
 800d000:	4623      	mov	r3, r4
 800d002:	e7e1      	b.n	800cfc8 <rshift+0x68>

0800d004 <__hexdig_fun>:
 800d004:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d008:	2b09      	cmp	r3, #9
 800d00a:	d802      	bhi.n	800d012 <__hexdig_fun+0xe>
 800d00c:	3820      	subs	r0, #32
 800d00e:	b2c0      	uxtb	r0, r0
 800d010:	4770      	bx	lr
 800d012:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d016:	2b05      	cmp	r3, #5
 800d018:	d801      	bhi.n	800d01e <__hexdig_fun+0x1a>
 800d01a:	3847      	subs	r0, #71	; 0x47
 800d01c:	e7f7      	b.n	800d00e <__hexdig_fun+0xa>
 800d01e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d022:	2b05      	cmp	r3, #5
 800d024:	d801      	bhi.n	800d02a <__hexdig_fun+0x26>
 800d026:	3827      	subs	r0, #39	; 0x27
 800d028:	e7f1      	b.n	800d00e <__hexdig_fun+0xa>
 800d02a:	2000      	movs	r0, #0
 800d02c:	4770      	bx	lr
	...

0800d030 <__gethex>:
 800d030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d034:	4617      	mov	r7, r2
 800d036:	680a      	ldr	r2, [r1, #0]
 800d038:	b085      	sub	sp, #20
 800d03a:	f102 0b02 	add.w	fp, r2, #2
 800d03e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d042:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d046:	4681      	mov	r9, r0
 800d048:	468a      	mov	sl, r1
 800d04a:	9302      	str	r3, [sp, #8]
 800d04c:	32fe      	adds	r2, #254	; 0xfe
 800d04e:	eb02 030b 	add.w	r3, r2, fp
 800d052:	46d8      	mov	r8, fp
 800d054:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800d058:	9301      	str	r3, [sp, #4]
 800d05a:	2830      	cmp	r0, #48	; 0x30
 800d05c:	d0f7      	beq.n	800d04e <__gethex+0x1e>
 800d05e:	f7ff ffd1 	bl	800d004 <__hexdig_fun>
 800d062:	4604      	mov	r4, r0
 800d064:	2800      	cmp	r0, #0
 800d066:	d138      	bne.n	800d0da <__gethex+0xaa>
 800d068:	49a7      	ldr	r1, [pc, #668]	; (800d308 <__gethex+0x2d8>)
 800d06a:	2201      	movs	r2, #1
 800d06c:	4640      	mov	r0, r8
 800d06e:	f7ff ff08 	bl	800ce82 <strncmp>
 800d072:	4606      	mov	r6, r0
 800d074:	2800      	cmp	r0, #0
 800d076:	d169      	bne.n	800d14c <__gethex+0x11c>
 800d078:	f898 0001 	ldrb.w	r0, [r8, #1]
 800d07c:	465d      	mov	r5, fp
 800d07e:	f7ff ffc1 	bl	800d004 <__hexdig_fun>
 800d082:	2800      	cmp	r0, #0
 800d084:	d064      	beq.n	800d150 <__gethex+0x120>
 800d086:	465a      	mov	r2, fp
 800d088:	7810      	ldrb	r0, [r2, #0]
 800d08a:	2830      	cmp	r0, #48	; 0x30
 800d08c:	4690      	mov	r8, r2
 800d08e:	f102 0201 	add.w	r2, r2, #1
 800d092:	d0f9      	beq.n	800d088 <__gethex+0x58>
 800d094:	f7ff ffb6 	bl	800d004 <__hexdig_fun>
 800d098:	2301      	movs	r3, #1
 800d09a:	fab0 f480 	clz	r4, r0
 800d09e:	0964      	lsrs	r4, r4, #5
 800d0a0:	465e      	mov	r6, fp
 800d0a2:	9301      	str	r3, [sp, #4]
 800d0a4:	4642      	mov	r2, r8
 800d0a6:	4615      	mov	r5, r2
 800d0a8:	3201      	adds	r2, #1
 800d0aa:	7828      	ldrb	r0, [r5, #0]
 800d0ac:	f7ff ffaa 	bl	800d004 <__hexdig_fun>
 800d0b0:	2800      	cmp	r0, #0
 800d0b2:	d1f8      	bne.n	800d0a6 <__gethex+0x76>
 800d0b4:	4994      	ldr	r1, [pc, #592]	; (800d308 <__gethex+0x2d8>)
 800d0b6:	2201      	movs	r2, #1
 800d0b8:	4628      	mov	r0, r5
 800d0ba:	f7ff fee2 	bl	800ce82 <strncmp>
 800d0be:	b978      	cbnz	r0, 800d0e0 <__gethex+0xb0>
 800d0c0:	b946      	cbnz	r6, 800d0d4 <__gethex+0xa4>
 800d0c2:	1c6e      	adds	r6, r5, #1
 800d0c4:	4632      	mov	r2, r6
 800d0c6:	4615      	mov	r5, r2
 800d0c8:	3201      	adds	r2, #1
 800d0ca:	7828      	ldrb	r0, [r5, #0]
 800d0cc:	f7ff ff9a 	bl	800d004 <__hexdig_fun>
 800d0d0:	2800      	cmp	r0, #0
 800d0d2:	d1f8      	bne.n	800d0c6 <__gethex+0x96>
 800d0d4:	1b73      	subs	r3, r6, r5
 800d0d6:	009e      	lsls	r6, r3, #2
 800d0d8:	e004      	b.n	800d0e4 <__gethex+0xb4>
 800d0da:	2400      	movs	r4, #0
 800d0dc:	4626      	mov	r6, r4
 800d0de:	e7e1      	b.n	800d0a4 <__gethex+0x74>
 800d0e0:	2e00      	cmp	r6, #0
 800d0e2:	d1f7      	bne.n	800d0d4 <__gethex+0xa4>
 800d0e4:	782b      	ldrb	r3, [r5, #0]
 800d0e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d0ea:	2b50      	cmp	r3, #80	; 0x50
 800d0ec:	d13d      	bne.n	800d16a <__gethex+0x13a>
 800d0ee:	786b      	ldrb	r3, [r5, #1]
 800d0f0:	2b2b      	cmp	r3, #43	; 0x2b
 800d0f2:	d02f      	beq.n	800d154 <__gethex+0x124>
 800d0f4:	2b2d      	cmp	r3, #45	; 0x2d
 800d0f6:	d031      	beq.n	800d15c <__gethex+0x12c>
 800d0f8:	1c69      	adds	r1, r5, #1
 800d0fa:	f04f 0b00 	mov.w	fp, #0
 800d0fe:	7808      	ldrb	r0, [r1, #0]
 800d100:	f7ff ff80 	bl	800d004 <__hexdig_fun>
 800d104:	1e42      	subs	r2, r0, #1
 800d106:	b2d2      	uxtb	r2, r2
 800d108:	2a18      	cmp	r2, #24
 800d10a:	d82e      	bhi.n	800d16a <__gethex+0x13a>
 800d10c:	f1a0 0210 	sub.w	r2, r0, #16
 800d110:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d114:	f7ff ff76 	bl	800d004 <__hexdig_fun>
 800d118:	f100 3cff 	add.w	ip, r0, #4294967295
 800d11c:	fa5f fc8c 	uxtb.w	ip, ip
 800d120:	f1bc 0f18 	cmp.w	ip, #24
 800d124:	d91d      	bls.n	800d162 <__gethex+0x132>
 800d126:	f1bb 0f00 	cmp.w	fp, #0
 800d12a:	d000      	beq.n	800d12e <__gethex+0xfe>
 800d12c:	4252      	negs	r2, r2
 800d12e:	4416      	add	r6, r2
 800d130:	f8ca 1000 	str.w	r1, [sl]
 800d134:	b1dc      	cbz	r4, 800d16e <__gethex+0x13e>
 800d136:	9b01      	ldr	r3, [sp, #4]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	bf14      	ite	ne
 800d13c:	f04f 0800 	movne.w	r8, #0
 800d140:	f04f 0806 	moveq.w	r8, #6
 800d144:	4640      	mov	r0, r8
 800d146:	b005      	add	sp, #20
 800d148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d14c:	4645      	mov	r5, r8
 800d14e:	4626      	mov	r6, r4
 800d150:	2401      	movs	r4, #1
 800d152:	e7c7      	b.n	800d0e4 <__gethex+0xb4>
 800d154:	f04f 0b00 	mov.w	fp, #0
 800d158:	1ca9      	adds	r1, r5, #2
 800d15a:	e7d0      	b.n	800d0fe <__gethex+0xce>
 800d15c:	f04f 0b01 	mov.w	fp, #1
 800d160:	e7fa      	b.n	800d158 <__gethex+0x128>
 800d162:	230a      	movs	r3, #10
 800d164:	fb03 0002 	mla	r0, r3, r2, r0
 800d168:	e7d0      	b.n	800d10c <__gethex+0xdc>
 800d16a:	4629      	mov	r1, r5
 800d16c:	e7e0      	b.n	800d130 <__gethex+0x100>
 800d16e:	eba5 0308 	sub.w	r3, r5, r8
 800d172:	3b01      	subs	r3, #1
 800d174:	4621      	mov	r1, r4
 800d176:	2b07      	cmp	r3, #7
 800d178:	dc0a      	bgt.n	800d190 <__gethex+0x160>
 800d17a:	4648      	mov	r0, r9
 800d17c:	f7fd fd8a 	bl	800ac94 <_Balloc>
 800d180:	4604      	mov	r4, r0
 800d182:	b940      	cbnz	r0, 800d196 <__gethex+0x166>
 800d184:	4b61      	ldr	r3, [pc, #388]	; (800d30c <__gethex+0x2dc>)
 800d186:	4602      	mov	r2, r0
 800d188:	21e4      	movs	r1, #228	; 0xe4
 800d18a:	4861      	ldr	r0, [pc, #388]	; (800d310 <__gethex+0x2e0>)
 800d18c:	f7ff feb4 	bl	800cef8 <__assert_func>
 800d190:	3101      	adds	r1, #1
 800d192:	105b      	asrs	r3, r3, #1
 800d194:	e7ef      	b.n	800d176 <__gethex+0x146>
 800d196:	f100 0a14 	add.w	sl, r0, #20
 800d19a:	2300      	movs	r3, #0
 800d19c:	495a      	ldr	r1, [pc, #360]	; (800d308 <__gethex+0x2d8>)
 800d19e:	f8cd a004 	str.w	sl, [sp, #4]
 800d1a2:	469b      	mov	fp, r3
 800d1a4:	45a8      	cmp	r8, r5
 800d1a6:	d342      	bcc.n	800d22e <__gethex+0x1fe>
 800d1a8:	9801      	ldr	r0, [sp, #4]
 800d1aa:	f840 bb04 	str.w	fp, [r0], #4
 800d1ae:	eba0 000a 	sub.w	r0, r0, sl
 800d1b2:	1080      	asrs	r0, r0, #2
 800d1b4:	6120      	str	r0, [r4, #16]
 800d1b6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800d1ba:	4658      	mov	r0, fp
 800d1bc:	f7fd fe5c 	bl	800ae78 <__hi0bits>
 800d1c0:	683d      	ldr	r5, [r7, #0]
 800d1c2:	eba8 0000 	sub.w	r0, r8, r0
 800d1c6:	42a8      	cmp	r0, r5
 800d1c8:	dd59      	ble.n	800d27e <__gethex+0x24e>
 800d1ca:	eba0 0805 	sub.w	r8, r0, r5
 800d1ce:	4641      	mov	r1, r8
 800d1d0:	4620      	mov	r0, r4
 800d1d2:	f7fe f9eb 	bl	800b5ac <__any_on>
 800d1d6:	4683      	mov	fp, r0
 800d1d8:	b1b8      	cbz	r0, 800d20a <__gethex+0x1da>
 800d1da:	f108 33ff 	add.w	r3, r8, #4294967295
 800d1de:	1159      	asrs	r1, r3, #5
 800d1e0:	f003 021f 	and.w	r2, r3, #31
 800d1e4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d1e8:	f04f 0b01 	mov.w	fp, #1
 800d1ec:	fa0b f202 	lsl.w	r2, fp, r2
 800d1f0:	420a      	tst	r2, r1
 800d1f2:	d00a      	beq.n	800d20a <__gethex+0x1da>
 800d1f4:	455b      	cmp	r3, fp
 800d1f6:	dd06      	ble.n	800d206 <__gethex+0x1d6>
 800d1f8:	f1a8 0102 	sub.w	r1, r8, #2
 800d1fc:	4620      	mov	r0, r4
 800d1fe:	f7fe f9d5 	bl	800b5ac <__any_on>
 800d202:	2800      	cmp	r0, #0
 800d204:	d138      	bne.n	800d278 <__gethex+0x248>
 800d206:	f04f 0b02 	mov.w	fp, #2
 800d20a:	4641      	mov	r1, r8
 800d20c:	4620      	mov	r0, r4
 800d20e:	f7ff fea7 	bl	800cf60 <rshift>
 800d212:	4446      	add	r6, r8
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	42b3      	cmp	r3, r6
 800d218:	da41      	bge.n	800d29e <__gethex+0x26e>
 800d21a:	4621      	mov	r1, r4
 800d21c:	4648      	mov	r0, r9
 800d21e:	f7fd fd79 	bl	800ad14 <_Bfree>
 800d222:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d224:	2300      	movs	r3, #0
 800d226:	6013      	str	r3, [r2, #0]
 800d228:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d22c:	e78a      	b.n	800d144 <__gethex+0x114>
 800d22e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d232:	2a2e      	cmp	r2, #46	; 0x2e
 800d234:	d014      	beq.n	800d260 <__gethex+0x230>
 800d236:	2b20      	cmp	r3, #32
 800d238:	d106      	bne.n	800d248 <__gethex+0x218>
 800d23a:	9b01      	ldr	r3, [sp, #4]
 800d23c:	f843 bb04 	str.w	fp, [r3], #4
 800d240:	f04f 0b00 	mov.w	fp, #0
 800d244:	9301      	str	r3, [sp, #4]
 800d246:	465b      	mov	r3, fp
 800d248:	7828      	ldrb	r0, [r5, #0]
 800d24a:	9303      	str	r3, [sp, #12]
 800d24c:	f7ff feda 	bl	800d004 <__hexdig_fun>
 800d250:	9b03      	ldr	r3, [sp, #12]
 800d252:	f000 000f 	and.w	r0, r0, #15
 800d256:	4098      	lsls	r0, r3
 800d258:	ea4b 0b00 	orr.w	fp, fp, r0
 800d25c:	3304      	adds	r3, #4
 800d25e:	e7a1      	b.n	800d1a4 <__gethex+0x174>
 800d260:	45a8      	cmp	r8, r5
 800d262:	d8e8      	bhi.n	800d236 <__gethex+0x206>
 800d264:	2201      	movs	r2, #1
 800d266:	4628      	mov	r0, r5
 800d268:	9303      	str	r3, [sp, #12]
 800d26a:	f7ff fe0a 	bl	800ce82 <strncmp>
 800d26e:	4926      	ldr	r1, [pc, #152]	; (800d308 <__gethex+0x2d8>)
 800d270:	9b03      	ldr	r3, [sp, #12]
 800d272:	2800      	cmp	r0, #0
 800d274:	d1df      	bne.n	800d236 <__gethex+0x206>
 800d276:	e795      	b.n	800d1a4 <__gethex+0x174>
 800d278:	f04f 0b03 	mov.w	fp, #3
 800d27c:	e7c5      	b.n	800d20a <__gethex+0x1da>
 800d27e:	da0b      	bge.n	800d298 <__gethex+0x268>
 800d280:	eba5 0800 	sub.w	r8, r5, r0
 800d284:	4621      	mov	r1, r4
 800d286:	4642      	mov	r2, r8
 800d288:	4648      	mov	r0, r9
 800d28a:	f7fd ff5d 	bl	800b148 <__lshift>
 800d28e:	eba6 0608 	sub.w	r6, r6, r8
 800d292:	4604      	mov	r4, r0
 800d294:	f100 0a14 	add.w	sl, r0, #20
 800d298:	f04f 0b00 	mov.w	fp, #0
 800d29c:	e7ba      	b.n	800d214 <__gethex+0x1e4>
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	42b3      	cmp	r3, r6
 800d2a2:	dd73      	ble.n	800d38c <__gethex+0x35c>
 800d2a4:	1b9e      	subs	r6, r3, r6
 800d2a6:	42b5      	cmp	r5, r6
 800d2a8:	dc34      	bgt.n	800d314 <__gethex+0x2e4>
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	2b02      	cmp	r3, #2
 800d2ae:	d023      	beq.n	800d2f8 <__gethex+0x2c8>
 800d2b0:	2b03      	cmp	r3, #3
 800d2b2:	d025      	beq.n	800d300 <__gethex+0x2d0>
 800d2b4:	2b01      	cmp	r3, #1
 800d2b6:	d115      	bne.n	800d2e4 <__gethex+0x2b4>
 800d2b8:	42b5      	cmp	r5, r6
 800d2ba:	d113      	bne.n	800d2e4 <__gethex+0x2b4>
 800d2bc:	2d01      	cmp	r5, #1
 800d2be:	d10b      	bne.n	800d2d8 <__gethex+0x2a8>
 800d2c0:	9a02      	ldr	r2, [sp, #8]
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	6013      	str	r3, [r2, #0]
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	6123      	str	r3, [r4, #16]
 800d2ca:	f8ca 3000 	str.w	r3, [sl]
 800d2ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d2d0:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d2d4:	601c      	str	r4, [r3, #0]
 800d2d6:	e735      	b.n	800d144 <__gethex+0x114>
 800d2d8:	1e69      	subs	r1, r5, #1
 800d2da:	4620      	mov	r0, r4
 800d2dc:	f7fe f966 	bl	800b5ac <__any_on>
 800d2e0:	2800      	cmp	r0, #0
 800d2e2:	d1ed      	bne.n	800d2c0 <__gethex+0x290>
 800d2e4:	4621      	mov	r1, r4
 800d2e6:	4648      	mov	r0, r9
 800d2e8:	f7fd fd14 	bl	800ad14 <_Bfree>
 800d2ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	6013      	str	r3, [r2, #0]
 800d2f2:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d2f6:	e725      	b.n	800d144 <__gethex+0x114>
 800d2f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d1f2      	bne.n	800d2e4 <__gethex+0x2b4>
 800d2fe:	e7df      	b.n	800d2c0 <__gethex+0x290>
 800d300:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d302:	2b00      	cmp	r3, #0
 800d304:	d1dc      	bne.n	800d2c0 <__gethex+0x290>
 800d306:	e7ed      	b.n	800d2e4 <__gethex+0x2b4>
 800d308:	0800df9c 	.word	0x0800df9c
 800d30c:	0800de33 	.word	0x0800de33
 800d310:	0800e161 	.word	0x0800e161
 800d314:	f106 38ff 	add.w	r8, r6, #4294967295
 800d318:	f1bb 0f00 	cmp.w	fp, #0
 800d31c:	d133      	bne.n	800d386 <__gethex+0x356>
 800d31e:	f1b8 0f00 	cmp.w	r8, #0
 800d322:	d004      	beq.n	800d32e <__gethex+0x2fe>
 800d324:	4641      	mov	r1, r8
 800d326:	4620      	mov	r0, r4
 800d328:	f7fe f940 	bl	800b5ac <__any_on>
 800d32c:	4683      	mov	fp, r0
 800d32e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d332:	2301      	movs	r3, #1
 800d334:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d338:	f008 081f 	and.w	r8, r8, #31
 800d33c:	fa03 f308 	lsl.w	r3, r3, r8
 800d340:	4213      	tst	r3, r2
 800d342:	4631      	mov	r1, r6
 800d344:	4620      	mov	r0, r4
 800d346:	bf18      	it	ne
 800d348:	f04b 0b02 	orrne.w	fp, fp, #2
 800d34c:	1bad      	subs	r5, r5, r6
 800d34e:	f7ff fe07 	bl	800cf60 <rshift>
 800d352:	687e      	ldr	r6, [r7, #4]
 800d354:	f04f 0802 	mov.w	r8, #2
 800d358:	f1bb 0f00 	cmp.w	fp, #0
 800d35c:	d04a      	beq.n	800d3f4 <__gethex+0x3c4>
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	2b02      	cmp	r3, #2
 800d362:	d016      	beq.n	800d392 <__gethex+0x362>
 800d364:	2b03      	cmp	r3, #3
 800d366:	d018      	beq.n	800d39a <__gethex+0x36a>
 800d368:	2b01      	cmp	r3, #1
 800d36a:	d109      	bne.n	800d380 <__gethex+0x350>
 800d36c:	f01b 0f02 	tst.w	fp, #2
 800d370:	d006      	beq.n	800d380 <__gethex+0x350>
 800d372:	f8da 3000 	ldr.w	r3, [sl]
 800d376:	ea4b 0b03 	orr.w	fp, fp, r3
 800d37a:	f01b 0f01 	tst.w	fp, #1
 800d37e:	d10f      	bne.n	800d3a0 <__gethex+0x370>
 800d380:	f048 0810 	orr.w	r8, r8, #16
 800d384:	e036      	b.n	800d3f4 <__gethex+0x3c4>
 800d386:	f04f 0b01 	mov.w	fp, #1
 800d38a:	e7d0      	b.n	800d32e <__gethex+0x2fe>
 800d38c:	f04f 0801 	mov.w	r8, #1
 800d390:	e7e2      	b.n	800d358 <__gethex+0x328>
 800d392:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d394:	f1c3 0301 	rsb	r3, r3, #1
 800d398:	930f      	str	r3, [sp, #60]	; 0x3c
 800d39a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d0ef      	beq.n	800d380 <__gethex+0x350>
 800d3a0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d3a4:	f104 0214 	add.w	r2, r4, #20
 800d3a8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d3ac:	9301      	str	r3, [sp, #4]
 800d3ae:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	4694      	mov	ip, r2
 800d3b6:	f852 1b04 	ldr.w	r1, [r2], #4
 800d3ba:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d3be:	d01e      	beq.n	800d3fe <__gethex+0x3ce>
 800d3c0:	3101      	adds	r1, #1
 800d3c2:	f8cc 1000 	str.w	r1, [ip]
 800d3c6:	f1b8 0f02 	cmp.w	r8, #2
 800d3ca:	f104 0214 	add.w	r2, r4, #20
 800d3ce:	d13d      	bne.n	800d44c <__gethex+0x41c>
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	3b01      	subs	r3, #1
 800d3d4:	42ab      	cmp	r3, r5
 800d3d6:	d10b      	bne.n	800d3f0 <__gethex+0x3c0>
 800d3d8:	1169      	asrs	r1, r5, #5
 800d3da:	2301      	movs	r3, #1
 800d3dc:	f005 051f 	and.w	r5, r5, #31
 800d3e0:	fa03 f505 	lsl.w	r5, r3, r5
 800d3e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d3e8:	421d      	tst	r5, r3
 800d3ea:	bf18      	it	ne
 800d3ec:	f04f 0801 	movne.w	r8, #1
 800d3f0:	f048 0820 	orr.w	r8, r8, #32
 800d3f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d3f6:	601c      	str	r4, [r3, #0]
 800d3f8:	9b02      	ldr	r3, [sp, #8]
 800d3fa:	601e      	str	r6, [r3, #0]
 800d3fc:	e6a2      	b.n	800d144 <__gethex+0x114>
 800d3fe:	4290      	cmp	r0, r2
 800d400:	f842 3c04 	str.w	r3, [r2, #-4]
 800d404:	d8d6      	bhi.n	800d3b4 <__gethex+0x384>
 800d406:	68a2      	ldr	r2, [r4, #8]
 800d408:	4593      	cmp	fp, r2
 800d40a:	db17      	blt.n	800d43c <__gethex+0x40c>
 800d40c:	6861      	ldr	r1, [r4, #4]
 800d40e:	4648      	mov	r0, r9
 800d410:	3101      	adds	r1, #1
 800d412:	f7fd fc3f 	bl	800ac94 <_Balloc>
 800d416:	4682      	mov	sl, r0
 800d418:	b918      	cbnz	r0, 800d422 <__gethex+0x3f2>
 800d41a:	4b1b      	ldr	r3, [pc, #108]	; (800d488 <__gethex+0x458>)
 800d41c:	4602      	mov	r2, r0
 800d41e:	2184      	movs	r1, #132	; 0x84
 800d420:	e6b3      	b.n	800d18a <__gethex+0x15a>
 800d422:	6922      	ldr	r2, [r4, #16]
 800d424:	3202      	adds	r2, #2
 800d426:	f104 010c 	add.w	r1, r4, #12
 800d42a:	0092      	lsls	r2, r2, #2
 800d42c:	300c      	adds	r0, #12
 800d42e:	f7ff fd4b 	bl	800cec8 <memcpy>
 800d432:	4621      	mov	r1, r4
 800d434:	4648      	mov	r0, r9
 800d436:	f7fd fc6d 	bl	800ad14 <_Bfree>
 800d43a:	4654      	mov	r4, sl
 800d43c:	6922      	ldr	r2, [r4, #16]
 800d43e:	1c51      	adds	r1, r2, #1
 800d440:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d444:	6121      	str	r1, [r4, #16]
 800d446:	2101      	movs	r1, #1
 800d448:	6151      	str	r1, [r2, #20]
 800d44a:	e7bc      	b.n	800d3c6 <__gethex+0x396>
 800d44c:	6921      	ldr	r1, [r4, #16]
 800d44e:	4559      	cmp	r1, fp
 800d450:	dd0b      	ble.n	800d46a <__gethex+0x43a>
 800d452:	2101      	movs	r1, #1
 800d454:	4620      	mov	r0, r4
 800d456:	f7ff fd83 	bl	800cf60 <rshift>
 800d45a:	68bb      	ldr	r3, [r7, #8]
 800d45c:	3601      	adds	r6, #1
 800d45e:	42b3      	cmp	r3, r6
 800d460:	f6ff aedb 	blt.w	800d21a <__gethex+0x1ea>
 800d464:	f04f 0801 	mov.w	r8, #1
 800d468:	e7c2      	b.n	800d3f0 <__gethex+0x3c0>
 800d46a:	f015 051f 	ands.w	r5, r5, #31
 800d46e:	d0f9      	beq.n	800d464 <__gethex+0x434>
 800d470:	9b01      	ldr	r3, [sp, #4]
 800d472:	441a      	add	r2, r3
 800d474:	f1c5 0520 	rsb	r5, r5, #32
 800d478:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d47c:	f7fd fcfc 	bl	800ae78 <__hi0bits>
 800d480:	42a8      	cmp	r0, r5
 800d482:	dbe6      	blt.n	800d452 <__gethex+0x422>
 800d484:	e7ee      	b.n	800d464 <__gethex+0x434>
 800d486:	bf00      	nop
 800d488:	0800de33 	.word	0x0800de33

0800d48c <L_shift>:
 800d48c:	f1c2 0208 	rsb	r2, r2, #8
 800d490:	0092      	lsls	r2, r2, #2
 800d492:	b570      	push	{r4, r5, r6, lr}
 800d494:	f1c2 0620 	rsb	r6, r2, #32
 800d498:	6843      	ldr	r3, [r0, #4]
 800d49a:	6804      	ldr	r4, [r0, #0]
 800d49c:	fa03 f506 	lsl.w	r5, r3, r6
 800d4a0:	432c      	orrs	r4, r5
 800d4a2:	40d3      	lsrs	r3, r2
 800d4a4:	6004      	str	r4, [r0, #0]
 800d4a6:	f840 3f04 	str.w	r3, [r0, #4]!
 800d4aa:	4288      	cmp	r0, r1
 800d4ac:	d3f4      	bcc.n	800d498 <L_shift+0xc>
 800d4ae:	bd70      	pop	{r4, r5, r6, pc}

0800d4b0 <__match>:
 800d4b0:	b530      	push	{r4, r5, lr}
 800d4b2:	6803      	ldr	r3, [r0, #0]
 800d4b4:	3301      	adds	r3, #1
 800d4b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d4ba:	b914      	cbnz	r4, 800d4c2 <__match+0x12>
 800d4bc:	6003      	str	r3, [r0, #0]
 800d4be:	2001      	movs	r0, #1
 800d4c0:	bd30      	pop	{r4, r5, pc}
 800d4c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d4ca:	2d19      	cmp	r5, #25
 800d4cc:	bf98      	it	ls
 800d4ce:	3220      	addls	r2, #32
 800d4d0:	42a2      	cmp	r2, r4
 800d4d2:	d0f0      	beq.n	800d4b6 <__match+0x6>
 800d4d4:	2000      	movs	r0, #0
 800d4d6:	e7f3      	b.n	800d4c0 <__match+0x10>

0800d4d8 <__hexnan>:
 800d4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4dc:	680b      	ldr	r3, [r1, #0]
 800d4de:	6801      	ldr	r1, [r0, #0]
 800d4e0:	115e      	asrs	r6, r3, #5
 800d4e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d4e6:	f013 031f 	ands.w	r3, r3, #31
 800d4ea:	b087      	sub	sp, #28
 800d4ec:	bf18      	it	ne
 800d4ee:	3604      	addne	r6, #4
 800d4f0:	2500      	movs	r5, #0
 800d4f2:	1f37      	subs	r7, r6, #4
 800d4f4:	4682      	mov	sl, r0
 800d4f6:	4690      	mov	r8, r2
 800d4f8:	9301      	str	r3, [sp, #4]
 800d4fa:	f846 5c04 	str.w	r5, [r6, #-4]
 800d4fe:	46b9      	mov	r9, r7
 800d500:	463c      	mov	r4, r7
 800d502:	9502      	str	r5, [sp, #8]
 800d504:	46ab      	mov	fp, r5
 800d506:	784a      	ldrb	r2, [r1, #1]
 800d508:	1c4b      	adds	r3, r1, #1
 800d50a:	9303      	str	r3, [sp, #12]
 800d50c:	b342      	cbz	r2, 800d560 <__hexnan+0x88>
 800d50e:	4610      	mov	r0, r2
 800d510:	9105      	str	r1, [sp, #20]
 800d512:	9204      	str	r2, [sp, #16]
 800d514:	f7ff fd76 	bl	800d004 <__hexdig_fun>
 800d518:	2800      	cmp	r0, #0
 800d51a:	d14f      	bne.n	800d5bc <__hexnan+0xe4>
 800d51c:	9a04      	ldr	r2, [sp, #16]
 800d51e:	9905      	ldr	r1, [sp, #20]
 800d520:	2a20      	cmp	r2, #32
 800d522:	d818      	bhi.n	800d556 <__hexnan+0x7e>
 800d524:	9b02      	ldr	r3, [sp, #8]
 800d526:	459b      	cmp	fp, r3
 800d528:	dd13      	ble.n	800d552 <__hexnan+0x7a>
 800d52a:	454c      	cmp	r4, r9
 800d52c:	d206      	bcs.n	800d53c <__hexnan+0x64>
 800d52e:	2d07      	cmp	r5, #7
 800d530:	dc04      	bgt.n	800d53c <__hexnan+0x64>
 800d532:	462a      	mov	r2, r5
 800d534:	4649      	mov	r1, r9
 800d536:	4620      	mov	r0, r4
 800d538:	f7ff ffa8 	bl	800d48c <L_shift>
 800d53c:	4544      	cmp	r4, r8
 800d53e:	d950      	bls.n	800d5e2 <__hexnan+0x10a>
 800d540:	2300      	movs	r3, #0
 800d542:	f1a4 0904 	sub.w	r9, r4, #4
 800d546:	f844 3c04 	str.w	r3, [r4, #-4]
 800d54a:	f8cd b008 	str.w	fp, [sp, #8]
 800d54e:	464c      	mov	r4, r9
 800d550:	461d      	mov	r5, r3
 800d552:	9903      	ldr	r1, [sp, #12]
 800d554:	e7d7      	b.n	800d506 <__hexnan+0x2e>
 800d556:	2a29      	cmp	r2, #41	; 0x29
 800d558:	d155      	bne.n	800d606 <__hexnan+0x12e>
 800d55a:	3102      	adds	r1, #2
 800d55c:	f8ca 1000 	str.w	r1, [sl]
 800d560:	f1bb 0f00 	cmp.w	fp, #0
 800d564:	d04f      	beq.n	800d606 <__hexnan+0x12e>
 800d566:	454c      	cmp	r4, r9
 800d568:	d206      	bcs.n	800d578 <__hexnan+0xa0>
 800d56a:	2d07      	cmp	r5, #7
 800d56c:	dc04      	bgt.n	800d578 <__hexnan+0xa0>
 800d56e:	462a      	mov	r2, r5
 800d570:	4649      	mov	r1, r9
 800d572:	4620      	mov	r0, r4
 800d574:	f7ff ff8a 	bl	800d48c <L_shift>
 800d578:	4544      	cmp	r4, r8
 800d57a:	d934      	bls.n	800d5e6 <__hexnan+0x10e>
 800d57c:	f1a8 0204 	sub.w	r2, r8, #4
 800d580:	4623      	mov	r3, r4
 800d582:	f853 1b04 	ldr.w	r1, [r3], #4
 800d586:	f842 1f04 	str.w	r1, [r2, #4]!
 800d58a:	429f      	cmp	r7, r3
 800d58c:	d2f9      	bcs.n	800d582 <__hexnan+0xaa>
 800d58e:	1b3b      	subs	r3, r7, r4
 800d590:	f023 0303 	bic.w	r3, r3, #3
 800d594:	3304      	adds	r3, #4
 800d596:	3e03      	subs	r6, #3
 800d598:	3401      	adds	r4, #1
 800d59a:	42a6      	cmp	r6, r4
 800d59c:	bf38      	it	cc
 800d59e:	2304      	movcc	r3, #4
 800d5a0:	4443      	add	r3, r8
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	f843 2b04 	str.w	r2, [r3], #4
 800d5a8:	429f      	cmp	r7, r3
 800d5aa:	d2fb      	bcs.n	800d5a4 <__hexnan+0xcc>
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	b91b      	cbnz	r3, 800d5b8 <__hexnan+0xe0>
 800d5b0:	4547      	cmp	r7, r8
 800d5b2:	d126      	bne.n	800d602 <__hexnan+0x12a>
 800d5b4:	2301      	movs	r3, #1
 800d5b6:	603b      	str	r3, [r7, #0]
 800d5b8:	2005      	movs	r0, #5
 800d5ba:	e025      	b.n	800d608 <__hexnan+0x130>
 800d5bc:	3501      	adds	r5, #1
 800d5be:	2d08      	cmp	r5, #8
 800d5c0:	f10b 0b01 	add.w	fp, fp, #1
 800d5c4:	dd06      	ble.n	800d5d4 <__hexnan+0xfc>
 800d5c6:	4544      	cmp	r4, r8
 800d5c8:	d9c3      	bls.n	800d552 <__hexnan+0x7a>
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	f844 3c04 	str.w	r3, [r4, #-4]
 800d5d0:	2501      	movs	r5, #1
 800d5d2:	3c04      	subs	r4, #4
 800d5d4:	6822      	ldr	r2, [r4, #0]
 800d5d6:	f000 000f 	and.w	r0, r0, #15
 800d5da:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d5de:	6020      	str	r0, [r4, #0]
 800d5e0:	e7b7      	b.n	800d552 <__hexnan+0x7a>
 800d5e2:	2508      	movs	r5, #8
 800d5e4:	e7b5      	b.n	800d552 <__hexnan+0x7a>
 800d5e6:	9b01      	ldr	r3, [sp, #4]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d0df      	beq.n	800d5ac <__hexnan+0xd4>
 800d5ec:	f1c3 0320 	rsb	r3, r3, #32
 800d5f0:	f04f 32ff 	mov.w	r2, #4294967295
 800d5f4:	40da      	lsrs	r2, r3
 800d5f6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d5fa:	4013      	ands	r3, r2
 800d5fc:	f846 3c04 	str.w	r3, [r6, #-4]
 800d600:	e7d4      	b.n	800d5ac <__hexnan+0xd4>
 800d602:	3f04      	subs	r7, #4
 800d604:	e7d2      	b.n	800d5ac <__hexnan+0xd4>
 800d606:	2004      	movs	r0, #4
 800d608:	b007      	add	sp, #28
 800d60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d60e <__ascii_mbtowc>:
 800d60e:	b082      	sub	sp, #8
 800d610:	b901      	cbnz	r1, 800d614 <__ascii_mbtowc+0x6>
 800d612:	a901      	add	r1, sp, #4
 800d614:	b142      	cbz	r2, 800d628 <__ascii_mbtowc+0x1a>
 800d616:	b14b      	cbz	r3, 800d62c <__ascii_mbtowc+0x1e>
 800d618:	7813      	ldrb	r3, [r2, #0]
 800d61a:	600b      	str	r3, [r1, #0]
 800d61c:	7812      	ldrb	r2, [r2, #0]
 800d61e:	1e10      	subs	r0, r2, #0
 800d620:	bf18      	it	ne
 800d622:	2001      	movne	r0, #1
 800d624:	b002      	add	sp, #8
 800d626:	4770      	bx	lr
 800d628:	4610      	mov	r0, r2
 800d62a:	e7fb      	b.n	800d624 <__ascii_mbtowc+0x16>
 800d62c:	f06f 0001 	mvn.w	r0, #1
 800d630:	e7f8      	b.n	800d624 <__ascii_mbtowc+0x16>

0800d632 <_realloc_r>:
 800d632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d636:	4680      	mov	r8, r0
 800d638:	4614      	mov	r4, r2
 800d63a:	460e      	mov	r6, r1
 800d63c:	b921      	cbnz	r1, 800d648 <_realloc_r+0x16>
 800d63e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d642:	4611      	mov	r1, r2
 800d644:	f7fd ba9a 	b.w	800ab7c <_malloc_r>
 800d648:	b92a      	cbnz	r2, 800d656 <_realloc_r+0x24>
 800d64a:	f7fd fa23 	bl	800aa94 <_free_r>
 800d64e:	4625      	mov	r5, r4
 800d650:	4628      	mov	r0, r5
 800d652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d656:	f000 f8b6 	bl	800d7c6 <_malloc_usable_size_r>
 800d65a:	4284      	cmp	r4, r0
 800d65c:	4607      	mov	r7, r0
 800d65e:	d802      	bhi.n	800d666 <_realloc_r+0x34>
 800d660:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d664:	d812      	bhi.n	800d68c <_realloc_r+0x5a>
 800d666:	4621      	mov	r1, r4
 800d668:	4640      	mov	r0, r8
 800d66a:	f7fd fa87 	bl	800ab7c <_malloc_r>
 800d66e:	4605      	mov	r5, r0
 800d670:	2800      	cmp	r0, #0
 800d672:	d0ed      	beq.n	800d650 <_realloc_r+0x1e>
 800d674:	42bc      	cmp	r4, r7
 800d676:	4622      	mov	r2, r4
 800d678:	4631      	mov	r1, r6
 800d67a:	bf28      	it	cs
 800d67c:	463a      	movcs	r2, r7
 800d67e:	f7ff fc23 	bl	800cec8 <memcpy>
 800d682:	4631      	mov	r1, r6
 800d684:	4640      	mov	r0, r8
 800d686:	f7fd fa05 	bl	800aa94 <_free_r>
 800d68a:	e7e1      	b.n	800d650 <_realloc_r+0x1e>
 800d68c:	4635      	mov	r5, r6
 800d68e:	e7df      	b.n	800d650 <_realloc_r+0x1e>

0800d690 <_strtoul_l.constprop.0>:
 800d690:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d694:	4f36      	ldr	r7, [pc, #216]	; (800d770 <_strtoul_l.constprop.0+0xe0>)
 800d696:	4686      	mov	lr, r0
 800d698:	460d      	mov	r5, r1
 800d69a:	4628      	mov	r0, r5
 800d69c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d6a0:	5d3e      	ldrb	r6, [r7, r4]
 800d6a2:	f016 0608 	ands.w	r6, r6, #8
 800d6a6:	d1f8      	bne.n	800d69a <_strtoul_l.constprop.0+0xa>
 800d6a8:	2c2d      	cmp	r4, #45	; 0x2d
 800d6aa:	d130      	bne.n	800d70e <_strtoul_l.constprop.0+0x7e>
 800d6ac:	782c      	ldrb	r4, [r5, #0]
 800d6ae:	2601      	movs	r6, #1
 800d6b0:	1c85      	adds	r5, r0, #2
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d057      	beq.n	800d766 <_strtoul_l.constprop.0+0xd6>
 800d6b6:	2b10      	cmp	r3, #16
 800d6b8:	d109      	bne.n	800d6ce <_strtoul_l.constprop.0+0x3e>
 800d6ba:	2c30      	cmp	r4, #48	; 0x30
 800d6bc:	d107      	bne.n	800d6ce <_strtoul_l.constprop.0+0x3e>
 800d6be:	7828      	ldrb	r0, [r5, #0]
 800d6c0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d6c4:	2858      	cmp	r0, #88	; 0x58
 800d6c6:	d149      	bne.n	800d75c <_strtoul_l.constprop.0+0xcc>
 800d6c8:	786c      	ldrb	r4, [r5, #1]
 800d6ca:	2310      	movs	r3, #16
 800d6cc:	3502      	adds	r5, #2
 800d6ce:	f04f 38ff 	mov.w	r8, #4294967295
 800d6d2:	2700      	movs	r7, #0
 800d6d4:	fbb8 f8f3 	udiv	r8, r8, r3
 800d6d8:	fb03 f908 	mul.w	r9, r3, r8
 800d6dc:	ea6f 0909 	mvn.w	r9, r9
 800d6e0:	4638      	mov	r0, r7
 800d6e2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d6e6:	f1bc 0f09 	cmp.w	ip, #9
 800d6ea:	d815      	bhi.n	800d718 <_strtoul_l.constprop.0+0x88>
 800d6ec:	4664      	mov	r4, ip
 800d6ee:	42a3      	cmp	r3, r4
 800d6f0:	dd23      	ble.n	800d73a <_strtoul_l.constprop.0+0xaa>
 800d6f2:	f1b7 3fff 	cmp.w	r7, #4294967295
 800d6f6:	d007      	beq.n	800d708 <_strtoul_l.constprop.0+0x78>
 800d6f8:	4580      	cmp	r8, r0
 800d6fa:	d31b      	bcc.n	800d734 <_strtoul_l.constprop.0+0xa4>
 800d6fc:	d101      	bne.n	800d702 <_strtoul_l.constprop.0+0x72>
 800d6fe:	45a1      	cmp	r9, r4
 800d700:	db18      	blt.n	800d734 <_strtoul_l.constprop.0+0xa4>
 800d702:	fb00 4003 	mla	r0, r0, r3, r4
 800d706:	2701      	movs	r7, #1
 800d708:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d70c:	e7e9      	b.n	800d6e2 <_strtoul_l.constprop.0+0x52>
 800d70e:	2c2b      	cmp	r4, #43	; 0x2b
 800d710:	bf04      	itt	eq
 800d712:	782c      	ldrbeq	r4, [r5, #0]
 800d714:	1c85      	addeq	r5, r0, #2
 800d716:	e7cc      	b.n	800d6b2 <_strtoul_l.constprop.0+0x22>
 800d718:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d71c:	f1bc 0f19 	cmp.w	ip, #25
 800d720:	d801      	bhi.n	800d726 <_strtoul_l.constprop.0+0x96>
 800d722:	3c37      	subs	r4, #55	; 0x37
 800d724:	e7e3      	b.n	800d6ee <_strtoul_l.constprop.0+0x5e>
 800d726:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d72a:	f1bc 0f19 	cmp.w	ip, #25
 800d72e:	d804      	bhi.n	800d73a <_strtoul_l.constprop.0+0xaa>
 800d730:	3c57      	subs	r4, #87	; 0x57
 800d732:	e7dc      	b.n	800d6ee <_strtoul_l.constprop.0+0x5e>
 800d734:	f04f 37ff 	mov.w	r7, #4294967295
 800d738:	e7e6      	b.n	800d708 <_strtoul_l.constprop.0+0x78>
 800d73a:	1c7b      	adds	r3, r7, #1
 800d73c:	d106      	bne.n	800d74c <_strtoul_l.constprop.0+0xbc>
 800d73e:	2322      	movs	r3, #34	; 0x22
 800d740:	f8ce 3000 	str.w	r3, [lr]
 800d744:	4638      	mov	r0, r7
 800d746:	b932      	cbnz	r2, 800d756 <_strtoul_l.constprop.0+0xc6>
 800d748:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d74c:	b106      	cbz	r6, 800d750 <_strtoul_l.constprop.0+0xc0>
 800d74e:	4240      	negs	r0, r0
 800d750:	2a00      	cmp	r2, #0
 800d752:	d0f9      	beq.n	800d748 <_strtoul_l.constprop.0+0xb8>
 800d754:	b107      	cbz	r7, 800d758 <_strtoul_l.constprop.0+0xc8>
 800d756:	1e69      	subs	r1, r5, #1
 800d758:	6011      	str	r1, [r2, #0]
 800d75a:	e7f5      	b.n	800d748 <_strtoul_l.constprop.0+0xb8>
 800d75c:	2430      	movs	r4, #48	; 0x30
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d1b5      	bne.n	800d6ce <_strtoul_l.constprop.0+0x3e>
 800d762:	2308      	movs	r3, #8
 800d764:	e7b3      	b.n	800d6ce <_strtoul_l.constprop.0+0x3e>
 800d766:	2c30      	cmp	r4, #48	; 0x30
 800d768:	d0a9      	beq.n	800d6be <_strtoul_l.constprop.0+0x2e>
 800d76a:	230a      	movs	r3, #10
 800d76c:	e7af      	b.n	800d6ce <_strtoul_l.constprop.0+0x3e>
 800d76e:	bf00      	nop
 800d770:	0800dff1 	.word	0x0800dff1

0800d774 <_strtoul_r>:
 800d774:	f7ff bf8c 	b.w	800d690 <_strtoul_l.constprop.0>

0800d778 <__ascii_wctomb>:
 800d778:	b149      	cbz	r1, 800d78e <__ascii_wctomb+0x16>
 800d77a:	2aff      	cmp	r2, #255	; 0xff
 800d77c:	bf85      	ittet	hi
 800d77e:	238a      	movhi	r3, #138	; 0x8a
 800d780:	6003      	strhi	r3, [r0, #0]
 800d782:	700a      	strbls	r2, [r1, #0]
 800d784:	f04f 30ff 	movhi.w	r0, #4294967295
 800d788:	bf98      	it	ls
 800d78a:	2001      	movls	r0, #1
 800d78c:	4770      	bx	lr
 800d78e:	4608      	mov	r0, r1
 800d790:	4770      	bx	lr
	...

0800d794 <fiprintf>:
 800d794:	b40e      	push	{r1, r2, r3}
 800d796:	b503      	push	{r0, r1, lr}
 800d798:	4601      	mov	r1, r0
 800d79a:	ab03      	add	r3, sp, #12
 800d79c:	4805      	ldr	r0, [pc, #20]	; (800d7b4 <fiprintf+0x20>)
 800d79e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7a2:	6800      	ldr	r0, [r0, #0]
 800d7a4:	9301      	str	r3, [sp, #4]
 800d7a6:	f000 f83f 	bl	800d828 <_vfiprintf_r>
 800d7aa:	b002      	add	sp, #8
 800d7ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7b0:	b003      	add	sp, #12
 800d7b2:	4770      	bx	lr
 800d7b4:	20000064 	.word	0x20000064

0800d7b8 <abort>:
 800d7b8:	b508      	push	{r3, lr}
 800d7ba:	2006      	movs	r0, #6
 800d7bc:	f000 fa0c 	bl	800dbd8 <raise>
 800d7c0:	2001      	movs	r0, #1
 800d7c2:	f7f4 fff9 	bl	80027b8 <_exit>

0800d7c6 <_malloc_usable_size_r>:
 800d7c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7ca:	1f18      	subs	r0, r3, #4
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	bfbc      	itt	lt
 800d7d0:	580b      	ldrlt	r3, [r1, r0]
 800d7d2:	18c0      	addlt	r0, r0, r3
 800d7d4:	4770      	bx	lr

0800d7d6 <__sfputc_r>:
 800d7d6:	6893      	ldr	r3, [r2, #8]
 800d7d8:	3b01      	subs	r3, #1
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	b410      	push	{r4}
 800d7de:	6093      	str	r3, [r2, #8]
 800d7e0:	da08      	bge.n	800d7f4 <__sfputc_r+0x1e>
 800d7e2:	6994      	ldr	r4, [r2, #24]
 800d7e4:	42a3      	cmp	r3, r4
 800d7e6:	db01      	blt.n	800d7ec <__sfputc_r+0x16>
 800d7e8:	290a      	cmp	r1, #10
 800d7ea:	d103      	bne.n	800d7f4 <__sfputc_r+0x1e>
 800d7ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7f0:	f000 b934 	b.w	800da5c <__swbuf_r>
 800d7f4:	6813      	ldr	r3, [r2, #0]
 800d7f6:	1c58      	adds	r0, r3, #1
 800d7f8:	6010      	str	r0, [r2, #0]
 800d7fa:	7019      	strb	r1, [r3, #0]
 800d7fc:	4608      	mov	r0, r1
 800d7fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d802:	4770      	bx	lr

0800d804 <__sfputs_r>:
 800d804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d806:	4606      	mov	r6, r0
 800d808:	460f      	mov	r7, r1
 800d80a:	4614      	mov	r4, r2
 800d80c:	18d5      	adds	r5, r2, r3
 800d80e:	42ac      	cmp	r4, r5
 800d810:	d101      	bne.n	800d816 <__sfputs_r+0x12>
 800d812:	2000      	movs	r0, #0
 800d814:	e007      	b.n	800d826 <__sfputs_r+0x22>
 800d816:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d81a:	463a      	mov	r2, r7
 800d81c:	4630      	mov	r0, r6
 800d81e:	f7ff ffda 	bl	800d7d6 <__sfputc_r>
 800d822:	1c43      	adds	r3, r0, #1
 800d824:	d1f3      	bne.n	800d80e <__sfputs_r+0xa>
 800d826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d828 <_vfiprintf_r>:
 800d828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d82c:	460d      	mov	r5, r1
 800d82e:	b09d      	sub	sp, #116	; 0x74
 800d830:	4614      	mov	r4, r2
 800d832:	4698      	mov	r8, r3
 800d834:	4606      	mov	r6, r0
 800d836:	b118      	cbz	r0, 800d840 <_vfiprintf_r+0x18>
 800d838:	6a03      	ldr	r3, [r0, #32]
 800d83a:	b90b      	cbnz	r3, 800d840 <_vfiprintf_r+0x18>
 800d83c:	f7fc f960 	bl	8009b00 <__sinit>
 800d840:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d842:	07d9      	lsls	r1, r3, #31
 800d844:	d405      	bmi.n	800d852 <_vfiprintf_r+0x2a>
 800d846:	89ab      	ldrh	r3, [r5, #12]
 800d848:	059a      	lsls	r2, r3, #22
 800d84a:	d402      	bmi.n	800d852 <_vfiprintf_r+0x2a>
 800d84c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d84e:	f7fc fa9c 	bl	8009d8a <__retarget_lock_acquire_recursive>
 800d852:	89ab      	ldrh	r3, [r5, #12]
 800d854:	071b      	lsls	r3, r3, #28
 800d856:	d501      	bpl.n	800d85c <_vfiprintf_r+0x34>
 800d858:	692b      	ldr	r3, [r5, #16]
 800d85a:	b99b      	cbnz	r3, 800d884 <_vfiprintf_r+0x5c>
 800d85c:	4629      	mov	r1, r5
 800d85e:	4630      	mov	r0, r6
 800d860:	f000 f93a 	bl	800dad8 <__swsetup_r>
 800d864:	b170      	cbz	r0, 800d884 <_vfiprintf_r+0x5c>
 800d866:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d868:	07dc      	lsls	r4, r3, #31
 800d86a:	d504      	bpl.n	800d876 <_vfiprintf_r+0x4e>
 800d86c:	f04f 30ff 	mov.w	r0, #4294967295
 800d870:	b01d      	add	sp, #116	; 0x74
 800d872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d876:	89ab      	ldrh	r3, [r5, #12]
 800d878:	0598      	lsls	r0, r3, #22
 800d87a:	d4f7      	bmi.n	800d86c <_vfiprintf_r+0x44>
 800d87c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d87e:	f7fc fa85 	bl	8009d8c <__retarget_lock_release_recursive>
 800d882:	e7f3      	b.n	800d86c <_vfiprintf_r+0x44>
 800d884:	2300      	movs	r3, #0
 800d886:	9309      	str	r3, [sp, #36]	; 0x24
 800d888:	2320      	movs	r3, #32
 800d88a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d88e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d892:	2330      	movs	r3, #48	; 0x30
 800d894:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800da48 <_vfiprintf_r+0x220>
 800d898:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d89c:	f04f 0901 	mov.w	r9, #1
 800d8a0:	4623      	mov	r3, r4
 800d8a2:	469a      	mov	sl, r3
 800d8a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8a8:	b10a      	cbz	r2, 800d8ae <_vfiprintf_r+0x86>
 800d8aa:	2a25      	cmp	r2, #37	; 0x25
 800d8ac:	d1f9      	bne.n	800d8a2 <_vfiprintf_r+0x7a>
 800d8ae:	ebba 0b04 	subs.w	fp, sl, r4
 800d8b2:	d00b      	beq.n	800d8cc <_vfiprintf_r+0xa4>
 800d8b4:	465b      	mov	r3, fp
 800d8b6:	4622      	mov	r2, r4
 800d8b8:	4629      	mov	r1, r5
 800d8ba:	4630      	mov	r0, r6
 800d8bc:	f7ff ffa2 	bl	800d804 <__sfputs_r>
 800d8c0:	3001      	adds	r0, #1
 800d8c2:	f000 80a9 	beq.w	800da18 <_vfiprintf_r+0x1f0>
 800d8c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d8c8:	445a      	add	r2, fp
 800d8ca:	9209      	str	r2, [sp, #36]	; 0x24
 800d8cc:	f89a 3000 	ldrb.w	r3, [sl]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	f000 80a1 	beq.w	800da18 <_vfiprintf_r+0x1f0>
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	f04f 32ff 	mov.w	r2, #4294967295
 800d8dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d8e0:	f10a 0a01 	add.w	sl, sl, #1
 800d8e4:	9304      	str	r3, [sp, #16]
 800d8e6:	9307      	str	r3, [sp, #28]
 800d8e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d8ec:	931a      	str	r3, [sp, #104]	; 0x68
 800d8ee:	4654      	mov	r4, sl
 800d8f0:	2205      	movs	r2, #5
 800d8f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8f6:	4854      	ldr	r0, [pc, #336]	; (800da48 <_vfiprintf_r+0x220>)
 800d8f8:	f7f2 fc8a 	bl	8000210 <memchr>
 800d8fc:	9a04      	ldr	r2, [sp, #16]
 800d8fe:	b9d8      	cbnz	r0, 800d938 <_vfiprintf_r+0x110>
 800d900:	06d1      	lsls	r1, r2, #27
 800d902:	bf44      	itt	mi
 800d904:	2320      	movmi	r3, #32
 800d906:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d90a:	0713      	lsls	r3, r2, #28
 800d90c:	bf44      	itt	mi
 800d90e:	232b      	movmi	r3, #43	; 0x2b
 800d910:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d914:	f89a 3000 	ldrb.w	r3, [sl]
 800d918:	2b2a      	cmp	r3, #42	; 0x2a
 800d91a:	d015      	beq.n	800d948 <_vfiprintf_r+0x120>
 800d91c:	9a07      	ldr	r2, [sp, #28]
 800d91e:	4654      	mov	r4, sl
 800d920:	2000      	movs	r0, #0
 800d922:	f04f 0c0a 	mov.w	ip, #10
 800d926:	4621      	mov	r1, r4
 800d928:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d92c:	3b30      	subs	r3, #48	; 0x30
 800d92e:	2b09      	cmp	r3, #9
 800d930:	d94d      	bls.n	800d9ce <_vfiprintf_r+0x1a6>
 800d932:	b1b0      	cbz	r0, 800d962 <_vfiprintf_r+0x13a>
 800d934:	9207      	str	r2, [sp, #28]
 800d936:	e014      	b.n	800d962 <_vfiprintf_r+0x13a>
 800d938:	eba0 0308 	sub.w	r3, r0, r8
 800d93c:	fa09 f303 	lsl.w	r3, r9, r3
 800d940:	4313      	orrs	r3, r2
 800d942:	9304      	str	r3, [sp, #16]
 800d944:	46a2      	mov	sl, r4
 800d946:	e7d2      	b.n	800d8ee <_vfiprintf_r+0xc6>
 800d948:	9b03      	ldr	r3, [sp, #12]
 800d94a:	1d19      	adds	r1, r3, #4
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	9103      	str	r1, [sp, #12]
 800d950:	2b00      	cmp	r3, #0
 800d952:	bfbb      	ittet	lt
 800d954:	425b      	neglt	r3, r3
 800d956:	f042 0202 	orrlt.w	r2, r2, #2
 800d95a:	9307      	strge	r3, [sp, #28]
 800d95c:	9307      	strlt	r3, [sp, #28]
 800d95e:	bfb8      	it	lt
 800d960:	9204      	strlt	r2, [sp, #16]
 800d962:	7823      	ldrb	r3, [r4, #0]
 800d964:	2b2e      	cmp	r3, #46	; 0x2e
 800d966:	d10c      	bne.n	800d982 <_vfiprintf_r+0x15a>
 800d968:	7863      	ldrb	r3, [r4, #1]
 800d96a:	2b2a      	cmp	r3, #42	; 0x2a
 800d96c:	d134      	bne.n	800d9d8 <_vfiprintf_r+0x1b0>
 800d96e:	9b03      	ldr	r3, [sp, #12]
 800d970:	1d1a      	adds	r2, r3, #4
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	9203      	str	r2, [sp, #12]
 800d976:	2b00      	cmp	r3, #0
 800d978:	bfb8      	it	lt
 800d97a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d97e:	3402      	adds	r4, #2
 800d980:	9305      	str	r3, [sp, #20]
 800d982:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800da58 <_vfiprintf_r+0x230>
 800d986:	7821      	ldrb	r1, [r4, #0]
 800d988:	2203      	movs	r2, #3
 800d98a:	4650      	mov	r0, sl
 800d98c:	f7f2 fc40 	bl	8000210 <memchr>
 800d990:	b138      	cbz	r0, 800d9a2 <_vfiprintf_r+0x17a>
 800d992:	9b04      	ldr	r3, [sp, #16]
 800d994:	eba0 000a 	sub.w	r0, r0, sl
 800d998:	2240      	movs	r2, #64	; 0x40
 800d99a:	4082      	lsls	r2, r0
 800d99c:	4313      	orrs	r3, r2
 800d99e:	3401      	adds	r4, #1
 800d9a0:	9304      	str	r3, [sp, #16]
 800d9a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9a6:	4829      	ldr	r0, [pc, #164]	; (800da4c <_vfiprintf_r+0x224>)
 800d9a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d9ac:	2206      	movs	r2, #6
 800d9ae:	f7f2 fc2f 	bl	8000210 <memchr>
 800d9b2:	2800      	cmp	r0, #0
 800d9b4:	d03f      	beq.n	800da36 <_vfiprintf_r+0x20e>
 800d9b6:	4b26      	ldr	r3, [pc, #152]	; (800da50 <_vfiprintf_r+0x228>)
 800d9b8:	bb1b      	cbnz	r3, 800da02 <_vfiprintf_r+0x1da>
 800d9ba:	9b03      	ldr	r3, [sp, #12]
 800d9bc:	3307      	adds	r3, #7
 800d9be:	f023 0307 	bic.w	r3, r3, #7
 800d9c2:	3308      	adds	r3, #8
 800d9c4:	9303      	str	r3, [sp, #12]
 800d9c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9c8:	443b      	add	r3, r7
 800d9ca:	9309      	str	r3, [sp, #36]	; 0x24
 800d9cc:	e768      	b.n	800d8a0 <_vfiprintf_r+0x78>
 800d9ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800d9d2:	460c      	mov	r4, r1
 800d9d4:	2001      	movs	r0, #1
 800d9d6:	e7a6      	b.n	800d926 <_vfiprintf_r+0xfe>
 800d9d8:	2300      	movs	r3, #0
 800d9da:	3401      	adds	r4, #1
 800d9dc:	9305      	str	r3, [sp, #20]
 800d9de:	4619      	mov	r1, r3
 800d9e0:	f04f 0c0a 	mov.w	ip, #10
 800d9e4:	4620      	mov	r0, r4
 800d9e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d9ea:	3a30      	subs	r2, #48	; 0x30
 800d9ec:	2a09      	cmp	r2, #9
 800d9ee:	d903      	bls.n	800d9f8 <_vfiprintf_r+0x1d0>
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d0c6      	beq.n	800d982 <_vfiprintf_r+0x15a>
 800d9f4:	9105      	str	r1, [sp, #20]
 800d9f6:	e7c4      	b.n	800d982 <_vfiprintf_r+0x15a>
 800d9f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d9fc:	4604      	mov	r4, r0
 800d9fe:	2301      	movs	r3, #1
 800da00:	e7f0      	b.n	800d9e4 <_vfiprintf_r+0x1bc>
 800da02:	ab03      	add	r3, sp, #12
 800da04:	9300      	str	r3, [sp, #0]
 800da06:	462a      	mov	r2, r5
 800da08:	4b12      	ldr	r3, [pc, #72]	; (800da54 <_vfiprintf_r+0x22c>)
 800da0a:	a904      	add	r1, sp, #16
 800da0c:	4630      	mov	r0, r6
 800da0e:	f7fb fa15 	bl	8008e3c <_printf_float>
 800da12:	4607      	mov	r7, r0
 800da14:	1c78      	adds	r0, r7, #1
 800da16:	d1d6      	bne.n	800d9c6 <_vfiprintf_r+0x19e>
 800da18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da1a:	07d9      	lsls	r1, r3, #31
 800da1c:	d405      	bmi.n	800da2a <_vfiprintf_r+0x202>
 800da1e:	89ab      	ldrh	r3, [r5, #12]
 800da20:	059a      	lsls	r2, r3, #22
 800da22:	d402      	bmi.n	800da2a <_vfiprintf_r+0x202>
 800da24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da26:	f7fc f9b1 	bl	8009d8c <__retarget_lock_release_recursive>
 800da2a:	89ab      	ldrh	r3, [r5, #12]
 800da2c:	065b      	lsls	r3, r3, #25
 800da2e:	f53f af1d 	bmi.w	800d86c <_vfiprintf_r+0x44>
 800da32:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da34:	e71c      	b.n	800d870 <_vfiprintf_r+0x48>
 800da36:	ab03      	add	r3, sp, #12
 800da38:	9300      	str	r3, [sp, #0]
 800da3a:	462a      	mov	r2, r5
 800da3c:	4b05      	ldr	r3, [pc, #20]	; (800da54 <_vfiprintf_r+0x22c>)
 800da3e:	a904      	add	r1, sp, #16
 800da40:	4630      	mov	r0, r6
 800da42:	f7fb fc9f 	bl	8009384 <_printf_i>
 800da46:	e7e4      	b.n	800da12 <_vfiprintf_r+0x1ea>
 800da48:	0800e0f1 	.word	0x0800e0f1
 800da4c:	0800e0fb 	.word	0x0800e0fb
 800da50:	08008e3d 	.word	0x08008e3d
 800da54:	0800d805 	.word	0x0800d805
 800da58:	0800e0f7 	.word	0x0800e0f7

0800da5c <__swbuf_r>:
 800da5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da5e:	460e      	mov	r6, r1
 800da60:	4614      	mov	r4, r2
 800da62:	4605      	mov	r5, r0
 800da64:	b118      	cbz	r0, 800da6e <__swbuf_r+0x12>
 800da66:	6a03      	ldr	r3, [r0, #32]
 800da68:	b90b      	cbnz	r3, 800da6e <__swbuf_r+0x12>
 800da6a:	f7fc f849 	bl	8009b00 <__sinit>
 800da6e:	69a3      	ldr	r3, [r4, #24]
 800da70:	60a3      	str	r3, [r4, #8]
 800da72:	89a3      	ldrh	r3, [r4, #12]
 800da74:	071a      	lsls	r2, r3, #28
 800da76:	d525      	bpl.n	800dac4 <__swbuf_r+0x68>
 800da78:	6923      	ldr	r3, [r4, #16]
 800da7a:	b31b      	cbz	r3, 800dac4 <__swbuf_r+0x68>
 800da7c:	6823      	ldr	r3, [r4, #0]
 800da7e:	6922      	ldr	r2, [r4, #16]
 800da80:	1a98      	subs	r0, r3, r2
 800da82:	6963      	ldr	r3, [r4, #20]
 800da84:	b2f6      	uxtb	r6, r6
 800da86:	4283      	cmp	r3, r0
 800da88:	4637      	mov	r7, r6
 800da8a:	dc04      	bgt.n	800da96 <__swbuf_r+0x3a>
 800da8c:	4621      	mov	r1, r4
 800da8e:	4628      	mov	r0, r5
 800da90:	f7ff f942 	bl	800cd18 <_fflush_r>
 800da94:	b9e0      	cbnz	r0, 800dad0 <__swbuf_r+0x74>
 800da96:	68a3      	ldr	r3, [r4, #8]
 800da98:	3b01      	subs	r3, #1
 800da9a:	60a3      	str	r3, [r4, #8]
 800da9c:	6823      	ldr	r3, [r4, #0]
 800da9e:	1c5a      	adds	r2, r3, #1
 800daa0:	6022      	str	r2, [r4, #0]
 800daa2:	701e      	strb	r6, [r3, #0]
 800daa4:	6962      	ldr	r2, [r4, #20]
 800daa6:	1c43      	adds	r3, r0, #1
 800daa8:	429a      	cmp	r2, r3
 800daaa:	d004      	beq.n	800dab6 <__swbuf_r+0x5a>
 800daac:	89a3      	ldrh	r3, [r4, #12]
 800daae:	07db      	lsls	r3, r3, #31
 800dab0:	d506      	bpl.n	800dac0 <__swbuf_r+0x64>
 800dab2:	2e0a      	cmp	r6, #10
 800dab4:	d104      	bne.n	800dac0 <__swbuf_r+0x64>
 800dab6:	4621      	mov	r1, r4
 800dab8:	4628      	mov	r0, r5
 800daba:	f7ff f92d 	bl	800cd18 <_fflush_r>
 800dabe:	b938      	cbnz	r0, 800dad0 <__swbuf_r+0x74>
 800dac0:	4638      	mov	r0, r7
 800dac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dac4:	4621      	mov	r1, r4
 800dac6:	4628      	mov	r0, r5
 800dac8:	f000 f806 	bl	800dad8 <__swsetup_r>
 800dacc:	2800      	cmp	r0, #0
 800dace:	d0d5      	beq.n	800da7c <__swbuf_r+0x20>
 800dad0:	f04f 37ff 	mov.w	r7, #4294967295
 800dad4:	e7f4      	b.n	800dac0 <__swbuf_r+0x64>
	...

0800dad8 <__swsetup_r>:
 800dad8:	b538      	push	{r3, r4, r5, lr}
 800dada:	4b2a      	ldr	r3, [pc, #168]	; (800db84 <__swsetup_r+0xac>)
 800dadc:	4605      	mov	r5, r0
 800dade:	6818      	ldr	r0, [r3, #0]
 800dae0:	460c      	mov	r4, r1
 800dae2:	b118      	cbz	r0, 800daec <__swsetup_r+0x14>
 800dae4:	6a03      	ldr	r3, [r0, #32]
 800dae6:	b90b      	cbnz	r3, 800daec <__swsetup_r+0x14>
 800dae8:	f7fc f80a 	bl	8009b00 <__sinit>
 800daec:	89a3      	ldrh	r3, [r4, #12]
 800daee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800daf2:	0718      	lsls	r0, r3, #28
 800daf4:	d422      	bmi.n	800db3c <__swsetup_r+0x64>
 800daf6:	06d9      	lsls	r1, r3, #27
 800daf8:	d407      	bmi.n	800db0a <__swsetup_r+0x32>
 800dafa:	2309      	movs	r3, #9
 800dafc:	602b      	str	r3, [r5, #0]
 800dafe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800db02:	81a3      	strh	r3, [r4, #12]
 800db04:	f04f 30ff 	mov.w	r0, #4294967295
 800db08:	e034      	b.n	800db74 <__swsetup_r+0x9c>
 800db0a:	0758      	lsls	r0, r3, #29
 800db0c:	d512      	bpl.n	800db34 <__swsetup_r+0x5c>
 800db0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db10:	b141      	cbz	r1, 800db24 <__swsetup_r+0x4c>
 800db12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db16:	4299      	cmp	r1, r3
 800db18:	d002      	beq.n	800db20 <__swsetup_r+0x48>
 800db1a:	4628      	mov	r0, r5
 800db1c:	f7fc ffba 	bl	800aa94 <_free_r>
 800db20:	2300      	movs	r3, #0
 800db22:	6363      	str	r3, [r4, #52]	; 0x34
 800db24:	89a3      	ldrh	r3, [r4, #12]
 800db26:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800db2a:	81a3      	strh	r3, [r4, #12]
 800db2c:	2300      	movs	r3, #0
 800db2e:	6063      	str	r3, [r4, #4]
 800db30:	6923      	ldr	r3, [r4, #16]
 800db32:	6023      	str	r3, [r4, #0]
 800db34:	89a3      	ldrh	r3, [r4, #12]
 800db36:	f043 0308 	orr.w	r3, r3, #8
 800db3a:	81a3      	strh	r3, [r4, #12]
 800db3c:	6923      	ldr	r3, [r4, #16]
 800db3e:	b94b      	cbnz	r3, 800db54 <__swsetup_r+0x7c>
 800db40:	89a3      	ldrh	r3, [r4, #12]
 800db42:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800db46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db4a:	d003      	beq.n	800db54 <__swsetup_r+0x7c>
 800db4c:	4621      	mov	r1, r4
 800db4e:	4628      	mov	r0, r5
 800db50:	f000 f884 	bl	800dc5c <__smakebuf_r>
 800db54:	89a0      	ldrh	r0, [r4, #12]
 800db56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db5a:	f010 0301 	ands.w	r3, r0, #1
 800db5e:	d00a      	beq.n	800db76 <__swsetup_r+0x9e>
 800db60:	2300      	movs	r3, #0
 800db62:	60a3      	str	r3, [r4, #8]
 800db64:	6963      	ldr	r3, [r4, #20]
 800db66:	425b      	negs	r3, r3
 800db68:	61a3      	str	r3, [r4, #24]
 800db6a:	6923      	ldr	r3, [r4, #16]
 800db6c:	b943      	cbnz	r3, 800db80 <__swsetup_r+0xa8>
 800db6e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800db72:	d1c4      	bne.n	800dafe <__swsetup_r+0x26>
 800db74:	bd38      	pop	{r3, r4, r5, pc}
 800db76:	0781      	lsls	r1, r0, #30
 800db78:	bf58      	it	pl
 800db7a:	6963      	ldrpl	r3, [r4, #20]
 800db7c:	60a3      	str	r3, [r4, #8]
 800db7e:	e7f4      	b.n	800db6a <__swsetup_r+0x92>
 800db80:	2000      	movs	r0, #0
 800db82:	e7f7      	b.n	800db74 <__swsetup_r+0x9c>
 800db84:	20000064 	.word	0x20000064

0800db88 <_raise_r>:
 800db88:	291f      	cmp	r1, #31
 800db8a:	b538      	push	{r3, r4, r5, lr}
 800db8c:	4604      	mov	r4, r0
 800db8e:	460d      	mov	r5, r1
 800db90:	d904      	bls.n	800db9c <_raise_r+0x14>
 800db92:	2316      	movs	r3, #22
 800db94:	6003      	str	r3, [r0, #0]
 800db96:	f04f 30ff 	mov.w	r0, #4294967295
 800db9a:	bd38      	pop	{r3, r4, r5, pc}
 800db9c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800db9e:	b112      	cbz	r2, 800dba6 <_raise_r+0x1e>
 800dba0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dba4:	b94b      	cbnz	r3, 800dbba <_raise_r+0x32>
 800dba6:	4620      	mov	r0, r4
 800dba8:	f000 f830 	bl	800dc0c <_getpid_r>
 800dbac:	462a      	mov	r2, r5
 800dbae:	4601      	mov	r1, r0
 800dbb0:	4620      	mov	r0, r4
 800dbb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dbb6:	f000 b817 	b.w	800dbe8 <_kill_r>
 800dbba:	2b01      	cmp	r3, #1
 800dbbc:	d00a      	beq.n	800dbd4 <_raise_r+0x4c>
 800dbbe:	1c59      	adds	r1, r3, #1
 800dbc0:	d103      	bne.n	800dbca <_raise_r+0x42>
 800dbc2:	2316      	movs	r3, #22
 800dbc4:	6003      	str	r3, [r0, #0]
 800dbc6:	2001      	movs	r0, #1
 800dbc8:	e7e7      	b.n	800db9a <_raise_r+0x12>
 800dbca:	2400      	movs	r4, #0
 800dbcc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dbd0:	4628      	mov	r0, r5
 800dbd2:	4798      	blx	r3
 800dbd4:	2000      	movs	r0, #0
 800dbd6:	e7e0      	b.n	800db9a <_raise_r+0x12>

0800dbd8 <raise>:
 800dbd8:	4b02      	ldr	r3, [pc, #8]	; (800dbe4 <raise+0xc>)
 800dbda:	4601      	mov	r1, r0
 800dbdc:	6818      	ldr	r0, [r3, #0]
 800dbde:	f7ff bfd3 	b.w	800db88 <_raise_r>
 800dbe2:	bf00      	nop
 800dbe4:	20000064 	.word	0x20000064

0800dbe8 <_kill_r>:
 800dbe8:	b538      	push	{r3, r4, r5, lr}
 800dbea:	4d07      	ldr	r5, [pc, #28]	; (800dc08 <_kill_r+0x20>)
 800dbec:	2300      	movs	r3, #0
 800dbee:	4604      	mov	r4, r0
 800dbf0:	4608      	mov	r0, r1
 800dbf2:	4611      	mov	r1, r2
 800dbf4:	602b      	str	r3, [r5, #0]
 800dbf6:	f7f4 fdcf 	bl	8002798 <_kill>
 800dbfa:	1c43      	adds	r3, r0, #1
 800dbfc:	d102      	bne.n	800dc04 <_kill_r+0x1c>
 800dbfe:	682b      	ldr	r3, [r5, #0]
 800dc00:	b103      	cbz	r3, 800dc04 <_kill_r+0x1c>
 800dc02:	6023      	str	r3, [r4, #0]
 800dc04:	bd38      	pop	{r3, r4, r5, pc}
 800dc06:	bf00      	nop
 800dc08:	200005e0 	.word	0x200005e0

0800dc0c <_getpid_r>:
 800dc0c:	f7f4 bdbc 	b.w	8002788 <_getpid>

0800dc10 <__swhatbuf_r>:
 800dc10:	b570      	push	{r4, r5, r6, lr}
 800dc12:	460c      	mov	r4, r1
 800dc14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc18:	2900      	cmp	r1, #0
 800dc1a:	b096      	sub	sp, #88	; 0x58
 800dc1c:	4615      	mov	r5, r2
 800dc1e:	461e      	mov	r6, r3
 800dc20:	da0d      	bge.n	800dc3e <__swhatbuf_r+0x2e>
 800dc22:	89a3      	ldrh	r3, [r4, #12]
 800dc24:	f013 0f80 	tst.w	r3, #128	; 0x80
 800dc28:	f04f 0100 	mov.w	r1, #0
 800dc2c:	bf0c      	ite	eq
 800dc2e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800dc32:	2340      	movne	r3, #64	; 0x40
 800dc34:	2000      	movs	r0, #0
 800dc36:	6031      	str	r1, [r6, #0]
 800dc38:	602b      	str	r3, [r5, #0]
 800dc3a:	b016      	add	sp, #88	; 0x58
 800dc3c:	bd70      	pop	{r4, r5, r6, pc}
 800dc3e:	466a      	mov	r2, sp
 800dc40:	f000 f848 	bl	800dcd4 <_fstat_r>
 800dc44:	2800      	cmp	r0, #0
 800dc46:	dbec      	blt.n	800dc22 <__swhatbuf_r+0x12>
 800dc48:	9901      	ldr	r1, [sp, #4]
 800dc4a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800dc4e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800dc52:	4259      	negs	r1, r3
 800dc54:	4159      	adcs	r1, r3
 800dc56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc5a:	e7eb      	b.n	800dc34 <__swhatbuf_r+0x24>

0800dc5c <__smakebuf_r>:
 800dc5c:	898b      	ldrh	r3, [r1, #12]
 800dc5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dc60:	079d      	lsls	r5, r3, #30
 800dc62:	4606      	mov	r6, r0
 800dc64:	460c      	mov	r4, r1
 800dc66:	d507      	bpl.n	800dc78 <__smakebuf_r+0x1c>
 800dc68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dc6c:	6023      	str	r3, [r4, #0]
 800dc6e:	6123      	str	r3, [r4, #16]
 800dc70:	2301      	movs	r3, #1
 800dc72:	6163      	str	r3, [r4, #20]
 800dc74:	b002      	add	sp, #8
 800dc76:	bd70      	pop	{r4, r5, r6, pc}
 800dc78:	ab01      	add	r3, sp, #4
 800dc7a:	466a      	mov	r2, sp
 800dc7c:	f7ff ffc8 	bl	800dc10 <__swhatbuf_r>
 800dc80:	9900      	ldr	r1, [sp, #0]
 800dc82:	4605      	mov	r5, r0
 800dc84:	4630      	mov	r0, r6
 800dc86:	f7fc ff79 	bl	800ab7c <_malloc_r>
 800dc8a:	b948      	cbnz	r0, 800dca0 <__smakebuf_r+0x44>
 800dc8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc90:	059a      	lsls	r2, r3, #22
 800dc92:	d4ef      	bmi.n	800dc74 <__smakebuf_r+0x18>
 800dc94:	f023 0303 	bic.w	r3, r3, #3
 800dc98:	f043 0302 	orr.w	r3, r3, #2
 800dc9c:	81a3      	strh	r3, [r4, #12]
 800dc9e:	e7e3      	b.n	800dc68 <__smakebuf_r+0xc>
 800dca0:	89a3      	ldrh	r3, [r4, #12]
 800dca2:	6020      	str	r0, [r4, #0]
 800dca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dca8:	81a3      	strh	r3, [r4, #12]
 800dcaa:	9b00      	ldr	r3, [sp, #0]
 800dcac:	6163      	str	r3, [r4, #20]
 800dcae:	9b01      	ldr	r3, [sp, #4]
 800dcb0:	6120      	str	r0, [r4, #16]
 800dcb2:	b15b      	cbz	r3, 800dccc <__smakebuf_r+0x70>
 800dcb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dcb8:	4630      	mov	r0, r6
 800dcba:	f000 f81d 	bl	800dcf8 <_isatty_r>
 800dcbe:	b128      	cbz	r0, 800dccc <__smakebuf_r+0x70>
 800dcc0:	89a3      	ldrh	r3, [r4, #12]
 800dcc2:	f023 0303 	bic.w	r3, r3, #3
 800dcc6:	f043 0301 	orr.w	r3, r3, #1
 800dcca:	81a3      	strh	r3, [r4, #12]
 800dccc:	89a3      	ldrh	r3, [r4, #12]
 800dcce:	431d      	orrs	r5, r3
 800dcd0:	81a5      	strh	r5, [r4, #12]
 800dcd2:	e7cf      	b.n	800dc74 <__smakebuf_r+0x18>

0800dcd4 <_fstat_r>:
 800dcd4:	b538      	push	{r3, r4, r5, lr}
 800dcd6:	4d07      	ldr	r5, [pc, #28]	; (800dcf4 <_fstat_r+0x20>)
 800dcd8:	2300      	movs	r3, #0
 800dcda:	4604      	mov	r4, r0
 800dcdc:	4608      	mov	r0, r1
 800dcde:	4611      	mov	r1, r2
 800dce0:	602b      	str	r3, [r5, #0]
 800dce2:	f7f4 fdb8 	bl	8002856 <_fstat>
 800dce6:	1c43      	adds	r3, r0, #1
 800dce8:	d102      	bne.n	800dcf0 <_fstat_r+0x1c>
 800dcea:	682b      	ldr	r3, [r5, #0]
 800dcec:	b103      	cbz	r3, 800dcf0 <_fstat_r+0x1c>
 800dcee:	6023      	str	r3, [r4, #0]
 800dcf0:	bd38      	pop	{r3, r4, r5, pc}
 800dcf2:	bf00      	nop
 800dcf4:	200005e0 	.word	0x200005e0

0800dcf8 <_isatty_r>:
 800dcf8:	b538      	push	{r3, r4, r5, lr}
 800dcfa:	4d06      	ldr	r5, [pc, #24]	; (800dd14 <_isatty_r+0x1c>)
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	4604      	mov	r4, r0
 800dd00:	4608      	mov	r0, r1
 800dd02:	602b      	str	r3, [r5, #0]
 800dd04:	f7f4 fdb7 	bl	8002876 <_isatty>
 800dd08:	1c43      	adds	r3, r0, #1
 800dd0a:	d102      	bne.n	800dd12 <_isatty_r+0x1a>
 800dd0c:	682b      	ldr	r3, [r5, #0]
 800dd0e:	b103      	cbz	r3, 800dd12 <_isatty_r+0x1a>
 800dd10:	6023      	str	r3, [r4, #0]
 800dd12:	bd38      	pop	{r3, r4, r5, pc}
 800dd14:	200005e0 	.word	0x200005e0

0800dd18 <_init>:
 800dd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd1a:	bf00      	nop
 800dd1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd1e:	bc08      	pop	{r3}
 800dd20:	469e      	mov	lr, r3
 800dd22:	4770      	bx	lr

0800dd24 <_fini>:
 800dd24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd26:	bf00      	nop
 800dd28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd2a:	bc08      	pop	{r3}
 800dd2c:	469e      	mov	lr, r3
 800dd2e:	4770      	bx	lr
