
STM32_PROJEKT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dbf8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  0800ddc8  0800ddc8  0001ddc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e28c  0800e28c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800e28c  0800e28c  0001e28c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e294  0800e294  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e294  0800e294  0001e294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e298  0800e298  0001e298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800e29c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  200001dc  0800e478  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e8  0800e478  000205e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      000000bc  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017485  00000000  00000000  000202c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034d5  00000000  00000000  0003774d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001280  00000000  00000000  0003ac28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e4c  00000000  00000000  0003bea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000288bd  00000000  00000000  0003ccf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019764  00000000  00000000  000655b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f566e  00000000  00000000  0007ed15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000063b4  00000000  00000000  00174384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0017a738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00000010  00000000  00000000  0017a79c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ddb0 	.word	0x0800ddb0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	0800ddb0 	.word	0x0800ddb0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9f1 	b.w	80010cc <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9a6 	b.w	80010cc <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9e08      	ldr	r6, [sp, #32]
 8000e0a:	460d      	mov	r5, r1
 8000e0c:	4604      	mov	r4, r0
 8000e0e:	460f      	mov	r7, r1
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d14a      	bne.n	8000eaa <__udivmoddi4+0xa6>
 8000e14:	428a      	cmp	r2, r1
 8000e16:	4694      	mov	ip, r2
 8000e18:	d965      	bls.n	8000ee6 <__udivmoddi4+0xe2>
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	b143      	cbz	r3, 8000e32 <__udivmoddi4+0x2e>
 8000e20:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e24:	f1c3 0220 	rsb	r2, r3, #32
 8000e28:	409f      	lsls	r7, r3
 8000e2a:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2e:	4317      	orrs	r7, r2
 8000e30:	409c      	lsls	r4, r3
 8000e32:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e36:	fa1f f58c 	uxth.w	r5, ip
 8000e3a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e3e:	0c22      	lsrs	r2, r4, #16
 8000e40:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e44:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e48:	fb01 f005 	mul.w	r0, r1, r5
 8000e4c:	4290      	cmp	r0, r2
 8000e4e:	d90a      	bls.n	8000e66 <__udivmoddi4+0x62>
 8000e50:	eb1c 0202 	adds.w	r2, ip, r2
 8000e54:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e58:	f080 811c 	bcs.w	8001094 <__udivmoddi4+0x290>
 8000e5c:	4290      	cmp	r0, r2
 8000e5e:	f240 8119 	bls.w	8001094 <__udivmoddi4+0x290>
 8000e62:	3902      	subs	r1, #2
 8000e64:	4462      	add	r2, ip
 8000e66:	1a12      	subs	r2, r2, r0
 8000e68:	b2a4      	uxth	r4, r4
 8000e6a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e6e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e72:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e76:	fb00 f505 	mul.w	r5, r0, r5
 8000e7a:	42a5      	cmp	r5, r4
 8000e7c:	d90a      	bls.n	8000e94 <__udivmoddi4+0x90>
 8000e7e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e82:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e86:	f080 8107 	bcs.w	8001098 <__udivmoddi4+0x294>
 8000e8a:	42a5      	cmp	r5, r4
 8000e8c:	f240 8104 	bls.w	8001098 <__udivmoddi4+0x294>
 8000e90:	4464      	add	r4, ip
 8000e92:	3802      	subs	r0, #2
 8000e94:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e98:	1b64      	subs	r4, r4, r5
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	b11e      	cbz	r6, 8000ea6 <__udivmoddi4+0xa2>
 8000e9e:	40dc      	lsrs	r4, r3
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0xbc>
 8000eae:	2e00      	cmp	r6, #0
 8000eb0:	f000 80ed 	beq.w	800108e <__udivmoddi4+0x28a>
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	e9c6 0500 	strd	r0, r5, [r6]
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec0:	fab3 f183 	clz	r1, r3
 8000ec4:	2900      	cmp	r1, #0
 8000ec6:	d149      	bne.n	8000f5c <__udivmoddi4+0x158>
 8000ec8:	42ab      	cmp	r3, r5
 8000eca:	d302      	bcc.n	8000ed2 <__udivmoddi4+0xce>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	f200 80f8 	bhi.w	80010c2 <__udivmoddi4+0x2be>
 8000ed2:	1a84      	subs	r4, r0, r2
 8000ed4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ed8:	2001      	movs	r0, #1
 8000eda:	4617      	mov	r7, r2
 8000edc:	2e00      	cmp	r6, #0
 8000ede:	d0e2      	beq.n	8000ea6 <__udivmoddi4+0xa2>
 8000ee0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ee4:	e7df      	b.n	8000ea6 <__udivmoddi4+0xa2>
 8000ee6:	b902      	cbnz	r2, 8000eea <__udivmoddi4+0xe6>
 8000ee8:	deff      	udf	#255	; 0xff
 8000eea:	fab2 f382 	clz	r3, r2
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f040 8090 	bne.w	8001014 <__udivmoddi4+0x210>
 8000ef4:	1a8a      	subs	r2, r1, r2
 8000ef6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000efa:	fa1f fe8c 	uxth.w	lr, ip
 8000efe:	2101      	movs	r1, #1
 8000f00:	fbb2 f5f7 	udiv	r5, r2, r7
 8000f04:	fb07 2015 	mls	r0, r7, r5, r2
 8000f08:	0c22      	lsrs	r2, r4, #16
 8000f0a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f0e:	fb0e f005 	mul.w	r0, lr, r5
 8000f12:	4290      	cmp	r0, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x124>
 8000f16:	eb1c 0202 	adds.w	r2, ip, r2
 8000f1a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f1e:	d202      	bcs.n	8000f26 <__udivmoddi4+0x122>
 8000f20:	4290      	cmp	r0, r2
 8000f22:	f200 80cb 	bhi.w	80010bc <__udivmoddi4+0x2b8>
 8000f26:	4645      	mov	r5, r8
 8000f28:	1a12      	subs	r2, r2, r0
 8000f2a:	b2a4      	uxth	r4, r4
 8000f2c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f30:	fb07 2210 	mls	r2, r7, r0, r2
 8000f34:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f38:	fb0e fe00 	mul.w	lr, lr, r0
 8000f3c:	45a6      	cmp	lr, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x14e>
 8000f40:	eb1c 0404 	adds.w	r4, ip, r4
 8000f44:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f48:	d202      	bcs.n	8000f50 <__udivmoddi4+0x14c>
 8000f4a:	45a6      	cmp	lr, r4
 8000f4c:	f200 80bb 	bhi.w	80010c6 <__udivmoddi4+0x2c2>
 8000f50:	4610      	mov	r0, r2
 8000f52:	eba4 040e 	sub.w	r4, r4, lr
 8000f56:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f5a:	e79f      	b.n	8000e9c <__udivmoddi4+0x98>
 8000f5c:	f1c1 0720 	rsb	r7, r1, #32
 8000f60:	408b      	lsls	r3, r1
 8000f62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f6a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f6e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f72:	40fd      	lsrs	r5, r7
 8000f74:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f78:	4323      	orrs	r3, r4
 8000f7a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f7e:	fa1f fe8c 	uxth.w	lr, ip
 8000f82:	fb09 5518 	mls	r5, r9, r8, r5
 8000f86:	0c1c      	lsrs	r4, r3, #16
 8000f88:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f8c:	fb08 f50e 	mul.w	r5, r8, lr
 8000f90:	42a5      	cmp	r5, r4
 8000f92:	fa02 f201 	lsl.w	r2, r2, r1
 8000f96:	fa00 f001 	lsl.w	r0, r0, r1
 8000f9a:	d90b      	bls.n	8000fb4 <__udivmoddi4+0x1b0>
 8000f9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000fa0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fa4:	f080 8088 	bcs.w	80010b8 <__udivmoddi4+0x2b4>
 8000fa8:	42a5      	cmp	r5, r4
 8000faa:	f240 8085 	bls.w	80010b8 <__udivmoddi4+0x2b4>
 8000fae:	f1a8 0802 	sub.w	r8, r8, #2
 8000fb2:	4464      	add	r4, ip
 8000fb4:	1b64      	subs	r4, r4, r5
 8000fb6:	b29d      	uxth	r5, r3
 8000fb8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fbc:	fb09 4413 	mls	r4, r9, r3, r4
 8000fc0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000fc4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000fc8:	45a6      	cmp	lr, r4
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x1da>
 8000fcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fd0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000fd4:	d26c      	bcs.n	80010b0 <__udivmoddi4+0x2ac>
 8000fd6:	45a6      	cmp	lr, r4
 8000fd8:	d96a      	bls.n	80010b0 <__udivmoddi4+0x2ac>
 8000fda:	3b02      	subs	r3, #2
 8000fdc:	4464      	add	r4, ip
 8000fde:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fe2:	fba3 9502 	umull	r9, r5, r3, r2
 8000fe6:	eba4 040e 	sub.w	r4, r4, lr
 8000fea:	42ac      	cmp	r4, r5
 8000fec:	46c8      	mov	r8, r9
 8000fee:	46ae      	mov	lr, r5
 8000ff0:	d356      	bcc.n	80010a0 <__udivmoddi4+0x29c>
 8000ff2:	d053      	beq.n	800109c <__udivmoddi4+0x298>
 8000ff4:	b156      	cbz	r6, 800100c <__udivmoddi4+0x208>
 8000ff6:	ebb0 0208 	subs.w	r2, r0, r8
 8000ffa:	eb64 040e 	sbc.w	r4, r4, lr
 8000ffe:	fa04 f707 	lsl.w	r7, r4, r7
 8001002:	40ca      	lsrs	r2, r1
 8001004:	40cc      	lsrs	r4, r1
 8001006:	4317      	orrs	r7, r2
 8001008:	e9c6 7400 	strd	r7, r4, [r6]
 800100c:	4618      	mov	r0, r3
 800100e:	2100      	movs	r1, #0
 8001010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001014:	f1c3 0120 	rsb	r1, r3, #32
 8001018:	fa02 fc03 	lsl.w	ip, r2, r3
 800101c:	fa20 f201 	lsr.w	r2, r0, r1
 8001020:	fa25 f101 	lsr.w	r1, r5, r1
 8001024:	409d      	lsls	r5, r3
 8001026:	432a      	orrs	r2, r5
 8001028:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800102c:	fa1f fe8c 	uxth.w	lr, ip
 8001030:	fbb1 f0f7 	udiv	r0, r1, r7
 8001034:	fb07 1510 	mls	r5, r7, r0, r1
 8001038:	0c11      	lsrs	r1, r2, #16
 800103a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800103e:	fb00 f50e 	mul.w	r5, r0, lr
 8001042:	428d      	cmp	r5, r1
 8001044:	fa04 f403 	lsl.w	r4, r4, r3
 8001048:	d908      	bls.n	800105c <__udivmoddi4+0x258>
 800104a:	eb1c 0101 	adds.w	r1, ip, r1
 800104e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001052:	d22f      	bcs.n	80010b4 <__udivmoddi4+0x2b0>
 8001054:	428d      	cmp	r5, r1
 8001056:	d92d      	bls.n	80010b4 <__udivmoddi4+0x2b0>
 8001058:	3802      	subs	r0, #2
 800105a:	4461      	add	r1, ip
 800105c:	1b49      	subs	r1, r1, r5
 800105e:	b292      	uxth	r2, r2
 8001060:	fbb1 f5f7 	udiv	r5, r1, r7
 8001064:	fb07 1115 	mls	r1, r7, r5, r1
 8001068:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800106c:	fb05 f10e 	mul.w	r1, r5, lr
 8001070:	4291      	cmp	r1, r2
 8001072:	d908      	bls.n	8001086 <__udivmoddi4+0x282>
 8001074:	eb1c 0202 	adds.w	r2, ip, r2
 8001078:	f105 38ff 	add.w	r8, r5, #4294967295
 800107c:	d216      	bcs.n	80010ac <__udivmoddi4+0x2a8>
 800107e:	4291      	cmp	r1, r2
 8001080:	d914      	bls.n	80010ac <__udivmoddi4+0x2a8>
 8001082:	3d02      	subs	r5, #2
 8001084:	4462      	add	r2, ip
 8001086:	1a52      	subs	r2, r2, r1
 8001088:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800108c:	e738      	b.n	8000f00 <__udivmoddi4+0xfc>
 800108e:	4631      	mov	r1, r6
 8001090:	4630      	mov	r0, r6
 8001092:	e708      	b.n	8000ea6 <__udivmoddi4+0xa2>
 8001094:	4639      	mov	r1, r7
 8001096:	e6e6      	b.n	8000e66 <__udivmoddi4+0x62>
 8001098:	4610      	mov	r0, r2
 800109a:	e6fb      	b.n	8000e94 <__udivmoddi4+0x90>
 800109c:	4548      	cmp	r0, r9
 800109e:	d2a9      	bcs.n	8000ff4 <__udivmoddi4+0x1f0>
 80010a0:	ebb9 0802 	subs.w	r8, r9, r2
 80010a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80010a8:	3b01      	subs	r3, #1
 80010aa:	e7a3      	b.n	8000ff4 <__udivmoddi4+0x1f0>
 80010ac:	4645      	mov	r5, r8
 80010ae:	e7ea      	b.n	8001086 <__udivmoddi4+0x282>
 80010b0:	462b      	mov	r3, r5
 80010b2:	e794      	b.n	8000fde <__udivmoddi4+0x1da>
 80010b4:	4640      	mov	r0, r8
 80010b6:	e7d1      	b.n	800105c <__udivmoddi4+0x258>
 80010b8:	46d0      	mov	r8, sl
 80010ba:	e77b      	b.n	8000fb4 <__udivmoddi4+0x1b0>
 80010bc:	3d02      	subs	r5, #2
 80010be:	4462      	add	r2, ip
 80010c0:	e732      	b.n	8000f28 <__udivmoddi4+0x124>
 80010c2:	4608      	mov	r0, r1
 80010c4:	e70a      	b.n	8000edc <__udivmoddi4+0xd8>
 80010c6:	4464      	add	r4, ip
 80010c8:	3802      	subs	r0, #2
 80010ca:	e742      	b.n	8000f52 <__udivmoddi4+0x14e>

080010cc <__aeabi_idiv0>:
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop

080010d0 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08c      	sub	sp, #48	; 0x30
 80010d4:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
 80010da:	9302      	str	r3, [sp, #8]
 80010dc:	2319      	movs	r3, #25
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	463b      	mov	r3, r7
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2301      	movs	r3, #1
 80010e6:	2288      	movs	r2, #136	; 0x88
 80010e8:	21ec      	movs	r1, #236	; 0xec
 80010ea:	4857      	ldr	r0, [pc, #348]	; (8001248 <TrimRead+0x178>)
 80010ec:	f002 fe6e 	bl	8003dcc <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 80010f0:	463b      	mov	r3, r7
 80010f2:	3319      	adds	r3, #25
 80010f4:	f04f 32ff 	mov.w	r2, #4294967295
 80010f8:	9202      	str	r2, [sp, #8]
 80010fa:	2207      	movs	r2, #7
 80010fc:	9201      	str	r2, [sp, #4]
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	2301      	movs	r3, #1
 8001102:	22e1      	movs	r2, #225	; 0xe1
 8001104:	21ec      	movs	r1, #236	; 0xec
 8001106:	4850      	ldr	r0, [pc, #320]	; (8001248 <TrimRead+0x178>)
 8001108:	f002 fe60 	bl	8003dcc <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 800110c:	787b      	ldrb	r3, [r7, #1]
 800110e:	021b      	lsls	r3, r3, #8
 8001110:	b21a      	sxth	r2, r3
 8001112:	783b      	ldrb	r3, [r7, #0]
 8001114:	b21b      	sxth	r3, r3
 8001116:	4313      	orrs	r3, r2
 8001118:	b21b      	sxth	r3, r3
 800111a:	b29a      	uxth	r2, r3
 800111c:	4b4b      	ldr	r3, [pc, #300]	; (800124c <TrimRead+0x17c>)
 800111e:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8001120:	78fb      	ldrb	r3, [r7, #3]
 8001122:	021b      	lsls	r3, r3, #8
 8001124:	b21a      	sxth	r2, r3
 8001126:	78bb      	ldrb	r3, [r7, #2]
 8001128:	b21b      	sxth	r3, r3
 800112a:	4313      	orrs	r3, r2
 800112c:	b21a      	sxth	r2, r3
 800112e:	4b48      	ldr	r3, [pc, #288]	; (8001250 <TrimRead+0x180>)
 8001130:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8001132:	797b      	ldrb	r3, [r7, #5]
 8001134:	021b      	lsls	r3, r3, #8
 8001136:	b21a      	sxth	r2, r3
 8001138:	793b      	ldrb	r3, [r7, #4]
 800113a:	b21b      	sxth	r3, r3
 800113c:	4313      	orrs	r3, r2
 800113e:	b21a      	sxth	r2, r3
 8001140:	4b44      	ldr	r3, [pc, #272]	; (8001254 <TrimRead+0x184>)
 8001142:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	021b      	lsls	r3, r3, #8
 8001148:	b21a      	sxth	r2, r3
 800114a:	797b      	ldrb	r3, [r7, #5]
 800114c:	b21b      	sxth	r3, r3
 800114e:	4313      	orrs	r3, r2
 8001150:	b21b      	sxth	r3, r3
 8001152:	b29a      	uxth	r2, r3
 8001154:	4b40      	ldr	r3, [pc, #256]	; (8001258 <TrimRead+0x188>)
 8001156:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001158:	7a7b      	ldrb	r3, [r7, #9]
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	b21a      	sxth	r2, r3
 800115e:	79bb      	ldrb	r3, [r7, #6]
 8001160:	b21b      	sxth	r3, r3
 8001162:	4313      	orrs	r3, r2
 8001164:	b21a      	sxth	r2, r3
 8001166:	4b3d      	ldr	r3, [pc, #244]	; (800125c <TrimRead+0x18c>)
 8001168:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 800116a:	7afb      	ldrb	r3, [r7, #11]
 800116c:	021b      	lsls	r3, r3, #8
 800116e:	b21a      	sxth	r2, r3
 8001170:	7abb      	ldrb	r3, [r7, #10]
 8001172:	b21b      	sxth	r3, r3
 8001174:	4313      	orrs	r3, r2
 8001176:	b21a      	sxth	r2, r3
 8001178:	4b39      	ldr	r3, [pc, #228]	; (8001260 <TrimRead+0x190>)
 800117a:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 800117c:	7b7b      	ldrb	r3, [r7, #13]
 800117e:	021b      	lsls	r3, r3, #8
 8001180:	b21a      	sxth	r2, r3
 8001182:	7b3b      	ldrb	r3, [r7, #12]
 8001184:	b21b      	sxth	r3, r3
 8001186:	4313      	orrs	r3, r2
 8001188:	b21a      	sxth	r2, r3
 800118a:	4b36      	ldr	r3, [pc, #216]	; (8001264 <TrimRead+0x194>)
 800118c:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	021b      	lsls	r3, r3, #8
 8001192:	b21a      	sxth	r2, r3
 8001194:	7bbb      	ldrb	r3, [r7, #14]
 8001196:	b21b      	sxth	r3, r3
 8001198:	4313      	orrs	r3, r2
 800119a:	b21a      	sxth	r2, r3
 800119c:	4b32      	ldr	r3, [pc, #200]	; (8001268 <TrimRead+0x198>)
 800119e:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 80011a0:	7c7b      	ldrb	r3, [r7, #17]
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	b21a      	sxth	r2, r3
 80011a6:	7c3b      	ldrb	r3, [r7, #16]
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b21a      	sxth	r2, r3
 80011ae:	4b2f      	ldr	r3, [pc, #188]	; (800126c <TrimRead+0x19c>)
 80011b0:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80011b2:	7cfb      	ldrb	r3, [r7, #19]
 80011b4:	021b      	lsls	r3, r3, #8
 80011b6:	b21a      	sxth	r2, r3
 80011b8:	7cbb      	ldrb	r3, [r7, #18]
 80011ba:	b21b      	sxth	r3, r3
 80011bc:	4313      	orrs	r3, r2
 80011be:	b21a      	sxth	r2, r3
 80011c0:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <TrimRead+0x1a0>)
 80011c2:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 80011c4:	7d7b      	ldrb	r3, [r7, #21]
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	b21a      	sxth	r2, r3
 80011ca:	7d3b      	ldrb	r3, [r7, #20]
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	4313      	orrs	r3, r2
 80011d0:	b21a      	sxth	r2, r3
 80011d2:	4b28      	ldr	r3, [pc, #160]	; (8001274 <TrimRead+0x1a4>)
 80011d4:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80011d6:	7dfb      	ldrb	r3, [r7, #23]
 80011d8:	021b      	lsls	r3, r3, #8
 80011da:	b21a      	sxth	r2, r3
 80011dc:	7dbb      	ldrb	r3, [r7, #22]
 80011de:	b21b      	sxth	r3, r3
 80011e0:	4313      	orrs	r3, r2
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	4b24      	ldr	r3, [pc, #144]	; (8001278 <TrimRead+0x1a8>)
 80011e6:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 80011e8:	7e3b      	ldrb	r3, [r7, #24]
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	4b23      	ldr	r3, [pc, #140]	; (800127c <TrimRead+0x1ac>)
 80011ee:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 80011f0:	7ebb      	ldrb	r3, [r7, #26]
 80011f2:	021b      	lsls	r3, r3, #8
 80011f4:	b21a      	sxth	r2, r3
 80011f6:	7e7b      	ldrb	r3, [r7, #25]
 80011f8:	b21b      	sxth	r3, r3
 80011fa:	4313      	orrs	r3, r2
 80011fc:	b21a      	sxth	r2, r3
 80011fe:	4b20      	ldr	r3, [pc, #128]	; (8001280 <TrimRead+0x1b0>)
 8001200:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 8001202:	7efb      	ldrb	r3, [r7, #27]
 8001204:	b29a      	uxth	r2, r3
 8001206:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <TrimRead+0x1b4>)
 8001208:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 800120a:	7f3b      	ldrb	r3, [r7, #28]
 800120c:	011b      	lsls	r3, r3, #4
 800120e:	b21a      	sxth	r2, r3
 8001210:	7f7b      	ldrb	r3, [r7, #29]
 8001212:	b21b      	sxth	r3, r3
 8001214:	f003 030f 	and.w	r3, r3, #15
 8001218:	b21b      	sxth	r3, r3
 800121a:	4313      	orrs	r3, r2
 800121c:	b21a      	sxth	r2, r3
 800121e:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <TrimRead+0x1b8>)
 8001220:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 8001222:	7fbb      	ldrb	r3, [r7, #30]
 8001224:	011b      	lsls	r3, r3, #4
 8001226:	b21a      	sxth	r2, r3
 8001228:	7f7b      	ldrb	r3, [r7, #29]
 800122a:	091b      	lsrs	r3, r3, #4
 800122c:	b2db      	uxtb	r3, r3
 800122e:	b21b      	sxth	r3, r3
 8001230:	4313      	orrs	r3, r2
 8001232:	b21a      	sxth	r2, r3
 8001234:	4b15      	ldr	r3, [pc, #84]	; (800128c <TrimRead+0x1bc>)
 8001236:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8001238:	7ffb      	ldrb	r3, [r7, #31]
 800123a:	b21a      	sxth	r2, r3
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <TrimRead+0x1c0>)
 800123e:	801a      	strh	r2, [r3, #0]
}
 8001240:	bf00      	nop
 8001242:	3720      	adds	r7, #32
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000230 	.word	0x20000230
 800124c:	20000208 	.word	0x20000208
 8001250:	20000210 	.word	0x20000210
 8001254:	20000212 	.word	0x20000212
 8001258:	2000020a 	.word	0x2000020a
 800125c:	20000214 	.word	0x20000214
 8001260:	20000216 	.word	0x20000216
 8001264:	20000218 	.word	0x20000218
 8001268:	2000021a 	.word	0x2000021a
 800126c:	2000021c 	.word	0x2000021c
 8001270:	2000021e 	.word	0x2000021e
 8001274:	20000220 	.word	0x20000220
 8001278:	20000222 	.word	0x20000222
 800127c:	2000020c 	.word	0x2000020c
 8001280:	20000224 	.word	0x20000224
 8001284:	2000020e 	.word	0x2000020e
 8001288:	20000226 	.word	0x20000226
 800128c:	20000228 	.word	0x20000228
 8001290:	2000022a 	.word	0x2000022a

08001294 <BMP280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BMP280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8001294:	b590      	push	{r4, r7, lr}
 8001296:	b089      	sub	sp, #36	; 0x24
 8001298:	af04      	add	r7, sp, #16
 800129a:	4604      	mov	r4, r0
 800129c:	4608      	mov	r0, r1
 800129e:	4611      	mov	r1, r2
 80012a0:	461a      	mov	r2, r3
 80012a2:	4623      	mov	r3, r4
 80012a4:	71fb      	strb	r3, [r7, #7]
 80012a6:	4603      	mov	r3, r0
 80012a8:	71bb      	strb	r3, [r7, #6]
 80012aa:	460b      	mov	r3, r1
 80012ac:	717b      	strb	r3, [r7, #5]
 80012ae:	4613      	mov	r3, r2
 80012b0:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 80012b2:	f7ff ff0d 	bl	80010d0 <TrimRead>

	uint8_t datatowrite = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 80012be:	23b6      	movs	r3, #182	; 0xb6
 80012c0:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80012c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c6:	9302      	str	r3, [sp, #8]
 80012c8:	2301      	movs	r3, #1
 80012ca:	9301      	str	r3, [sp, #4]
 80012cc:	f107 030f 	add.w	r3, r7, #15
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2301      	movs	r3, #1
 80012d4:	22e0      	movs	r2, #224	; 0xe0
 80012d6:	21ec      	movs	r1, #236	; 0xec
 80012d8:	4858      	ldr	r0, [pc, #352]	; (800143c <BMP280_Config+0x1a8>)
 80012da:	f002 fc63 	bl	8003ba4 <HAL_I2C_Mem_Write>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d002      	beq.n	80012ea <BMP280_Config+0x56>
	{
		return -1;
 80012e4:	f04f 33ff 	mov.w	r3, #4294967295
 80012e8:	e0a3      	b.n	8001432 <BMP280_Config+0x19e>
	}

	HAL_Delay (100);
 80012ea:	2064      	movs	r0, #100	; 0x64
 80012ec:	f001 fc9c 	bl	8002c28 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 80012f0:	797b      	ldrb	r3, [r7, #5]
 80012f2:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80012f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f8:	9302      	str	r3, [sp, #8]
 80012fa:	2301      	movs	r3, #1
 80012fc:	9301      	str	r3, [sp, #4]
 80012fe:	f107 030f 	add.w	r3, r7, #15
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	2301      	movs	r3, #1
 8001306:	22f2      	movs	r2, #242	; 0xf2
 8001308:	21ec      	movs	r1, #236	; 0xec
 800130a:	484c      	ldr	r0, [pc, #304]	; (800143c <BMP280_Config+0x1a8>)
 800130c:	f002 fc4a 	bl	8003ba4 <HAL_I2C_Mem_Write>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d002      	beq.n	800131c <BMP280_Config+0x88>
	{
		return -2;
 8001316:	f06f 0301 	mvn.w	r3, #1
 800131a:	e08a      	b.n	8001432 <BMP280_Config+0x19e>
	}
	HAL_Delay (100);
 800131c:	2064      	movs	r0, #100	; 0x64
 800131e:	f001 fc83 	bl	8002c28 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 8001322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001326:	9302      	str	r3, [sp, #8]
 8001328:	2301      	movs	r3, #1
 800132a:	9301      	str	r3, [sp, #4]
 800132c:	f107 030e 	add.w	r3, r7, #14
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	2301      	movs	r3, #1
 8001334:	22f2      	movs	r2, #242	; 0xf2
 8001336:	21ec      	movs	r1, #236	; 0xec
 8001338:	4840      	ldr	r0, [pc, #256]	; (800143c <BMP280_Config+0x1a8>)
 800133a:	f002 fd47 	bl	8003dcc <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800133e:	7bba      	ldrb	r2, [r7, #14]
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	429a      	cmp	r2, r3
 8001344:	d002      	beq.n	800134c <BMP280_Config+0xb8>
	{
		return -3;
 8001346:	f06f 0302 	mvn.w	r3, #2
 800134a:	e072      	b.n	8001432 <BMP280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 800134c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001350:	015b      	lsls	r3, r3, #5
 8001352:	b25a      	sxtb	r2, r3
 8001354:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	b25b      	sxtb	r3, r3
 800135c:	4313      	orrs	r3, r2
 800135e:	b25b      	sxtb	r3, r3
 8001360:	b2db      	uxtb	r3, r3
 8001362:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001364:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001368:	9302      	str	r3, [sp, #8]
 800136a:	2301      	movs	r3, #1
 800136c:	9301      	str	r3, [sp, #4]
 800136e:	f107 030f 	add.w	r3, r7, #15
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	2301      	movs	r3, #1
 8001376:	22f5      	movs	r2, #245	; 0xf5
 8001378:	21ec      	movs	r1, #236	; 0xec
 800137a:	4830      	ldr	r0, [pc, #192]	; (800143c <BMP280_Config+0x1a8>)
 800137c:	f002 fc12 	bl	8003ba4 <HAL_I2C_Mem_Write>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d002      	beq.n	800138c <BMP280_Config+0xf8>
	{
		return -4;
 8001386:	f06f 0303 	mvn.w	r3, #3
 800138a:	e052      	b.n	8001432 <BMP280_Config+0x19e>
	}
	HAL_Delay (100);
 800138c:	2064      	movs	r0, #100	; 0x64
 800138e:	f001 fc4b 	bl	8002c28 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 8001392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001396:	9302      	str	r3, [sp, #8]
 8001398:	2301      	movs	r3, #1
 800139a:	9301      	str	r3, [sp, #4]
 800139c:	f107 030e 	add.w	r3, r7, #14
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	2301      	movs	r3, #1
 80013a4:	22f5      	movs	r2, #245	; 0xf5
 80013a6:	21ec      	movs	r1, #236	; 0xec
 80013a8:	4824      	ldr	r0, [pc, #144]	; (800143c <BMP280_Config+0x1a8>)
 80013aa:	f002 fd0f 	bl	8003dcc <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80013ae:	7bba      	ldrb	r2, [r7, #14]
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d002      	beq.n	80013bc <BMP280_Config+0x128>
	{
		return -5;
 80013b6:	f06f 0304 	mvn.w	r3, #4
 80013ba:	e03a      	b.n	8001432 <BMP280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	015b      	lsls	r3, r3, #5
 80013c0:	b25a      	sxtb	r2, r3
 80013c2:	79bb      	ldrb	r3, [r7, #6]
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	b25b      	sxtb	r3, r3
 80013c8:	4313      	orrs	r3, r2
 80013ca:	b25a      	sxtb	r2, r3
 80013cc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	b25b      	sxtb	r3, r3
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80013d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013dc:	9302      	str	r3, [sp, #8]
 80013de:	2301      	movs	r3, #1
 80013e0:	9301      	str	r3, [sp, #4]
 80013e2:	f107 030f 	add.w	r3, r7, #15
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	2301      	movs	r3, #1
 80013ea:	22f4      	movs	r2, #244	; 0xf4
 80013ec:	21ec      	movs	r1, #236	; 0xec
 80013ee:	4813      	ldr	r0, [pc, #76]	; (800143c <BMP280_Config+0x1a8>)
 80013f0:	f002 fbd8 	bl	8003ba4 <HAL_I2C_Mem_Write>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d002      	beq.n	8001400 <BMP280_Config+0x16c>
	{
		return -6;
 80013fa:	f06f 0305 	mvn.w	r3, #5
 80013fe:	e018      	b.n	8001432 <BMP280_Config+0x19e>
	}
	HAL_Delay (100);
 8001400:	2064      	movs	r0, #100	; 0x64
 8001402:	f001 fc11 	bl	8002c28 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 8001406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140a:	9302      	str	r3, [sp, #8]
 800140c:	2301      	movs	r3, #1
 800140e:	9301      	str	r3, [sp, #4]
 8001410:	f107 030e 	add.w	r3, r7, #14
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	2301      	movs	r3, #1
 8001418:	22f4      	movs	r2, #244	; 0xf4
 800141a:	21ec      	movs	r1, #236	; 0xec
 800141c:	4807      	ldr	r0, [pc, #28]	; (800143c <BMP280_Config+0x1a8>)
 800141e:	f002 fcd5 	bl	8003dcc <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001422:	7bba      	ldrb	r2, [r7, #14]
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	429a      	cmp	r2, r3
 8001428:	d002      	beq.n	8001430 <BMP280_Config+0x19c>
	{
		return -7;
 800142a:	f06f 0306 	mvn.w	r3, #6
 800142e:	e000      	b.n	8001432 <BMP280_Config+0x19e>
	}

	return 0;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	bd90      	pop	{r4, r7, pc}
 800143a:	bf00      	nop
 800143c:	20000230 	.word	0x20000230

08001440 <BMPReadRaw>:


int BMPReadRaw(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af04      	add	r7, sp, #16
	uint8_t RawData[6];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BMP280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 8001446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144a:	9302      	str	r3, [sp, #8]
 800144c:	2301      	movs	r3, #1
 800144e:	9301      	str	r3, [sp, #4]
 8001450:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <BMPReadRaw+0x84>)
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	2301      	movs	r3, #1
 8001456:	22d0      	movs	r2, #208	; 0xd0
 8001458:	21ec      	movs	r1, #236	; 0xec
 800145a:	481b      	ldr	r0, [pc, #108]	; (80014c8 <BMPReadRaw+0x88>)
 800145c:	f002 fcb6 	bl	8003dcc <HAL_I2C_Mem_Read>

	if (chipID == 0x58)
 8001460:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <BMPReadRaw+0x84>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b58      	cmp	r3, #88	; 0x58
 8001466:	d127      	bne.n	80014b8 <BMPReadRaw+0x78>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, PRESS_MSB_REG, 1, RawData, 6, HAL_MAX_DELAY);
 8001468:	f04f 33ff 	mov.w	r3, #4294967295
 800146c:	9302      	str	r3, [sp, #8]
 800146e:	2306      	movs	r3, #6
 8001470:	9301      	str	r3, [sp, #4]
 8001472:	463b      	mov	r3, r7
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	2301      	movs	r3, #1
 8001478:	22f7      	movs	r2, #247	; 0xf7
 800147a:	21ec      	movs	r1, #236	; 0xec
 800147c:	4812      	ldr	r0, [pc, #72]	; (80014c8 <BMPReadRaw+0x88>)
 800147e:	f002 fca5 	bl	8003dcc <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 8001482:	783b      	ldrb	r3, [r7, #0]
 8001484:	031a      	lsls	r2, r3, #12
 8001486:	787b      	ldrb	r3, [r7, #1]
 8001488:	011b      	lsls	r3, r3, #4
 800148a:	4313      	orrs	r3, r2
 800148c:	78ba      	ldrb	r2, [r7, #2]
 800148e:	0912      	lsrs	r2, r2, #4
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	4313      	orrs	r3, r2
 8001494:	4a0d      	ldr	r2, [pc, #52]	; (80014cc <BMPReadRaw+0x8c>)
 8001496:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8001498:	78fb      	ldrb	r3, [r7, #3]
 800149a:	031a      	lsls	r2, r3, #12
 800149c:	793b      	ldrb	r3, [r7, #4]
 800149e:	011b      	lsls	r3, r3, #4
 80014a0:	4313      	orrs	r3, r2
 80014a2:	797a      	ldrb	r2, [r7, #5]
 80014a4:	0912      	lsrs	r2, r2, #4
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	4313      	orrs	r3, r2
 80014aa:	4a09      	ldr	r2, [pc, #36]	; (80014d0 <BMPReadRaw+0x90>)
 80014ac:	6013      	str	r3, [r2, #0]
		hRaw = 0;
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <BMPReadRaw+0x94>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]

		return 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	e001      	b.n	80014bc <BMPReadRaw+0x7c>
	}

	else return -1;
 80014b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	200001f8 	.word	0x200001f8
 80014c8:	20000230 	.word	0x20000230
 80014cc:	20000200 	.word	0x20000200
 80014d0:	200001fc 	.word	0x200001fc
 80014d4:	20000204 	.word	0x20000204

080014d8 <BMP280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BMP280_compensate_T_int32(int32_t adc_T)
{
 80014d8:	b480      	push	{r7}
 80014da:	b087      	sub	sp, #28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	10da      	asrs	r2, r3, #3
 80014e4:	4b19      	ldr	r3, [pc, #100]	; (800154c <BMP280_compensate_T_int32+0x74>)
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	4a18      	ldr	r2, [pc, #96]	; (8001550 <BMP280_compensate_T_int32+0x78>)
 80014ee:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014f2:	fb02 f303 	mul.w	r3, r2, r3
 80014f6:	12db      	asrs	r3, r3, #11
 80014f8:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	111b      	asrs	r3, r3, #4
 80014fe:	4a13      	ldr	r2, [pc, #76]	; (800154c <BMP280_compensate_T_int32+0x74>)
 8001500:	8812      	ldrh	r2, [r2, #0]
 8001502:	1a9b      	subs	r3, r3, r2
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	1112      	asrs	r2, r2, #4
 8001508:	4910      	ldr	r1, [pc, #64]	; (800154c <BMP280_compensate_T_int32+0x74>)
 800150a:	8809      	ldrh	r1, [r1, #0]
 800150c:	1a52      	subs	r2, r2, r1
 800150e:	fb02 f303 	mul.w	r3, r2, r3
 8001512:	131b      	asrs	r3, r3, #12
 8001514:	4a0f      	ldr	r2, [pc, #60]	; (8001554 <BMP280_compensate_T_int32+0x7c>)
 8001516:	f9b2 2000 	ldrsh.w	r2, [r2]
 800151a:	fb02 f303 	mul.w	r3, r2, r3
 800151e:	139b      	asrs	r3, r3, #14
 8001520:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	4413      	add	r3, r2
 8001528:	4a0b      	ldr	r2, [pc, #44]	; (8001558 <BMP280_compensate_T_int32+0x80>)
 800152a:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800152c:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <BMP280_compensate_T_int32+0x80>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4613      	mov	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	3380      	adds	r3, #128	; 0x80
 8001538:	121b      	asrs	r3, r3, #8
 800153a:	60fb      	str	r3, [r7, #12]
	return T;
 800153c:	68fb      	ldr	r3, [r7, #12]
}
 800153e:	4618      	mov	r0, r3
 8001540:	371c      	adds	r7, #28
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	20000208 	.word	0x20000208
 8001550:	20000210 	.word	0x20000210
 8001554:	20000212 	.word	0x20000212
 8001558:	2000022c 	.word	0x2000022c

0800155c <BMP280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BMP280_compensate_P_int64(int32_t adc_P)
{
 800155c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001560:	b0ca      	sub	sp, #296	; 0x128
 8001562:	af00      	add	r7, sp, #0
 8001564:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001568:	4baf      	ldr	r3, [pc, #700]	; (8001828 <BMP280_compensate_P_int64+0x2cc>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	17da      	asrs	r2, r3, #31
 800156e:	461c      	mov	r4, r3
 8001570:	4615      	mov	r5, r2
 8001572:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8001576:	f145 3bff 	adc.w	fp, r5, #4294967295
 800157a:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 800157e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001582:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001586:	fb03 f102 	mul.w	r1, r3, r2
 800158a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800158e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001592:	fb02 f303 	mul.w	r3, r2, r3
 8001596:	18ca      	adds	r2, r1, r3
 8001598:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800159c:	fba3 8903 	umull	r8, r9, r3, r3
 80015a0:	eb02 0309 	add.w	r3, r2, r9
 80015a4:	4699      	mov	r9, r3
 80015a6:	4ba1      	ldr	r3, [pc, #644]	; (800182c <BMP280_compensate_P_int64+0x2d0>)
 80015a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	17da      	asrs	r2, r3, #31
 80015b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80015b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80015b8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80015bc:	4603      	mov	r3, r0
 80015be:	fb03 f209 	mul.w	r2, r3, r9
 80015c2:	460b      	mov	r3, r1
 80015c4:	fb08 f303 	mul.w	r3, r8, r3
 80015c8:	4413      	add	r3, r2
 80015ca:	4602      	mov	r2, r0
 80015cc:	fba8 1202 	umull	r1, r2, r8, r2
 80015d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80015d4:	460a      	mov	r2, r1
 80015d6:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80015da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80015de:	4413      	add	r3, r2
 80015e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80015e4:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80015e8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80015ec:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80015f0:	4b8f      	ldr	r3, [pc, #572]	; (8001830 <BMP280_compensate_P_int64+0x2d4>)
 80015f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f6:	b21b      	sxth	r3, r3
 80015f8:	17da      	asrs	r2, r3, #31
 80015fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80015fe:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001602:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001606:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800160a:	462a      	mov	r2, r5
 800160c:	fb02 f203 	mul.w	r2, r2, r3
 8001610:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001614:	4621      	mov	r1, r4
 8001616:	fb01 f303 	mul.w	r3, r1, r3
 800161a:	441a      	add	r2, r3
 800161c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001620:	4621      	mov	r1, r4
 8001622:	fba3 1301 	umull	r1, r3, r3, r1
 8001626:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800162a:	460b      	mov	r3, r1
 800162c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001630:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001634:	18d3      	adds	r3, r2, r3
 8001636:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800163a:	f04f 0000 	mov.w	r0, #0
 800163e:	f04f 0100 	mov.w	r1, #0
 8001642:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001646:	462b      	mov	r3, r5
 8001648:	0459      	lsls	r1, r3, #17
 800164a:	4623      	mov	r3, r4
 800164c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001650:	4623      	mov	r3, r4
 8001652:	0458      	lsls	r0, r3, #17
 8001654:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001658:	1814      	adds	r4, r2, r0
 800165a:	643c      	str	r4, [r7, #64]	; 0x40
 800165c:	414b      	adcs	r3, r1
 800165e:	647b      	str	r3, [r7, #68]	; 0x44
 8001660:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001664:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001668:	4b72      	ldr	r3, [pc, #456]	; (8001834 <BMP280_compensate_P_int64+0x2d8>)
 800166a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800166e:	b21b      	sxth	r3, r3
 8001670:	17da      	asrs	r2, r3, #31
 8001672:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001676:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800167a:	f04f 0000 	mov.w	r0, #0
 800167e:	f04f 0100 	mov.w	r1, #0
 8001682:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001686:	00d9      	lsls	r1, r3, #3
 8001688:	2000      	movs	r0, #0
 800168a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800168e:	1814      	adds	r4, r2, r0
 8001690:	63bc      	str	r4, [r7, #56]	; 0x38
 8001692:	414b      	adcs	r3, r1
 8001694:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001696:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800169a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 800169e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80016a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016a6:	fb03 f102 	mul.w	r1, r3, r2
 80016aa:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80016ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016b2:	fb02 f303 	mul.w	r3, r2, r3
 80016b6:	18ca      	adds	r2, r1, r3
 80016b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016bc:	fba3 1303 	umull	r1, r3, r3, r3
 80016c0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80016c4:	460b      	mov	r3, r1
 80016c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80016ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80016ce:	18d3      	adds	r3, r2, r3
 80016d0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80016d4:	4b58      	ldr	r3, [pc, #352]	; (8001838 <BMP280_compensate_P_int64+0x2dc>)
 80016d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016da:	b21b      	sxth	r3, r3
 80016dc:	17da      	asrs	r2, r3, #31
 80016de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80016e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80016e6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80016ea:	462b      	mov	r3, r5
 80016ec:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80016f0:	4642      	mov	r2, r8
 80016f2:	fb02 f203 	mul.w	r2, r2, r3
 80016f6:	464b      	mov	r3, r9
 80016f8:	4621      	mov	r1, r4
 80016fa:	fb01 f303 	mul.w	r3, r1, r3
 80016fe:	4413      	add	r3, r2
 8001700:	4622      	mov	r2, r4
 8001702:	4641      	mov	r1, r8
 8001704:	fba2 1201 	umull	r1, r2, r2, r1
 8001708:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800170c:	460a      	mov	r2, r1
 800170e:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001712:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001716:	4413      	add	r3, r2
 8001718:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800171c:	f04f 0000 	mov.w	r0, #0
 8001720:	f04f 0100 	mov.w	r1, #0
 8001724:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001728:	4623      	mov	r3, r4
 800172a:	0a18      	lsrs	r0, r3, #8
 800172c:	462b      	mov	r3, r5
 800172e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001732:	462b      	mov	r3, r5
 8001734:	1219      	asrs	r1, r3, #8
 8001736:	4b41      	ldr	r3, [pc, #260]	; (800183c <BMP280_compensate_P_int64+0x2e0>)
 8001738:	f9b3 3000 	ldrsh.w	r3, [r3]
 800173c:	b21b      	sxth	r3, r3
 800173e:	17da      	asrs	r2, r3, #31
 8001740:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001744:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001748:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800174c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001750:	464a      	mov	r2, r9
 8001752:	fb02 f203 	mul.w	r2, r2, r3
 8001756:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800175a:	4644      	mov	r4, r8
 800175c:	fb04 f303 	mul.w	r3, r4, r3
 8001760:	441a      	add	r2, r3
 8001762:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001766:	4644      	mov	r4, r8
 8001768:	fba3 4304 	umull	r4, r3, r3, r4
 800176c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001770:	4623      	mov	r3, r4
 8001772:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001776:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800177a:	18d3      	adds	r3, r2, r3
 800177c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	f04f 0300 	mov.w	r3, #0
 8001788:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800178c:	464c      	mov	r4, r9
 800178e:	0323      	lsls	r3, r4, #12
 8001790:	4644      	mov	r4, r8
 8001792:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001796:	4644      	mov	r4, r8
 8001798:	0322      	lsls	r2, r4, #12
 800179a:	1884      	adds	r4, r0, r2
 800179c:	633c      	str	r4, [r7, #48]	; 0x30
 800179e:	eb41 0303 	adc.w	r3, r1, r3
 80017a2:	637b      	str	r3, [r7, #52]	; 0x34
 80017a4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80017a8:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80017ac:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80017b0:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80017b4:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80017b8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80017bc:	4b20      	ldr	r3, [pc, #128]	; (8001840 <BMP280_compensate_P_int64+0x2e4>)
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	2200      	movs	r2, #0
 80017c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80017c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80017cc:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80017d0:	462b      	mov	r3, r5
 80017d2:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80017d6:	4642      	mov	r2, r8
 80017d8:	fb02 f203 	mul.w	r2, r2, r3
 80017dc:	464b      	mov	r3, r9
 80017de:	4621      	mov	r1, r4
 80017e0:	fb01 f303 	mul.w	r3, r1, r3
 80017e4:	4413      	add	r3, r2
 80017e6:	4622      	mov	r2, r4
 80017e8:	4641      	mov	r1, r8
 80017ea:	fba2 1201 	umull	r1, r2, r2, r1
 80017ee:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80017f2:	460a      	mov	r2, r1
 80017f4:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80017f8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80017fc:	4413      	add	r3, r2
 80017fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	f04f 0300 	mov.w	r3, #0
 800180a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800180e:	4629      	mov	r1, r5
 8001810:	104a      	asrs	r2, r1, #1
 8001812:	4629      	mov	r1, r5
 8001814:	17cb      	asrs	r3, r1, #31
 8001816:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 800181a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800181e:	4313      	orrs	r3, r2
 8001820:	d110      	bne.n	8001844 <BMP280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 8001822:	2300      	movs	r3, #0
 8001824:	e154      	b.n	8001ad0 <BMP280_compensate_P_int64+0x574>
 8001826:	bf00      	nop
 8001828:	2000022c 	.word	0x2000022c
 800182c:	2000021c 	.word	0x2000021c
 8001830:	2000021a 	.word	0x2000021a
 8001834:	20000218 	.word	0x20000218
 8001838:	20000216 	.word	0x20000216
 800183c:	20000214 	.word	0x20000214
 8001840:	2000020a 	.word	0x2000020a
	}
	p = 1048576-adc_P;
 8001844:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001848:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800184c:	17da      	asrs	r2, r3, #31
 800184e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001850:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001852:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001856:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800185a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800185e:	105b      	asrs	r3, r3, #1
 8001860:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001864:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001868:	07db      	lsls	r3, r3, #31
 800186a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800186e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001872:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001876:	4621      	mov	r1, r4
 8001878:	1a89      	subs	r1, r1, r2
 800187a:	67b9      	str	r1, [r7, #120]	; 0x78
 800187c:	4629      	mov	r1, r5
 800187e:	eb61 0303 	sbc.w	r3, r1, r3
 8001882:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001884:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001888:	4622      	mov	r2, r4
 800188a:	462b      	mov	r3, r5
 800188c:	1891      	adds	r1, r2, r2
 800188e:	6239      	str	r1, [r7, #32]
 8001890:	415b      	adcs	r3, r3
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
 8001894:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001898:	4621      	mov	r1, r4
 800189a:	1851      	adds	r1, r2, r1
 800189c:	61b9      	str	r1, [r7, #24]
 800189e:	4629      	mov	r1, r5
 80018a0:	414b      	adcs	r3, r1
 80018a2:	61fb      	str	r3, [r7, #28]
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80018b0:	4649      	mov	r1, r9
 80018b2:	018b      	lsls	r3, r1, #6
 80018b4:	4641      	mov	r1, r8
 80018b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018ba:	4641      	mov	r1, r8
 80018bc:	018a      	lsls	r2, r1, #6
 80018be:	4641      	mov	r1, r8
 80018c0:	1889      	adds	r1, r1, r2
 80018c2:	6139      	str	r1, [r7, #16]
 80018c4:	4649      	mov	r1, r9
 80018c6:	eb43 0101 	adc.w	r1, r3, r1
 80018ca:	6179      	str	r1, [r7, #20]
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	f04f 0300 	mov.w	r3, #0
 80018d4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80018d8:	4649      	mov	r1, r9
 80018da:	008b      	lsls	r3, r1, #2
 80018dc:	4641      	mov	r1, r8
 80018de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018e2:	4641      	mov	r1, r8
 80018e4:	008a      	lsls	r2, r1, #2
 80018e6:	4610      	mov	r0, r2
 80018e8:	4619      	mov	r1, r3
 80018ea:	4603      	mov	r3, r0
 80018ec:	4622      	mov	r2, r4
 80018ee:	189b      	adds	r3, r3, r2
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	460b      	mov	r3, r1
 80018f4:	462a      	mov	r2, r5
 80018f6:	eb42 0303 	adc.w	r3, r2, r3
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	f04f 0200 	mov.w	r2, #0
 8001900:	f04f 0300 	mov.w	r3, #0
 8001904:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001908:	4649      	mov	r1, r9
 800190a:	008b      	lsls	r3, r1, #2
 800190c:	4641      	mov	r1, r8
 800190e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001912:	4641      	mov	r1, r8
 8001914:	008a      	lsls	r2, r1, #2
 8001916:	4610      	mov	r0, r2
 8001918:	4619      	mov	r1, r3
 800191a:	4603      	mov	r3, r0
 800191c:	4622      	mov	r2, r4
 800191e:	189b      	adds	r3, r3, r2
 8001920:	673b      	str	r3, [r7, #112]	; 0x70
 8001922:	462b      	mov	r3, r5
 8001924:	460a      	mov	r2, r1
 8001926:	eb42 0303 	adc.w	r3, r2, r3
 800192a:	677b      	str	r3, [r7, #116]	; 0x74
 800192c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001930:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001934:	f7ff f9c8 	bl	8000cc8 <__aeabi_ldivmod>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001940:	4b66      	ldr	r3, [pc, #408]	; (8001adc <BMP280_compensate_P_int64+0x580>)
 8001942:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001946:	b21b      	sxth	r3, r3
 8001948:	17da      	asrs	r2, r3, #31
 800194a:	66bb      	str	r3, [r7, #104]	; 0x68
 800194c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800194e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001952:	f04f 0000 	mov.w	r0, #0
 8001956:	f04f 0100 	mov.w	r1, #0
 800195a:	0b50      	lsrs	r0, r2, #13
 800195c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001960:	1359      	asrs	r1, r3, #13
 8001962:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001966:	462b      	mov	r3, r5
 8001968:	fb00 f203 	mul.w	r2, r0, r3
 800196c:	4623      	mov	r3, r4
 800196e:	fb03 f301 	mul.w	r3, r3, r1
 8001972:	4413      	add	r3, r2
 8001974:	4622      	mov	r2, r4
 8001976:	fba2 1200 	umull	r1, r2, r2, r0
 800197a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800197e:	460a      	mov	r2, r1
 8001980:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001984:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001988:	4413      	add	r3, r2
 800198a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800198e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001992:	f04f 0000 	mov.w	r0, #0
 8001996:	f04f 0100 	mov.w	r1, #0
 800199a:	0b50      	lsrs	r0, r2, #13
 800199c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80019a0:	1359      	asrs	r1, r3, #13
 80019a2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80019a6:	462b      	mov	r3, r5
 80019a8:	fb00 f203 	mul.w	r2, r0, r3
 80019ac:	4623      	mov	r3, r4
 80019ae:	fb03 f301 	mul.w	r3, r3, r1
 80019b2:	4413      	add	r3, r2
 80019b4:	4622      	mov	r2, r4
 80019b6:	fba2 1200 	umull	r1, r2, r2, r0
 80019ba:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80019be:	460a      	mov	r2, r1
 80019c0:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80019c4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80019c8:	4413      	add	r3, r2
 80019ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	f04f 0300 	mov.w	r3, #0
 80019d6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80019da:	4621      	mov	r1, r4
 80019dc:	0e4a      	lsrs	r2, r1, #25
 80019de:	4629      	mov	r1, r5
 80019e0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80019e4:	4629      	mov	r1, r5
 80019e6:	164b      	asrs	r3, r1, #25
 80019e8:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80019ec:	4b3c      	ldr	r3, [pc, #240]	; (8001ae0 <BMP280_compensate_P_int64+0x584>)
 80019ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019f2:	b21b      	sxth	r3, r3
 80019f4:	17da      	asrs	r2, r3, #31
 80019f6:	663b      	str	r3, [r7, #96]	; 0x60
 80019f8:	667a      	str	r2, [r7, #100]	; 0x64
 80019fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80019fe:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001a02:	462a      	mov	r2, r5
 8001a04:	fb02 f203 	mul.w	r2, r2, r3
 8001a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a0c:	4621      	mov	r1, r4
 8001a0e:	fb01 f303 	mul.w	r3, r1, r3
 8001a12:	4413      	add	r3, r2
 8001a14:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001a18:	4621      	mov	r1, r4
 8001a1a:	fba2 1201 	umull	r1, r2, r2, r1
 8001a1e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001a22:	460a      	mov	r2, r1
 8001a24:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001a28:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001a2c:	4413      	add	r3, r2
 8001a2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	f04f 0300 	mov.w	r3, #0
 8001a3a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001a3e:	4621      	mov	r1, r4
 8001a40:	0cca      	lsrs	r2, r1, #19
 8001a42:	4629      	mov	r1, r5
 8001a44:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001a48:	4629      	mov	r1, r5
 8001a4a:	14cb      	asrs	r3, r1, #19
 8001a4c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001a50:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001a54:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001a58:	1884      	adds	r4, r0, r2
 8001a5a:	65bc      	str	r4, [r7, #88]	; 0x58
 8001a5c:	eb41 0303 	adc.w	r3, r1, r3
 8001a60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a62:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001a66:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001a6a:	4621      	mov	r1, r4
 8001a6c:	1889      	adds	r1, r1, r2
 8001a6e:	6539      	str	r1, [r7, #80]	; 0x50
 8001a70:	4629      	mov	r1, r5
 8001a72:	eb43 0101 	adc.w	r1, r3, r1
 8001a76:	6579      	str	r1, [r7, #84]	; 0x54
 8001a78:	f04f 0000 	mov.w	r0, #0
 8001a7c:	f04f 0100 	mov.w	r1, #0
 8001a80:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001a84:	4623      	mov	r3, r4
 8001a86:	0a18      	lsrs	r0, r3, #8
 8001a88:	462b      	mov	r3, r5
 8001a8a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a8e:	462b      	mov	r3, r5
 8001a90:	1219      	asrs	r1, r3, #8
 8001a92:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <BMP280_compensate_P_int64+0x588>)
 8001a94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a98:	b21b      	sxth	r3, r3
 8001a9a:	17da      	asrs	r2, r3, #31
 8001a9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a9e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001aac:	464c      	mov	r4, r9
 8001aae:	0123      	lsls	r3, r4, #4
 8001ab0:	4644      	mov	r4, r8
 8001ab2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001ab6:	4644      	mov	r4, r8
 8001ab8:	0122      	lsls	r2, r4, #4
 8001aba:	1884      	adds	r4, r0, r2
 8001abc:	603c      	str	r4, [r7, #0]
 8001abe:	eb41 0303 	adc.w	r3, r1, r3
 8001ac2:	607b      	str	r3, [r7, #4]
 8001ac4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001ac8:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 8001acc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001adc:	20000222 	.word	0x20000222
 8001ae0:	20000220 	.word	0x20000220
 8001ae4:	2000021e 	.word	0x2000021e

08001ae8 <BMP280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t BMP280_compensate_H_int32(int32_t adc_H)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001af0:	4b2c      	ldr	r3, [pc, #176]	; (8001ba4 <BMP280_compensate_H_int32+0xbc>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001af8:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	039a      	lsls	r2, r3, #14
 8001afe:	4b2a      	ldr	r3, [pc, #168]	; (8001ba8 <BMP280_compensate_H_int32+0xc0>)
 8001b00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b04:	051b      	lsls	r3, r3, #20
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	4b28      	ldr	r3, [pc, #160]	; (8001bac <BMP280_compensate_H_int32+0xc4>)
 8001b0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	fb01 f303 	mul.w	r3, r1, r3
 8001b16:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001b18:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001b1c:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001b1e:	4a24      	ldr	r2, [pc, #144]	; (8001bb0 <BMP280_compensate_H_int32+0xc8>)
 8001b20:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001b24:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001b2c:	1292      	asrs	r2, r2, #10
 8001b2e:	4921      	ldr	r1, [pc, #132]	; (8001bb4 <BMP280_compensate_H_int32+0xcc>)
 8001b30:	8809      	ldrh	r1, [r1, #0]
 8001b32:	4608      	mov	r0, r1
 8001b34:	68f9      	ldr	r1, [r7, #12]
 8001b36:	fb00 f101 	mul.w	r1, r0, r1
 8001b3a:	12c9      	asrs	r1, r1, #11
 8001b3c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001b40:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001b44:	1292      	asrs	r2, r2, #10
 8001b46:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8001b4a:	491b      	ldr	r1, [pc, #108]	; (8001bb8 <BMP280_compensate_H_int32+0xd0>)
 8001b4c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001b50:	fb01 f202 	mul.w	r2, r1, r2
 8001b54:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 8001b58:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001b5a:	fb02 f303 	mul.w	r3, r2, r3
 8001b5e:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	13db      	asrs	r3, r3, #15
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	13d2      	asrs	r2, r2, #15
 8001b68:	fb02 f303 	mul.w	r3, r2, r3
 8001b6c:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001b6e:	4a13      	ldr	r2, [pc, #76]	; (8001bbc <BMP280_compensate_H_int32+0xd4>)
 8001b70:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b72:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001b76:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001b84:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001b8c:	bfa8      	it	ge
 8001b8e:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001b92:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	131b      	asrs	r3, r3, #12
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	2000022c 	.word	0x2000022c
 8001ba8:	20000226 	.word	0x20000226
 8001bac:	20000228 	.word	0x20000228
 8001bb0:	2000022a 	.word	0x2000022a
 8001bb4:	2000020e 	.word	0x2000020e
 8001bb8:	20000224 	.word	0x20000224
 8001bbc:	2000020c 	.word	0x2000020c

08001bc0 <BMP280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BMP280_Measure (void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
	if (BMPReadRaw() == 0)
 8001bc4:	f7ff fc3c 	bl	8001440 <BMPReadRaw>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d163      	bne.n	8001c96 <BMP280_Measure+0xd6>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 8001bce:	4b39      	ldr	r3, [pc, #228]	; (8001cb4 <BMP280_Measure+0xf4>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001bd6:	d104      	bne.n	8001be2 <BMP280_Measure+0x22>
 8001bd8:	4b37      	ldr	r3, [pc, #220]	; (8001cb8 <BMP280_Measure+0xf8>)
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	e016      	b.n	8001c10 <BMP280_Measure+0x50>
		  else
		  {
			  Temperature = (BMP280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001be2:	4b34      	ldr	r3, [pc, #208]	; (8001cb4 <BMP280_Measure+0xf4>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff fc76 	bl	80014d8 <BMP280_compensate_T_int32>
 8001bec:	4603      	mov	r3, r0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fcb8 	bl	8000564 <__aeabi_i2d>
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	4b30      	ldr	r3, [pc, #192]	; (8001cbc <BMP280_Measure+0xfc>)
 8001bfa:	f7fe fe47 	bl	800088c <__aeabi_ddiv>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	4610      	mov	r0, r2
 8001c04:	4619      	mov	r1, r3
 8001c06:	f7ff f80f 	bl	8000c28 <__aeabi_d2f>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	4a2a      	ldr	r2, [pc, #168]	; (8001cb8 <BMP280_Measure+0xf8>)
 8001c0e:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 8001c10:	4b2b      	ldr	r3, [pc, #172]	; (8001cc0 <BMP280_Measure+0x100>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001c18:	d104      	bne.n	8001c24 <BMP280_Measure+0x64>
 8001c1a:	4b2a      	ldr	r3, [pc, #168]	; (8001cc4 <BMP280_Measure+0x104>)
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	e016      	b.n	8001c52 <BMP280_Measure+0x92>
		  else
		  {
#if SUPPORT_64BIT
			  Pressure = (BMP280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001c24:	4b26      	ldr	r3, [pc, #152]	; (8001cc0 <BMP280_Measure+0x100>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff fc97 	bl	800155c <BMP280_compensate_P_int64>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7fe fc87 	bl	8000544 <__aeabi_ui2d>
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	4b23      	ldr	r3, [pc, #140]	; (8001cc8 <BMP280_Measure+0x108>)
 8001c3c:	f7fe fe26 	bl	800088c <__aeabi_ddiv>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4610      	mov	r0, r2
 8001c46:	4619      	mov	r1, r3
 8001c48:	f7fe ffee 	bl	8000c28 <__aeabi_d2f>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	4a1d      	ldr	r2, [pc, #116]	; (8001cc4 <BMP280_Measure+0x104>)
 8001c50:	6013      	str	r3, [r2, #0]
			  Pressure = (BMP280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 8001c52:	4b1e      	ldr	r3, [pc, #120]	; (8001ccc <BMP280_Measure+0x10c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c5a:	d104      	bne.n	8001c66 <BMP280_Measure+0xa6>
 8001c5c:	4b1c      	ldr	r3, [pc, #112]	; (8001cd0 <BMP280_Measure+0x110>)
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
	}
}
 8001c64:	e023      	b.n	8001cae <BMP280_Measure+0xee>
			  Humidity = (BMP280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001c66:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <BMP280_Measure+0x10c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff ff3c 	bl	8001ae8 <BMP280_compensate_H_int32>
 8001c70:	4603      	mov	r3, r0
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe fc66 	bl	8000544 <__aeabi_ui2d>
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <BMP280_Measure+0x114>)
 8001c7e:	f7fe fe05 	bl	800088c <__aeabi_ddiv>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4610      	mov	r0, r2
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f7fe ffcd 	bl	8000c28 <__aeabi_d2f>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	4a0f      	ldr	r2, [pc, #60]	; (8001cd0 <BMP280_Measure+0x110>)
 8001c92:	6013      	str	r3, [r2, #0]
}
 8001c94:	e00b      	b.n	8001cae <BMP280_Measure+0xee>
		Temperature = Pressure = Humidity = 0;
 8001c96:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <BMP280_Measure+0x110>)
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <BMP280_Measure+0x110>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a08      	ldr	r2, [pc, #32]	; (8001cc4 <BMP280_Measure+0x104>)
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <BMP280_Measure+0x104>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a03      	ldr	r2, [pc, #12]	; (8001cb8 <BMP280_Measure+0xf8>)
 8001cac:	6013      	str	r3, [r2, #0]
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	200001fc 	.word	0x200001fc
 8001cb8:	2000031c 	.word	0x2000031c
 8001cbc:	40590000 	.word	0x40590000
 8001cc0:	20000200 	.word	0x20000200
 8001cc4:	20000320 	.word	0x20000320
 8001cc8:	40700000 	.word	0x40700000
 8001ccc:	20000204 	.word	0x20000204
 8001cd0:	20000324 	.word	0x20000324
 8001cd4:	40900000 	.word	0x40900000

08001cd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cde:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <MX_DMA_Init+0x38>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a0b      	ldr	r2, [pc, #44]	; (8001d10 <MX_DMA_Init+0x38>)
 8001ce4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <MX_DMA_Init+0x38>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	200c      	movs	r0, #12
 8001cfc:	f001 f893 	bl	8002e26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001d00:	200c      	movs	r0, #12
 8001d02:	f001 f8ac 	bl	8002e5e <HAL_NVIC_EnableIRQ>

}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40023800 	.word	0x40023800

08001d14 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08c      	sub	sp, #48	; 0x30
 8001d18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1a:	f107 031c 	add.w	r3, r7, #28
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	60da      	str	r2, [r3, #12]
 8001d28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d2a:	4b77      	ldr	r3, [pc, #476]	; (8001f08 <MX_GPIO_Init+0x1f4>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	4a76      	ldr	r2, [pc, #472]	; (8001f08 <MX_GPIO_Init+0x1f4>)
 8001d30:	f043 0304 	orr.w	r3, r3, #4
 8001d34:	6313      	str	r3, [r2, #48]	; 0x30
 8001d36:	4b74      	ldr	r3, [pc, #464]	; (8001f08 <MX_GPIO_Init+0x1f4>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	f003 0304 	and.w	r3, r3, #4
 8001d3e:	61bb      	str	r3, [r7, #24]
 8001d40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d42:	4b71      	ldr	r3, [pc, #452]	; (8001f08 <MX_GPIO_Init+0x1f4>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4a70      	ldr	r2, [pc, #448]	; (8001f08 <MX_GPIO_Init+0x1f4>)
 8001d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b6e      	ldr	r3, [pc, #440]	; (8001f08 <MX_GPIO_Init+0x1f4>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5a:	4b6b      	ldr	r3, [pc, #428]	; (8001f08 <MX_GPIO_Init+0x1f4>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a6a      	ldr	r2, [pc, #424]	; (8001f08 <MX_GPIO_Init+0x1f4>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b68      	ldr	r3, [pc, #416]	; (8001f08 <MX_GPIO_Init+0x1f4>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d72:	4b65      	ldr	r3, [pc, #404]	; (8001f08 <MX_GPIO_Init+0x1f4>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	4a64      	ldr	r2, [pc, #400]	; (8001f08 <MX_GPIO_Init+0x1f4>)
 8001d78:	f043 0302 	orr.w	r3, r3, #2
 8001d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7e:	4b62      	ldr	r3, [pc, #392]	; (8001f08 <MX_GPIO_Init+0x1f4>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d8a:	4b5f      	ldr	r3, [pc, #380]	; (8001f08 <MX_GPIO_Init+0x1f4>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	4a5e      	ldr	r2, [pc, #376]	; (8001f08 <MX_GPIO_Init+0x1f4>)
 8001d90:	f043 0308 	orr.w	r3, r3, #8
 8001d94:	6313      	str	r3, [r2, #48]	; 0x30
 8001d96:	4b5c      	ldr	r3, [pc, #368]	; (8001f08 <MX_GPIO_Init+0x1f4>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001da2:	4b59      	ldr	r3, [pc, #356]	; (8001f08 <MX_GPIO_Init+0x1f4>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	4a58      	ldr	r2, [pc, #352]	; (8001f08 <MX_GPIO_Init+0x1f4>)
 8001da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dac:	6313      	str	r3, [r2, #48]	; 0x30
 8001dae:	4b56      	ldr	r3, [pc, #344]	; (8001f08 <MX_GPIO_Init+0x1f4>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db6:	607b      	str	r3, [r7, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f244 0181 	movw	r1, #16513	; 0x4081
 8001dc0:	4852      	ldr	r0, [pc, #328]	; (8001f0c <MX_GPIO_Init+0x1f8>)
 8001dc2:	f001 fe2b 	bl	8003a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2140      	movs	r1, #64	; 0x40
 8001dca:	4851      	ldr	r0, [pc, #324]	; (8001f10 <MX_GPIO_Init+0x1fc>)
 8001dcc:	f001 fe26 	bl	8003a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001dd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dd6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001dda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001de0:	f107 031c 	add.w	r3, r7, #28
 8001de4:	4619      	mov	r1, r3
 8001de6:	484b      	ldr	r0, [pc, #300]	; (8001f14 <MX_GPIO_Init+0x200>)
 8001de8:	f001 fc6c 	bl	80036c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001dec:	2332      	movs	r3, #50	; 0x32
 8001dee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df0:	2302      	movs	r3, #2
 8001df2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001dfc:	230b      	movs	r3, #11
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e00:	f107 031c 	add.w	r3, r7, #28
 8001e04:	4619      	mov	r1, r3
 8001e06:	4843      	ldr	r0, [pc, #268]	; (8001f14 <MX_GPIO_Init+0x200>)
 8001e08:	f001 fc5c 	bl	80036c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001e0c:	2386      	movs	r3, #134	; 0x86
 8001e0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e10:	2302      	movs	r3, #2
 8001e12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e1c:	230b      	movs	r3, #11
 8001e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e20:	f107 031c 	add.w	r3, r7, #28
 8001e24:	4619      	mov	r1, r3
 8001e26:	483c      	ldr	r0, [pc, #240]	; (8001f18 <MX_GPIO_Init+0x204>)
 8001e28:	f001 fc4c 	bl	80036c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001e2c:	f244 0381 	movw	r3, #16513	; 0x4081
 8001e30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e32:	2301      	movs	r3, #1
 8001e34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e3e:	f107 031c 	add.w	r3, r7, #28
 8001e42:	4619      	mov	r1, r3
 8001e44:	4831      	ldr	r0, [pc, #196]	; (8001f0c <MX_GPIO_Init+0x1f8>)
 8001e46:	f001 fc3d 	bl	80036c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001e4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e50:	2302      	movs	r3, #2
 8001e52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e5c:	230b      	movs	r3, #11
 8001e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001e60:	f107 031c 	add.w	r3, r7, #28
 8001e64:	4619      	mov	r1, r3
 8001e66:	4829      	ldr	r0, [pc, #164]	; (8001f0c <MX_GPIO_Init+0x1f8>)
 8001e68:	f001 fc2c 	bl	80036c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001e6c:	2340      	movs	r3, #64	; 0x40
 8001e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e70:	2301      	movs	r3, #1
 8001e72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001e7c:	f107 031c 	add.w	r3, r7, #28
 8001e80:	4619      	mov	r1, r3
 8001e82:	4823      	ldr	r0, [pc, #140]	; (8001f10 <MX_GPIO_Init+0x1fc>)
 8001e84:	f001 fc1e 	bl	80036c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001e88:	2380      	movs	r3, #128	; 0x80
 8001e8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e94:	f107 031c 	add.w	r3, r7, #28
 8001e98:	4619      	mov	r1, r3
 8001e9a:	481d      	ldr	r0, [pc, #116]	; (8001f10 <MX_GPIO_Init+0x1fc>)
 8001e9c:	f001 fc12 	bl	80036c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001ea0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001ea4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001eb2:	230a      	movs	r3, #10
 8001eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb6:	f107 031c 	add.w	r3, r7, #28
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4816      	ldr	r0, [pc, #88]	; (8001f18 <MX_GPIO_Init+0x204>)
 8001ebe:	f001 fc01 	bl	80036c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001ec2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ec6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ed0:	f107 031c 	add.w	r3, r7, #28
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4810      	ldr	r0, [pc, #64]	; (8001f18 <MX_GPIO_Init+0x204>)
 8001ed8:	f001 fbf4 	bl	80036c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001edc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001ee0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eea:	2303      	movs	r3, #3
 8001eec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001eee:	230b      	movs	r3, #11
 8001ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ef2:	f107 031c 	add.w	r3, r7, #28
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4805      	ldr	r0, [pc, #20]	; (8001f10 <MX_GPIO_Init+0x1fc>)
 8001efa:	f001 fbe3 	bl	80036c4 <HAL_GPIO_Init>

}
 8001efe:	bf00      	nop
 8001f00:	3730      	adds	r7, #48	; 0x30
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40020400 	.word	0x40020400
 8001f10:	40021800 	.word	0x40021800
 8001f14:	40020800 	.word	0x40020800
 8001f18:	40020000 	.word	0x40020000

08001f1c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f20:	4b1b      	ldr	r3, [pc, #108]	; (8001f90 <MX_I2C1_Init+0x74>)
 8001f22:	4a1c      	ldr	r2, [pc, #112]	; (8001f94 <MX_I2C1_Init+0x78>)
 8001f24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8001f26:	4b1a      	ldr	r3, [pc, #104]	; (8001f90 <MX_I2C1_Init+0x74>)
 8001f28:	4a1b      	ldr	r2, [pc, #108]	; (8001f98 <MX_I2C1_Init+0x7c>)
 8001f2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001f2c:	4b18      	ldr	r3, [pc, #96]	; (8001f90 <MX_I2C1_Init+0x74>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f32:	4b17      	ldr	r3, [pc, #92]	; (8001f90 <MX_I2C1_Init+0x74>)
 8001f34:	2201      	movs	r2, #1
 8001f36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f38:	4b15      	ldr	r3, [pc, #84]	; (8001f90 <MX_I2C1_Init+0x74>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f3e:	4b14      	ldr	r3, [pc, #80]	; (8001f90 <MX_I2C1_Init+0x74>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f44:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <MX_I2C1_Init+0x74>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f4a:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <MX_I2C1_Init+0x74>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f50:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <MX_I2C1_Init+0x74>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f56:	480e      	ldr	r0, [pc, #56]	; (8001f90 <MX_I2C1_Init+0x74>)
 8001f58:	f001 fd94 	bl	8003a84 <HAL_I2C_Init>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001f62:	f000 fb55 	bl	8002610 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f66:	2100      	movs	r1, #0
 8001f68:	4809      	ldr	r0, [pc, #36]	; (8001f90 <MX_I2C1_Init+0x74>)
 8001f6a:	f003 f83f 	bl	8004fec <HAL_I2CEx_ConfigAnalogFilter>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001f74:	f000 fb4c 	bl	8002610 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001f78:	2100      	movs	r1, #0
 8001f7a:	4805      	ldr	r0, [pc, #20]	; (8001f90 <MX_I2C1_Init+0x74>)
 8001f7c:	f003 f881 	bl	8005082 <HAL_I2CEx_ConfigDigitalFilter>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001f86:	f000 fb43 	bl	8002610 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20000230 	.word	0x20000230
 8001f94:	40005400 	.word	0x40005400
 8001f98:	00808cd2 	.word	0x00808cd2

08001f9c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b0aa      	sub	sp, #168	; 0xa8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fb4:	f107 0310 	add.w	r3, r7, #16
 8001fb8:	2284      	movs	r2, #132	; 0x84
 8001fba:	2100      	movs	r1, #0
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f007 feb4 	bl	8009d2a <memset>
  if(i2cHandle->Instance==I2C1)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a2a      	ldr	r2, [pc, #168]	; (8002070 <HAL_I2C_MspInit+0xd4>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d14c      	bne.n	8002066 <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001fcc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fd0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fd6:	f107 0310 	add.w	r3, r7, #16
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f003 fd78 	bl	8005ad0 <HAL_RCCEx_PeriphCLKConfig>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001fe6:	f000 fb13 	bl	8002610 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fea:	4b22      	ldr	r3, [pc, #136]	; (8002074 <HAL_I2C_MspInit+0xd8>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	4a21      	ldr	r2, [pc, #132]	; (8002074 <HAL_I2C_MspInit+0xd8>)
 8001ff0:	f043 0302 	orr.w	r3, r3, #2
 8001ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff6:	4b1f      	ldr	r3, [pc, #124]	; (8002074 <HAL_I2C_MspInit+0xd8>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002002:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002006:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800200a:	2312      	movs	r3, #18
 800200c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002016:	2303      	movs	r3, #3
 8002018:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800201c:	2304      	movs	r3, #4
 800201e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002022:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002026:	4619      	mov	r1, r3
 8002028:	4813      	ldr	r0, [pc, #76]	; (8002078 <HAL_I2C_MspInit+0xdc>)
 800202a:	f001 fb4b 	bl	80036c4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800202e:	4b11      	ldr	r3, [pc, #68]	; (8002074 <HAL_I2C_MspInit+0xd8>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	4a10      	ldr	r2, [pc, #64]	; (8002074 <HAL_I2C_MspInit+0xd8>)
 8002034:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002038:	6413      	str	r3, [r2, #64]	; 0x40
 800203a:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <HAL_I2C_MspInit+0xd8>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	2100      	movs	r1, #0
 800204a:	201f      	movs	r0, #31
 800204c:	f000 feeb 	bl	8002e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002050:	201f      	movs	r0, #31
 8002052:	f000 ff04 	bl	8002e5e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002056:	2200      	movs	r2, #0
 8002058:	2100      	movs	r1, #0
 800205a:	2020      	movs	r0, #32
 800205c:	f000 fee3 	bl	8002e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002060:	2020      	movs	r0, #32
 8002062:	f000 fefc 	bl	8002e5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002066:	bf00      	nop
 8002068:	37a8      	adds	r7, #168	; 0xa8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40005400 	.word	0x40005400
 8002074:	40023800 	.word	0x40023800
 8002078:	40020400 	.word	0x40020400

0800207c <main>:
float error = 0.0;
float U = 0.0;
int set_comp = 0;

int main(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
	// Inicjalizacja peryferiów
	HAL_Init();
 8002080:	f000 fd75 	bl	8002b6e <HAL_Init>
	SystemClock_Config();
 8002084:	f000 fa5c 	bl	8002540 <SystemClock_Config>
	MX_GPIO_Init();
 8002088:	f7ff fe44 	bl	8001d14 <MX_GPIO_Init>
	MX_DMA_Init();
 800208c:	f7ff fe24 	bl	8001cd8 <MX_DMA_Init>
	MX_USART3_UART_Init();
 8002090:	f000 fc7a 	bl	8002988 <MX_USART3_UART_Init>
	MX_I2C1_Init();
 8002094:	f7ff ff42 	bl	8001f1c <MX_I2C1_Init>

	// Konfiguracja czujnika
	SensorConfiguration();
 8002098:	f000 f9fe 	bl	8002498 <SensorConfiguration>

	// Inicjalizacja tim4
	MX_TIM_Init();
 800209c:	f000 f982 	bl	80023a4 <MX_TIM_Init>
	HAL_TIM_Base_Start_IT(&htim4);
 80020a0:	4810      	ldr	r0, [pc, #64]	; (80020e4 <main+0x68>)
 80020a2:	f004 f95d 	bl	8006360 <HAL_TIM_Base_Start_IT>

	// Inicjalizacja PWM
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80020a6:	2100      	movs	r1, #0
 80020a8:	480e      	ldr	r0, [pc, #56]	; (80020e4 <main+0x68>)
 80020aa:	f004 fa33 	bl	8006514 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 80020ae:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <main+0x68>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2200      	movs	r2, #0
 80020b4:	635a      	str	r2, [r3, #52]	; 0x34

	// Inicjalizacja regulatora PID
	PID.Kp = Kp;
 80020b6:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <main+0x6c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a0c      	ldr	r2, [pc, #48]	; (80020ec <main+0x70>)
 80020bc:	6193      	str	r3, [r2, #24]
	PID.Ki = Ki;
 80020be:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <main+0x74>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <main+0x70>)
 80020c4:	61d3      	str	r3, [r2, #28]
	PID.Kd = Kd;
 80020c6:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <main+0x78>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a08      	ldr	r2, [pc, #32]	; (80020ec <main+0x70>)
 80020cc:	6213      	str	r3, [r2, #32]
	arm_pid_init_f32(&PID, 1);
 80020ce:	2101      	movs	r1, #1
 80020d0:	4806      	ldr	r0, [pc, #24]	; (80020ec <main+0x70>)
 80020d2:	f006 fe43 	bl	8008d5c <arm_pid_init_f32>

	// Odbieranie nastaw z GUI
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, ReceiveBuffer, ReceiveBuffer_SIZE);
 80020d6:	2240      	movs	r2, #64	; 0x40
 80020d8:	4907      	ldr	r1, [pc, #28]	; (80020f8 <main+0x7c>)
 80020da:	4808      	ldr	r0, [pc, #32]	; (80020fc <main+0x80>)
 80020dc:	f006 fde9 	bl	8008cb2 <HAL_UARTEx_ReceiveToIdle_DMA>

	while(1){}
 80020e0:	e7fe      	b.n	80020e0 <main+0x64>
 80020e2:	bf00      	nop
 80020e4:	20000364 	.word	0x20000364
 80020e8:	20000004 	.word	0x20000004
 80020ec:	20000330 	.word	0x20000330
 80020f0:	20000328 	.word	0x20000328
 80020f4:	2000032c 	.word	0x2000032c
 80020f8:	20000298 	.word	0x20000298
 80020fc:	200003b0 	.word	0x200003b0

08002100 <HAL_TIM_PeriodElapsedCallback>:
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002100:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002104:	b08a      	sub	sp, #40	; 0x28
 8002106:	af04      	add	r7, sp, #16
 8002108:	6078      	str	r0, [r7, #4]
	// 1) PRZETWORZENIE DANYCH UART
	// 1) POMIAR
	// 2) WYSLANIE POMIARU
	// 4) ALGORYM REGULACJI PID

	if(htim->Instance == TIM4){
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a64      	ldr	r2, [pc, #400]	; (80022a0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002110:	4293      	cmp	r3, r2
 8002112:	f040 80c0 	bne.w	8002296 <HAL_TIM_PeriodElapsedCallback+0x196>

		//Processing danych
		if(ProcessDataFlag == 1){
 8002116:	4b63      	ldr	r3, [pc, #396]	; (80022a4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d118      	bne.n	8002150 <HAL_TIM_PeriodElapsedCallback+0x50>

			// tfloat;
			if (MainBuffer[0] == 't') {
 800211e:	4b62      	ldr	r3, [pc, #392]	; (80022a8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b74      	cmp	r3, #116	; 0x74
 8002124:	d105      	bne.n	8002132 <HAL_TIM_PeriodElapsedCallback+0x32>
				sscanf((char*)&MainBuffer[1], "%f;", &Tref);
 8002126:	4a61      	ldr	r2, [pc, #388]	; (80022ac <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002128:	4961      	ldr	r1, [pc, #388]	; (80022b0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800212a:	4862      	ldr	r0, [pc, #392]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800212c:	f007 fd8c 	bl	8009c48 <siscanf>
 8002130:	e00b      	b.n	800214a <HAL_TIM_PeriodElapsedCallback+0x4a>
			}
			// pfloat,float,float;
			else if (MainBuffer[0] == 'p') {
 8002132:	4b5d      	ldr	r3, [pc, #372]	; (80022a8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b70      	cmp	r3, #112	; 0x70
 8002138:	d107      	bne.n	800214a <HAL_TIM_PeriodElapsedCallback+0x4a>
				sscanf((char*)&MainBuffer[1], "%f,%f,%f;", &Kp, &Ki, &Kd);
 800213a:	4b5f      	ldr	r3, [pc, #380]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	4b5f      	ldr	r3, [pc, #380]	; (80022bc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8002140:	4a5f      	ldr	r2, [pc, #380]	; (80022c0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002142:	4960      	ldr	r1, [pc, #384]	; (80022c4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002144:	485b      	ldr	r0, [pc, #364]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8002146:	f007 fd7f 	bl	8009c48 <siscanf>
			}
			ProcessDataFlag = 0;
 800214a:	4b56      	ldr	r3, [pc, #344]	; (80022a4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
		}

		// Pomiar
		BMP280_Measure();
 8002150:	f7ff fd36 	bl	8001bc0 <BMP280_Measure>

		// Wyślij pomiar do terminala
		sprintf(SendBuffer, "%2.2f, %2.2f, %d;\r\n", Temperature, Tref, (int)(U*100.0));
 8002154:	4b5c      	ldr	r3, [pc, #368]	; (80022c8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe fa15 	bl	8000588 <__aeabi_f2d>
 800215e:	4680      	mov	r8, r0
 8002160:	4689      	mov	r9, r1
 8002162:	4b52      	ldr	r3, [pc, #328]	; (80022ac <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe fa0e 	bl	8000588 <__aeabi_f2d>
 800216c:	4604      	mov	r4, r0
 800216e:	460d      	mov	r5, r1
 8002170:	4b56      	ldr	r3, [pc, #344]	; (80022cc <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f7fe fa07 	bl	8000588 <__aeabi_f2d>
 800217a:	f04f 0200 	mov.w	r2, #0
 800217e:	4b54      	ldr	r3, [pc, #336]	; (80022d0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002180:	f7fe fa5a 	bl	8000638 <__aeabi_dmul>
 8002184:	4602      	mov	r2, r0
 8002186:	460b      	mov	r3, r1
 8002188:	4610      	mov	r0, r2
 800218a:	4619      	mov	r1, r3
 800218c:	f7fe fd04 	bl	8000b98 <__aeabi_d2iz>
 8002190:	4603      	mov	r3, r0
 8002192:	9302      	str	r3, [sp, #8]
 8002194:	e9cd 4500 	strd	r4, r5, [sp]
 8002198:	4642      	mov	r2, r8
 800219a:	464b      	mov	r3, r9
 800219c:	494d      	ldr	r1, [pc, #308]	; (80022d4 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800219e:	484e      	ldr	r0, [pc, #312]	; (80022d8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80021a0:	f007 fd32 	bl	8009c08 <siprintf>
		SendMessage(SendBuffer);
 80021a4:	484c      	ldr	r0, [pc, #304]	; (80022d8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80021a6:	f000 f8e3 	bl	8002370 <SendMessage>

		// Zamknięty układ regulacji z regulatorem PID
		//Uchyb regulacji
		error = Tref - Temperature;
 80021aa:	4b40      	ldr	r3, [pc, #256]	; (80022ac <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80021ac:	ed93 7a00 	vldr	s14, [r3]
 80021b0:	4b45      	ldr	r3, [pc, #276]	; (80022c8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80021b2:	edd3 7a00 	vldr	s15, [r3]
 80021b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021ba:	4b48      	ldr	r3, [pc, #288]	; (80022dc <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80021bc:	edc3 7a00 	vstr	s15, [r3]
		// sygnał sterujący z regulatora
		U = arm_pid_f32(&PID, error);
 80021c0:	4b46      	ldr	r3, [pc, #280]	; (80022dc <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a46      	ldr	r2, [pc, #280]	; (80022e0 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80021c6:	617a      	str	r2, [r7, #20]
 80021c8:	613b      	str	r3, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	ed93 7a00 	vldr	s14, [r3]
 80021d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80021d4:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	edd3 6a01 	vldr	s13, [r3, #4]
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	edd3 7a03 	vldr	s15, [r3, #12]
 80021e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80021e8:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	edd3 6a02 	vldr	s13, [r3, #8]
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	edd3 7a04 	vldr	s15, [r3, #16]
 80021f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8002206:	ee77 7a27 	vadd.f32	s15, s14, s15
 800220a:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	68da      	ldr	r2, [r3, #12]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4a29      	ldr	r2, [pc, #164]	; (80022cc <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002226:	6013      	str	r3, [r2, #0]
		// Saturacja sygnału U
		U = (U <= 1.0) ? U : 1.0;
 8002228:	4b28      	ldr	r3, [pc, #160]	; (80022cc <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800222a:	edd3 7a00 	vldr	s15, [r3]
 800222e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002232:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800223a:	d802      	bhi.n	8002242 <HAL_TIM_PeriodElapsedCallback+0x142>
 800223c:	4b23      	ldr	r3, [pc, #140]	; (80022cc <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	e001      	b.n	8002246 <HAL_TIM_PeriodElapsedCallback+0x146>
 8002242:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002246:	4a21      	ldr	r2, [pc, #132]	; (80022cc <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002248:	6013      	str	r3, [r2, #0]
		U = (U >= 0.0) ? U : 0.0;
 800224a:	4b20      	ldr	r3, [pc, #128]	; (80022cc <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800224c:	edd3 7a00 	vldr	s15, [r3]
 8002250:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002258:	db02      	blt.n	8002260 <HAL_TIM_PeriodElapsedCallback+0x160>
 800225a:	4b1c      	ldr	r3, [pc, #112]	; (80022cc <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	e001      	b.n	8002264 <HAL_TIM_PeriodElapsedCallback+0x164>
 8002260:	f04f 0300 	mov.w	r3, #0
 8002264:	4a19      	ldr	r2, [pc, #100]	; (80022cc <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002266:	6013      	str	r3, [r2, #0]
		// Przeliczenie U na set_compare
		set_comp = U * (htim4.Init.Period + 1);
 8002268:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	3301      	adds	r3, #1
 800226e:	ee07 3a90 	vmov	s15, r3
 8002272:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002276:	4b15      	ldr	r3, [pc, #84]	; (80022cc <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002278:	edd3 7a00 	vldr	s15, [r3]
 800227c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002280:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002284:	ee17 2a90 	vmov	r2, s15
 8002288:	4b17      	ldr	r3, [pc, #92]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800228a:	601a      	str	r2, [r3, #0]
		// Zadanie wypełnienia PWM
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, set_comp);
 800228c:	4b16      	ldr	r3, [pc, #88]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4b14      	ldr	r3, [pc, #80]	; (80022e4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8002296:	bf00      	nop
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80022a0:	40000800 	.word	0x40000800
 80022a4:	20000318 	.word	0x20000318
 80022a8:	200002d8 	.word	0x200002d8
 80022ac:	20000000 	.word	0x20000000
 80022b0:	0800ddc8 	.word	0x0800ddc8
 80022b4:	200002d9 	.word	0x200002d9
 80022b8:	2000032c 	.word	0x2000032c
 80022bc:	20000328 	.word	0x20000328
 80022c0:	20000004 	.word	0x20000004
 80022c4:	0800ddcc 	.word	0x0800ddcc
 80022c8:	2000031c 	.word	0x2000031c
 80022cc:	20000358 	.word	0x20000358
 80022d0:	40590000 	.word	0x40590000
 80022d4:	0800ddd8 	.word	0x0800ddd8
 80022d8:	20000284 	.word	0x20000284
 80022dc:	20000354 	.word	0x20000354
 80022e0:	20000330 	.word	0x20000330
 80022e4:	20000364 	.word	0x20000364
 80022e8:	2000035c 	.word	0x2000035c

080022ec <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80022ec:	b5b0      	push	{r4, r5, r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	807b      	strh	r3, [r7, #2]
    if(huart->Instance == USART3)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a17      	ldr	r2, [pc, #92]	; (800235c <HAL_UARTEx_RxEventCallback+0x70>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d128      	bne.n	8002354 <HAL_UARTEx_RxEventCallback+0x68>
    {
    	if(ProcessDataFlag == 0){
 8002302:	4b17      	ldr	r3, [pc, #92]	; (8002360 <HAL_UARTEx_RxEventCallback+0x74>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d11f      	bne.n	800234a <HAL_UARTEx_RxEventCallback+0x5e>
    		memset(MainBuffer, '\000', MainBuffer_SIZE);
 800230a:	2240      	movs	r2, #64	; 0x40
 800230c:	2100      	movs	r1, #0
 800230e:	4815      	ldr	r0, [pc, #84]	; (8002364 <HAL_UARTEx_RxEventCallback+0x78>)
 8002310:	f007 fd0b 	bl	8009d2a <memset>
    		memcpy(MainBuffer, ReceiveBuffer, ReceiveBuffer_SIZE);
 8002314:	4a13      	ldr	r2, [pc, #76]	; (8002364 <HAL_UARTEx_RxEventCallback+0x78>)
 8002316:	4b14      	ldr	r3, [pc, #80]	; (8002368 <HAL_UARTEx_RxEventCallback+0x7c>)
 8002318:	4614      	mov	r4, r2
 800231a:	461d      	mov	r5, r3
 800231c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800231e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002320:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002322:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002328:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800232c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    		memset(ReceiveBuffer, '\000', ReceiveBuffer_SIZE);
 8002330:	2240      	movs	r2, #64	; 0x40
 8002332:	2100      	movs	r1, #0
 8002334:	480c      	ldr	r0, [pc, #48]	; (8002368 <HAL_UARTEx_RxEventCallback+0x7c>)
 8002336:	f007 fcf8 	bl	8009d2a <memset>
    		ProcessDataFlag = 1;
 800233a:	4b09      	ldr	r3, [pc, #36]	; (8002360 <HAL_UARTEx_RxEventCallback+0x74>)
 800233c:	2201      	movs	r2, #1
 800233e:	601a      	str	r2, [r3, #0]

    		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, ReceiveBuffer, ReceiveBuffer_SIZE);
 8002340:	2240      	movs	r2, #64	; 0x40
 8002342:	4909      	ldr	r1, [pc, #36]	; (8002368 <HAL_UARTEx_RxEventCallback+0x7c>)
 8002344:	4809      	ldr	r0, [pc, #36]	; (800236c <HAL_UARTEx_RxEventCallback+0x80>)
 8002346:	f006 fcb4 	bl	8008cb2 <HAL_UARTEx_ReceiveToIdle_DMA>
    	}

    	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, ReceiveBuffer, ReceiveBuffer_SIZE);
 800234a:	2240      	movs	r2, #64	; 0x40
 800234c:	4906      	ldr	r1, [pc, #24]	; (8002368 <HAL_UARTEx_RxEventCallback+0x7c>)
 800234e:	4807      	ldr	r0, [pc, #28]	; (800236c <HAL_UARTEx_RxEventCallback+0x80>)
 8002350:	f006 fcaf 	bl	8008cb2 <HAL_UARTEx_ReceiveToIdle_DMA>
    }
}
 8002354:	bf00      	nop
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bdb0      	pop	{r4, r5, r7, pc}
 800235c:	40004800 	.word	0x40004800
 8002360:	20000318 	.word	0x20000318
 8002364:	200002d8 	.word	0x200002d8
 8002368:	20000298 	.word	0x20000298
 800236c:	200003b0 	.word	0x200003b0

08002370 <SendMessage>:

void SendMessage(const char *message){
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
	// Wysyłanie wiadomości do UART

	if (HAL_UART_Transmit_IT(&huart3, (uint8_t*)message, strlen(message)) != HAL_OK) {
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7fd ff99 	bl	80002b0 <strlen>
 800237e:	4603      	mov	r3, r0
 8002380:	b29b      	uxth	r3, r3
 8002382:	461a      	mov	r2, r3
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	4806      	ldr	r0, [pc, #24]	; (80023a0 <SendMessage+0x30>)
 8002388:	f005 fa20 	bl	80077cc <HAL_UART_Transmit_IT>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <SendMessage+0x26>
		Error_Handler();
 8002392:	f000 f93d 	bl	8002610 <Error_Handler>
	}
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	200003b0 	.word	0x200003b0

080023a4 <MX_TIM_Init>:

void MX_TIM_Init(void){
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08e      	sub	sp, #56	; 0x38
 80023a8:	af00      	add	r7, sp, #0
	// Redefinicja funkcji bibliotecznej MX_TIM4_Init(); Okres PWM = 500ms

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	605a      	str	r2, [r3, #4]
 80023b4:	609a      	str	r2, [r3, #8]
 80023b6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023b8:	f107 031c 	add.w	r3, r7, #28
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80023c4:	463b      	mov	r3, r7
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	605a      	str	r2, [r3, #4]
 80023cc:	609a      	str	r2, [r3, #8]
 80023ce:	60da      	str	r2, [r3, #12]
 80023d0:	611a      	str	r2, [r3, #16]
 80023d2:	615a      	str	r2, [r3, #20]
 80023d4:	619a      	str	r2, [r3, #24]

	htim4.Instance = TIM4;
 80023d6:	4b2e      	ldr	r3, [pc, #184]	; (8002490 <MX_TIM_Init+0xec>)
 80023d8:	4a2e      	ldr	r2, [pc, #184]	; (8002494 <MX_TIM_Init+0xf0>)
 80023da:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 3599;
 80023dc:	4b2c      	ldr	r3, [pc, #176]	; (8002490 <MX_TIM_Init+0xec>)
 80023de:	f640 620f 	movw	r2, #3599	; 0xe0f
 80023e2:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023e4:	4b2a      	ldr	r3, [pc, #168]	; (8002490 <MX_TIM_Init+0xec>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 9999;
 80023ea:	4b29      	ldr	r3, [pc, #164]	; (8002490 <MX_TIM_Init+0xec>)
 80023ec:	f242 720f 	movw	r2, #9999	; 0x270f
 80023f0:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023f2:	4b27      	ldr	r3, [pc, #156]	; (8002490 <MX_TIM_Init+0xec>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023f8:	4b25      	ldr	r3, [pc, #148]	; (8002490 <MX_TIM_Init+0xec>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80023fe:	4824      	ldr	r0, [pc, #144]	; (8002490 <MX_TIM_Init+0xec>)
 8002400:	f003 ff56 	bl	80062b0 <HAL_TIM_Base_Init>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_TIM_Init+0x6a>
	{
		Error_Handler();
 800240a:	f000 f901 	bl	8002610 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800240e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002412:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002414:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002418:	4619      	mov	r1, r3
 800241a:	481d      	ldr	r0, [pc, #116]	; (8002490 <MX_TIM_Init+0xec>)
 800241c:	f004 fba8 	bl	8006b70 <HAL_TIM_ConfigClockSource>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_TIM_Init+0x86>
	{
		Error_Handler();
 8002426:	f000 f8f3 	bl	8002610 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800242a:	4819      	ldr	r0, [pc, #100]	; (8002490 <MX_TIM_Init+0xec>)
 800242c:	f004 f810 	bl	8006450 <HAL_TIM_PWM_Init>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_TIM_Init+0x96>
	{
		Error_Handler();
 8002436:	f000 f8eb 	bl	8002610 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800243e:	2300      	movs	r3, #0
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002442:	f107 031c 	add.w	r3, r7, #28
 8002446:	4619      	mov	r1, r3
 8002448:	4811      	ldr	r0, [pc, #68]	; (8002490 <MX_TIM_Init+0xec>)
 800244a:	f005 f841 	bl	80074d0 <HAL_TIMEx_MasterConfigSynchronization>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <MX_TIM_Init+0xb4>
	{
		Error_Handler();
 8002454:	f000 f8dc 	bl	8002610 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002458:	2360      	movs	r3, #96	; 0x60
 800245a:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 500;
 800245c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002460:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002462:	2300      	movs	r3, #0
 8002464:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002466:	2300      	movs	r3, #0
 8002468:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800246a:	463b      	mov	r3, r7
 800246c:	2200      	movs	r2, #0
 800246e:	4619      	mov	r1, r3
 8002470:	4807      	ldr	r0, [pc, #28]	; (8002490 <MX_TIM_Init+0xec>)
 8002472:	f004 fa69 	bl	8006948 <HAL_TIM_PWM_ConfigChannel>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <MX_TIM_Init+0xdc>
	{
		Error_Handler();
 800247c:	f000 f8c8 	bl	8002610 <Error_Handler>
	}

	HAL_TIM_MspPostInit(&htim4);
 8002480:	4803      	ldr	r0, [pc, #12]	; (8002490 <MX_TIM_Init+0xec>)
 8002482:	f000 fa49 	bl	8002918 <HAL_TIM_MspPostInit>
}
 8002486:	bf00      	nop
 8002488:	3738      	adds	r7, #56	; 0x38
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	20000364 	.word	0x20000364
 8002494:	40000800 	.word	0x40000800

08002498 <SensorConfiguration>:

void SensorConfiguration(void){
 8002498:	b590      	push	{r4, r7, lr}
 800249a:	b089      	sub	sp, #36	; 0x24
 800249c:	af02      	add	r7, sp, #8

	// Konfiguracja
	int ret = BMP280_Config(OSRS_16, OSRS_16, OSRS_OFF, MODE_NORMAL, T_SB_1000, IIR_16);
 800249e:	2304      	movs	r3, #4
 80024a0:	9301      	str	r3, [sp, #4]
 80024a2:	2305      	movs	r3, #5
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	2303      	movs	r3, #3
 80024a8:	2200      	movs	r2, #0
 80024aa:	2105      	movs	r1, #5
 80024ac:	2005      	movs	r0, #5
 80024ae:	f7fe fef1 	bl	8001294 <BMP280_Config>
 80024b2:	6178      	str	r0, [r7, #20]

	// Wiadomosc do terminala
	HAL_Delay(100);
 80024b4:	2064      	movs	r0, #100	; 0x64
 80024b6:	f000 fbb7 	bl	8002c28 <HAL_Delay>
	char msg[] = "Start up. \r\n";
 80024ba:	4b1c      	ldr	r3, [pc, #112]	; (800252c <SensorConfiguration+0x94>)
 80024bc:	1d3c      	adds	r4, r7, #4
 80024be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024c0:	c407      	stmia	r4!, {r0, r1, r2}
 80024c2:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80024c4:	1d3b      	adds	r3, r7, #4
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fd fef2 	bl	80002b0 <strlen>
 80024cc:	4603      	mov	r3, r0
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	1d39      	adds	r1, r7, #4
 80024d2:	f04f 33ff 	mov.w	r3, #4294967295
 80024d6:	4816      	ldr	r0, [pc, #88]	; (8002530 <SensorConfiguration+0x98>)
 80024d8:	f005 f8f4 	bl	80076c4 <HAL_UART_Transmit>
	if (ret>=0){
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	db0a      	blt.n	80024f8 <SensorConfiguration+0x60>
		sprintf(msg, "Correct %d\r\n", (int) ret);
 80024e2:	1d3b      	adds	r3, r7, #4
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	4913      	ldr	r1, [pc, #76]	; (8002534 <SensorConfiguration+0x9c>)
 80024e8:	4618      	mov	r0, r3
 80024ea:	f007 fb8d 	bl	8009c08 <siprintf>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80024ee:	2101      	movs	r1, #1
 80024f0:	4811      	ldr	r0, [pc, #68]	; (8002538 <SensorConfiguration+0xa0>)
 80024f2:	f001 faac 	bl	8003a4e <HAL_GPIO_TogglePin>
 80024f6:	e00a      	b.n	800250e <SensorConfiguration+0x76>
	}else{
		sprintf(msg, "Fail %d\r\n", (int) ret);
 80024f8:	1d3b      	adds	r3, r7, #4
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	490f      	ldr	r1, [pc, #60]	; (800253c <SensorConfiguration+0xa4>)
 80024fe:	4618      	mov	r0, r3
 8002500:	f007 fb82 	bl	8009c08 <siprintf>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8002504:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002508:	480b      	ldr	r0, [pc, #44]	; (8002538 <SensorConfiguration+0xa0>)
 800250a:	f001 faa0 	bl	8003a4e <HAL_GPIO_TogglePin>
	}
	HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), 50);
 800250e:	1d3b      	adds	r3, r7, #4
 8002510:	4618      	mov	r0, r3
 8002512:	f7fd fecd 	bl	80002b0 <strlen>
 8002516:	4603      	mov	r3, r0
 8002518:	b29a      	uxth	r2, r3
 800251a:	1d39      	adds	r1, r7, #4
 800251c:	2332      	movs	r3, #50	; 0x32
 800251e:	4804      	ldr	r0, [pc, #16]	; (8002530 <SensorConfiguration+0x98>)
 8002520:	f005 f8d0 	bl	80076c4 <HAL_UART_Transmit>
}
 8002524:	bf00      	nop
 8002526:	371c      	adds	r7, #28
 8002528:	46bd      	mov	sp, r7
 800252a:	bd90      	pop	{r4, r7, pc}
 800252c:	0800de08 	.word	0x0800de08
 8002530:	200003b0 	.word	0x200003b0
 8002534:	0800ddec 	.word	0x0800ddec
 8002538:	40020400 	.word	0x40020400
 800253c:	0800ddfc 	.word	0x0800ddfc

08002540 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b094      	sub	sp, #80	; 0x50
 8002544:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002546:	f107 0320 	add.w	r3, r7, #32
 800254a:	2230      	movs	r2, #48	; 0x30
 800254c:	2100      	movs	r1, #0
 800254e:	4618      	mov	r0, r3
 8002550:	f007 fbeb 	bl	8009d2a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002554:	f107 030c 	add.w	r3, r7, #12
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	605a      	str	r2, [r3, #4]
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	60da      	str	r2, [r3, #12]
 8002562:	611a      	str	r2, [r3, #16]

	HAL_PWR_EnableBkUpAccess();
 8002564:	f002 fdda 	bl	800511c <HAL_PWR_EnableBkUpAccess>

	__HAL_RCC_PWR_CLK_ENABLE();
 8002568:	4b27      	ldr	r3, [pc, #156]	; (8002608 <SystemClock_Config+0xc8>)
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256c:	4a26      	ldr	r2, [pc, #152]	; (8002608 <SystemClock_Config+0xc8>)
 800256e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002572:	6413      	str	r3, [r2, #64]	; 0x40
 8002574:	4b24      	ldr	r3, [pc, #144]	; (8002608 <SystemClock_Config+0xc8>)
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002580:	4b22      	ldr	r3, [pc, #136]	; (800260c <SystemClock_Config+0xcc>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002588:	4a20      	ldr	r2, [pc, #128]	; (800260c <SystemClock_Config+0xcc>)
 800258a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800258e:	6013      	str	r3, [r2, #0]
 8002590:	4b1e      	ldr	r3, [pc, #120]	; (800260c <SystemClock_Config+0xcc>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002598:	607b      	str	r3, [r7, #4]
 800259a:	687b      	ldr	r3, [r7, #4]

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800259c:	2301      	movs	r3, #1
 800259e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80025a0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025a6:	2302      	movs	r3, #2
 80025a8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80025b0:	2304      	movs	r3, #4
 80025b2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 80025b4:	2348      	movs	r3, #72	; 0x48
 80025b6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025b8:	2302      	movs	r3, #2
 80025ba:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 3;
 80025bc:	2303      	movs	r3, #3
 80025be:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025c0:	f107 0320 	add.w	r3, r7, #32
 80025c4:	4618      	mov	r0, r3
 80025c6:	f002 fdb9 	bl	800513c <HAL_RCC_OscConfig>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <SystemClock_Config+0x94>
	{
		Error_Handler();
 80025d0:	f000 f81e 	bl	8002610 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025d4:	230f      	movs	r3, #15
 80025d6:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025d8:	2302      	movs	r3, #2
 80025da:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025dc:	2300      	movs	r3, #0
 80025de:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80025e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025e4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025e6:	2300      	movs	r3, #0
 80025e8:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80025ea:	f107 030c 	add.w	r3, r7, #12
 80025ee:	2102      	movs	r1, #2
 80025f0:	4618      	mov	r0, r3
 80025f2:	f003 f847 	bl	8005684 <HAL_RCC_ClockConfig>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 80025fc:	f000 f808 	bl	8002610 <Error_Handler>
	}
}
 8002600:	bf00      	nop
 8002602:	3750      	adds	r7, #80	; 0x50
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40023800 	.word	0x40023800
 800260c:	40007000 	.word	0x40007000

08002610 <Error_Handler>:

void Error_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002614:	b672      	cpsid	i
}
 8002616:	bf00      	nop
	__disable_irq();
	while(1){}
 8002618:	e7fe      	b.n	8002618 <Error_Handler+0x8>
	...

0800261c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002622:	4b0f      	ldr	r3, [pc, #60]	; (8002660 <HAL_MspInit+0x44>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	4a0e      	ldr	r2, [pc, #56]	; (8002660 <HAL_MspInit+0x44>)
 8002628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800262c:	6413      	str	r3, [r2, #64]	; 0x40
 800262e:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <HAL_MspInit+0x44>)
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002636:	607b      	str	r3, [r7, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800263a:	4b09      	ldr	r3, [pc, #36]	; (8002660 <HAL_MspInit+0x44>)
 800263c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263e:	4a08      	ldr	r2, [pc, #32]	; (8002660 <HAL_MspInit+0x44>)
 8002640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002644:	6453      	str	r3, [r2, #68]	; 0x44
 8002646:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_MspInit+0x44>)
 8002648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800264e:	603b      	str	r3, [r7, #0]
 8002650:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	40023800 	.word	0x40023800

08002664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002668:	e7fe      	b.n	8002668 <NMI_Handler+0x4>

0800266a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800266a:	b480      	push	{r7}
 800266c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800266e:	e7fe      	b.n	800266e <HardFault_Handler+0x4>

08002670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002674:	e7fe      	b.n	8002674 <MemManage_Handler+0x4>

08002676 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002676:	b480      	push	{r7}
 8002678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800267a:	e7fe      	b.n	800267a <BusFault_Handler+0x4>

0800267c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002680:	e7fe      	b.n	8002680 <UsageFault_Handler+0x4>

08002682 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002682:	b480      	push	{r7}
 8002684:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800269e:	b480      	push	{r7}
 80026a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026b0:	f000 fa9a 	bl	8002be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026b4:	bf00      	nop
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80026bc:	4802      	ldr	r0, [pc, #8]	; (80026c8 <DMA1_Stream1_IRQHandler+0x10>)
 80026be:	f000 fd89 	bl	80031d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20000438 	.word	0x20000438

080026cc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80026d0:	4802      	ldr	r0, [pc, #8]	; (80026dc <TIM4_IRQHandler+0x10>)
 80026d2:	f004 f819 	bl	8006708 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20000364 	.word	0x20000364

080026e0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80026e4:	4802      	ldr	r0, [pc, #8]	; (80026f0 <I2C1_EV_IRQHandler+0x10>)
 80026e6:	f001 fc8b 	bl	8004000 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20000230 	.word	0x20000230

080026f4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80026f8:	4802      	ldr	r0, [pc, #8]	; (8002704 <I2C1_ER_IRQHandler+0x10>)
 80026fa:	f001 fc9b 	bl	8004034 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80026fe:	bf00      	nop
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20000230 	.word	0x20000230

08002708 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800270c:	4802      	ldr	r0, [pc, #8]	; (8002718 <USART3_IRQHandler+0x10>)
 800270e:	f005 f8bb 	bl	8007888 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	200003b0 	.word	0x200003b0

0800271c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  return 1;
 8002720:	2301      	movs	r3, #1
}
 8002722:	4618      	mov	r0, r3
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <_kill>:

int _kill(int pid, int sig)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002736:	f007 fb4b 	bl	8009dd0 <__errno>
 800273a:	4603      	mov	r3, r0
 800273c:	2216      	movs	r2, #22
 800273e:	601a      	str	r2, [r3, #0]
  return -1;
 8002740:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002744:	4618      	mov	r0, r3
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <_exit>:

void _exit (int status)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002754:	f04f 31ff 	mov.w	r1, #4294967295
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f7ff ffe7 	bl	800272c <_kill>
  while (1) {}    /* Make sure we hang here */
 800275e:	e7fe      	b.n	800275e <_exit+0x12>

08002760 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800276c:	2300      	movs	r3, #0
 800276e:	617b      	str	r3, [r7, #20]
 8002770:	e00a      	b.n	8002788 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002772:	f3af 8000 	nop.w
 8002776:	4601      	mov	r1, r0
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	1c5a      	adds	r2, r3, #1
 800277c:	60ba      	str	r2, [r7, #8]
 800277e:	b2ca      	uxtb	r2, r1
 8002780:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	3301      	adds	r3, #1
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	429a      	cmp	r2, r3
 800278e:	dbf0      	blt.n	8002772 <_read+0x12>
  }

  return len;
 8002790:	687b      	ldr	r3, [r7, #4]
}
 8002792:	4618      	mov	r0, r3
 8002794:	3718      	adds	r7, #24
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b086      	sub	sp, #24
 800279e:	af00      	add	r7, sp, #0
 80027a0:	60f8      	str	r0, [r7, #12]
 80027a2:	60b9      	str	r1, [r7, #8]
 80027a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027a6:	2300      	movs	r3, #0
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	e009      	b.n	80027c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	60ba      	str	r2, [r7, #8]
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	3301      	adds	r3, #1
 80027be:	617b      	str	r3, [r7, #20]
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	dbf1      	blt.n	80027ac <_write+0x12>
  }
  return len;
 80027c8:	687b      	ldr	r3, [r7, #4]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3718      	adds	r7, #24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <_close>:

int _close(int file)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027de:	4618      	mov	r0, r3
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027fa:	605a      	str	r2, [r3, #4]
  return 0;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <_isatty>:

int _isatty(int file)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002812:	2301      	movs	r3, #1
}
 8002814:	4618      	mov	r0, r3
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3714      	adds	r7, #20
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
	...

0800283c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002844:	4a14      	ldr	r2, [pc, #80]	; (8002898 <_sbrk+0x5c>)
 8002846:	4b15      	ldr	r3, [pc, #84]	; (800289c <_sbrk+0x60>)
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002850:	4b13      	ldr	r3, [pc, #76]	; (80028a0 <_sbrk+0x64>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d102      	bne.n	800285e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002858:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <_sbrk+0x64>)
 800285a:	4a12      	ldr	r2, [pc, #72]	; (80028a4 <_sbrk+0x68>)
 800285c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800285e:	4b10      	ldr	r3, [pc, #64]	; (80028a0 <_sbrk+0x64>)
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4413      	add	r3, r2
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	429a      	cmp	r2, r3
 800286a:	d207      	bcs.n	800287c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800286c:	f007 fab0 	bl	8009dd0 <__errno>
 8002870:	4603      	mov	r3, r0
 8002872:	220c      	movs	r2, #12
 8002874:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002876:	f04f 33ff 	mov.w	r3, #4294967295
 800287a:	e009      	b.n	8002890 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800287c:	4b08      	ldr	r3, [pc, #32]	; (80028a0 <_sbrk+0x64>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002882:	4b07      	ldr	r3, [pc, #28]	; (80028a0 <_sbrk+0x64>)
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4413      	add	r3, r2
 800288a:	4a05      	ldr	r2, [pc, #20]	; (80028a0 <_sbrk+0x64>)
 800288c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800288e:	68fb      	ldr	r3, [r7, #12]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3718      	adds	r7, #24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	20050000 	.word	0x20050000
 800289c:	00000400 	.word	0x00000400
 80028a0:	20000360 	.word	0x20000360
 80028a4:	200005e8 	.word	0x200005e8

080028a8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028ac:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <SystemInit+0x20>)
 80028ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b2:	4a05      	ldr	r2, [pc, #20]	; (80028c8 <SystemInit+0x20>)
 80028b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028bc:	bf00      	nop
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	e000ed00 	.word	0xe000ed00

080028cc <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim4);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a0d      	ldr	r2, [pc, #52]	; (8002910 <HAL_TIM_Base_MspInit+0x44>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d113      	bne.n	8002906 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028de:	4b0d      	ldr	r3, [pc, #52]	; (8002914 <HAL_TIM_Base_MspInit+0x48>)
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	4a0c      	ldr	r2, [pc, #48]	; (8002914 <HAL_TIM_Base_MspInit+0x48>)
 80028e4:	f043 0304 	orr.w	r3, r3, #4
 80028e8:	6413      	str	r3, [r2, #64]	; 0x40
 80028ea:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <HAL_TIM_Base_MspInit+0x48>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	f003 0304 	and.w	r3, r3, #4
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80028f6:	2200      	movs	r2, #0
 80028f8:	2100      	movs	r1, #0
 80028fa:	201e      	movs	r0, #30
 80028fc:	f000 fa93 	bl	8002e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002900:	201e      	movs	r0, #30
 8002902:	f000 faac 	bl	8002e5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002906:	bf00      	nop
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40000800 	.word	0x40000800
 8002914:	40023800 	.word	0x40023800

08002918 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b088      	sub	sp, #32
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002920:	f107 030c 	add.w	r3, r7, #12
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	605a      	str	r2, [r3, #4]
 800292a:	609a      	str	r2, [r3, #8]
 800292c:	60da      	str	r2, [r3, #12]
 800292e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a11      	ldr	r2, [pc, #68]	; (800297c <HAL_TIM_MspPostInit+0x64>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d11c      	bne.n	8002974 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800293a:	4b11      	ldr	r3, [pc, #68]	; (8002980 <HAL_TIM_MspPostInit+0x68>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	4a10      	ldr	r2, [pc, #64]	; (8002980 <HAL_TIM_MspPostInit+0x68>)
 8002940:	f043 0308 	orr.w	r3, r3, #8
 8002944:	6313      	str	r3, [r2, #48]	; 0x30
 8002946:	4b0e      	ldr	r3, [pc, #56]	; (8002980 <HAL_TIM_MspPostInit+0x68>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	60bb      	str	r3, [r7, #8]
 8002950:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002952:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002956:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002958:	2302      	movs	r3, #2
 800295a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	2300      	movs	r3, #0
 800295e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002960:	2300      	movs	r3, #0
 8002962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002964:	2302      	movs	r3, #2
 8002966:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002968:	f107 030c 	add.w	r3, r7, #12
 800296c:	4619      	mov	r1, r3
 800296e:	4805      	ldr	r0, [pc, #20]	; (8002984 <HAL_TIM_MspPostInit+0x6c>)
 8002970:	f000 fea8 	bl	80036c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002974:	bf00      	nop
 8002976:	3720      	adds	r7, #32
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40000800 	.word	0x40000800
 8002980:	40023800 	.word	0x40023800
 8002984:	40020c00 	.word	0x40020c00

08002988 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800298c:	4b14      	ldr	r3, [pc, #80]	; (80029e0 <MX_USART3_UART_Init+0x58>)
 800298e:	4a15      	ldr	r2, [pc, #84]	; (80029e4 <MX_USART3_UART_Init+0x5c>)
 8002990:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002992:	4b13      	ldr	r3, [pc, #76]	; (80029e0 <MX_USART3_UART_Init+0x58>)
 8002994:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002998:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800299a:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <MX_USART3_UART_Init+0x58>)
 800299c:	2200      	movs	r2, #0
 800299e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80029a0:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <MX_USART3_UART_Init+0x58>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80029a6:	4b0e      	ldr	r3, [pc, #56]	; (80029e0 <MX_USART3_UART_Init+0x58>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80029ac:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <MX_USART3_UART_Init+0x58>)
 80029ae:	220c      	movs	r2, #12
 80029b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029b2:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <MX_USART3_UART_Init+0x58>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80029b8:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <MX_USART3_UART_Init+0x58>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029be:	4b08      	ldr	r3, [pc, #32]	; (80029e0 <MX_USART3_UART_Init+0x58>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029c4:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <MX_USART3_UART_Init+0x58>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80029ca:	4805      	ldr	r0, [pc, #20]	; (80029e0 <MX_USART3_UART_Init+0x58>)
 80029cc:	f004 fe2c 	bl	8007628 <HAL_UART_Init>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80029d6:	f7ff fe1b 	bl	8002610 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	200003b0 	.word	0x200003b0
 80029e4:	40004800 	.word	0x40004800

080029e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b0aa      	sub	sp, #168	; 0xa8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	60da      	str	r2, [r3, #12]
 80029fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a00:	f107 0310 	add.w	r3, r7, #16
 8002a04:	2284      	movs	r2, #132	; 0x84
 8002a06:	2100      	movs	r1, #0
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f007 f98e 	bl	8009d2a <memset>
  if(uartHandle->Instance==USART3)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a3d      	ldr	r2, [pc, #244]	; (8002b08 <HAL_UART_MspInit+0x120>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d172      	bne.n	8002afe <HAL_UART_MspInit+0x116>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002a18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a1c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a22:	f107 0310 	add.w	r3, r7, #16
 8002a26:	4618      	mov	r0, r3
 8002a28:	f003 f852 	bl	8005ad0 <HAL_RCCEx_PeriphCLKConfig>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002a32:	f7ff fded 	bl	8002610 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a36:	4b35      	ldr	r3, [pc, #212]	; (8002b0c <HAL_UART_MspInit+0x124>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	4a34      	ldr	r2, [pc, #208]	; (8002b0c <HAL_UART_MspInit+0x124>)
 8002a3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a40:	6413      	str	r3, [r2, #64]	; 0x40
 8002a42:	4b32      	ldr	r3, [pc, #200]	; (8002b0c <HAL_UART_MspInit+0x124>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a4e:	4b2f      	ldr	r3, [pc, #188]	; (8002b0c <HAL_UART_MspInit+0x124>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	4a2e      	ldr	r2, [pc, #184]	; (8002b0c <HAL_UART_MspInit+0x124>)
 8002a54:	f043 0308 	orr.w	r3, r3, #8
 8002a58:	6313      	str	r3, [r2, #48]	; 0x30
 8002a5a:	4b2c      	ldr	r3, [pc, #176]	; (8002b0c <HAL_UART_MspInit+0x124>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	f003 0308 	and.w	r3, r3, #8
 8002a62:	60bb      	str	r3, [r7, #8]
 8002a64:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002a66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6e:	2302      	movs	r3, #2
 8002a70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a74:	2301      	movs	r3, #1
 8002a76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a80:	2307      	movs	r3, #7
 8002a82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a86:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4820      	ldr	r0, [pc, #128]	; (8002b10 <HAL_UART_MspInit+0x128>)
 8002a8e:	f000 fe19 	bl	80036c4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002a92:	4b20      	ldr	r3, [pc, #128]	; (8002b14 <HAL_UART_MspInit+0x12c>)
 8002a94:	4a20      	ldr	r2, [pc, #128]	; (8002b18 <HAL_UART_MspInit+0x130>)
 8002a96:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002a98:	4b1e      	ldr	r3, [pc, #120]	; (8002b14 <HAL_UART_MspInit+0x12c>)
 8002a9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a9e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002aa0:	4b1c      	ldr	r3, [pc, #112]	; (8002b14 <HAL_UART_MspInit+0x12c>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aa6:	4b1b      	ldr	r3, [pc, #108]	; (8002b14 <HAL_UART_MspInit+0x12c>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002aac:	4b19      	ldr	r3, [pc, #100]	; (8002b14 <HAL_UART_MspInit+0x12c>)
 8002aae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ab2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ab4:	4b17      	ldr	r3, [pc, #92]	; (8002b14 <HAL_UART_MspInit+0x12c>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002aba:	4b16      	ldr	r3, [pc, #88]	; (8002b14 <HAL_UART_MspInit+0x12c>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002ac0:	4b14      	ldr	r3, [pc, #80]	; (8002b14 <HAL_UART_MspInit+0x12c>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ac6:	4b13      	ldr	r3, [pc, #76]	; (8002b14 <HAL_UART_MspInit+0x12c>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002acc:	4b11      	ldr	r3, [pc, #68]	; (8002b14 <HAL_UART_MspInit+0x12c>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002ad2:	4810      	ldr	r0, [pc, #64]	; (8002b14 <HAL_UART_MspInit+0x12c>)
 8002ad4:	f000 f9de 	bl	8002e94 <HAL_DMA_Init>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8002ade:	f7ff fd97 	bl	8002610 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a0b      	ldr	r2, [pc, #44]	; (8002b14 <HAL_UART_MspInit+0x12c>)
 8002ae6:	675a      	str	r2, [r3, #116]	; 0x74
 8002ae8:	4a0a      	ldr	r2, [pc, #40]	; (8002b14 <HAL_UART_MspInit+0x12c>)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002aee:	2200      	movs	r2, #0
 8002af0:	2100      	movs	r1, #0
 8002af2:	2027      	movs	r0, #39	; 0x27
 8002af4:	f000 f997 	bl	8002e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002af8:	2027      	movs	r0, #39	; 0x27
 8002afa:	f000 f9b0 	bl	8002e5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002afe:	bf00      	nop
 8002b00:	37a8      	adds	r7, #168	; 0xa8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40004800 	.word	0x40004800
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40020c00 	.word	0x40020c00
 8002b14:	20000438 	.word	0x20000438
 8002b18:	40026028 	.word	0x40026028

08002b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b20:	480d      	ldr	r0, [pc, #52]	; (8002b58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b22:	490e      	ldr	r1, [pc, #56]	; (8002b5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b24:	4a0e      	ldr	r2, [pc, #56]	; (8002b60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b28:	e002      	b.n	8002b30 <LoopCopyDataInit>

08002b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b2e:	3304      	adds	r3, #4

08002b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b34:	d3f9      	bcc.n	8002b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b36:	4a0b      	ldr	r2, [pc, #44]	; (8002b64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b38:	4c0b      	ldr	r4, [pc, #44]	; (8002b68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b3c:	e001      	b.n	8002b42 <LoopFillZerobss>

08002b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b40:	3204      	adds	r2, #4

08002b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b44:	d3fb      	bcc.n	8002b3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b46:	f7ff feaf 	bl	80028a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b4a:	f007 f947 	bl	8009ddc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b4e:	f7ff fa95 	bl	800207c <main>
  bx  lr    
 8002b52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b54:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b5c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002b60:	0800e29c 	.word	0x0800e29c
  ldr r2, =_sbss
 8002b64:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002b68:	200005e8 	.word	0x200005e8

08002b6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b6c:	e7fe      	b.n	8002b6c <ADC_IRQHandler>

08002b6e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b72:	2003      	movs	r0, #3
 8002b74:	f000 f94c 	bl	8002e10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b78:	2000      	movs	r0, #0
 8002b7a:	f000 f805 	bl	8002b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b7e:	f7ff fd4d 	bl	800261c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b90:	4b12      	ldr	r3, [pc, #72]	; (8002bdc <HAL_InitTick+0x54>)
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	4b12      	ldr	r3, [pc, #72]	; (8002be0 <HAL_InitTick+0x58>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	4619      	mov	r1, r3
 8002b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 f967 	bl	8002e7a <HAL_SYSTICK_Config>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e00e      	b.n	8002bd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b0f      	cmp	r3, #15
 8002bba:	d80a      	bhi.n	8002bd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc4:	f000 f92f 	bl	8002e26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bc8:	4a06      	ldr	r2, [pc, #24]	; (8002be4 <HAL_InitTick+0x5c>)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	e000      	b.n	8002bd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	20000008 	.word	0x20000008
 8002be0:	20000010 	.word	0x20000010
 8002be4:	2000000c 	.word	0x2000000c

08002be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bec:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <HAL_IncTick+0x20>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <HAL_IncTick+0x24>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	4a04      	ldr	r2, [pc, #16]	; (8002c0c <HAL_IncTick+0x24>)
 8002bfa:	6013      	str	r3, [r2, #0]
}
 8002bfc:	bf00      	nop
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	20000010 	.word	0x20000010
 8002c0c:	20000498 	.word	0x20000498

08002c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  return uwTick;
 8002c14:	4b03      	ldr	r3, [pc, #12]	; (8002c24 <HAL_GetTick+0x14>)
 8002c16:	681b      	ldr	r3, [r3, #0]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	20000498 	.word	0x20000498

08002c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c30:	f7ff ffee 	bl	8002c10 <HAL_GetTick>
 8002c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c40:	d005      	beq.n	8002c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c42:	4b0a      	ldr	r3, [pc, #40]	; (8002c6c <HAL_Delay+0x44>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	461a      	mov	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c4e:	bf00      	nop
 8002c50:	f7ff ffde 	bl	8002c10 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d8f7      	bhi.n	8002c50 <HAL_Delay+0x28>
  {
  }
}
 8002c60:	bf00      	nop
 8002c62:	bf00      	nop
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000010 	.word	0x20000010

08002c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c80:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <__NVIC_SetPriorityGrouping+0x40>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c98:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c9e:	4a04      	ldr	r2, [pc, #16]	; (8002cb0 <__NVIC_SetPriorityGrouping+0x40>)
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	60d3      	str	r3, [r2, #12]
}
 8002ca4:	bf00      	nop
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	e000ed00 	.word	0xe000ed00
 8002cb4:	05fa0000 	.word	0x05fa0000

08002cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cbc:	4b04      	ldr	r3, [pc, #16]	; (8002cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	0a1b      	lsrs	r3, r3, #8
 8002cc2:	f003 0307 	and.w	r3, r3, #7
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	e000ed00 	.word	0xe000ed00

08002cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	db0b      	blt.n	8002cfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ce6:	79fb      	ldrb	r3, [r7, #7]
 8002ce8:	f003 021f 	and.w	r2, r3, #31
 8002cec:	4907      	ldr	r1, [pc, #28]	; (8002d0c <__NVIC_EnableIRQ+0x38>)
 8002cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf2:	095b      	lsrs	r3, r3, #5
 8002cf4:	2001      	movs	r0, #1
 8002cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	e000e100 	.word	0xe000e100

08002d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	4603      	mov	r3, r0
 8002d18:	6039      	str	r1, [r7, #0]
 8002d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	db0a      	blt.n	8002d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	490c      	ldr	r1, [pc, #48]	; (8002d5c <__NVIC_SetPriority+0x4c>)
 8002d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2e:	0112      	lsls	r2, r2, #4
 8002d30:	b2d2      	uxtb	r2, r2
 8002d32:	440b      	add	r3, r1
 8002d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d38:	e00a      	b.n	8002d50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	4908      	ldr	r1, [pc, #32]	; (8002d60 <__NVIC_SetPriority+0x50>)
 8002d40:	79fb      	ldrb	r3, [r7, #7]
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	3b04      	subs	r3, #4
 8002d48:	0112      	lsls	r2, r2, #4
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	761a      	strb	r2, [r3, #24]
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	e000e100 	.word	0xe000e100
 8002d60:	e000ed00 	.word	0xe000ed00

08002d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b089      	sub	sp, #36	; 0x24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	f1c3 0307 	rsb	r3, r3, #7
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	bf28      	it	cs
 8002d82:	2304      	movcs	r3, #4
 8002d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	3304      	adds	r3, #4
 8002d8a:	2b06      	cmp	r3, #6
 8002d8c:	d902      	bls.n	8002d94 <NVIC_EncodePriority+0x30>
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	3b03      	subs	r3, #3
 8002d92:	e000      	b.n	8002d96 <NVIC_EncodePriority+0x32>
 8002d94:	2300      	movs	r3, #0
 8002d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d98:	f04f 32ff 	mov.w	r2, #4294967295
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	43da      	mvns	r2, r3
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	401a      	ands	r2, r3
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dac:	f04f 31ff 	mov.w	r1, #4294967295
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	fa01 f303 	lsl.w	r3, r1, r3
 8002db6:	43d9      	mvns	r1, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dbc:	4313      	orrs	r3, r2
         );
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3724      	adds	r7, #36	; 0x24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
	...

08002dcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ddc:	d301      	bcc.n	8002de2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dde:	2301      	movs	r3, #1
 8002de0:	e00f      	b.n	8002e02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002de2:	4a0a      	ldr	r2, [pc, #40]	; (8002e0c <SysTick_Config+0x40>)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3b01      	subs	r3, #1
 8002de8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dea:	210f      	movs	r1, #15
 8002dec:	f04f 30ff 	mov.w	r0, #4294967295
 8002df0:	f7ff ff8e 	bl	8002d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002df4:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <SysTick_Config+0x40>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dfa:	4b04      	ldr	r3, [pc, #16]	; (8002e0c <SysTick_Config+0x40>)
 8002dfc:	2207      	movs	r2, #7
 8002dfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	e000e010 	.word	0xe000e010

08002e10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7ff ff29 	bl	8002c70 <__NVIC_SetPriorityGrouping>
}
 8002e1e:	bf00      	nop
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b086      	sub	sp, #24
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	60b9      	str	r1, [r7, #8]
 8002e30:	607a      	str	r2, [r7, #4]
 8002e32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e38:	f7ff ff3e 	bl	8002cb8 <__NVIC_GetPriorityGrouping>
 8002e3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	68b9      	ldr	r1, [r7, #8]
 8002e42:	6978      	ldr	r0, [r7, #20]
 8002e44:	f7ff ff8e 	bl	8002d64 <NVIC_EncodePriority>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e4e:	4611      	mov	r1, r2
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff ff5d 	bl	8002d10 <__NVIC_SetPriority>
}
 8002e56:	bf00      	nop
 8002e58:	3718      	adds	r7, #24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b082      	sub	sp, #8
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	4603      	mov	r3, r0
 8002e66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff ff31 	bl	8002cd4 <__NVIC_EnableIRQ>
}
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b082      	sub	sp, #8
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7ff ffa2 	bl	8002dcc <SysTick_Config>
 8002e88:	4603      	mov	r3, r0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ea0:	f7ff feb6 	bl	8002c10 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e099      	b.n	8002fe4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0201 	bic.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ed0:	e00f      	b.n	8002ef2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ed2:	f7ff fe9d 	bl	8002c10 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b05      	cmp	r3, #5
 8002ede:	d908      	bls.n	8002ef2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2203      	movs	r2, #3
 8002eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e078      	b.n	8002fe4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1e8      	bne.n	8002ed2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	4b38      	ldr	r3, [pc, #224]	; (8002fec <HAL_DMA_Init+0x158>)
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	2b04      	cmp	r3, #4
 8002f4a:	d107      	bne.n	8002f5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f54:	4313      	orrs	r3, r2
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f023 0307 	bic.w	r3, r3, #7
 8002f72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	d117      	bne.n	8002fb6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00e      	beq.n	8002fb6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 fb17 	bl	80035cc <DMA_CheckFifoParam>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d008      	beq.n	8002fb6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2240      	movs	r2, #64	; 0x40
 8002fa8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e016      	b.n	8002fe4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 face 	bl	8003560 <DMA_CalcBaseAndBitshift>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fcc:	223f      	movs	r2, #63	; 0x3f
 8002fce:	409a      	lsls	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3718      	adds	r7, #24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	f010803f 	.word	0xf010803f

08002ff0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
 8002ffc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ffe:	2300      	movs	r3, #0
 8003000:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003006:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800300e:	2b01      	cmp	r3, #1
 8003010:	d101      	bne.n	8003016 <HAL_DMA_Start_IT+0x26>
 8003012:	2302      	movs	r3, #2
 8003014:	e048      	b.n	80030a8 <HAL_DMA_Start_IT+0xb8>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b01      	cmp	r3, #1
 8003028:	d137      	bne.n	800309a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2202      	movs	r2, #2
 800302e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	68b9      	ldr	r1, [r7, #8]
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 fa60 	bl	8003504 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003048:	223f      	movs	r2, #63	; 0x3f
 800304a:	409a      	lsls	r2, r3
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 0216 	orr.w	r2, r2, #22
 800305e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	695a      	ldr	r2, [r3, #20]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800306e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003074:	2b00      	cmp	r3, #0
 8003076:	d007      	beq.n	8003088 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f042 0208 	orr.w	r2, r2, #8
 8003086:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0201 	orr.w	r2, r2, #1
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	e005      	b.n	80030a6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80030a2:	2302      	movs	r3, #2
 80030a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80030a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3718      	adds	r7, #24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80030be:	f7ff fda7 	bl	8002c10 <HAL_GetTick>
 80030c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d008      	beq.n	80030e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2280      	movs	r2, #128	; 0x80
 80030d4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e052      	b.n	8003188 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 0216 	bic.w	r2, r2, #22
 80030f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	695a      	ldr	r2, [r3, #20]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003100:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	2b00      	cmp	r3, #0
 8003108:	d103      	bne.n	8003112 <HAL_DMA_Abort+0x62>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800310e:	2b00      	cmp	r3, #0
 8003110:	d007      	beq.n	8003122 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 0208 	bic.w	r2, r2, #8
 8003120:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 0201 	bic.w	r2, r2, #1
 8003130:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003132:	e013      	b.n	800315c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003134:	f7ff fd6c 	bl	8002c10 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b05      	cmp	r3, #5
 8003140:	d90c      	bls.n	800315c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2220      	movs	r2, #32
 8003146:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2203      	movs	r2, #3
 800314c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e015      	b.n	8003188 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1e4      	bne.n	8003134 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316e:	223f      	movs	r2, #63	; 0x3f
 8003170:	409a      	lsls	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d004      	beq.n	80031ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2280      	movs	r2, #128	; 0x80
 80031a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e00c      	b.n	80031c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2205      	movs	r2, #5
 80031b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0201 	bic.w	r2, r2, #1
 80031c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80031dc:	2300      	movs	r3, #0
 80031de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80031e0:	4b8e      	ldr	r3, [pc, #568]	; (800341c <HAL_DMA_IRQHandler+0x248>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a8e      	ldr	r2, [pc, #568]	; (8003420 <HAL_DMA_IRQHandler+0x24c>)
 80031e6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ea:	0a9b      	lsrs	r3, r3, #10
 80031ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fe:	2208      	movs	r2, #8
 8003200:	409a      	lsls	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4013      	ands	r3, r2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d01a      	beq.n	8003240 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b00      	cmp	r3, #0
 8003216:	d013      	beq.n	8003240 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0204 	bic.w	r2, r2, #4
 8003226:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322c:	2208      	movs	r2, #8
 800322e:	409a      	lsls	r2, r3
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003238:	f043 0201 	orr.w	r2, r3, #1
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003244:	2201      	movs	r2, #1
 8003246:	409a      	lsls	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4013      	ands	r3, r2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d012      	beq.n	8003276 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00b      	beq.n	8003276 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003262:	2201      	movs	r2, #1
 8003264:	409a      	lsls	r2, r3
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326e:	f043 0202 	orr.w	r2, r3, #2
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800327a:	2204      	movs	r2, #4
 800327c:	409a      	lsls	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	4013      	ands	r3, r2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d012      	beq.n	80032ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00b      	beq.n	80032ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003298:	2204      	movs	r2, #4
 800329a:	409a      	lsls	r2, r3
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a4:	f043 0204 	orr.w	r2, r3, #4
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b0:	2210      	movs	r2, #16
 80032b2:	409a      	lsls	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4013      	ands	r3, r2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d043      	beq.n	8003344 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d03c      	beq.n	8003344 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ce:	2210      	movs	r2, #16
 80032d0:	409a      	lsls	r2, r3
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d018      	beq.n	8003316 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d108      	bne.n	8003304 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d024      	beq.n	8003344 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	4798      	blx	r3
 8003302:	e01f      	b.n	8003344 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003308:	2b00      	cmp	r3, #0
 800330a:	d01b      	beq.n	8003344 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	4798      	blx	r3
 8003314:	e016      	b.n	8003344 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003320:	2b00      	cmp	r3, #0
 8003322:	d107      	bne.n	8003334 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0208 	bic.w	r2, r2, #8
 8003332:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003348:	2220      	movs	r2, #32
 800334a:	409a      	lsls	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	4013      	ands	r3, r2
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 808f 	beq.w	8003474 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0310 	and.w	r3, r3, #16
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 8087 	beq.w	8003474 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336a:	2220      	movs	r2, #32
 800336c:	409a      	lsls	r2, r3
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b05      	cmp	r3, #5
 800337c:	d136      	bne.n	80033ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 0216 	bic.w	r2, r2, #22
 800338c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	695a      	ldr	r2, [r3, #20]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800339c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d103      	bne.n	80033ae <HAL_DMA_IRQHandler+0x1da>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d007      	beq.n	80033be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0208 	bic.w	r2, r2, #8
 80033bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c2:	223f      	movs	r2, #63	; 0x3f
 80033c4:	409a      	lsls	r2, r3
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d07e      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	4798      	blx	r3
        }
        return;
 80033ea:	e079      	b.n	80034e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d01d      	beq.n	8003436 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10d      	bne.n	8003424 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340c:	2b00      	cmp	r3, #0
 800340e:	d031      	beq.n	8003474 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	4798      	blx	r3
 8003418:	e02c      	b.n	8003474 <HAL_DMA_IRQHandler+0x2a0>
 800341a:	bf00      	nop
 800341c:	20000008 	.word	0x20000008
 8003420:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003428:	2b00      	cmp	r3, #0
 800342a:	d023      	beq.n	8003474 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	4798      	blx	r3
 8003434:	e01e      	b.n	8003474 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10f      	bne.n	8003464 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0210 	bic.w	r2, r2, #16
 8003452:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003468:	2b00      	cmp	r3, #0
 800346a:	d003      	beq.n	8003474 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003478:	2b00      	cmp	r3, #0
 800347a:	d032      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b00      	cmp	r3, #0
 8003486:	d022      	beq.n	80034ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2205      	movs	r2, #5
 800348c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0201 	bic.w	r2, r2, #1
 800349e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	3301      	adds	r3, #1
 80034a4:	60bb      	str	r3, [r7, #8]
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d307      	bcc.n	80034bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f2      	bne.n	80034a0 <HAL_DMA_IRQHandler+0x2cc>
 80034ba:	e000      	b.n	80034be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80034bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d005      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	4798      	blx	r3
 80034de:	e000      	b.n	80034e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80034e0:	bf00      	nop
    }
  }
}
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034f6:	b2db      	uxtb	r3, r3
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
 8003510:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003520:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	2b40      	cmp	r3, #64	; 0x40
 8003530:	d108      	bne.n	8003544 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003542:	e007      	b.n	8003554 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	60da      	str	r2, [r3, #12]
}
 8003554:	bf00      	nop
 8003556:	3714      	adds	r7, #20
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	b2db      	uxtb	r3, r3
 800356e:	3b10      	subs	r3, #16
 8003570:	4a13      	ldr	r2, [pc, #76]	; (80035c0 <DMA_CalcBaseAndBitshift+0x60>)
 8003572:	fba2 2303 	umull	r2, r3, r2, r3
 8003576:	091b      	lsrs	r3, r3, #4
 8003578:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800357a:	4a12      	ldr	r2, [pc, #72]	; (80035c4 <DMA_CalcBaseAndBitshift+0x64>)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4413      	add	r3, r2
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	461a      	mov	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2b03      	cmp	r3, #3
 800358c:	d908      	bls.n	80035a0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	461a      	mov	r2, r3
 8003594:	4b0c      	ldr	r3, [pc, #48]	; (80035c8 <DMA_CalcBaseAndBitshift+0x68>)
 8003596:	4013      	ands	r3, r2
 8003598:	1d1a      	adds	r2, r3, #4
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	659a      	str	r2, [r3, #88]	; 0x58
 800359e:	e006      	b.n	80035ae <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	461a      	mov	r2, r3
 80035a6:	4b08      	ldr	r3, [pc, #32]	; (80035c8 <DMA_CalcBaseAndBitshift+0x68>)
 80035a8:	4013      	ands	r3, r2
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3714      	adds	r7, #20
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	aaaaaaab 	.word	0xaaaaaaab
 80035c4:	0800de3c 	.word	0x0800de3c
 80035c8:	fffffc00 	.word	0xfffffc00

080035cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035d4:	2300      	movs	r3, #0
 80035d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d11f      	bne.n	8003626 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d856      	bhi.n	800369a <DMA_CheckFifoParam+0xce>
 80035ec:	a201      	add	r2, pc, #4	; (adr r2, 80035f4 <DMA_CheckFifoParam+0x28>)
 80035ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f2:	bf00      	nop
 80035f4:	08003605 	.word	0x08003605
 80035f8:	08003617 	.word	0x08003617
 80035fc:	08003605 	.word	0x08003605
 8003600:	0800369b 	.word	0x0800369b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003608:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d046      	beq.n	800369e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003614:	e043      	b.n	800369e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800361e:	d140      	bne.n	80036a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003624:	e03d      	b.n	80036a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800362e:	d121      	bne.n	8003674 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	2b03      	cmp	r3, #3
 8003634:	d837      	bhi.n	80036a6 <DMA_CheckFifoParam+0xda>
 8003636:	a201      	add	r2, pc, #4	; (adr r2, 800363c <DMA_CheckFifoParam+0x70>)
 8003638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363c:	0800364d 	.word	0x0800364d
 8003640:	08003653 	.word	0x08003653
 8003644:	0800364d 	.word	0x0800364d
 8003648:	08003665 	.word	0x08003665
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	73fb      	strb	r3, [r7, #15]
      break;
 8003650:	e030      	b.n	80036b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003656:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d025      	beq.n	80036aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003662:	e022      	b.n	80036aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003668:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800366c:	d11f      	bne.n	80036ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003672:	e01c      	b.n	80036ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2b02      	cmp	r3, #2
 8003678:	d903      	bls.n	8003682 <DMA_CheckFifoParam+0xb6>
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2b03      	cmp	r3, #3
 800367e:	d003      	beq.n	8003688 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003680:	e018      	b.n	80036b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	73fb      	strb	r3, [r7, #15]
      break;
 8003686:	e015      	b.n	80036b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00e      	beq.n	80036b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	73fb      	strb	r3, [r7, #15]
      break;
 8003698:	e00b      	b.n	80036b2 <DMA_CheckFifoParam+0xe6>
      break;
 800369a:	bf00      	nop
 800369c:	e00a      	b.n	80036b4 <DMA_CheckFifoParam+0xe8>
      break;
 800369e:	bf00      	nop
 80036a0:	e008      	b.n	80036b4 <DMA_CheckFifoParam+0xe8>
      break;
 80036a2:	bf00      	nop
 80036a4:	e006      	b.n	80036b4 <DMA_CheckFifoParam+0xe8>
      break;
 80036a6:	bf00      	nop
 80036a8:	e004      	b.n	80036b4 <DMA_CheckFifoParam+0xe8>
      break;
 80036aa:	bf00      	nop
 80036ac:	e002      	b.n	80036b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80036ae:	bf00      	nop
 80036b0:	e000      	b.n	80036b4 <DMA_CheckFifoParam+0xe8>
      break;
 80036b2:	bf00      	nop
    }
  } 
  
  return status; 
 80036b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop

080036c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b089      	sub	sp, #36	; 0x24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80036ce:	2300      	movs	r3, #0
 80036d0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80036d2:	2300      	movs	r3, #0
 80036d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80036d6:	2300      	movs	r3, #0
 80036d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80036da:	2300      	movs	r3, #0
 80036dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80036de:	2300      	movs	r3, #0
 80036e0:	61fb      	str	r3, [r7, #28]
 80036e2:	e175      	b.n	80039d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80036e4:	2201      	movs	r2, #1
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	4013      	ands	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	f040 8164 	bne.w	80039ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f003 0303 	and.w	r3, r3, #3
 800370a:	2b01      	cmp	r3, #1
 800370c:	d005      	beq.n	800371a <HAL_GPIO_Init+0x56>
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f003 0303 	and.w	r3, r3, #3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d130      	bne.n	800377c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	2203      	movs	r2, #3
 8003726:	fa02 f303 	lsl.w	r3, r2, r3
 800372a:	43db      	mvns	r3, r3
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	4013      	ands	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	68da      	ldr	r2, [r3, #12]
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	4313      	orrs	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003750:	2201      	movs	r2, #1
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	43db      	mvns	r3, r3
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4013      	ands	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	091b      	lsrs	r3, r3, #4
 8003766:	f003 0201 	and.w	r2, r3, #1
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	4313      	orrs	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f003 0303 	and.w	r3, r3, #3
 8003784:	2b03      	cmp	r3, #3
 8003786:	d017      	beq.n	80037b8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	2203      	movs	r2, #3
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	43db      	mvns	r3, r3
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	4013      	ands	r3, r2
 800379e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f003 0303 	and.w	r3, r3, #3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d123      	bne.n	800380c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	08da      	lsrs	r2, r3, #3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3208      	adds	r2, #8
 80037cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	220f      	movs	r2, #15
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	43db      	mvns	r3, r3
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	4013      	ands	r3, r2
 80037e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	691a      	ldr	r2, [r3, #16]
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	08da      	lsrs	r2, r3, #3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	3208      	adds	r2, #8
 8003806:	69b9      	ldr	r1, [r7, #24]
 8003808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	2203      	movs	r2, #3
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	43db      	mvns	r3, r3
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	4013      	ands	r3, r2
 8003822:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f003 0203 	and.w	r2, r3, #3
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	4313      	orrs	r3, r2
 8003838:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 80be 	beq.w	80039ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800384e:	4b66      	ldr	r3, [pc, #408]	; (80039e8 <HAL_GPIO_Init+0x324>)
 8003850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003852:	4a65      	ldr	r2, [pc, #404]	; (80039e8 <HAL_GPIO_Init+0x324>)
 8003854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003858:	6453      	str	r3, [r2, #68]	; 0x44
 800385a:	4b63      	ldr	r3, [pc, #396]	; (80039e8 <HAL_GPIO_Init+0x324>)
 800385c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003866:	4a61      	ldr	r2, [pc, #388]	; (80039ec <HAL_GPIO_Init+0x328>)
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	089b      	lsrs	r3, r3, #2
 800386c:	3302      	adds	r3, #2
 800386e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003872:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f003 0303 	and.w	r3, r3, #3
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	220f      	movs	r2, #15
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	43db      	mvns	r3, r3
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	4013      	ands	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a58      	ldr	r2, [pc, #352]	; (80039f0 <HAL_GPIO_Init+0x32c>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d037      	beq.n	8003902 <HAL_GPIO_Init+0x23e>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a57      	ldr	r2, [pc, #348]	; (80039f4 <HAL_GPIO_Init+0x330>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d031      	beq.n	80038fe <HAL_GPIO_Init+0x23a>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a56      	ldr	r2, [pc, #344]	; (80039f8 <HAL_GPIO_Init+0x334>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d02b      	beq.n	80038fa <HAL_GPIO_Init+0x236>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a55      	ldr	r2, [pc, #340]	; (80039fc <HAL_GPIO_Init+0x338>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d025      	beq.n	80038f6 <HAL_GPIO_Init+0x232>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a54      	ldr	r2, [pc, #336]	; (8003a00 <HAL_GPIO_Init+0x33c>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d01f      	beq.n	80038f2 <HAL_GPIO_Init+0x22e>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a53      	ldr	r2, [pc, #332]	; (8003a04 <HAL_GPIO_Init+0x340>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d019      	beq.n	80038ee <HAL_GPIO_Init+0x22a>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a52      	ldr	r2, [pc, #328]	; (8003a08 <HAL_GPIO_Init+0x344>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d013      	beq.n	80038ea <HAL_GPIO_Init+0x226>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a51      	ldr	r2, [pc, #324]	; (8003a0c <HAL_GPIO_Init+0x348>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d00d      	beq.n	80038e6 <HAL_GPIO_Init+0x222>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a50      	ldr	r2, [pc, #320]	; (8003a10 <HAL_GPIO_Init+0x34c>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d007      	beq.n	80038e2 <HAL_GPIO_Init+0x21e>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a4f      	ldr	r2, [pc, #316]	; (8003a14 <HAL_GPIO_Init+0x350>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d101      	bne.n	80038de <HAL_GPIO_Init+0x21a>
 80038da:	2309      	movs	r3, #9
 80038dc:	e012      	b.n	8003904 <HAL_GPIO_Init+0x240>
 80038de:	230a      	movs	r3, #10
 80038e0:	e010      	b.n	8003904 <HAL_GPIO_Init+0x240>
 80038e2:	2308      	movs	r3, #8
 80038e4:	e00e      	b.n	8003904 <HAL_GPIO_Init+0x240>
 80038e6:	2307      	movs	r3, #7
 80038e8:	e00c      	b.n	8003904 <HAL_GPIO_Init+0x240>
 80038ea:	2306      	movs	r3, #6
 80038ec:	e00a      	b.n	8003904 <HAL_GPIO_Init+0x240>
 80038ee:	2305      	movs	r3, #5
 80038f0:	e008      	b.n	8003904 <HAL_GPIO_Init+0x240>
 80038f2:	2304      	movs	r3, #4
 80038f4:	e006      	b.n	8003904 <HAL_GPIO_Init+0x240>
 80038f6:	2303      	movs	r3, #3
 80038f8:	e004      	b.n	8003904 <HAL_GPIO_Init+0x240>
 80038fa:	2302      	movs	r3, #2
 80038fc:	e002      	b.n	8003904 <HAL_GPIO_Init+0x240>
 80038fe:	2301      	movs	r3, #1
 8003900:	e000      	b.n	8003904 <HAL_GPIO_Init+0x240>
 8003902:	2300      	movs	r3, #0
 8003904:	69fa      	ldr	r2, [r7, #28]
 8003906:	f002 0203 	and.w	r2, r2, #3
 800390a:	0092      	lsls	r2, r2, #2
 800390c:	4093      	lsls	r3, r2
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4313      	orrs	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003914:	4935      	ldr	r1, [pc, #212]	; (80039ec <HAL_GPIO_Init+0x328>)
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	089b      	lsrs	r3, r3, #2
 800391a:	3302      	adds	r3, #2
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003922:	4b3d      	ldr	r3, [pc, #244]	; (8003a18 <HAL_GPIO_Init+0x354>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	43db      	mvns	r3, r3
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	4013      	ands	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	4313      	orrs	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003946:	4a34      	ldr	r2, [pc, #208]	; (8003a18 <HAL_GPIO_Init+0x354>)
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800394c:	4b32      	ldr	r3, [pc, #200]	; (8003a18 <HAL_GPIO_Init+0x354>)
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	43db      	mvns	r3, r3
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	4013      	ands	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d003      	beq.n	8003970 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	4313      	orrs	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003970:	4a29      	ldr	r2, [pc, #164]	; (8003a18 <HAL_GPIO_Init+0x354>)
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003976:	4b28      	ldr	r3, [pc, #160]	; (8003a18 <HAL_GPIO_Init+0x354>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	43db      	mvns	r3, r3
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	4013      	ands	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800399a:	4a1f      	ldr	r2, [pc, #124]	; (8003a18 <HAL_GPIO_Init+0x354>)
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039a0:	4b1d      	ldr	r3, [pc, #116]	; (8003a18 <HAL_GPIO_Init+0x354>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	43db      	mvns	r3, r3
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	4013      	ands	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039c4:	4a14      	ldr	r2, [pc, #80]	; (8003a18 <HAL_GPIO_Init+0x354>)
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	3301      	adds	r3, #1
 80039ce:	61fb      	str	r3, [r7, #28]
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	2b0f      	cmp	r3, #15
 80039d4:	f67f ae86 	bls.w	80036e4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80039d8:	bf00      	nop
 80039da:	bf00      	nop
 80039dc:	3724      	adds	r7, #36	; 0x24
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40023800 	.word	0x40023800
 80039ec:	40013800 	.word	0x40013800
 80039f0:	40020000 	.word	0x40020000
 80039f4:	40020400 	.word	0x40020400
 80039f8:	40020800 	.word	0x40020800
 80039fc:	40020c00 	.word	0x40020c00
 8003a00:	40021000 	.word	0x40021000
 8003a04:	40021400 	.word	0x40021400
 8003a08:	40021800 	.word	0x40021800
 8003a0c:	40021c00 	.word	0x40021c00
 8003a10:	40022000 	.word	0x40022000
 8003a14:	40022400 	.word	0x40022400
 8003a18:	40013c00 	.word	0x40013c00

08003a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	460b      	mov	r3, r1
 8003a26:	807b      	strh	r3, [r7, #2]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a2c:	787b      	ldrb	r3, [r7, #1]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a32:	887a      	ldrh	r2, [r7, #2]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003a38:	e003      	b.n	8003a42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003a3a:	887b      	ldrh	r3, [r7, #2]
 8003a3c:	041a      	lsls	r2, r3, #16
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	619a      	str	r2, [r3, #24]
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr

08003a4e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b085      	sub	sp, #20
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
 8003a56:	460b      	mov	r3, r1
 8003a58:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a60:	887a      	ldrh	r2, [r7, #2]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	4013      	ands	r3, r2
 8003a66:	041a      	lsls	r2, r3, #16
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	43d9      	mvns	r1, r3
 8003a6c:	887b      	ldrh	r3, [r7, #2]
 8003a6e:	400b      	ands	r3, r1
 8003a70:	431a      	orrs	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	619a      	str	r2, [r3, #24]
}
 8003a76:	bf00      	nop
 8003a78:	3714      	adds	r7, #20
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
	...

08003a84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e07f      	b.n	8003b96 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d106      	bne.n	8003ab0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7fe fa76 	bl	8001f9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2224      	movs	r2, #36	; 0x24
 8003ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0201 	bic.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ad4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ae4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d107      	bne.n	8003afe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689a      	ldr	r2, [r3, #8]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003afa:	609a      	str	r2, [r3, #8]
 8003afc:	e006      	b.n	8003b0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689a      	ldr	r2, [r3, #8]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003b0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d104      	bne.n	8003b1e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6859      	ldr	r1, [r3, #4]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	4b1d      	ldr	r3, [pc, #116]	; (8003ba0 <HAL_I2C_Init+0x11c>)
 8003b2a:	430b      	orrs	r3, r1
 8003b2c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68da      	ldr	r2, [r3, #12]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b3c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691a      	ldr	r2, [r3, #16]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	69d9      	ldr	r1, [r3, #28]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a1a      	ldr	r2, [r3, #32]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f042 0201 	orr.w	r2, r2, #1
 8003b76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2220      	movs	r2, #32
 8003b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	02008000 	.word	0x02008000

08003ba4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b088      	sub	sp, #32
 8003ba8:	af02      	add	r7, sp, #8
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	4608      	mov	r0, r1
 8003bae:	4611      	mov	r1, r2
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	817b      	strh	r3, [r7, #10]
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	813b      	strh	r3, [r7, #8]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b20      	cmp	r3, #32
 8003bc8:	f040 80f9 	bne.w	8003dbe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d002      	beq.n	8003bd8 <HAL_I2C_Mem_Write+0x34>
 8003bd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d105      	bne.n	8003be4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bde:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e0ed      	b.n	8003dc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d101      	bne.n	8003bf2 <HAL_I2C_Mem_Write+0x4e>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	e0e6      	b.n	8003dc0 <HAL_I2C_Mem_Write+0x21c>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003bfa:	f7ff f809 	bl	8002c10 <HAL_GetTick>
 8003bfe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	2319      	movs	r3, #25
 8003c06:	2201      	movs	r2, #1
 8003c08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 ffc0 	bl	8004b92 <I2C_WaitOnFlagUntilTimeout>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e0d1      	b.n	8003dc0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2221      	movs	r2, #33	; 0x21
 8003c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2240      	movs	r2, #64	; 0x40
 8003c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6a3a      	ldr	r2, [r7, #32]
 8003c36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c44:	88f8      	ldrh	r0, [r7, #6]
 8003c46:	893a      	ldrh	r2, [r7, #8]
 8003c48:	8979      	ldrh	r1, [r7, #10]
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	9301      	str	r3, [sp, #4]
 8003c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	4603      	mov	r3, r0
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 fb81 	bl	800435c <I2C_RequestMemoryWrite>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d005      	beq.n	8003c6c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e0a9      	b.n	8003dc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	2bff      	cmp	r3, #255	; 0xff
 8003c74:	d90e      	bls.n	8003c94 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	22ff      	movs	r2, #255	; 0xff
 8003c7a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c80:	b2da      	uxtb	r2, r3
 8003c82:	8979      	ldrh	r1, [r7, #10]
 8003c84:	2300      	movs	r3, #0
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f001 f91d 	bl	8004ecc <I2C_TransferConfig>
 8003c92:	e00f      	b.n	8003cb4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	8979      	ldrh	r1, [r7, #10]
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f001 f90c 	bl	8004ecc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 ffaa 	bl	8004c12 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e07b      	b.n	8003dc0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	781a      	ldrb	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d034      	beq.n	8003d6c <HAL_I2C_Mem_Write+0x1c8>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d130      	bne.n	8003d6c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d10:	2200      	movs	r2, #0
 8003d12:	2180      	movs	r1, #128	; 0x80
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 ff3c 	bl	8004b92 <I2C_WaitOnFlagUntilTimeout>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e04d      	b.n	8003dc0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	2bff      	cmp	r3, #255	; 0xff
 8003d2c:	d90e      	bls.n	8003d4c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	22ff      	movs	r2, #255	; 0xff
 8003d32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	8979      	ldrh	r1, [r7, #10]
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	9300      	str	r3, [sp, #0]
 8003d40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f001 f8c1 	bl	8004ecc <I2C_TransferConfig>
 8003d4a:	e00f      	b.n	8003d6c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	8979      	ldrh	r1, [r7, #10]
 8003d5e:	2300      	movs	r3, #0
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f001 f8b0 	bl	8004ecc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d19e      	bne.n	8003cb4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f000 ff89 	bl	8004c92 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e01a      	b.n	8003dc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6859      	ldr	r1, [r3, #4]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	4b0a      	ldr	r3, [pc, #40]	; (8003dc8 <HAL_I2C_Mem_Write+0x224>)
 8003d9e:	400b      	ands	r3, r1
 8003da0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2220      	movs	r2, #32
 8003da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	e000      	b.n	8003dc0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003dbe:	2302      	movs	r3, #2
  }
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3718      	adds	r7, #24
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	fe00e800 	.word	0xfe00e800

08003dcc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b088      	sub	sp, #32
 8003dd0:	af02      	add	r7, sp, #8
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	4608      	mov	r0, r1
 8003dd6:	4611      	mov	r1, r2
 8003dd8:	461a      	mov	r2, r3
 8003dda:	4603      	mov	r3, r0
 8003ddc:	817b      	strh	r3, [r7, #10]
 8003dde:	460b      	mov	r3, r1
 8003de0:	813b      	strh	r3, [r7, #8]
 8003de2:	4613      	mov	r3, r2
 8003de4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b20      	cmp	r3, #32
 8003df0:	f040 80fd 	bne.w	8003fee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d002      	beq.n	8003e00 <HAL_I2C_Mem_Read+0x34>
 8003dfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d105      	bne.n	8003e0c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e06:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e0f1      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d101      	bne.n	8003e1a <HAL_I2C_Mem_Read+0x4e>
 8003e16:	2302      	movs	r3, #2
 8003e18:	e0ea      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x224>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e22:	f7fe fef5 	bl	8002c10 <HAL_GetTick>
 8003e26:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	2319      	movs	r3, #25
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 feac 	bl	8004b92 <I2C_WaitOnFlagUntilTimeout>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e0d5      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2222      	movs	r2, #34	; 0x22
 8003e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2240      	movs	r2, #64	; 0x40
 8003e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6a3a      	ldr	r2, [r7, #32]
 8003e5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e6c:	88f8      	ldrh	r0, [r7, #6]
 8003e6e:	893a      	ldrh	r2, [r7, #8]
 8003e70:	8979      	ldrh	r1, [r7, #10]
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	9301      	str	r3, [sp, #4]
 8003e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f000 fac1 	bl	8004404 <I2C_RequestMemoryRead>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d005      	beq.n	8003e94 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e0ad      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	2bff      	cmp	r3, #255	; 0xff
 8003e9c:	d90e      	bls.n	8003ebc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	22ff      	movs	r2, #255	; 0xff
 8003ea2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	8979      	ldrh	r1, [r7, #10]
 8003eac:	4b52      	ldr	r3, [pc, #328]	; (8003ff8 <HAL_I2C_Mem_Read+0x22c>)
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f001 f809 	bl	8004ecc <I2C_TransferConfig>
 8003eba:	e00f      	b.n	8003edc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	8979      	ldrh	r1, [r7, #10]
 8003ece:	4b4a      	ldr	r3, [pc, #296]	; (8003ff8 <HAL_I2C_Mem_Read+0x22c>)
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 fff8 	bl	8004ecc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	2104      	movs	r1, #4
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 fe53 	bl	8004b92 <I2C_WaitOnFlagUntilTimeout>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e07c      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	b2d2      	uxtb	r2, r2
 8003f02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	1c5a      	adds	r2, r3, #1
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f12:	3b01      	subs	r3, #1
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d034      	beq.n	8003f9c <HAL_I2C_Mem_Read+0x1d0>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d130      	bne.n	8003f9c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f40:	2200      	movs	r2, #0
 8003f42:	2180      	movs	r1, #128	; 0x80
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f000 fe24 	bl	8004b92 <I2C_WaitOnFlagUntilTimeout>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e04d      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	2bff      	cmp	r3, #255	; 0xff
 8003f5c:	d90e      	bls.n	8003f7c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	22ff      	movs	r2, #255	; 0xff
 8003f62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	8979      	ldrh	r1, [r7, #10]
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	9300      	str	r3, [sp, #0]
 8003f70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f000 ffa9 	bl	8004ecc <I2C_TransferConfig>
 8003f7a:	e00f      	b.n	8003f9c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	8979      	ldrh	r1, [r7, #10]
 8003f8e:	2300      	movs	r3, #0
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f000 ff98 	bl	8004ecc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d19a      	bne.n	8003edc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f000 fe71 	bl	8004c92 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e01a      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6859      	ldr	r1, [r3, #4]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	4b0b      	ldr	r3, [pc, #44]	; (8003ffc <HAL_I2C_Mem_Read+0x230>)
 8003fce:	400b      	ands	r3, r1
 8003fd0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2220      	movs	r2, #32
 8003fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fea:	2300      	movs	r3, #0
 8003fec:	e000      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003fee:	2302      	movs	r3, #2
  }
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3718      	adds	r7, #24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	80002400 	.word	0x80002400
 8003ffc:	fe00e800 	.word	0xfe00e800

08004000 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800401c:	2b00      	cmp	r3, #0
 800401e:	d005      	beq.n	800402c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	68f9      	ldr	r1, [r7, #12]
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	4798      	blx	r3
  }
}
 800402c:	bf00      	nop
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00f      	beq.n	8004076 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00a      	beq.n	8004076 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004064:	f043 0201 	orr.w	r2, r3, #1
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004074:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00f      	beq.n	80040a0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00a      	beq.n	80040a0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408e:	f043 0208 	orr.w	r2, r3, #8
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800409e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00f      	beq.n	80040ca <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00a      	beq.n	80040ca <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b8:	f043 0202 	orr.w	r2, r3, #2
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040c8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f003 030b 	and.w	r3, r3, #11
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80040da:	68f9      	ldr	r1, [r7, #12]
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 fc1f 	bl	8004920 <I2C_ITError>
  }
}
 80040e2:	bf00      	nop
 80040e4:	3718      	adds	r7, #24
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b083      	sub	sp, #12
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040fe:	b480      	push	{r7}
 8004100:	b083      	sub	sp, #12
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	460b      	mov	r3, r1
 800411c:	70fb      	strb	r3, [r7, #3]
 800411e:	4613      	mov	r3, r2
 8004120:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004122:	bf00      	nop
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800412e:	b480      	push	{r7}
 8004130:	b083      	sub	sp, #12
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800414a:	bf00      	nop
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b086      	sub	sp, #24
 800416e:	af00      	add	r7, sp, #0
 8004170:	60f8      	str	r0, [r7, #12]
 8004172:	60b9      	str	r1, [r7, #8]
 8004174:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004186:	2b01      	cmp	r3, #1
 8004188:	d101      	bne.n	800418e <I2C_Slave_ISR_IT+0x24>
 800418a:	2302      	movs	r3, #2
 800418c:	e0e1      	b.n	8004352 <I2C_Slave_ISR_IT+0x1e8>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	f003 0320 	and.w	r3, r3, #32
 800419c:	2b00      	cmp	r3, #0
 800419e:	d008      	beq.n	80041b2 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80041aa:	6939      	ldr	r1, [r7, #16]
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f000 fa5d 	bl	800466c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	f003 0310 	and.w	r3, r3, #16
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d04b      	beq.n	8004254 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d046      	beq.n	8004254 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d128      	bne.n	8004222 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b28      	cmp	r3, #40	; 0x28
 80041da:	d108      	bne.n	80041ee <I2C_Slave_ISR_IT+0x84>
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041e2:	d104      	bne.n	80041ee <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80041e4:	6939      	ldr	r1, [r7, #16]
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 fb46 	bl	8004878 <I2C_ITListenCplt>
 80041ec:	e031      	b.n	8004252 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b29      	cmp	r3, #41	; 0x29
 80041f8:	d10e      	bne.n	8004218 <I2C_Slave_ISR_IT+0xae>
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004200:	d00a      	beq.n	8004218 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2210      	movs	r2, #16
 8004208:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f000 fc7f 	bl	8004b0e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f000 f9cf 	bl	80045b4 <I2C_ITSlaveSeqCplt>
 8004216:	e01c      	b.n	8004252 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2210      	movs	r2, #16
 800421e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004220:	e08f      	b.n	8004342 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2210      	movs	r2, #16
 8004228:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422e:	f043 0204 	orr.w	r2, r3, #4
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <I2C_Slave_ISR_IT+0xda>
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004242:	d17e      	bne.n	8004342 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004248:	4619      	mov	r1, r3
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 fb68 	bl	8004920 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004250:	e077      	b.n	8004342 <I2C_Slave_ISR_IT+0x1d8>
 8004252:	e076      	b.n	8004342 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	f003 0304 	and.w	r3, r3, #4
 800425a:	2b00      	cmp	r3, #0
 800425c:	d02f      	beq.n	80042be <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004264:	2b00      	cmp	r3, #0
 8004266:	d02a      	beq.n	80042be <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800426c:	b29b      	uxth	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d018      	beq.n	80042a4 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	b2d2      	uxtb	r2, r2
 800427e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	1c5a      	adds	r2, r3, #1
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800428e:	3b01      	subs	r3, #1
 8004290:	b29a      	uxth	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429a:	b29b      	uxth	r3, r3
 800429c:	3b01      	subs	r3, #1
 800429e:	b29a      	uxth	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d14b      	bne.n	8004346 <I2C_Slave_ISR_IT+0x1dc>
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042b4:	d047      	beq.n	8004346 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f000 f97c 	bl	80045b4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80042bc:	e043      	b.n	8004346 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f003 0308 	and.w	r3, r3, #8
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d009      	beq.n	80042dc <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d004      	beq.n	80042dc <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80042d2:	6939      	ldr	r1, [r7, #16]
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 f8e9 	bl	80044ac <I2C_ITAddrCplt>
 80042da:	e035      	b.n	8004348 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d030      	beq.n	8004348 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d02b      	beq.n	8004348 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d018      	beq.n	800432c <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fe:	781a      	ldrb	r2, [r3, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430a:	1c5a      	adds	r2, r3, #1
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004314:	b29b      	uxth	r3, r3
 8004316:	3b01      	subs	r3, #1
 8004318:	b29a      	uxth	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004322:	3b01      	subs	r3, #1
 8004324:	b29a      	uxth	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	851a      	strh	r2, [r3, #40]	; 0x28
 800432a:	e00d      	b.n	8004348 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004332:	d002      	beq.n	800433a <I2C_Slave_ISR_IT+0x1d0>
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d106      	bne.n	8004348 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 f93a 	bl	80045b4 <I2C_ITSlaveSeqCplt>
 8004340:	e002      	b.n	8004348 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8004342:	bf00      	nop
 8004344:	e000      	b.n	8004348 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8004346:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3718      	adds	r7, #24
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
	...

0800435c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af02      	add	r7, sp, #8
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	4608      	mov	r0, r1
 8004366:	4611      	mov	r1, r2
 8004368:	461a      	mov	r2, r3
 800436a:	4603      	mov	r3, r0
 800436c:	817b      	strh	r3, [r7, #10]
 800436e:	460b      	mov	r3, r1
 8004370:	813b      	strh	r3, [r7, #8]
 8004372:	4613      	mov	r3, r2
 8004374:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004376:	88fb      	ldrh	r3, [r7, #6]
 8004378:	b2da      	uxtb	r2, r3
 800437a:	8979      	ldrh	r1, [r7, #10]
 800437c:	4b20      	ldr	r3, [pc, #128]	; (8004400 <I2C_RequestMemoryWrite+0xa4>)
 800437e:	9300      	str	r3, [sp, #0]
 8004380:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f000 fda1 	bl	8004ecc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800438a:	69fa      	ldr	r2, [r7, #28]
 800438c:	69b9      	ldr	r1, [r7, #24]
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f000 fc3f 	bl	8004c12 <I2C_WaitOnTXISFlagUntilTimeout>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e02c      	b.n	80043f8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800439e:	88fb      	ldrh	r3, [r7, #6]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d105      	bne.n	80043b0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043a4:	893b      	ldrh	r3, [r7, #8]
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	629a      	str	r2, [r3, #40]	; 0x28
 80043ae:	e015      	b.n	80043dc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80043b0:	893b      	ldrh	r3, [r7, #8]
 80043b2:	0a1b      	lsrs	r3, r3, #8
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	b2da      	uxtb	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043be:	69fa      	ldr	r2, [r7, #28]
 80043c0:	69b9      	ldr	r1, [r7, #24]
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 fc25 	bl	8004c12 <I2C_WaitOnTXISFlagUntilTimeout>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e012      	b.n	80043f8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043d2:	893b      	ldrh	r3, [r7, #8]
 80043d4:	b2da      	uxtb	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	2200      	movs	r2, #0
 80043e4:	2180      	movs	r1, #128	; 0x80
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 fbd3 	bl	8004b92 <I2C_WaitOnFlagUntilTimeout>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e000      	b.n	80043f8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	80002000 	.word	0x80002000

08004404 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af02      	add	r7, sp, #8
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	4608      	mov	r0, r1
 800440e:	4611      	mov	r1, r2
 8004410:	461a      	mov	r2, r3
 8004412:	4603      	mov	r3, r0
 8004414:	817b      	strh	r3, [r7, #10]
 8004416:	460b      	mov	r3, r1
 8004418:	813b      	strh	r3, [r7, #8]
 800441a:	4613      	mov	r3, r2
 800441c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800441e:	88fb      	ldrh	r3, [r7, #6]
 8004420:	b2da      	uxtb	r2, r3
 8004422:	8979      	ldrh	r1, [r7, #10]
 8004424:	4b20      	ldr	r3, [pc, #128]	; (80044a8 <I2C_RequestMemoryRead+0xa4>)
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	2300      	movs	r3, #0
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 fd4e 	bl	8004ecc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004430:	69fa      	ldr	r2, [r7, #28]
 8004432:	69b9      	ldr	r1, [r7, #24]
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 fbec 	bl	8004c12 <I2C_WaitOnTXISFlagUntilTimeout>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e02c      	b.n	800449e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004444:	88fb      	ldrh	r3, [r7, #6]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d105      	bne.n	8004456 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800444a:	893b      	ldrh	r3, [r7, #8]
 800444c:	b2da      	uxtb	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	629a      	str	r2, [r3, #40]	; 0x28
 8004454:	e015      	b.n	8004482 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004456:	893b      	ldrh	r3, [r7, #8]
 8004458:	0a1b      	lsrs	r3, r3, #8
 800445a:	b29b      	uxth	r3, r3
 800445c:	b2da      	uxtb	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004464:	69fa      	ldr	r2, [r7, #28]
 8004466:	69b9      	ldr	r1, [r7, #24]
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 fbd2 	bl	8004c12 <I2C_WaitOnTXISFlagUntilTimeout>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e012      	b.n	800449e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004478:	893b      	ldrh	r3, [r7, #8]
 800447a:	b2da      	uxtb	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	2200      	movs	r2, #0
 800448a:	2140      	movs	r1, #64	; 0x40
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 fb80 	bl	8004b92 <I2C_WaitOnFlagUntilTimeout>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d001      	beq.n	800449c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e000      	b.n	800449e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	80002000 	.word	0x80002000

080044ac <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80044c2:	2b28      	cmp	r3, #40	; 0x28
 80044c4:	d16a      	bne.n	800459c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	0c1b      	lsrs	r3, r3, #16
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	0c1b      	lsrs	r3, r3, #16
 80044de:	b29b      	uxth	r3, r3
 80044e0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80044e4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044f2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004500:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	2b02      	cmp	r3, #2
 8004508:	d138      	bne.n	800457c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800450a:	897b      	ldrh	r3, [r7, #10]
 800450c:	09db      	lsrs	r3, r3, #7
 800450e:	b29a      	uxth	r2, r3
 8004510:	89bb      	ldrh	r3, [r7, #12]
 8004512:	4053      	eors	r3, r2
 8004514:	b29b      	uxth	r3, r3
 8004516:	f003 0306 	and.w	r3, r3, #6
 800451a:	2b00      	cmp	r3, #0
 800451c:	d11c      	bne.n	8004558 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800451e:	897b      	ldrh	r3, [r7, #10]
 8004520:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004530:	2b02      	cmp	r3, #2
 8004532:	d13b      	bne.n	80045ac <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2208      	movs	r2, #8
 8004540:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800454a:	89ba      	ldrh	r2, [r7, #12]
 800454c:	7bfb      	ldrb	r3, [r7, #15]
 800454e:	4619      	mov	r1, r3
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f7ff fdde 	bl	8004112 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004556:	e029      	b.n	80045ac <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004558:	893b      	ldrh	r3, [r7, #8]
 800455a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800455c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 fce5 	bl	8004f30 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800456e:	89ba      	ldrh	r2, [r7, #12]
 8004570:	7bfb      	ldrb	r3, [r7, #15]
 8004572:	4619      	mov	r1, r3
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f7ff fdcc 	bl	8004112 <HAL_I2C_AddrCallback>
}
 800457a:	e017      	b.n	80045ac <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800457c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 fcd5 	bl	8004f30 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800458e:	89ba      	ldrh	r2, [r7, #12]
 8004590:	7bfb      	ldrb	r3, [r7, #15]
 8004592:	4619      	mov	r1, r3
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f7ff fdbc 	bl	8004112 <HAL_I2C_AddrCallback>
}
 800459a:	e007      	b.n	80045ac <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2208      	movs	r2, #8
 80045a2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80045ac:	bf00      	nop
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d008      	beq.n	80045e8 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80045e4:	601a      	str	r2, [r3, #0]
 80045e6:	e00c      	b.n	8004602 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d007      	beq.n	8004602 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004600:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b29      	cmp	r3, #41	; 0x29
 800460c:	d112      	bne.n	8004634 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2228      	movs	r2, #40	; 0x28
 8004612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2221      	movs	r2, #33	; 0x21
 800461a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800461c:	2101      	movs	r1, #1
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fc86 	bl	8004f30 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7ff fd5c 	bl	80040ea <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004632:	e017      	b.n	8004664 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b2a      	cmp	r3, #42	; 0x2a
 800463e:	d111      	bne.n	8004664 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2228      	movs	r2, #40	; 0x28
 8004644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2222      	movs	r2, #34	; 0x22
 800464c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800464e:	2102      	movs	r1, #2
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 fc6d 	bl	8004f30 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7ff fd4d 	bl	80040fe <HAL_I2C_SlaveRxCpltCallback>
}
 8004664:	bf00      	nop
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004688:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2220      	movs	r2, #32
 8004690:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004692:	7bfb      	ldrb	r3, [r7, #15]
 8004694:	2b21      	cmp	r3, #33	; 0x21
 8004696:	d002      	beq.n	800469e <I2C_ITSlaveCplt+0x32>
 8004698:	7bfb      	ldrb	r3, [r7, #15]
 800469a:	2b29      	cmp	r3, #41	; 0x29
 800469c:	d108      	bne.n	80046b0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800469e:	f248 0101 	movw	r1, #32769	; 0x8001
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 fc44 	bl	8004f30 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2221      	movs	r2, #33	; 0x21
 80046ac:	631a      	str	r2, [r3, #48]	; 0x30
 80046ae:	e00d      	b.n	80046cc <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80046b0:	7bfb      	ldrb	r3, [r7, #15]
 80046b2:	2b22      	cmp	r3, #34	; 0x22
 80046b4:	d002      	beq.n	80046bc <I2C_ITSlaveCplt+0x50>
 80046b6:	7bfb      	ldrb	r3, [r7, #15]
 80046b8:	2b2a      	cmp	r3, #42	; 0x2a
 80046ba:	d107      	bne.n	80046cc <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80046bc:	f248 0102 	movw	r1, #32770	; 0x8002
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 fc35 	bl	8004f30 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2222      	movs	r2, #34	; 0x22
 80046ca:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046da:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6859      	ldr	r1, [r3, #4]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	4b62      	ldr	r3, [pc, #392]	; (8004870 <I2C_ITSlaveCplt+0x204>)
 80046e8:	400b      	ands	r3, r1
 80046ea:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 fa0e 	bl	8004b0e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d013      	beq.n	8004724 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800470a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004710:	2b00      	cmp	r3, #0
 8004712:	d01f      	beq.n	8004754 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	b29a      	uxth	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004722:	e017      	b.n	8004754 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d012      	beq.n	8004754 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800473c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004742:	2b00      	cmp	r3, #0
 8004744:	d006      	beq.n	8004754 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	b29a      	uxth	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	f003 0304 	and.w	r3, r3, #4
 800475a:	2b00      	cmp	r3, #0
 800475c:	d020      	beq.n	80047a0 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f023 0304 	bic.w	r3, r3, #4
 8004764:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004770:	b2d2      	uxtb	r2, r2
 8004772:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00c      	beq.n	80047a0 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800478a:	3b01      	subs	r3, #1
 800478c:	b29a      	uxth	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004796:	b29b      	uxth	r3, r3
 8004798:	3b01      	subs	r3, #1
 800479a:	b29a      	uxth	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d005      	beq.n	80047b6 <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ae:	f043 0204 	orr.w	r2, r3, #4
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d010      	beq.n	80047ee <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d0:	4619      	mov	r1, r3
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f8a4 	bl	8004920 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b28      	cmp	r3, #40	; 0x28
 80047e2:	d141      	bne.n	8004868 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80047e4:	6979      	ldr	r1, [r7, #20]
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f846 	bl	8004878 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80047ec:	e03c      	b.n	8004868 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047f6:	d014      	beq.n	8004822 <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f7ff fedb 	bl	80045b4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a1c      	ldr	r2, [pc, #112]	; (8004874 <I2C_ITSlaveCplt+0x208>)
 8004802:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7ff fc87 	bl	800412e <HAL_I2C_ListenCpltCallback>
}
 8004820:	e022      	b.n	8004868 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b22      	cmp	r3, #34	; 0x22
 800482c:	d10e      	bne.n	800484c <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2220      	movs	r2, #32
 8004832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7ff fc5a 	bl	80040fe <HAL_I2C_SlaveRxCpltCallback>
}
 800484a:	e00d      	b.n	8004868 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2220      	movs	r2, #32
 8004850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7ff fc41 	bl	80040ea <HAL_I2C_SlaveTxCpltCallback>
}
 8004868:	bf00      	nop
 800486a:	3718      	adds	r7, #24
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	fe00e800 	.word	0xfe00e800
 8004874:	ffff0000 	.word	0xffff0000

08004878 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a25      	ldr	r2, [pc, #148]	; (800491c <I2C_ITListenCplt+0xa4>)
 8004886:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2220      	movs	r2, #32
 8004892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	f003 0304 	and.w	r3, r3, #4
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d022      	beq.n	80048f4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	b2d2      	uxtb	r2, r2
 80048ba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	1c5a      	adds	r2, r3, #1
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d012      	beq.n	80048f4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d2:	3b01      	subs	r3, #1
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048de:	b29b      	uxth	r3, r3
 80048e0:	3b01      	subs	r3, #1
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ec:	f043 0204 	orr.w	r2, r3, #4
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80048f4:	f248 0103 	movw	r1, #32771	; 0x8003
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 fb19 	bl	8004f30 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2210      	movs	r2, #16
 8004904:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7ff fc0d 	bl	800412e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004914:	bf00      	nop
 8004916:	3708      	adds	r7, #8
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	ffff0000 	.word	0xffff0000

08004920 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004930:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a5d      	ldr	r2, [pc, #372]	; (8004ab4 <I2C_ITError+0x194>)
 800493e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	431a      	orrs	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004952:	7bfb      	ldrb	r3, [r7, #15]
 8004954:	2b28      	cmp	r3, #40	; 0x28
 8004956:	d005      	beq.n	8004964 <I2C_ITError+0x44>
 8004958:	7bfb      	ldrb	r3, [r7, #15]
 800495a:	2b29      	cmp	r3, #41	; 0x29
 800495c:	d002      	beq.n	8004964 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800495e:	7bfb      	ldrb	r3, [r7, #15]
 8004960:	2b2a      	cmp	r3, #42	; 0x2a
 8004962:	d10b      	bne.n	800497c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004964:	2103      	movs	r1, #3
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 fae2 	bl	8004f30 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2228      	movs	r2, #40	; 0x28
 8004970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a50      	ldr	r2, [pc, #320]	; (8004ab8 <I2C_ITError+0x198>)
 8004978:	635a      	str	r2, [r3, #52]	; 0x34
 800497a:	e011      	b.n	80049a0 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800497c:	f248 0103 	movw	r1, #32771	; 0x8003
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 fad5 	bl	8004f30 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b60      	cmp	r3, #96	; 0x60
 8004990:	d003      	beq.n	800499a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2220      	movs	r2, #32
 8004996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a4:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d039      	beq.n	8004a22 <I2C_ITError+0x102>
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	2b11      	cmp	r3, #17
 80049b2:	d002      	beq.n	80049ba <I2C_ITError+0x9a>
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	2b21      	cmp	r3, #33	; 0x21
 80049b8:	d133      	bne.n	8004a22 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049c8:	d107      	bne.n	80049da <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80049d8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049de:	4618      	mov	r0, r3
 80049e0:	f7fe fd82 	bl	80034e8 <HAL_DMA_GetState>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d017      	beq.n	8004a1a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ee:	4a33      	ldr	r2, [pc, #204]	; (8004abc <I2C_ITError+0x19c>)
 80049f0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fe fbc6 	bl	8003190 <HAL_DMA_Abort_IT>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d04d      	beq.n	8004aa6 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a14:	4610      	mov	r0, r2
 8004a16:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a18:	e045      	b.n	8004aa6 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f850 	bl	8004ac0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a20:	e041      	b.n	8004aa6 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d039      	beq.n	8004a9e <I2C_ITError+0x17e>
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2b12      	cmp	r3, #18
 8004a2e:	d002      	beq.n	8004a36 <I2C_ITError+0x116>
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	2b22      	cmp	r3, #34	; 0x22
 8004a34:	d133      	bne.n	8004a9e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a44:	d107      	bne.n	8004a56 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a54:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7fe fd44 	bl	80034e8 <HAL_DMA_GetState>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d017      	beq.n	8004a96 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6a:	4a14      	ldr	r2, [pc, #80]	; (8004abc <I2C_ITError+0x19c>)
 8004a6c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fe fb88 	bl	8003190 <HAL_DMA_Abort_IT>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d011      	beq.n	8004aaa <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a90:	4610      	mov	r0, r2
 8004a92:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a94:	e009      	b.n	8004aaa <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f812 	bl	8004ac0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a9c:	e005      	b.n	8004aaa <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f80e 	bl	8004ac0 <I2C_TreatErrorCallback>
  }
}
 8004aa4:	e002      	b.n	8004aac <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004aa6:	bf00      	nop
 8004aa8:	e000      	b.n	8004aac <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004aaa:	bf00      	nop
}
 8004aac:	bf00      	nop
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	ffff0000 	.word	0xffff0000
 8004ab8:	0800416b 	.word	0x0800416b
 8004abc:	08004b57 	.word	0x08004b57

08004ac0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b60      	cmp	r3, #96	; 0x60
 8004ad2:	d10e      	bne.n	8004af2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7ff fb33 	bl	8004156 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004af0:	e009      	b.n	8004b06 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f7ff fb1e 	bl	8004142 <HAL_I2C_ErrorCallback>
}
 8004b06:	bf00      	nop
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b083      	sub	sp, #12
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d103      	bne.n	8004b2c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d007      	beq.n	8004b4a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	699a      	ldr	r2, [r3, #24]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f042 0201 	orr.w	r2, r2, #1
 8004b48:	619a      	str	r2, [r3, #24]
  }
}
 8004b4a:	bf00      	nop
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b084      	sub	sp, #16
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b62:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d003      	beq.n	8004b74 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b70:	2200      	movs	r2, #0
 8004b72:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d003      	beq.n	8004b84 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b80:	2200      	movs	r2, #0
 8004b82:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f7ff ff9b 	bl	8004ac0 <I2C_TreatErrorCallback>
}
 8004b8a:	bf00      	nop
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b084      	sub	sp, #16
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	60f8      	str	r0, [r7, #12]
 8004b9a:	60b9      	str	r1, [r7, #8]
 8004b9c:	603b      	str	r3, [r7, #0]
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ba2:	e022      	b.n	8004bea <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004baa:	d01e      	beq.n	8004bea <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bac:	f7fe f830 	bl	8002c10 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d302      	bcc.n	8004bc2 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d113      	bne.n	8004bea <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc6:	f043 0220 	orr.w	r2, r3, #32
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e00f      	b.n	8004c0a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	699a      	ldr	r2, [r3, #24]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	bf0c      	ite	eq
 8004bfa:	2301      	moveq	r3, #1
 8004bfc:	2300      	movne	r3, #0
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	461a      	mov	r2, r3
 8004c02:	79fb      	ldrb	r3, [r7, #7]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d0cd      	beq.n	8004ba4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b084      	sub	sp, #16
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	60f8      	str	r0, [r7, #12]
 8004c1a:	60b9      	str	r1, [r7, #8]
 8004c1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c1e:	e02c      	b.n	8004c7a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	68b9      	ldr	r1, [r7, #8]
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f000 f871 	bl	8004d0c <I2C_IsErrorOccurred>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d001      	beq.n	8004c34 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e02a      	b.n	8004c8a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c3a:	d01e      	beq.n	8004c7a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c3c:	f7fd ffe8 	bl	8002c10 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d302      	bcc.n	8004c52 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d113      	bne.n	8004c7a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c56:	f043 0220 	orr.w	r2, r3, #32
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2220      	movs	r2, #32
 8004c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e007      	b.n	8004c8a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d1cb      	bne.n	8004c20 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b084      	sub	sp, #16
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	60f8      	str	r0, [r7, #12]
 8004c9a:	60b9      	str	r1, [r7, #8]
 8004c9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c9e:	e028      	b.n	8004cf2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	68b9      	ldr	r1, [r7, #8]
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f000 f831 	bl	8004d0c <I2C_IsErrorOccurred>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d001      	beq.n	8004cb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e026      	b.n	8004d02 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cb4:	f7fd ffac 	bl	8002c10 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d302      	bcc.n	8004cca <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d113      	bne.n	8004cf2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cce:	f043 0220 	orr.w	r2, r3, #32
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2220      	movs	r2, #32
 8004cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e007      	b.n	8004d02 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	f003 0320 	and.w	r3, r3, #32
 8004cfc:	2b20      	cmp	r3, #32
 8004cfe:	d1cf      	bne.n	8004ca0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
	...

08004d0c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b08a      	sub	sp, #40	; 0x28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004d26:	2300      	movs	r3, #0
 8004d28:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	f003 0310 	and.w	r3, r3, #16
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d068      	beq.n	8004e0a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2210      	movs	r2, #16
 8004d3e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d40:	e049      	b.n	8004dd6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d48:	d045      	beq.n	8004dd6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d4a:	f7fd ff61 	bl	8002c10 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d302      	bcc.n	8004d60 <I2C_IsErrorOccurred+0x54>
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d13a      	bne.n	8004dd6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d6a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d72:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d82:	d121      	bne.n	8004dc8 <I2C_IsErrorOccurred+0xbc>
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d8a:	d01d      	beq.n	8004dc8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004d8c:	7cfb      	ldrb	r3, [r7, #19]
 8004d8e:	2b20      	cmp	r3, #32
 8004d90:	d01a      	beq.n	8004dc8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004da0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004da2:	f7fd ff35 	bl	8002c10 <HAL_GetTick>
 8004da6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004da8:	e00e      	b.n	8004dc8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004daa:	f7fd ff31 	bl	8002c10 <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	2b19      	cmp	r3, #25
 8004db6:	d907      	bls.n	8004dc8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004db8:	6a3b      	ldr	r3, [r7, #32]
 8004dba:	f043 0320 	orr.w	r3, r3, #32
 8004dbe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004dc6:	e006      	b.n	8004dd6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	f003 0320 	and.w	r3, r3, #32
 8004dd2:	2b20      	cmp	r3, #32
 8004dd4:	d1e9      	bne.n	8004daa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	f003 0320 	and.w	r3, r3, #32
 8004de0:	2b20      	cmp	r3, #32
 8004de2:	d003      	beq.n	8004dec <I2C_IsErrorOccurred+0xe0>
 8004de4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d0aa      	beq.n	8004d42 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004dec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d103      	bne.n	8004dfc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004dfc:	6a3b      	ldr	r3, [r7, #32]
 8004dfe:	f043 0304 	orr.w	r3, r3, #4
 8004e02:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00b      	beq.n	8004e34 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	f043 0301 	orr.w	r3, r3, #1
 8004e22:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00b      	beq.n	8004e56 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004e3e:	6a3b      	ldr	r3, [r7, #32]
 8004e40:	f043 0308 	orr.w	r3, r3, #8
 8004e44:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e4e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00b      	beq.n	8004e78 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004e60:	6a3b      	ldr	r3, [r7, #32]
 8004e62:	f043 0302 	orr.w	r3, r3, #2
 8004e66:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004e78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d01c      	beq.n	8004eba <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f7ff fe44 	bl	8004b0e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	6859      	ldr	r1, [r3, #4]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	4b0d      	ldr	r3, [pc, #52]	; (8004ec8 <I2C_IsErrorOccurred+0x1bc>)
 8004e92:	400b      	ands	r3, r1
 8004e94:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e9a:	6a3b      	ldr	r3, [r7, #32]
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004eba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3728      	adds	r7, #40	; 0x28
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	fe00e800 	.word	0xfe00e800

08004ecc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	607b      	str	r3, [r7, #4]
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	817b      	strh	r3, [r7, #10]
 8004eda:	4613      	mov	r3, r2
 8004edc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ede:	897b      	ldrh	r3, [r7, #10]
 8004ee0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004ee4:	7a7b      	ldrb	r3, [r7, #9]
 8004ee6:	041b      	lsls	r3, r3, #16
 8004ee8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004eec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ef2:	6a3b      	ldr	r3, [r7, #32]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004efa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	0d5b      	lsrs	r3, r3, #21
 8004f06:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004f0a:	4b08      	ldr	r3, [pc, #32]	; (8004f2c <I2C_TransferConfig+0x60>)
 8004f0c:	430b      	orrs	r3, r1
 8004f0e:	43db      	mvns	r3, r3
 8004f10:	ea02 0103 	and.w	r1, r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004f1e:	bf00      	nop
 8004f20:	371c      	adds	r7, #28
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	03ff63ff 	.word	0x03ff63ff

08004f30 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	460b      	mov	r3, r1
 8004f3a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004f40:	887b      	ldrh	r3, [r7, #2]
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00f      	beq.n	8004f6a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004f50:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004f5e:	2b28      	cmp	r3, #40	; 0x28
 8004f60:	d003      	beq.n	8004f6a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004f68:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004f6a:	887b      	ldrh	r3, [r7, #2]
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00f      	beq.n	8004f94 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004f7a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004f88:	2b28      	cmp	r3, #40	; 0x28
 8004f8a:	d003      	beq.n	8004f94 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004f92:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004f94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	da03      	bge.n	8004fa4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004fa2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004fa4:	887b      	ldrh	r3, [r7, #2]
 8004fa6:	2b10      	cmp	r3, #16
 8004fa8:	d103      	bne.n	8004fb2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004fb0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004fb2:	887b      	ldrh	r3, [r7, #2]
 8004fb4:	2b20      	cmp	r3, #32
 8004fb6:	d103      	bne.n	8004fc0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f043 0320 	orr.w	r3, r3, #32
 8004fbe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004fc0:	887b      	ldrh	r3, [r7, #2]
 8004fc2:	2b40      	cmp	r3, #64	; 0x40
 8004fc4:	d103      	bne.n	8004fce <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fcc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6819      	ldr	r1, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	43da      	mvns	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	400a      	ands	r2, r1
 8004fde:	601a      	str	r2, [r3, #0]
}
 8004fe0:	bf00      	nop
 8004fe2:	3714      	adds	r7, #20
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b20      	cmp	r3, #32
 8005000:	d138      	bne.n	8005074 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005008:	2b01      	cmp	r3, #1
 800500a:	d101      	bne.n	8005010 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800500c:	2302      	movs	r3, #2
 800500e:	e032      	b.n	8005076 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2224      	movs	r2, #36	; 0x24
 800501c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 0201 	bic.w	r2, r2, #1
 800502e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800503e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6819      	ldr	r1, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	683a      	ldr	r2, [r7, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f042 0201 	orr.w	r2, r2, #1
 800505e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2220      	movs	r2, #32
 8005064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005070:	2300      	movs	r3, #0
 8005072:	e000      	b.n	8005076 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005074:	2302      	movs	r3, #2
  }
}
 8005076:	4618      	mov	r0, r3
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005082:	b480      	push	{r7}
 8005084:	b085      	sub	sp, #20
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
 800508a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b20      	cmp	r3, #32
 8005096:	d139      	bne.n	800510c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d101      	bne.n	80050a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80050a2:	2302      	movs	r3, #2
 80050a4:	e033      	b.n	800510e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2224      	movs	r2, #36	; 0x24
 80050b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f022 0201 	bic.w	r2, r2, #1
 80050c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80050d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	021b      	lsls	r3, r3, #8
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	4313      	orrs	r3, r2
 80050de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f042 0201 	orr.w	r2, r2, #1
 80050f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2220      	movs	r2, #32
 80050fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005108:	2300      	movs	r3, #0
 800510a:	e000      	b.n	800510e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800510c:	2302      	movs	r3, #2
  }
}
 800510e:	4618      	mov	r0, r3
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
	...

0800511c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800511c:	b480      	push	{r7}
 800511e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005120:	4b05      	ldr	r3, [pc, #20]	; (8005138 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a04      	ldr	r2, [pc, #16]	; (8005138 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800512a:	6013      	str	r3, [r2, #0]
}
 800512c:	bf00      	nop
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	40007000 	.word	0x40007000

0800513c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b086      	sub	sp, #24
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005144:	2300      	movs	r3, #0
 8005146:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e291      	b.n	8005676 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	f000 8087 	beq.w	800526e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005160:	4b96      	ldr	r3, [pc, #600]	; (80053bc <HAL_RCC_OscConfig+0x280>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f003 030c 	and.w	r3, r3, #12
 8005168:	2b04      	cmp	r3, #4
 800516a:	d00c      	beq.n	8005186 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800516c:	4b93      	ldr	r3, [pc, #588]	; (80053bc <HAL_RCC_OscConfig+0x280>)
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f003 030c 	and.w	r3, r3, #12
 8005174:	2b08      	cmp	r3, #8
 8005176:	d112      	bne.n	800519e <HAL_RCC_OscConfig+0x62>
 8005178:	4b90      	ldr	r3, [pc, #576]	; (80053bc <HAL_RCC_OscConfig+0x280>)
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005180:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005184:	d10b      	bne.n	800519e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005186:	4b8d      	ldr	r3, [pc, #564]	; (80053bc <HAL_RCC_OscConfig+0x280>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d06c      	beq.n	800526c <HAL_RCC_OscConfig+0x130>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d168      	bne.n	800526c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e26b      	b.n	8005676 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051a6:	d106      	bne.n	80051b6 <HAL_RCC_OscConfig+0x7a>
 80051a8:	4b84      	ldr	r3, [pc, #528]	; (80053bc <HAL_RCC_OscConfig+0x280>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a83      	ldr	r2, [pc, #524]	; (80053bc <HAL_RCC_OscConfig+0x280>)
 80051ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051b2:	6013      	str	r3, [r2, #0]
 80051b4:	e02e      	b.n	8005214 <HAL_RCC_OscConfig+0xd8>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10c      	bne.n	80051d8 <HAL_RCC_OscConfig+0x9c>
 80051be:	4b7f      	ldr	r3, [pc, #508]	; (80053bc <HAL_RCC_OscConfig+0x280>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a7e      	ldr	r2, [pc, #504]	; (80053bc <HAL_RCC_OscConfig+0x280>)
 80051c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051c8:	6013      	str	r3, [r2, #0]
 80051ca:	4b7c      	ldr	r3, [pc, #496]	; (80053bc <HAL_RCC_OscConfig+0x280>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a7b      	ldr	r2, [pc, #492]	; (80053bc <HAL_RCC_OscConfig+0x280>)
 80051d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051d4:	6013      	str	r3, [r2, #0]
 80051d6:	e01d      	b.n	8005214 <HAL_RCC_OscConfig+0xd8>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051e0:	d10c      	bne.n	80051fc <HAL_RCC_OscConfig+0xc0>
 80051e2:	4b76      	ldr	r3, [pc, #472]	; (80053bc <HAL_RCC_OscConfig+0x280>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a75      	ldr	r2, [pc, #468]	; (80053bc <HAL_RCC_OscConfig+0x280>)
 80051e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051ec:	6013      	str	r3, [r2, #0]
 80051ee:	4b73      	ldr	r3, [pc, #460]	; (80053bc <HAL_RCC_OscConfig+0x280>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a72      	ldr	r2, [pc, #456]	; (80053bc <HAL_RCC_OscConfig+0x280>)
 80051f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051f8:	6013      	str	r3, [r2, #0]
 80051fa:	e00b      	b.n	8005214 <HAL_RCC_OscConfig+0xd8>
 80051fc:	4b6f      	ldr	r3, [pc, #444]	; (80053bc <HAL_RCC_OscConfig+0x280>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a6e      	ldr	r2, [pc, #440]	; (80053bc <HAL_RCC_OscConfig+0x280>)
 8005202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005206:	6013      	str	r3, [r2, #0]
 8005208:	4b6c      	ldr	r3, [pc, #432]	; (80053bc <HAL_RCC_OscConfig+0x280>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a6b      	ldr	r2, [pc, #428]	; (80053bc <HAL_RCC_OscConfig+0x280>)
 800520e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005212:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d013      	beq.n	8005244 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800521c:	f7fd fcf8 	bl	8002c10 <HAL_GetTick>
 8005220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005222:	e008      	b.n	8005236 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005224:	f7fd fcf4 	bl	8002c10 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b64      	cmp	r3, #100	; 0x64
 8005230:	d901      	bls.n	8005236 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e21f      	b.n	8005676 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005236:	4b61      	ldr	r3, [pc, #388]	; (80053bc <HAL_RCC_OscConfig+0x280>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d0f0      	beq.n	8005224 <HAL_RCC_OscConfig+0xe8>
 8005242:	e014      	b.n	800526e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005244:	f7fd fce4 	bl	8002c10 <HAL_GetTick>
 8005248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800524a:	e008      	b.n	800525e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800524c:	f7fd fce0 	bl	8002c10 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	2b64      	cmp	r3, #100	; 0x64
 8005258:	d901      	bls.n	800525e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e20b      	b.n	8005676 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800525e:	4b57      	ldr	r3, [pc, #348]	; (80053bc <HAL_RCC_OscConfig+0x280>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1f0      	bne.n	800524c <HAL_RCC_OscConfig+0x110>
 800526a:	e000      	b.n	800526e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800526c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d069      	beq.n	800534e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800527a:	4b50      	ldr	r3, [pc, #320]	; (80053bc <HAL_RCC_OscConfig+0x280>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f003 030c 	and.w	r3, r3, #12
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00b      	beq.n	800529e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005286:	4b4d      	ldr	r3, [pc, #308]	; (80053bc <HAL_RCC_OscConfig+0x280>)
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 030c 	and.w	r3, r3, #12
 800528e:	2b08      	cmp	r3, #8
 8005290:	d11c      	bne.n	80052cc <HAL_RCC_OscConfig+0x190>
 8005292:	4b4a      	ldr	r3, [pc, #296]	; (80053bc <HAL_RCC_OscConfig+0x280>)
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d116      	bne.n	80052cc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800529e:	4b47      	ldr	r3, [pc, #284]	; (80053bc <HAL_RCC_OscConfig+0x280>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d005      	beq.n	80052b6 <HAL_RCC_OscConfig+0x17a>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d001      	beq.n	80052b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e1df      	b.n	8005676 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052b6:	4b41      	ldr	r3, [pc, #260]	; (80053bc <HAL_RCC_OscConfig+0x280>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	493d      	ldr	r1, [pc, #244]	; (80053bc <HAL_RCC_OscConfig+0x280>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052ca:	e040      	b.n	800534e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d023      	beq.n	800531c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052d4:	4b39      	ldr	r3, [pc, #228]	; (80053bc <HAL_RCC_OscConfig+0x280>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a38      	ldr	r2, [pc, #224]	; (80053bc <HAL_RCC_OscConfig+0x280>)
 80052da:	f043 0301 	orr.w	r3, r3, #1
 80052de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e0:	f7fd fc96 	bl	8002c10 <HAL_GetTick>
 80052e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052e6:	e008      	b.n	80052fa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052e8:	f7fd fc92 	bl	8002c10 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d901      	bls.n	80052fa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e1bd      	b.n	8005676 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052fa:	4b30      	ldr	r3, [pc, #192]	; (80053bc <HAL_RCC_OscConfig+0x280>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0302 	and.w	r3, r3, #2
 8005302:	2b00      	cmp	r3, #0
 8005304:	d0f0      	beq.n	80052e8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005306:	4b2d      	ldr	r3, [pc, #180]	; (80053bc <HAL_RCC_OscConfig+0x280>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	4929      	ldr	r1, [pc, #164]	; (80053bc <HAL_RCC_OscConfig+0x280>)
 8005316:	4313      	orrs	r3, r2
 8005318:	600b      	str	r3, [r1, #0]
 800531a:	e018      	b.n	800534e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800531c:	4b27      	ldr	r3, [pc, #156]	; (80053bc <HAL_RCC_OscConfig+0x280>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a26      	ldr	r2, [pc, #152]	; (80053bc <HAL_RCC_OscConfig+0x280>)
 8005322:	f023 0301 	bic.w	r3, r3, #1
 8005326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005328:	f7fd fc72 	bl	8002c10 <HAL_GetTick>
 800532c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800532e:	e008      	b.n	8005342 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005330:	f7fd fc6e 	bl	8002c10 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b02      	cmp	r3, #2
 800533c:	d901      	bls.n	8005342 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e199      	b.n	8005676 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005342:	4b1e      	ldr	r3, [pc, #120]	; (80053bc <HAL_RCC_OscConfig+0x280>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0302 	and.w	r3, r3, #2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1f0      	bne.n	8005330 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0308 	and.w	r3, r3, #8
 8005356:	2b00      	cmp	r3, #0
 8005358:	d038      	beq.n	80053cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d019      	beq.n	8005396 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005362:	4b16      	ldr	r3, [pc, #88]	; (80053bc <HAL_RCC_OscConfig+0x280>)
 8005364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005366:	4a15      	ldr	r2, [pc, #84]	; (80053bc <HAL_RCC_OscConfig+0x280>)
 8005368:	f043 0301 	orr.w	r3, r3, #1
 800536c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800536e:	f7fd fc4f 	bl	8002c10 <HAL_GetTick>
 8005372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005374:	e008      	b.n	8005388 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005376:	f7fd fc4b 	bl	8002c10 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	2b02      	cmp	r3, #2
 8005382:	d901      	bls.n	8005388 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e176      	b.n	8005676 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005388:	4b0c      	ldr	r3, [pc, #48]	; (80053bc <HAL_RCC_OscConfig+0x280>)
 800538a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d0f0      	beq.n	8005376 <HAL_RCC_OscConfig+0x23a>
 8005394:	e01a      	b.n	80053cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005396:	4b09      	ldr	r3, [pc, #36]	; (80053bc <HAL_RCC_OscConfig+0x280>)
 8005398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800539a:	4a08      	ldr	r2, [pc, #32]	; (80053bc <HAL_RCC_OscConfig+0x280>)
 800539c:	f023 0301 	bic.w	r3, r3, #1
 80053a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053a2:	f7fd fc35 	bl	8002c10 <HAL_GetTick>
 80053a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053a8:	e00a      	b.n	80053c0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053aa:	f7fd fc31 	bl	8002c10 <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d903      	bls.n	80053c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e15c      	b.n	8005676 <HAL_RCC_OscConfig+0x53a>
 80053bc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053c0:	4b91      	ldr	r3, [pc, #580]	; (8005608 <HAL_RCC_OscConfig+0x4cc>)
 80053c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1ee      	bne.n	80053aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0304 	and.w	r3, r3, #4
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f000 80a4 	beq.w	8005522 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053da:	4b8b      	ldr	r3, [pc, #556]	; (8005608 <HAL_RCC_OscConfig+0x4cc>)
 80053dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d10d      	bne.n	8005402 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80053e6:	4b88      	ldr	r3, [pc, #544]	; (8005608 <HAL_RCC_OscConfig+0x4cc>)
 80053e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ea:	4a87      	ldr	r2, [pc, #540]	; (8005608 <HAL_RCC_OscConfig+0x4cc>)
 80053ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053f0:	6413      	str	r3, [r2, #64]	; 0x40
 80053f2:	4b85      	ldr	r3, [pc, #532]	; (8005608 <HAL_RCC_OscConfig+0x4cc>)
 80053f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053fa:	60bb      	str	r3, [r7, #8]
 80053fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053fe:	2301      	movs	r3, #1
 8005400:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005402:	4b82      	ldr	r3, [pc, #520]	; (800560c <HAL_RCC_OscConfig+0x4d0>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800540a:	2b00      	cmp	r3, #0
 800540c:	d118      	bne.n	8005440 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800540e:	4b7f      	ldr	r3, [pc, #508]	; (800560c <HAL_RCC_OscConfig+0x4d0>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a7e      	ldr	r2, [pc, #504]	; (800560c <HAL_RCC_OscConfig+0x4d0>)
 8005414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005418:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800541a:	f7fd fbf9 	bl	8002c10 <HAL_GetTick>
 800541e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005420:	e008      	b.n	8005434 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005422:	f7fd fbf5 	bl	8002c10 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	2b64      	cmp	r3, #100	; 0x64
 800542e:	d901      	bls.n	8005434 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e120      	b.n	8005676 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005434:	4b75      	ldr	r3, [pc, #468]	; (800560c <HAL_RCC_OscConfig+0x4d0>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543c:	2b00      	cmp	r3, #0
 800543e:	d0f0      	beq.n	8005422 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d106      	bne.n	8005456 <HAL_RCC_OscConfig+0x31a>
 8005448:	4b6f      	ldr	r3, [pc, #444]	; (8005608 <HAL_RCC_OscConfig+0x4cc>)
 800544a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800544c:	4a6e      	ldr	r2, [pc, #440]	; (8005608 <HAL_RCC_OscConfig+0x4cc>)
 800544e:	f043 0301 	orr.w	r3, r3, #1
 8005452:	6713      	str	r3, [r2, #112]	; 0x70
 8005454:	e02d      	b.n	80054b2 <HAL_RCC_OscConfig+0x376>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10c      	bne.n	8005478 <HAL_RCC_OscConfig+0x33c>
 800545e:	4b6a      	ldr	r3, [pc, #424]	; (8005608 <HAL_RCC_OscConfig+0x4cc>)
 8005460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005462:	4a69      	ldr	r2, [pc, #420]	; (8005608 <HAL_RCC_OscConfig+0x4cc>)
 8005464:	f023 0301 	bic.w	r3, r3, #1
 8005468:	6713      	str	r3, [r2, #112]	; 0x70
 800546a:	4b67      	ldr	r3, [pc, #412]	; (8005608 <HAL_RCC_OscConfig+0x4cc>)
 800546c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800546e:	4a66      	ldr	r2, [pc, #408]	; (8005608 <HAL_RCC_OscConfig+0x4cc>)
 8005470:	f023 0304 	bic.w	r3, r3, #4
 8005474:	6713      	str	r3, [r2, #112]	; 0x70
 8005476:	e01c      	b.n	80054b2 <HAL_RCC_OscConfig+0x376>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	2b05      	cmp	r3, #5
 800547e:	d10c      	bne.n	800549a <HAL_RCC_OscConfig+0x35e>
 8005480:	4b61      	ldr	r3, [pc, #388]	; (8005608 <HAL_RCC_OscConfig+0x4cc>)
 8005482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005484:	4a60      	ldr	r2, [pc, #384]	; (8005608 <HAL_RCC_OscConfig+0x4cc>)
 8005486:	f043 0304 	orr.w	r3, r3, #4
 800548a:	6713      	str	r3, [r2, #112]	; 0x70
 800548c:	4b5e      	ldr	r3, [pc, #376]	; (8005608 <HAL_RCC_OscConfig+0x4cc>)
 800548e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005490:	4a5d      	ldr	r2, [pc, #372]	; (8005608 <HAL_RCC_OscConfig+0x4cc>)
 8005492:	f043 0301 	orr.w	r3, r3, #1
 8005496:	6713      	str	r3, [r2, #112]	; 0x70
 8005498:	e00b      	b.n	80054b2 <HAL_RCC_OscConfig+0x376>
 800549a:	4b5b      	ldr	r3, [pc, #364]	; (8005608 <HAL_RCC_OscConfig+0x4cc>)
 800549c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549e:	4a5a      	ldr	r2, [pc, #360]	; (8005608 <HAL_RCC_OscConfig+0x4cc>)
 80054a0:	f023 0301 	bic.w	r3, r3, #1
 80054a4:	6713      	str	r3, [r2, #112]	; 0x70
 80054a6:	4b58      	ldr	r3, [pc, #352]	; (8005608 <HAL_RCC_OscConfig+0x4cc>)
 80054a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054aa:	4a57      	ldr	r2, [pc, #348]	; (8005608 <HAL_RCC_OscConfig+0x4cc>)
 80054ac:	f023 0304 	bic.w	r3, r3, #4
 80054b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d015      	beq.n	80054e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ba:	f7fd fba9 	bl	8002c10 <HAL_GetTick>
 80054be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054c0:	e00a      	b.n	80054d8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054c2:	f7fd fba5 	bl	8002c10 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d901      	bls.n	80054d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e0ce      	b.n	8005676 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054d8:	4b4b      	ldr	r3, [pc, #300]	; (8005608 <HAL_RCC_OscConfig+0x4cc>)
 80054da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054dc:	f003 0302 	and.w	r3, r3, #2
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d0ee      	beq.n	80054c2 <HAL_RCC_OscConfig+0x386>
 80054e4:	e014      	b.n	8005510 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054e6:	f7fd fb93 	bl	8002c10 <HAL_GetTick>
 80054ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054ec:	e00a      	b.n	8005504 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ee:	f7fd fb8f 	bl	8002c10 <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d901      	bls.n	8005504 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e0b8      	b.n	8005676 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005504:	4b40      	ldr	r3, [pc, #256]	; (8005608 <HAL_RCC_OscConfig+0x4cc>)
 8005506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005508:	f003 0302 	and.w	r3, r3, #2
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1ee      	bne.n	80054ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005510:	7dfb      	ldrb	r3, [r7, #23]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d105      	bne.n	8005522 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005516:	4b3c      	ldr	r3, [pc, #240]	; (8005608 <HAL_RCC_OscConfig+0x4cc>)
 8005518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551a:	4a3b      	ldr	r2, [pc, #236]	; (8005608 <HAL_RCC_OscConfig+0x4cc>)
 800551c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005520:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	2b00      	cmp	r3, #0
 8005528:	f000 80a4 	beq.w	8005674 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800552c:	4b36      	ldr	r3, [pc, #216]	; (8005608 <HAL_RCC_OscConfig+0x4cc>)
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f003 030c 	and.w	r3, r3, #12
 8005534:	2b08      	cmp	r3, #8
 8005536:	d06b      	beq.n	8005610 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	2b02      	cmp	r3, #2
 800553e:	d149      	bne.n	80055d4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005540:	4b31      	ldr	r3, [pc, #196]	; (8005608 <HAL_RCC_OscConfig+0x4cc>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a30      	ldr	r2, [pc, #192]	; (8005608 <HAL_RCC_OscConfig+0x4cc>)
 8005546:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800554a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800554c:	f7fd fb60 	bl	8002c10 <HAL_GetTick>
 8005550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005552:	e008      	b.n	8005566 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005554:	f7fd fb5c 	bl	8002c10 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b02      	cmp	r3, #2
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e087      	b.n	8005676 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005566:	4b28      	ldr	r3, [pc, #160]	; (8005608 <HAL_RCC_OscConfig+0x4cc>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1f0      	bne.n	8005554 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	69da      	ldr	r2, [r3, #28]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	431a      	orrs	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005580:	019b      	lsls	r3, r3, #6
 8005582:	431a      	orrs	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005588:	085b      	lsrs	r3, r3, #1
 800558a:	3b01      	subs	r3, #1
 800558c:	041b      	lsls	r3, r3, #16
 800558e:	431a      	orrs	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005594:	061b      	lsls	r3, r3, #24
 8005596:	4313      	orrs	r3, r2
 8005598:	4a1b      	ldr	r2, [pc, #108]	; (8005608 <HAL_RCC_OscConfig+0x4cc>)
 800559a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800559e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055a0:	4b19      	ldr	r3, [pc, #100]	; (8005608 <HAL_RCC_OscConfig+0x4cc>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a18      	ldr	r2, [pc, #96]	; (8005608 <HAL_RCC_OscConfig+0x4cc>)
 80055a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ac:	f7fd fb30 	bl	8002c10 <HAL_GetTick>
 80055b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055b2:	e008      	b.n	80055c6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055b4:	f7fd fb2c 	bl	8002c10 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d901      	bls.n	80055c6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e057      	b.n	8005676 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055c6:	4b10      	ldr	r3, [pc, #64]	; (8005608 <HAL_RCC_OscConfig+0x4cc>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d0f0      	beq.n	80055b4 <HAL_RCC_OscConfig+0x478>
 80055d2:	e04f      	b.n	8005674 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055d4:	4b0c      	ldr	r3, [pc, #48]	; (8005608 <HAL_RCC_OscConfig+0x4cc>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a0b      	ldr	r2, [pc, #44]	; (8005608 <HAL_RCC_OscConfig+0x4cc>)
 80055da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e0:	f7fd fb16 	bl	8002c10 <HAL_GetTick>
 80055e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055e6:	e008      	b.n	80055fa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055e8:	f7fd fb12 	bl	8002c10 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d901      	bls.n	80055fa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e03d      	b.n	8005676 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055fa:	4b03      	ldr	r3, [pc, #12]	; (8005608 <HAL_RCC_OscConfig+0x4cc>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1f0      	bne.n	80055e8 <HAL_RCC_OscConfig+0x4ac>
 8005606:	e035      	b.n	8005674 <HAL_RCC_OscConfig+0x538>
 8005608:	40023800 	.word	0x40023800
 800560c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005610:	4b1b      	ldr	r3, [pc, #108]	; (8005680 <HAL_RCC_OscConfig+0x544>)
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d028      	beq.n	8005670 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005628:	429a      	cmp	r2, r3
 800562a:	d121      	bne.n	8005670 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005636:	429a      	cmp	r2, r3
 8005638:	d11a      	bne.n	8005670 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005640:	4013      	ands	r3, r2
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005646:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005648:	4293      	cmp	r3, r2
 800564a:	d111      	bne.n	8005670 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005656:	085b      	lsrs	r3, r3, #1
 8005658:	3b01      	subs	r3, #1
 800565a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800565c:	429a      	cmp	r2, r3
 800565e:	d107      	bne.n	8005670 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800566c:	429a      	cmp	r2, r3
 800566e:	d001      	beq.n	8005674 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e000      	b.n	8005676 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3718      	adds	r7, #24
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	40023800 	.word	0x40023800

08005684 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800568e:	2300      	movs	r3, #0
 8005690:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d101      	bne.n	800569c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e0d0      	b.n	800583e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800569c:	4b6a      	ldr	r3, [pc, #424]	; (8005848 <HAL_RCC_ClockConfig+0x1c4>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 030f 	and.w	r3, r3, #15
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d910      	bls.n	80056cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056aa:	4b67      	ldr	r3, [pc, #412]	; (8005848 <HAL_RCC_ClockConfig+0x1c4>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f023 020f 	bic.w	r2, r3, #15
 80056b2:	4965      	ldr	r1, [pc, #404]	; (8005848 <HAL_RCC_ClockConfig+0x1c4>)
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ba:	4b63      	ldr	r3, [pc, #396]	; (8005848 <HAL_RCC_ClockConfig+0x1c4>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 030f 	and.w	r3, r3, #15
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d001      	beq.n	80056cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e0b8      	b.n	800583e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0302 	and.w	r3, r3, #2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d020      	beq.n	800571a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0304 	and.w	r3, r3, #4
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d005      	beq.n	80056f0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056e4:	4b59      	ldr	r3, [pc, #356]	; (800584c <HAL_RCC_ClockConfig+0x1c8>)
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	4a58      	ldr	r2, [pc, #352]	; (800584c <HAL_RCC_ClockConfig+0x1c8>)
 80056ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80056ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0308 	and.w	r3, r3, #8
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d005      	beq.n	8005708 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056fc:	4b53      	ldr	r3, [pc, #332]	; (800584c <HAL_RCC_ClockConfig+0x1c8>)
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	4a52      	ldr	r2, [pc, #328]	; (800584c <HAL_RCC_ClockConfig+0x1c8>)
 8005702:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005706:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005708:	4b50      	ldr	r3, [pc, #320]	; (800584c <HAL_RCC_ClockConfig+0x1c8>)
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	494d      	ldr	r1, [pc, #308]	; (800584c <HAL_RCC_ClockConfig+0x1c8>)
 8005716:	4313      	orrs	r3, r2
 8005718:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b00      	cmp	r3, #0
 8005724:	d040      	beq.n	80057a8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d107      	bne.n	800573e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800572e:	4b47      	ldr	r3, [pc, #284]	; (800584c <HAL_RCC_ClockConfig+0x1c8>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d115      	bne.n	8005766 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e07f      	b.n	800583e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	2b02      	cmp	r3, #2
 8005744:	d107      	bne.n	8005756 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005746:	4b41      	ldr	r3, [pc, #260]	; (800584c <HAL_RCC_ClockConfig+0x1c8>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d109      	bne.n	8005766 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e073      	b.n	800583e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005756:	4b3d      	ldr	r3, [pc, #244]	; (800584c <HAL_RCC_ClockConfig+0x1c8>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e06b      	b.n	800583e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005766:	4b39      	ldr	r3, [pc, #228]	; (800584c <HAL_RCC_ClockConfig+0x1c8>)
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f023 0203 	bic.w	r2, r3, #3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	4936      	ldr	r1, [pc, #216]	; (800584c <HAL_RCC_ClockConfig+0x1c8>)
 8005774:	4313      	orrs	r3, r2
 8005776:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005778:	f7fd fa4a 	bl	8002c10 <HAL_GetTick>
 800577c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800577e:	e00a      	b.n	8005796 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005780:	f7fd fa46 	bl	8002c10 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	f241 3288 	movw	r2, #5000	; 0x1388
 800578e:	4293      	cmp	r3, r2
 8005790:	d901      	bls.n	8005796 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e053      	b.n	800583e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005796:	4b2d      	ldr	r3, [pc, #180]	; (800584c <HAL_RCC_ClockConfig+0x1c8>)
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f003 020c 	and.w	r2, r3, #12
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d1eb      	bne.n	8005780 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057a8:	4b27      	ldr	r3, [pc, #156]	; (8005848 <HAL_RCC_ClockConfig+0x1c4>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 030f 	and.w	r3, r3, #15
 80057b0:	683a      	ldr	r2, [r7, #0]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d210      	bcs.n	80057d8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057b6:	4b24      	ldr	r3, [pc, #144]	; (8005848 <HAL_RCC_ClockConfig+0x1c4>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f023 020f 	bic.w	r2, r3, #15
 80057be:	4922      	ldr	r1, [pc, #136]	; (8005848 <HAL_RCC_ClockConfig+0x1c4>)
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057c6:	4b20      	ldr	r3, [pc, #128]	; (8005848 <HAL_RCC_ClockConfig+0x1c4>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 030f 	and.w	r3, r3, #15
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d001      	beq.n	80057d8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e032      	b.n	800583e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0304 	and.w	r3, r3, #4
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d008      	beq.n	80057f6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057e4:	4b19      	ldr	r3, [pc, #100]	; (800584c <HAL_RCC_ClockConfig+0x1c8>)
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	4916      	ldr	r1, [pc, #88]	; (800584c <HAL_RCC_ClockConfig+0x1c8>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0308 	and.w	r3, r3, #8
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d009      	beq.n	8005816 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005802:	4b12      	ldr	r3, [pc, #72]	; (800584c <HAL_RCC_ClockConfig+0x1c8>)
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	490e      	ldr	r1, [pc, #56]	; (800584c <HAL_RCC_ClockConfig+0x1c8>)
 8005812:	4313      	orrs	r3, r2
 8005814:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005816:	f000 f821 	bl	800585c <HAL_RCC_GetSysClockFreq>
 800581a:	4602      	mov	r2, r0
 800581c:	4b0b      	ldr	r3, [pc, #44]	; (800584c <HAL_RCC_ClockConfig+0x1c8>)
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	091b      	lsrs	r3, r3, #4
 8005822:	f003 030f 	and.w	r3, r3, #15
 8005826:	490a      	ldr	r1, [pc, #40]	; (8005850 <HAL_RCC_ClockConfig+0x1cc>)
 8005828:	5ccb      	ldrb	r3, [r1, r3]
 800582a:	fa22 f303 	lsr.w	r3, r2, r3
 800582e:	4a09      	ldr	r2, [pc, #36]	; (8005854 <HAL_RCC_ClockConfig+0x1d0>)
 8005830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005832:	4b09      	ldr	r3, [pc, #36]	; (8005858 <HAL_RCC_ClockConfig+0x1d4>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4618      	mov	r0, r3
 8005838:	f7fd f9a6 	bl	8002b88 <HAL_InitTick>

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	40023c00 	.word	0x40023c00
 800584c:	40023800 	.word	0x40023800
 8005850:	0800de24 	.word	0x0800de24
 8005854:	20000008 	.word	0x20000008
 8005858:	2000000c 	.word	0x2000000c

0800585c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800585c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005860:	b094      	sub	sp, #80	; 0x50
 8005862:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005864:	2300      	movs	r3, #0
 8005866:	647b      	str	r3, [r7, #68]	; 0x44
 8005868:	2300      	movs	r3, #0
 800586a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800586c:	2300      	movs	r3, #0
 800586e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005870:	2300      	movs	r3, #0
 8005872:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005874:	4b79      	ldr	r3, [pc, #484]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x200>)
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f003 030c 	and.w	r3, r3, #12
 800587c:	2b08      	cmp	r3, #8
 800587e:	d00d      	beq.n	800589c <HAL_RCC_GetSysClockFreq+0x40>
 8005880:	2b08      	cmp	r3, #8
 8005882:	f200 80e1 	bhi.w	8005a48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005886:	2b00      	cmp	r3, #0
 8005888:	d002      	beq.n	8005890 <HAL_RCC_GetSysClockFreq+0x34>
 800588a:	2b04      	cmp	r3, #4
 800588c:	d003      	beq.n	8005896 <HAL_RCC_GetSysClockFreq+0x3a>
 800588e:	e0db      	b.n	8005a48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005890:	4b73      	ldr	r3, [pc, #460]	; (8005a60 <HAL_RCC_GetSysClockFreq+0x204>)
 8005892:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005894:	e0db      	b.n	8005a4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005896:	4b73      	ldr	r3, [pc, #460]	; (8005a64 <HAL_RCC_GetSysClockFreq+0x208>)
 8005898:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800589a:	e0d8      	b.n	8005a4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800589c:	4b6f      	ldr	r3, [pc, #444]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x200>)
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058a4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80058a6:	4b6d      	ldr	r3, [pc, #436]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x200>)
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d063      	beq.n	800597a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058b2:	4b6a      	ldr	r3, [pc, #424]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x200>)
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	099b      	lsrs	r3, r3, #6
 80058b8:	2200      	movs	r2, #0
 80058ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80058bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80058be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058c4:	633b      	str	r3, [r7, #48]	; 0x30
 80058c6:	2300      	movs	r3, #0
 80058c8:	637b      	str	r3, [r7, #52]	; 0x34
 80058ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80058ce:	4622      	mov	r2, r4
 80058d0:	462b      	mov	r3, r5
 80058d2:	f04f 0000 	mov.w	r0, #0
 80058d6:	f04f 0100 	mov.w	r1, #0
 80058da:	0159      	lsls	r1, r3, #5
 80058dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058e0:	0150      	lsls	r0, r2, #5
 80058e2:	4602      	mov	r2, r0
 80058e4:	460b      	mov	r3, r1
 80058e6:	4621      	mov	r1, r4
 80058e8:	1a51      	subs	r1, r2, r1
 80058ea:	6139      	str	r1, [r7, #16]
 80058ec:	4629      	mov	r1, r5
 80058ee:	eb63 0301 	sbc.w	r3, r3, r1
 80058f2:	617b      	str	r3, [r7, #20]
 80058f4:	f04f 0200 	mov.w	r2, #0
 80058f8:	f04f 0300 	mov.w	r3, #0
 80058fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005900:	4659      	mov	r1, fp
 8005902:	018b      	lsls	r3, r1, #6
 8005904:	4651      	mov	r1, sl
 8005906:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800590a:	4651      	mov	r1, sl
 800590c:	018a      	lsls	r2, r1, #6
 800590e:	4651      	mov	r1, sl
 8005910:	ebb2 0801 	subs.w	r8, r2, r1
 8005914:	4659      	mov	r1, fp
 8005916:	eb63 0901 	sbc.w	r9, r3, r1
 800591a:	f04f 0200 	mov.w	r2, #0
 800591e:	f04f 0300 	mov.w	r3, #0
 8005922:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005926:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800592a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800592e:	4690      	mov	r8, r2
 8005930:	4699      	mov	r9, r3
 8005932:	4623      	mov	r3, r4
 8005934:	eb18 0303 	adds.w	r3, r8, r3
 8005938:	60bb      	str	r3, [r7, #8]
 800593a:	462b      	mov	r3, r5
 800593c:	eb49 0303 	adc.w	r3, r9, r3
 8005940:	60fb      	str	r3, [r7, #12]
 8005942:	f04f 0200 	mov.w	r2, #0
 8005946:	f04f 0300 	mov.w	r3, #0
 800594a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800594e:	4629      	mov	r1, r5
 8005950:	024b      	lsls	r3, r1, #9
 8005952:	4621      	mov	r1, r4
 8005954:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005958:	4621      	mov	r1, r4
 800595a:	024a      	lsls	r2, r1, #9
 800595c:	4610      	mov	r0, r2
 800595e:	4619      	mov	r1, r3
 8005960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005962:	2200      	movs	r2, #0
 8005964:	62bb      	str	r3, [r7, #40]	; 0x28
 8005966:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005968:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800596c:	f7fb f9fc 	bl	8000d68 <__aeabi_uldivmod>
 8005970:	4602      	mov	r2, r0
 8005972:	460b      	mov	r3, r1
 8005974:	4613      	mov	r3, r2
 8005976:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005978:	e058      	b.n	8005a2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800597a:	4b38      	ldr	r3, [pc, #224]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x200>)
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	099b      	lsrs	r3, r3, #6
 8005980:	2200      	movs	r2, #0
 8005982:	4618      	mov	r0, r3
 8005984:	4611      	mov	r1, r2
 8005986:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800598a:	623b      	str	r3, [r7, #32]
 800598c:	2300      	movs	r3, #0
 800598e:	627b      	str	r3, [r7, #36]	; 0x24
 8005990:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005994:	4642      	mov	r2, r8
 8005996:	464b      	mov	r3, r9
 8005998:	f04f 0000 	mov.w	r0, #0
 800599c:	f04f 0100 	mov.w	r1, #0
 80059a0:	0159      	lsls	r1, r3, #5
 80059a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059a6:	0150      	lsls	r0, r2, #5
 80059a8:	4602      	mov	r2, r0
 80059aa:	460b      	mov	r3, r1
 80059ac:	4641      	mov	r1, r8
 80059ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80059b2:	4649      	mov	r1, r9
 80059b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80059b8:	f04f 0200 	mov.w	r2, #0
 80059bc:	f04f 0300 	mov.w	r3, #0
 80059c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80059c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80059c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80059cc:	ebb2 040a 	subs.w	r4, r2, sl
 80059d0:	eb63 050b 	sbc.w	r5, r3, fp
 80059d4:	f04f 0200 	mov.w	r2, #0
 80059d8:	f04f 0300 	mov.w	r3, #0
 80059dc:	00eb      	lsls	r3, r5, #3
 80059de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059e2:	00e2      	lsls	r2, r4, #3
 80059e4:	4614      	mov	r4, r2
 80059e6:	461d      	mov	r5, r3
 80059e8:	4643      	mov	r3, r8
 80059ea:	18e3      	adds	r3, r4, r3
 80059ec:	603b      	str	r3, [r7, #0]
 80059ee:	464b      	mov	r3, r9
 80059f0:	eb45 0303 	adc.w	r3, r5, r3
 80059f4:	607b      	str	r3, [r7, #4]
 80059f6:	f04f 0200 	mov.w	r2, #0
 80059fa:	f04f 0300 	mov.w	r3, #0
 80059fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a02:	4629      	mov	r1, r5
 8005a04:	028b      	lsls	r3, r1, #10
 8005a06:	4621      	mov	r1, r4
 8005a08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a0c:	4621      	mov	r1, r4
 8005a0e:	028a      	lsls	r2, r1, #10
 8005a10:	4610      	mov	r0, r2
 8005a12:	4619      	mov	r1, r3
 8005a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a16:	2200      	movs	r2, #0
 8005a18:	61bb      	str	r3, [r7, #24]
 8005a1a:	61fa      	str	r2, [r7, #28]
 8005a1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a20:	f7fb f9a2 	bl	8000d68 <__aeabi_uldivmod>
 8005a24:	4602      	mov	r2, r0
 8005a26:	460b      	mov	r3, r1
 8005a28:	4613      	mov	r3, r2
 8005a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005a2c:	4b0b      	ldr	r3, [pc, #44]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	0c1b      	lsrs	r3, r3, #16
 8005a32:	f003 0303 	and.w	r3, r3, #3
 8005a36:	3301      	adds	r3, #1
 8005a38:	005b      	lsls	r3, r3, #1
 8005a3a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005a3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a46:	e002      	b.n	8005a4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a48:	4b05      	ldr	r3, [pc, #20]	; (8005a60 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a4a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3750      	adds	r7, #80	; 0x50
 8005a54:	46bd      	mov	sp, r7
 8005a56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a5a:	bf00      	nop
 8005a5c:	40023800 	.word	0x40023800
 8005a60:	00f42400 	.word	0x00f42400
 8005a64:	007a1200 	.word	0x007a1200

08005a68 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a6c:	4b03      	ldr	r3, [pc, #12]	; (8005a7c <HAL_RCC_GetHCLKFreq+0x14>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	20000008 	.word	0x20000008

08005a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a84:	f7ff fff0 	bl	8005a68 <HAL_RCC_GetHCLKFreq>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	4b05      	ldr	r3, [pc, #20]	; (8005aa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	0a9b      	lsrs	r3, r3, #10
 8005a90:	f003 0307 	and.w	r3, r3, #7
 8005a94:	4903      	ldr	r1, [pc, #12]	; (8005aa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a96:	5ccb      	ldrb	r3, [r1, r3]
 8005a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	40023800 	.word	0x40023800
 8005aa4:	0800de34 	.word	0x0800de34

08005aa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005aac:	f7ff ffdc 	bl	8005a68 <HAL_RCC_GetHCLKFreq>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	4b05      	ldr	r3, [pc, #20]	; (8005ac8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	0b5b      	lsrs	r3, r3, #13
 8005ab8:	f003 0307 	and.w	r3, r3, #7
 8005abc:	4903      	ldr	r1, [pc, #12]	; (8005acc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005abe:	5ccb      	ldrb	r3, [r1, r3]
 8005ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	40023800 	.word	0x40023800
 8005acc:	0800de34 	.word	0x0800de34

08005ad0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b088      	sub	sp, #32
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005adc:	2300      	movs	r3, #0
 8005ade:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0301 	and.w	r3, r3, #1
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d012      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005af8:	4b69      	ldr	r3, [pc, #420]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	4a68      	ldr	r2, [pc, #416]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005afe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005b02:	6093      	str	r3, [r2, #8]
 8005b04:	4b66      	ldr	r3, [pc, #408]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b06:	689a      	ldr	r2, [r3, #8]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b0c:	4964      	ldr	r1, [pc, #400]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d101      	bne.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d017      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b2a:	4b5d      	ldr	r3, [pc, #372]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b38:	4959      	ldr	r1, [pc, #356]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b48:	d101      	bne.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d101      	bne.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005b56:	2301      	movs	r3, #1
 8005b58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d017      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005b66:	4b4e      	ldr	r3, [pc, #312]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b6c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b74:	494a      	ldr	r1, [pc, #296]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b84:	d101      	bne.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005b86:	2301      	movs	r3, #1
 8005b88:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005b92:	2301      	movs	r3, #1
 8005b94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d001      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0320 	and.w	r3, r3, #32
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	f000 808b 	beq.w	8005cca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005bb4:	4b3a      	ldr	r3, [pc, #232]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb8:	4a39      	ldr	r2, [pc, #228]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bbe:	6413      	str	r3, [r2, #64]	; 0x40
 8005bc0:	4b37      	ldr	r3, [pc, #220]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bc8:	60bb      	str	r3, [r7, #8]
 8005bca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005bcc:	4b35      	ldr	r3, [pc, #212]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a34      	ldr	r2, [pc, #208]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bd8:	f7fd f81a 	bl	8002c10 <HAL_GetTick>
 8005bdc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005bde:	e008      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005be0:	f7fd f816 	bl	8002c10 <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	2b64      	cmp	r3, #100	; 0x64
 8005bec:	d901      	bls.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e357      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005bf2:	4b2c      	ldr	r3, [pc, #176]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d0f0      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005bfe:	4b28      	ldr	r3, [pc, #160]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c06:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d035      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d02e      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c1c:	4b20      	ldr	r3, [pc, #128]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c24:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c26:	4b1e      	ldr	r3, [pc, #120]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c2a:	4a1d      	ldr	r2, [pc, #116]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c30:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c32:	4b1b      	ldr	r3, [pc, #108]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c36:	4a1a      	ldr	r2, [pc, #104]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c3c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005c3e:	4a18      	ldr	r2, [pc, #96]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005c44:	4b16      	ldr	r3, [pc, #88]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c48:	f003 0301 	and.w	r3, r3, #1
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d114      	bne.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c50:	f7fc ffde 	bl	8002c10 <HAL_GetTick>
 8005c54:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c56:	e00a      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c58:	f7fc ffda 	bl	8002c10 <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d901      	bls.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e319      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c6e:	4b0c      	ldr	r3, [pc, #48]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c72:	f003 0302 	and.w	r3, r3, #2
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d0ee      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c86:	d111      	bne.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005c88:	4b05      	ldr	r3, [pc, #20]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005c94:	4b04      	ldr	r3, [pc, #16]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005c96:	400b      	ands	r3, r1
 8005c98:	4901      	ldr	r1, [pc, #4]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	608b      	str	r3, [r1, #8]
 8005c9e:	e00b      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005ca0:	40023800 	.word	0x40023800
 8005ca4:	40007000 	.word	0x40007000
 8005ca8:	0ffffcff 	.word	0x0ffffcff
 8005cac:	4baa      	ldr	r3, [pc, #680]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	4aa9      	ldr	r2, [pc, #676]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cb2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005cb6:	6093      	str	r3, [r2, #8]
 8005cb8:	4ba7      	ldr	r3, [pc, #668]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cc4:	49a4      	ldr	r1, [pc, #656]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0310 	and.w	r3, r3, #16
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d010      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005cd6:	4ba0      	ldr	r3, [pc, #640]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cdc:	4a9e      	ldr	r2, [pc, #632]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ce2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005ce6:	4b9c      	ldr	r3, [pc, #624]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ce8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf0:	4999      	ldr	r1, [pc, #612]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00a      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d04:	4b94      	ldr	r3, [pc, #592]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d0a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d12:	4991      	ldr	r1, [pc, #580]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00a      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d26:	4b8c      	ldr	r3, [pc, #560]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d34:	4988      	ldr	r1, [pc, #544]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00a      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d48:	4b83      	ldr	r3, [pc, #524]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d56:	4980      	ldr	r1, [pc, #512]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00a      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005d6a:	4b7b      	ldr	r3, [pc, #492]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d70:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d78:	4977      	ldr	r1, [pc, #476]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00a      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d8c:	4b72      	ldr	r3, [pc, #456]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d92:	f023 0203 	bic.w	r2, r3, #3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d9a:	496f      	ldr	r1, [pc, #444]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00a      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005dae:	4b6a      	ldr	r3, [pc, #424]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005db4:	f023 020c 	bic.w	r2, r3, #12
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dbc:	4966      	ldr	r1, [pc, #408]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00a      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005dd0:	4b61      	ldr	r3, [pc, #388]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dde:	495e      	ldr	r1, [pc, #376]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005de0:	4313      	orrs	r3, r2
 8005de2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00a      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005df2:	4b59      	ldr	r3, [pc, #356]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e00:	4955      	ldr	r1, [pc, #340]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e02:	4313      	orrs	r3, r2
 8005e04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00a      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005e14:	4b50      	ldr	r3, [pc, #320]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e22:	494d      	ldr	r1, [pc, #308]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00a      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005e36:	4b48      	ldr	r3, [pc, #288]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e3c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e44:	4944      	ldr	r1, [pc, #272]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00a      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005e58:	4b3f      	ldr	r3, [pc, #252]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e5e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e66:	493c      	ldr	r1, [pc, #240]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00a      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005e7a:	4b37      	ldr	r3, [pc, #220]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e88:	4933      	ldr	r1, [pc, #204]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00a      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005e9c:	4b2e      	ldr	r3, [pc, #184]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005eaa:	492b      	ldr	r1, [pc, #172]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005eac:	4313      	orrs	r3, r2
 8005eae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d011      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005ebe:	4b26      	ldr	r3, [pc, #152]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ecc:	4922      	ldr	r1, [pc, #136]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ed8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005edc:	d101      	bne.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0308 	and.w	r3, r3, #8
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00a      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005efe:	4b16      	ldr	r3, [pc, #88]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f04:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f0c:	4912      	ldr	r1, [pc, #72]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00b      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005f20:	4b0d      	ldr	r3, [pc, #52]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f26:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f30:	4909      	ldr	r1, [pc, #36]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d006      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f000 80d9 	beq.w	80060fe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005f4c:	4b02      	ldr	r3, [pc, #8]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a01      	ldr	r2, [pc, #4]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f56:	e001      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005f58:	40023800 	.word	0x40023800
 8005f5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f5e:	f7fc fe57 	bl	8002c10 <HAL_GetTick>
 8005f62:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f64:	e008      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005f66:	f7fc fe53 	bl	8002c10 <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	2b64      	cmp	r3, #100	; 0x64
 8005f72:	d901      	bls.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e194      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f78:	4b6c      	ldr	r3, [pc, #432]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1f0      	bne.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d021      	beq.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d11d      	bne.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005f98:	4b64      	ldr	r3, [pc, #400]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f9e:	0c1b      	lsrs	r3, r3, #16
 8005fa0:	f003 0303 	and.w	r3, r3, #3
 8005fa4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005fa6:	4b61      	ldr	r3, [pc, #388]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fac:	0e1b      	lsrs	r3, r3, #24
 8005fae:	f003 030f 	and.w	r3, r3, #15
 8005fb2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	019a      	lsls	r2, r3, #6
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	041b      	lsls	r3, r3, #16
 8005fbe:	431a      	orrs	r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	061b      	lsls	r3, r3, #24
 8005fc4:	431a      	orrs	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	071b      	lsls	r3, r3, #28
 8005fcc:	4957      	ldr	r1, [pc, #348]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d004      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fe8:	d00a      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d02e      	beq.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ffe:	d129      	bne.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006000:	4b4a      	ldr	r3, [pc, #296]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006002:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006006:	0c1b      	lsrs	r3, r3, #16
 8006008:	f003 0303 	and.w	r3, r3, #3
 800600c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800600e:	4b47      	ldr	r3, [pc, #284]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006010:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006014:	0f1b      	lsrs	r3, r3, #28
 8006016:	f003 0307 	and.w	r3, r3, #7
 800601a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	019a      	lsls	r2, r3, #6
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	041b      	lsls	r3, r3, #16
 8006026:	431a      	orrs	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	061b      	lsls	r3, r3, #24
 800602e:	431a      	orrs	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	071b      	lsls	r3, r3, #28
 8006034:	493d      	ldr	r1, [pc, #244]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006036:	4313      	orrs	r3, r2
 8006038:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800603c:	4b3b      	ldr	r3, [pc, #236]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800603e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006042:	f023 021f 	bic.w	r2, r3, #31
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604a:	3b01      	subs	r3, #1
 800604c:	4937      	ldr	r1, [pc, #220]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800604e:	4313      	orrs	r3, r2
 8006050:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d01d      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006060:	4b32      	ldr	r3, [pc, #200]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006062:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006066:	0e1b      	lsrs	r3, r3, #24
 8006068:	f003 030f 	and.w	r3, r3, #15
 800606c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800606e:	4b2f      	ldr	r3, [pc, #188]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006070:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006074:	0f1b      	lsrs	r3, r3, #28
 8006076:	f003 0307 	and.w	r3, r3, #7
 800607a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	019a      	lsls	r2, r3, #6
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	041b      	lsls	r3, r3, #16
 8006088:	431a      	orrs	r2, r3
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	061b      	lsls	r3, r3, #24
 800608e:	431a      	orrs	r2, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	071b      	lsls	r3, r3, #28
 8006094:	4925      	ldr	r1, [pc, #148]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006096:	4313      	orrs	r3, r2
 8006098:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d011      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	019a      	lsls	r2, r3, #6
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	041b      	lsls	r3, r3, #16
 80060b4:	431a      	orrs	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	061b      	lsls	r3, r3, #24
 80060bc:	431a      	orrs	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	071b      	lsls	r3, r3, #28
 80060c4:	4919      	ldr	r1, [pc, #100]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060c6:	4313      	orrs	r3, r2
 80060c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80060cc:	4b17      	ldr	r3, [pc, #92]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a16      	ldr	r2, [pc, #88]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80060d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060d8:	f7fc fd9a 	bl	8002c10 <HAL_GetTick>
 80060dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80060de:	e008      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80060e0:	f7fc fd96 	bl	8002c10 <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	2b64      	cmp	r3, #100	; 0x64
 80060ec:	d901      	bls.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e0d7      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80060f2:	4b0e      	ldr	r3, [pc, #56]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d0f0      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	2b01      	cmp	r3, #1
 8006102:	f040 80cd 	bne.w	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006106:	4b09      	ldr	r3, [pc, #36]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a08      	ldr	r2, [pc, #32]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800610c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006110:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006112:	f7fc fd7d 	bl	8002c10 <HAL_GetTick>
 8006116:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006118:	e00a      	b.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800611a:	f7fc fd79 	bl	8002c10 <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	2b64      	cmp	r3, #100	; 0x64
 8006126:	d903      	bls.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e0ba      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800612c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006130:	4b5e      	ldr	r3, [pc, #376]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006138:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800613c:	d0ed      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d003      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800614e:	2b00      	cmp	r3, #0
 8006150:	d009      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800615a:	2b00      	cmp	r3, #0
 800615c:	d02e      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006162:	2b00      	cmp	r3, #0
 8006164:	d12a      	bne.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006166:	4b51      	ldr	r3, [pc, #324]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800616c:	0c1b      	lsrs	r3, r3, #16
 800616e:	f003 0303 	and.w	r3, r3, #3
 8006172:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006174:	4b4d      	ldr	r3, [pc, #308]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800617a:	0f1b      	lsrs	r3, r3, #28
 800617c:	f003 0307 	and.w	r3, r3, #7
 8006180:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	019a      	lsls	r2, r3, #6
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	041b      	lsls	r3, r3, #16
 800618c:	431a      	orrs	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	061b      	lsls	r3, r3, #24
 8006194:	431a      	orrs	r2, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	071b      	lsls	r3, r3, #28
 800619a:	4944      	ldr	r1, [pc, #272]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800619c:	4313      	orrs	r3, r2
 800619e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80061a2:	4b42      	ldr	r3, [pc, #264]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80061a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061a8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b0:	3b01      	subs	r3, #1
 80061b2:	021b      	lsls	r3, r3, #8
 80061b4:	493d      	ldr	r1, [pc, #244]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d022      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061d0:	d11d      	bne.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80061d2:	4b36      	ldr	r3, [pc, #216]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80061d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d8:	0e1b      	lsrs	r3, r3, #24
 80061da:	f003 030f 	and.w	r3, r3, #15
 80061de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80061e0:	4b32      	ldr	r3, [pc, #200]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80061e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e6:	0f1b      	lsrs	r3, r3, #28
 80061e8:	f003 0307 	and.w	r3, r3, #7
 80061ec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	019a      	lsls	r2, r3, #6
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a1b      	ldr	r3, [r3, #32]
 80061f8:	041b      	lsls	r3, r3, #16
 80061fa:	431a      	orrs	r2, r3
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	061b      	lsls	r3, r3, #24
 8006200:	431a      	orrs	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	071b      	lsls	r3, r3, #28
 8006206:	4929      	ldr	r1, [pc, #164]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006208:	4313      	orrs	r3, r2
 800620a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 0308 	and.w	r3, r3, #8
 8006216:	2b00      	cmp	r3, #0
 8006218:	d028      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800621a:	4b24      	ldr	r3, [pc, #144]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800621c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006220:	0e1b      	lsrs	r3, r3, #24
 8006222:	f003 030f 	and.w	r3, r3, #15
 8006226:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006228:	4b20      	ldr	r3, [pc, #128]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800622a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800622e:	0c1b      	lsrs	r3, r3, #16
 8006230:	f003 0303 	and.w	r3, r3, #3
 8006234:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	019a      	lsls	r2, r3, #6
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	041b      	lsls	r3, r3, #16
 8006240:	431a      	orrs	r2, r3
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	061b      	lsls	r3, r3, #24
 8006246:	431a      	orrs	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	69db      	ldr	r3, [r3, #28]
 800624c:	071b      	lsls	r3, r3, #28
 800624e:	4917      	ldr	r1, [pc, #92]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006250:	4313      	orrs	r3, r2
 8006252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006256:	4b15      	ldr	r3, [pc, #84]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006258:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800625c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006264:	4911      	ldr	r1, [pc, #68]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006266:	4313      	orrs	r3, r2
 8006268:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800626c:	4b0f      	ldr	r3, [pc, #60]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a0e      	ldr	r2, [pc, #56]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006276:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006278:	f7fc fcca 	bl	8002c10 <HAL_GetTick>
 800627c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800627e:	e008      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006280:	f7fc fcc6 	bl	8002c10 <HAL_GetTick>
 8006284:	4602      	mov	r2, r0
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	2b64      	cmp	r3, #100	; 0x64
 800628c:	d901      	bls.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e007      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006292:	4b06      	ldr	r3, [pc, #24]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800629a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800629e:	d1ef      	bne.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3720      	adds	r7, #32
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	40023800 	.word	0x40023800

080062b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d101      	bne.n	80062c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e049      	b.n	8006356 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d106      	bne.n	80062dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f7fc faf8 	bl	80028cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2202      	movs	r2, #2
 80062e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	3304      	adds	r3, #4
 80062ec:	4619      	mov	r1, r3
 80062ee:	4610      	mov	r0, r2
 80062f0:	f000 fd30 	bl	8006d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3708      	adds	r7, #8
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
	...

08006360 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b01      	cmp	r3, #1
 8006372:	d001      	beq.n	8006378 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e054      	b.n	8006422 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2202      	movs	r2, #2
 800637c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68da      	ldr	r2, [r3, #12]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f042 0201 	orr.w	r2, r2, #1
 800638e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a26      	ldr	r2, [pc, #152]	; (8006430 <HAL_TIM_Base_Start_IT+0xd0>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d022      	beq.n	80063e0 <HAL_TIM_Base_Start_IT+0x80>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063a2:	d01d      	beq.n	80063e0 <HAL_TIM_Base_Start_IT+0x80>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a22      	ldr	r2, [pc, #136]	; (8006434 <HAL_TIM_Base_Start_IT+0xd4>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d018      	beq.n	80063e0 <HAL_TIM_Base_Start_IT+0x80>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a21      	ldr	r2, [pc, #132]	; (8006438 <HAL_TIM_Base_Start_IT+0xd8>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d013      	beq.n	80063e0 <HAL_TIM_Base_Start_IT+0x80>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a1f      	ldr	r2, [pc, #124]	; (800643c <HAL_TIM_Base_Start_IT+0xdc>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d00e      	beq.n	80063e0 <HAL_TIM_Base_Start_IT+0x80>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a1e      	ldr	r2, [pc, #120]	; (8006440 <HAL_TIM_Base_Start_IT+0xe0>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d009      	beq.n	80063e0 <HAL_TIM_Base_Start_IT+0x80>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a1c      	ldr	r2, [pc, #112]	; (8006444 <HAL_TIM_Base_Start_IT+0xe4>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d004      	beq.n	80063e0 <HAL_TIM_Base_Start_IT+0x80>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a1b      	ldr	r2, [pc, #108]	; (8006448 <HAL_TIM_Base_Start_IT+0xe8>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d115      	bne.n	800640c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	689a      	ldr	r2, [r3, #8]
 80063e6:	4b19      	ldr	r3, [pc, #100]	; (800644c <HAL_TIM_Base_Start_IT+0xec>)
 80063e8:	4013      	ands	r3, r2
 80063ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2b06      	cmp	r3, #6
 80063f0:	d015      	beq.n	800641e <HAL_TIM_Base_Start_IT+0xbe>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063f8:	d011      	beq.n	800641e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f042 0201 	orr.w	r2, r2, #1
 8006408:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800640a:	e008      	b.n	800641e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f042 0201 	orr.w	r2, r2, #1
 800641a:	601a      	str	r2, [r3, #0]
 800641c:	e000      	b.n	8006420 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800641e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3714      	adds	r7, #20
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	40010000 	.word	0x40010000
 8006434:	40000400 	.word	0x40000400
 8006438:	40000800 	.word	0x40000800
 800643c:	40000c00 	.word	0x40000c00
 8006440:	40010400 	.word	0x40010400
 8006444:	40014000 	.word	0x40014000
 8006448:	40001800 	.word	0x40001800
 800644c:	00010007 	.word	0x00010007

08006450 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d101      	bne.n	8006462 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e049      	b.n	80064f6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d106      	bne.n	800647c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 f841 	bl	80064fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2202      	movs	r2, #2
 8006480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	3304      	adds	r3, #4
 800648c:	4619      	mov	r1, r3
 800648e:	4610      	mov	r0, r2
 8006490:	f000 fc60 	bl	8006d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3708      	adds	r7, #8
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80064fe:	b480      	push	{r7}
 8006500:	b083      	sub	sp, #12
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006506:	bf00      	nop
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
	...

08006514 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d109      	bne.n	8006538 <HAL_TIM_PWM_Start+0x24>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800652a:	b2db      	uxtb	r3, r3
 800652c:	2b01      	cmp	r3, #1
 800652e:	bf14      	ite	ne
 8006530:	2301      	movne	r3, #1
 8006532:	2300      	moveq	r3, #0
 8006534:	b2db      	uxtb	r3, r3
 8006536:	e03c      	b.n	80065b2 <HAL_TIM_PWM_Start+0x9e>
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	2b04      	cmp	r3, #4
 800653c:	d109      	bne.n	8006552 <HAL_TIM_PWM_Start+0x3e>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b01      	cmp	r3, #1
 8006548:	bf14      	ite	ne
 800654a:	2301      	movne	r3, #1
 800654c:	2300      	moveq	r3, #0
 800654e:	b2db      	uxtb	r3, r3
 8006550:	e02f      	b.n	80065b2 <HAL_TIM_PWM_Start+0x9e>
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	2b08      	cmp	r3, #8
 8006556:	d109      	bne.n	800656c <HAL_TIM_PWM_Start+0x58>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800655e:	b2db      	uxtb	r3, r3
 8006560:	2b01      	cmp	r3, #1
 8006562:	bf14      	ite	ne
 8006564:	2301      	movne	r3, #1
 8006566:	2300      	moveq	r3, #0
 8006568:	b2db      	uxtb	r3, r3
 800656a:	e022      	b.n	80065b2 <HAL_TIM_PWM_Start+0x9e>
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	2b0c      	cmp	r3, #12
 8006570:	d109      	bne.n	8006586 <HAL_TIM_PWM_Start+0x72>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006578:	b2db      	uxtb	r3, r3
 800657a:	2b01      	cmp	r3, #1
 800657c:	bf14      	ite	ne
 800657e:	2301      	movne	r3, #1
 8006580:	2300      	moveq	r3, #0
 8006582:	b2db      	uxtb	r3, r3
 8006584:	e015      	b.n	80065b2 <HAL_TIM_PWM_Start+0x9e>
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	2b10      	cmp	r3, #16
 800658a:	d109      	bne.n	80065a0 <HAL_TIM_PWM_Start+0x8c>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006592:	b2db      	uxtb	r3, r3
 8006594:	2b01      	cmp	r3, #1
 8006596:	bf14      	ite	ne
 8006598:	2301      	movne	r3, #1
 800659a:	2300      	moveq	r3, #0
 800659c:	b2db      	uxtb	r3, r3
 800659e:	e008      	b.n	80065b2 <HAL_TIM_PWM_Start+0x9e>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	bf14      	ite	ne
 80065ac:	2301      	movne	r3, #1
 80065ae:	2300      	moveq	r3, #0
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d001      	beq.n	80065ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e092      	b.n	80066e0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d104      	bne.n	80065ca <HAL_TIM_PWM_Start+0xb6>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2202      	movs	r2, #2
 80065c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065c8:	e023      	b.n	8006612 <HAL_TIM_PWM_Start+0xfe>
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	2b04      	cmp	r3, #4
 80065ce:	d104      	bne.n	80065da <HAL_TIM_PWM_Start+0xc6>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2202      	movs	r2, #2
 80065d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065d8:	e01b      	b.n	8006612 <HAL_TIM_PWM_Start+0xfe>
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	2b08      	cmp	r3, #8
 80065de:	d104      	bne.n	80065ea <HAL_TIM_PWM_Start+0xd6>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2202      	movs	r2, #2
 80065e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065e8:	e013      	b.n	8006612 <HAL_TIM_PWM_Start+0xfe>
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	2b0c      	cmp	r3, #12
 80065ee:	d104      	bne.n	80065fa <HAL_TIM_PWM_Start+0xe6>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2202      	movs	r2, #2
 80065f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065f8:	e00b      	b.n	8006612 <HAL_TIM_PWM_Start+0xfe>
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	2b10      	cmp	r3, #16
 80065fe:	d104      	bne.n	800660a <HAL_TIM_PWM_Start+0xf6>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2202      	movs	r2, #2
 8006604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006608:	e003      	b.n	8006612 <HAL_TIM_PWM_Start+0xfe>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2202      	movs	r2, #2
 800660e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2201      	movs	r2, #1
 8006618:	6839      	ldr	r1, [r7, #0]
 800661a:	4618      	mov	r0, r3
 800661c:	f000 ff32 	bl	8007484 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a30      	ldr	r2, [pc, #192]	; (80066e8 <HAL_TIM_PWM_Start+0x1d4>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d004      	beq.n	8006634 <HAL_TIM_PWM_Start+0x120>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a2f      	ldr	r2, [pc, #188]	; (80066ec <HAL_TIM_PWM_Start+0x1d8>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d101      	bne.n	8006638 <HAL_TIM_PWM_Start+0x124>
 8006634:	2301      	movs	r3, #1
 8006636:	e000      	b.n	800663a <HAL_TIM_PWM_Start+0x126>
 8006638:	2300      	movs	r3, #0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d007      	beq.n	800664e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800664c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a25      	ldr	r2, [pc, #148]	; (80066e8 <HAL_TIM_PWM_Start+0x1d4>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d022      	beq.n	800669e <HAL_TIM_PWM_Start+0x18a>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006660:	d01d      	beq.n	800669e <HAL_TIM_PWM_Start+0x18a>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a22      	ldr	r2, [pc, #136]	; (80066f0 <HAL_TIM_PWM_Start+0x1dc>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d018      	beq.n	800669e <HAL_TIM_PWM_Start+0x18a>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a20      	ldr	r2, [pc, #128]	; (80066f4 <HAL_TIM_PWM_Start+0x1e0>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d013      	beq.n	800669e <HAL_TIM_PWM_Start+0x18a>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a1f      	ldr	r2, [pc, #124]	; (80066f8 <HAL_TIM_PWM_Start+0x1e4>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d00e      	beq.n	800669e <HAL_TIM_PWM_Start+0x18a>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a19      	ldr	r2, [pc, #100]	; (80066ec <HAL_TIM_PWM_Start+0x1d8>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d009      	beq.n	800669e <HAL_TIM_PWM_Start+0x18a>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a1b      	ldr	r2, [pc, #108]	; (80066fc <HAL_TIM_PWM_Start+0x1e8>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d004      	beq.n	800669e <HAL_TIM_PWM_Start+0x18a>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a19      	ldr	r2, [pc, #100]	; (8006700 <HAL_TIM_PWM_Start+0x1ec>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d115      	bne.n	80066ca <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	689a      	ldr	r2, [r3, #8]
 80066a4:	4b17      	ldr	r3, [pc, #92]	; (8006704 <HAL_TIM_PWM_Start+0x1f0>)
 80066a6:	4013      	ands	r3, r2
 80066a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2b06      	cmp	r3, #6
 80066ae:	d015      	beq.n	80066dc <HAL_TIM_PWM_Start+0x1c8>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066b6:	d011      	beq.n	80066dc <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f042 0201 	orr.w	r2, r2, #1
 80066c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066c8:	e008      	b.n	80066dc <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f042 0201 	orr.w	r2, r2, #1
 80066d8:	601a      	str	r2, [r3, #0]
 80066da:	e000      	b.n	80066de <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3710      	adds	r7, #16
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	40010000 	.word	0x40010000
 80066ec:	40010400 	.word	0x40010400
 80066f0:	40000400 	.word	0x40000400
 80066f4:	40000800 	.word	0x40000800
 80066f8:	40000c00 	.word	0x40000c00
 80066fc:	40014000 	.word	0x40014000
 8006700:	40001800 	.word	0x40001800
 8006704:	00010007 	.word	0x00010007

08006708 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	f003 0302 	and.w	r3, r3, #2
 800671a:	2b02      	cmp	r3, #2
 800671c:	d122      	bne.n	8006764 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	f003 0302 	and.w	r3, r3, #2
 8006728:	2b02      	cmp	r3, #2
 800672a:	d11b      	bne.n	8006764 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f06f 0202 	mvn.w	r2, #2
 8006734:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2201      	movs	r2, #1
 800673a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	f003 0303 	and.w	r3, r3, #3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d003      	beq.n	8006752 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 fae4 	bl	8006d18 <HAL_TIM_IC_CaptureCallback>
 8006750:	e005      	b.n	800675e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 fad6 	bl	8006d04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 fae7 	bl	8006d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	f003 0304 	and.w	r3, r3, #4
 800676e:	2b04      	cmp	r3, #4
 8006770:	d122      	bne.n	80067b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	f003 0304 	and.w	r3, r3, #4
 800677c:	2b04      	cmp	r3, #4
 800677e:	d11b      	bne.n	80067b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f06f 0204 	mvn.w	r2, #4
 8006788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2202      	movs	r2, #2
 800678e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800679a:	2b00      	cmp	r3, #0
 800679c:	d003      	beq.n	80067a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 faba 	bl	8006d18 <HAL_TIM_IC_CaptureCallback>
 80067a4:	e005      	b.n	80067b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 faac 	bl	8006d04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 fabd 	bl	8006d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	f003 0308 	and.w	r3, r3, #8
 80067c2:	2b08      	cmp	r3, #8
 80067c4:	d122      	bne.n	800680c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	f003 0308 	and.w	r3, r3, #8
 80067d0:	2b08      	cmp	r3, #8
 80067d2:	d11b      	bne.n	800680c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f06f 0208 	mvn.w	r2, #8
 80067dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2204      	movs	r2, #4
 80067e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	69db      	ldr	r3, [r3, #28]
 80067ea:	f003 0303 	and.w	r3, r3, #3
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d003      	beq.n	80067fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 fa90 	bl	8006d18 <HAL_TIM_IC_CaptureCallback>
 80067f8:	e005      	b.n	8006806 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 fa82 	bl	8006d04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 fa93 	bl	8006d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	f003 0310 	and.w	r3, r3, #16
 8006816:	2b10      	cmp	r3, #16
 8006818:	d122      	bne.n	8006860 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	f003 0310 	and.w	r3, r3, #16
 8006824:	2b10      	cmp	r3, #16
 8006826:	d11b      	bne.n	8006860 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f06f 0210 	mvn.w	r2, #16
 8006830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2208      	movs	r2, #8
 8006836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	69db      	ldr	r3, [r3, #28]
 800683e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006842:	2b00      	cmp	r3, #0
 8006844:	d003      	beq.n	800684e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 fa66 	bl	8006d18 <HAL_TIM_IC_CaptureCallback>
 800684c:	e005      	b.n	800685a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 fa58 	bl	8006d04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 fa69 	bl	8006d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	f003 0301 	and.w	r3, r3, #1
 800686a:	2b01      	cmp	r3, #1
 800686c:	d10e      	bne.n	800688c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	f003 0301 	and.w	r3, r3, #1
 8006878:	2b01      	cmp	r3, #1
 800687a:	d107      	bne.n	800688c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f06f 0201 	mvn.w	r2, #1
 8006884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f7fb fc3a 	bl	8002100 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006896:	2b80      	cmp	r3, #128	; 0x80
 8006898:	d10e      	bne.n	80068b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068a4:	2b80      	cmp	r3, #128	; 0x80
 80068a6:	d107      	bne.n	80068b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80068b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 fea4 	bl	8007600 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068c6:	d10e      	bne.n	80068e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068d2:	2b80      	cmp	r3, #128	; 0x80
 80068d4:	d107      	bne.n	80068e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80068de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fe97 	bl	8007614 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f0:	2b40      	cmp	r3, #64	; 0x40
 80068f2:	d10e      	bne.n	8006912 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068fe:	2b40      	cmp	r3, #64	; 0x40
 8006900:	d107      	bne.n	8006912 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800690a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 fa17 	bl	8006d40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	f003 0320 	and.w	r3, r3, #32
 800691c:	2b20      	cmp	r3, #32
 800691e:	d10e      	bne.n	800693e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	f003 0320 	and.w	r3, r3, #32
 800692a:	2b20      	cmp	r3, #32
 800692c:	d107      	bne.n	800693e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f06f 0220 	mvn.w	r2, #32
 8006936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 fe57 	bl	80075ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800693e:	bf00      	nop
 8006940:	3708      	adds	r7, #8
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
	...

08006948 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006954:	2300      	movs	r3, #0
 8006956:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800695e:	2b01      	cmp	r3, #1
 8006960:	d101      	bne.n	8006966 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006962:	2302      	movs	r3, #2
 8006964:	e0ff      	b.n	8006b66 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2b14      	cmp	r3, #20
 8006972:	f200 80f0 	bhi.w	8006b56 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006976:	a201      	add	r2, pc, #4	; (adr r2, 800697c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697c:	080069d1 	.word	0x080069d1
 8006980:	08006b57 	.word	0x08006b57
 8006984:	08006b57 	.word	0x08006b57
 8006988:	08006b57 	.word	0x08006b57
 800698c:	08006a11 	.word	0x08006a11
 8006990:	08006b57 	.word	0x08006b57
 8006994:	08006b57 	.word	0x08006b57
 8006998:	08006b57 	.word	0x08006b57
 800699c:	08006a53 	.word	0x08006a53
 80069a0:	08006b57 	.word	0x08006b57
 80069a4:	08006b57 	.word	0x08006b57
 80069a8:	08006b57 	.word	0x08006b57
 80069ac:	08006a93 	.word	0x08006a93
 80069b0:	08006b57 	.word	0x08006b57
 80069b4:	08006b57 	.word	0x08006b57
 80069b8:	08006b57 	.word	0x08006b57
 80069bc:	08006ad5 	.word	0x08006ad5
 80069c0:	08006b57 	.word	0x08006b57
 80069c4:	08006b57 	.word	0x08006b57
 80069c8:	08006b57 	.word	0x08006b57
 80069cc:	08006b15 	.word	0x08006b15
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68b9      	ldr	r1, [r7, #8]
 80069d6:	4618      	mov	r0, r3
 80069d8:	f000 fa5c 	bl	8006e94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	699a      	ldr	r2, [r3, #24]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f042 0208 	orr.w	r2, r2, #8
 80069ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	699a      	ldr	r2, [r3, #24]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f022 0204 	bic.w	r2, r2, #4
 80069fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6999      	ldr	r1, [r3, #24]
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	691a      	ldr	r2, [r3, #16]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	430a      	orrs	r2, r1
 8006a0c:	619a      	str	r2, [r3, #24]
      break;
 8006a0e:	e0a5      	b.n	8006b5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68b9      	ldr	r1, [r7, #8]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f000 faae 	bl	8006f78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	699a      	ldr	r2, [r3, #24]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	699a      	ldr	r2, [r3, #24]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	6999      	ldr	r1, [r3, #24]
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	021a      	lsls	r2, r3, #8
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	430a      	orrs	r2, r1
 8006a4e:	619a      	str	r2, [r3, #24]
      break;
 8006a50:	e084      	b.n	8006b5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68b9      	ldr	r1, [r7, #8]
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f000 fb05 	bl	8007068 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	69da      	ldr	r2, [r3, #28]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f042 0208 	orr.w	r2, r2, #8
 8006a6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	69da      	ldr	r2, [r3, #28]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f022 0204 	bic.w	r2, r2, #4
 8006a7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	69d9      	ldr	r1, [r3, #28]
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	691a      	ldr	r2, [r3, #16]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	430a      	orrs	r2, r1
 8006a8e:	61da      	str	r2, [r3, #28]
      break;
 8006a90:	e064      	b.n	8006b5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68b9      	ldr	r1, [r7, #8]
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f000 fb5b 	bl	8007154 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	69da      	ldr	r2, [r3, #28]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006aac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	69da      	ldr	r2, [r3, #28]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006abc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	69d9      	ldr	r1, [r3, #28]
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	021a      	lsls	r2, r3, #8
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	430a      	orrs	r2, r1
 8006ad0:	61da      	str	r2, [r3, #28]
      break;
 8006ad2:	e043      	b.n	8006b5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68b9      	ldr	r1, [r7, #8]
 8006ada:	4618      	mov	r0, r3
 8006adc:	f000 fb92 	bl	8007204 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f042 0208 	orr.w	r2, r2, #8
 8006aee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f022 0204 	bic.w	r2, r2, #4
 8006afe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	691a      	ldr	r2, [r3, #16]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006b12:	e023      	b.n	8006b5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68b9      	ldr	r1, [r7, #8]
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 fbc4 	bl	80072a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b2e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b3e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	021a      	lsls	r2, r3, #8
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	430a      	orrs	r2, r1
 8006b52:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006b54:	e002      	b.n	8006b5c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	75fb      	strb	r3, [r7, #23]
      break;
 8006b5a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b64:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3718      	adds	r7, #24
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop

08006b70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d101      	bne.n	8006b8c <HAL_TIM_ConfigClockSource+0x1c>
 8006b88:	2302      	movs	r3, #2
 8006b8a:	e0b4      	b.n	8006cf6 <HAL_TIM_ConfigClockSource+0x186>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2202      	movs	r2, #2
 8006b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ba4:	68ba      	ldr	r2, [r7, #8]
 8006ba6:	4b56      	ldr	r3, [pc, #344]	; (8006d00 <HAL_TIM_ConfigClockSource+0x190>)
 8006ba8:	4013      	ands	r3, r2
 8006baa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68ba      	ldr	r2, [r7, #8]
 8006bba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bc4:	d03e      	beq.n	8006c44 <HAL_TIM_ConfigClockSource+0xd4>
 8006bc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bca:	f200 8087 	bhi.w	8006cdc <HAL_TIM_ConfigClockSource+0x16c>
 8006bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bd2:	f000 8086 	beq.w	8006ce2 <HAL_TIM_ConfigClockSource+0x172>
 8006bd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bda:	d87f      	bhi.n	8006cdc <HAL_TIM_ConfigClockSource+0x16c>
 8006bdc:	2b70      	cmp	r3, #112	; 0x70
 8006bde:	d01a      	beq.n	8006c16 <HAL_TIM_ConfigClockSource+0xa6>
 8006be0:	2b70      	cmp	r3, #112	; 0x70
 8006be2:	d87b      	bhi.n	8006cdc <HAL_TIM_ConfigClockSource+0x16c>
 8006be4:	2b60      	cmp	r3, #96	; 0x60
 8006be6:	d050      	beq.n	8006c8a <HAL_TIM_ConfigClockSource+0x11a>
 8006be8:	2b60      	cmp	r3, #96	; 0x60
 8006bea:	d877      	bhi.n	8006cdc <HAL_TIM_ConfigClockSource+0x16c>
 8006bec:	2b50      	cmp	r3, #80	; 0x50
 8006bee:	d03c      	beq.n	8006c6a <HAL_TIM_ConfigClockSource+0xfa>
 8006bf0:	2b50      	cmp	r3, #80	; 0x50
 8006bf2:	d873      	bhi.n	8006cdc <HAL_TIM_ConfigClockSource+0x16c>
 8006bf4:	2b40      	cmp	r3, #64	; 0x40
 8006bf6:	d058      	beq.n	8006caa <HAL_TIM_ConfigClockSource+0x13a>
 8006bf8:	2b40      	cmp	r3, #64	; 0x40
 8006bfa:	d86f      	bhi.n	8006cdc <HAL_TIM_ConfigClockSource+0x16c>
 8006bfc:	2b30      	cmp	r3, #48	; 0x30
 8006bfe:	d064      	beq.n	8006cca <HAL_TIM_ConfigClockSource+0x15a>
 8006c00:	2b30      	cmp	r3, #48	; 0x30
 8006c02:	d86b      	bhi.n	8006cdc <HAL_TIM_ConfigClockSource+0x16c>
 8006c04:	2b20      	cmp	r3, #32
 8006c06:	d060      	beq.n	8006cca <HAL_TIM_ConfigClockSource+0x15a>
 8006c08:	2b20      	cmp	r3, #32
 8006c0a:	d867      	bhi.n	8006cdc <HAL_TIM_ConfigClockSource+0x16c>
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d05c      	beq.n	8006cca <HAL_TIM_ConfigClockSource+0x15a>
 8006c10:	2b10      	cmp	r3, #16
 8006c12:	d05a      	beq.n	8006cca <HAL_TIM_ConfigClockSource+0x15a>
 8006c14:	e062      	b.n	8006cdc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c26:	f000 fc0d 	bl	8007444 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68ba      	ldr	r2, [r7, #8]
 8006c40:	609a      	str	r2, [r3, #8]
      break;
 8006c42:	e04f      	b.n	8006ce4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c54:	f000 fbf6 	bl	8007444 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	689a      	ldr	r2, [r3, #8]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c66:	609a      	str	r2, [r3, #8]
      break;
 8006c68:	e03c      	b.n	8006ce4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c76:	461a      	mov	r2, r3
 8006c78:	f000 fb6a 	bl	8007350 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2150      	movs	r1, #80	; 0x50
 8006c82:	4618      	mov	r0, r3
 8006c84:	f000 fbc3 	bl	800740e <TIM_ITRx_SetConfig>
      break;
 8006c88:	e02c      	b.n	8006ce4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c96:	461a      	mov	r2, r3
 8006c98:	f000 fb89 	bl	80073ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2160      	movs	r1, #96	; 0x60
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f000 fbb3 	bl	800740e <TIM_ITRx_SetConfig>
      break;
 8006ca8:	e01c      	b.n	8006ce4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	f000 fb4a 	bl	8007350 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2140      	movs	r1, #64	; 0x40
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f000 fba3 	bl	800740e <TIM_ITRx_SetConfig>
      break;
 8006cc8:	e00c      	b.n	8006ce4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	4610      	mov	r0, r2
 8006cd6:	f000 fb9a 	bl	800740e <TIM_ITRx_SetConfig>
      break;
 8006cda:	e003      	b.n	8006ce4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	73fb      	strb	r3, [r7, #15]
      break;
 8006ce0:	e000      	b.n	8006ce4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ce2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3710      	adds	r7, #16
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	fffeff88 	.word	0xfffeff88

08006d04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d0c:	bf00      	nop
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d20:	bf00      	nop
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d34:	bf00      	nop
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d48:	bf00      	nop
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a40      	ldr	r2, [pc, #256]	; (8006e68 <TIM_Base_SetConfig+0x114>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d013      	beq.n	8006d94 <TIM_Base_SetConfig+0x40>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d72:	d00f      	beq.n	8006d94 <TIM_Base_SetConfig+0x40>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a3d      	ldr	r2, [pc, #244]	; (8006e6c <TIM_Base_SetConfig+0x118>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d00b      	beq.n	8006d94 <TIM_Base_SetConfig+0x40>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a3c      	ldr	r2, [pc, #240]	; (8006e70 <TIM_Base_SetConfig+0x11c>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d007      	beq.n	8006d94 <TIM_Base_SetConfig+0x40>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a3b      	ldr	r2, [pc, #236]	; (8006e74 <TIM_Base_SetConfig+0x120>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d003      	beq.n	8006d94 <TIM_Base_SetConfig+0x40>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a3a      	ldr	r2, [pc, #232]	; (8006e78 <TIM_Base_SetConfig+0x124>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d108      	bne.n	8006da6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a2f      	ldr	r2, [pc, #188]	; (8006e68 <TIM_Base_SetConfig+0x114>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d02b      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006db4:	d027      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a2c      	ldr	r2, [pc, #176]	; (8006e6c <TIM_Base_SetConfig+0x118>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d023      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a2b      	ldr	r2, [pc, #172]	; (8006e70 <TIM_Base_SetConfig+0x11c>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d01f      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a2a      	ldr	r2, [pc, #168]	; (8006e74 <TIM_Base_SetConfig+0x120>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d01b      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a29      	ldr	r2, [pc, #164]	; (8006e78 <TIM_Base_SetConfig+0x124>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d017      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a28      	ldr	r2, [pc, #160]	; (8006e7c <TIM_Base_SetConfig+0x128>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d013      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a27      	ldr	r2, [pc, #156]	; (8006e80 <TIM_Base_SetConfig+0x12c>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d00f      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a26      	ldr	r2, [pc, #152]	; (8006e84 <TIM_Base_SetConfig+0x130>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d00b      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a25      	ldr	r2, [pc, #148]	; (8006e88 <TIM_Base_SetConfig+0x134>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d007      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a24      	ldr	r2, [pc, #144]	; (8006e8c <TIM_Base_SetConfig+0x138>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d003      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a23      	ldr	r2, [pc, #140]	; (8006e90 <TIM_Base_SetConfig+0x13c>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d108      	bne.n	8006e18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	689a      	ldr	r2, [r3, #8]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a0a      	ldr	r2, [pc, #40]	; (8006e68 <TIM_Base_SetConfig+0x114>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d003      	beq.n	8006e4c <TIM_Base_SetConfig+0xf8>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a0c      	ldr	r2, [pc, #48]	; (8006e78 <TIM_Base_SetConfig+0x124>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d103      	bne.n	8006e54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	691a      	ldr	r2, [r3, #16]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	615a      	str	r2, [r3, #20]
}
 8006e5a:	bf00      	nop
 8006e5c:	3714      	adds	r7, #20
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	40010000 	.word	0x40010000
 8006e6c:	40000400 	.word	0x40000400
 8006e70:	40000800 	.word	0x40000800
 8006e74:	40000c00 	.word	0x40000c00
 8006e78:	40010400 	.word	0x40010400
 8006e7c:	40014000 	.word	0x40014000
 8006e80:	40014400 	.word	0x40014400
 8006e84:	40014800 	.word	0x40014800
 8006e88:	40001800 	.word	0x40001800
 8006e8c:	40001c00 	.word	0x40001c00
 8006e90:	40002000 	.word	0x40002000

08006e94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b087      	sub	sp, #28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a1b      	ldr	r3, [r3, #32]
 8006ea2:	f023 0201 	bic.w	r2, r3, #1
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	4b2b      	ldr	r3, [pc, #172]	; (8006f6c <TIM_OC1_SetConfig+0xd8>)
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f023 0303 	bic.w	r3, r3, #3
 8006eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f023 0302 	bic.w	r3, r3, #2
 8006edc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a21      	ldr	r2, [pc, #132]	; (8006f70 <TIM_OC1_SetConfig+0xdc>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d003      	beq.n	8006ef8 <TIM_OC1_SetConfig+0x64>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a20      	ldr	r2, [pc, #128]	; (8006f74 <TIM_OC1_SetConfig+0xe0>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d10c      	bne.n	8006f12 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	f023 0308 	bic.w	r3, r3, #8
 8006efe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	f023 0304 	bic.w	r3, r3, #4
 8006f10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a16      	ldr	r2, [pc, #88]	; (8006f70 <TIM_OC1_SetConfig+0xdc>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d003      	beq.n	8006f22 <TIM_OC1_SetConfig+0x8e>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a15      	ldr	r2, [pc, #84]	; (8006f74 <TIM_OC1_SetConfig+0xe0>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d111      	bne.n	8006f46 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	695b      	ldr	r3, [r3, #20]
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	693a      	ldr	r2, [r7, #16]
 8006f4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	685a      	ldr	r2, [r3, #4]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	621a      	str	r2, [r3, #32]
}
 8006f60:	bf00      	nop
 8006f62:	371c      	adds	r7, #28
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr
 8006f6c:	fffeff8f 	.word	0xfffeff8f
 8006f70:	40010000 	.word	0x40010000
 8006f74:	40010400 	.word	0x40010400

08006f78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b087      	sub	sp, #28
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	f023 0210 	bic.w	r2, r3, #16
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	4b2e      	ldr	r3, [pc, #184]	; (800705c <TIM_OC2_SetConfig+0xe4>)
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	021b      	lsls	r3, r3, #8
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	f023 0320 	bic.w	r3, r3, #32
 8006fc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	011b      	lsls	r3, r3, #4
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a23      	ldr	r2, [pc, #140]	; (8007060 <TIM_OC2_SetConfig+0xe8>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d003      	beq.n	8006fe0 <TIM_OC2_SetConfig+0x68>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a22      	ldr	r2, [pc, #136]	; (8007064 <TIM_OC2_SetConfig+0xec>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d10d      	bne.n	8006ffc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fe6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	011b      	lsls	r3, r3, #4
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ffa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a18      	ldr	r2, [pc, #96]	; (8007060 <TIM_OC2_SetConfig+0xe8>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d003      	beq.n	800700c <TIM_OC2_SetConfig+0x94>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a17      	ldr	r2, [pc, #92]	; (8007064 <TIM_OC2_SetConfig+0xec>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d113      	bne.n	8007034 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007012:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800701a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	695b      	ldr	r3, [r3, #20]
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	4313      	orrs	r3, r2
 8007026:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	699b      	ldr	r3, [r3, #24]
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	693a      	ldr	r2, [r7, #16]
 8007030:	4313      	orrs	r3, r2
 8007032:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	693a      	ldr	r2, [r7, #16]
 8007038:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	685a      	ldr	r2, [r3, #4]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	621a      	str	r2, [r3, #32]
}
 800704e:	bf00      	nop
 8007050:	371c      	adds	r7, #28
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	feff8fff 	.word	0xfeff8fff
 8007060:	40010000 	.word	0x40010000
 8007064:	40010400 	.word	0x40010400

08007068 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007068:	b480      	push	{r7}
 800706a:	b087      	sub	sp, #28
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a1b      	ldr	r3, [r3, #32]
 8007082:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	69db      	ldr	r3, [r3, #28]
 800708e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	4b2d      	ldr	r3, [pc, #180]	; (8007148 <TIM_OC3_SetConfig+0xe0>)
 8007094:	4013      	ands	r3, r2
 8007096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f023 0303 	bic.w	r3, r3, #3
 800709e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	021b      	lsls	r3, r3, #8
 80070b8:	697a      	ldr	r2, [r7, #20]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a22      	ldr	r2, [pc, #136]	; (800714c <TIM_OC3_SetConfig+0xe4>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d003      	beq.n	80070ce <TIM_OC3_SetConfig+0x66>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a21      	ldr	r2, [pc, #132]	; (8007150 <TIM_OC3_SetConfig+0xe8>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d10d      	bne.n	80070ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	021b      	lsls	r3, r3, #8
 80070dc:	697a      	ldr	r2, [r7, #20]
 80070de:	4313      	orrs	r3, r2
 80070e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a17      	ldr	r2, [pc, #92]	; (800714c <TIM_OC3_SetConfig+0xe4>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d003      	beq.n	80070fa <TIM_OC3_SetConfig+0x92>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a16      	ldr	r2, [pc, #88]	; (8007150 <TIM_OC3_SetConfig+0xe8>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d113      	bne.n	8007122 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007100:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007108:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	695b      	ldr	r3, [r3, #20]
 800710e:	011b      	lsls	r3, r3, #4
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	4313      	orrs	r3, r2
 8007114:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	011b      	lsls	r3, r3, #4
 800711c:	693a      	ldr	r2, [r7, #16]
 800711e:	4313      	orrs	r3, r2
 8007120:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	685a      	ldr	r2, [r3, #4]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	697a      	ldr	r2, [r7, #20]
 800713a:	621a      	str	r2, [r3, #32]
}
 800713c:	bf00      	nop
 800713e:	371c      	adds	r7, #28
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr
 8007148:	fffeff8f 	.word	0xfffeff8f
 800714c:	40010000 	.word	0x40010000
 8007150:	40010400 	.word	0x40010400

08007154 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007154:	b480      	push	{r7}
 8007156:	b087      	sub	sp, #28
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a1b      	ldr	r3, [r3, #32]
 8007162:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	69db      	ldr	r3, [r3, #28]
 800717a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	4b1e      	ldr	r3, [pc, #120]	; (80071f8 <TIM_OC4_SetConfig+0xa4>)
 8007180:	4013      	ands	r3, r2
 8007182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800718a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	021b      	lsls	r3, r3, #8
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	4313      	orrs	r3, r2
 8007196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800719e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	031b      	lsls	r3, r3, #12
 80071a6:	693a      	ldr	r2, [r7, #16]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a13      	ldr	r2, [pc, #76]	; (80071fc <TIM_OC4_SetConfig+0xa8>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d003      	beq.n	80071bc <TIM_OC4_SetConfig+0x68>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a12      	ldr	r2, [pc, #72]	; (8007200 <TIM_OC4_SetConfig+0xac>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d109      	bne.n	80071d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	695b      	ldr	r3, [r3, #20]
 80071c8:	019b      	lsls	r3, r3, #6
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	697a      	ldr	r2, [r7, #20]
 80071d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	685a      	ldr	r2, [r3, #4]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	693a      	ldr	r2, [r7, #16]
 80071e8:	621a      	str	r2, [r3, #32]
}
 80071ea:	bf00      	nop
 80071ec:	371c      	adds	r7, #28
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr
 80071f6:	bf00      	nop
 80071f8:	feff8fff 	.word	0xfeff8fff
 80071fc:	40010000 	.word	0x40010000
 8007200:	40010400 	.word	0x40010400

08007204 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007204:	b480      	push	{r7}
 8007206:	b087      	sub	sp, #28
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800722a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	4b1b      	ldr	r3, [pc, #108]	; (800729c <TIM_OC5_SetConfig+0x98>)
 8007230:	4013      	ands	r3, r2
 8007232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	4313      	orrs	r3, r2
 800723c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007244:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	041b      	lsls	r3, r3, #16
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	4313      	orrs	r3, r2
 8007250:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a12      	ldr	r2, [pc, #72]	; (80072a0 <TIM_OC5_SetConfig+0x9c>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d003      	beq.n	8007262 <TIM_OC5_SetConfig+0x5e>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a11      	ldr	r2, [pc, #68]	; (80072a4 <TIM_OC5_SetConfig+0xa0>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d109      	bne.n	8007276 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007268:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	695b      	ldr	r3, [r3, #20]
 800726e:	021b      	lsls	r3, r3, #8
 8007270:	697a      	ldr	r2, [r7, #20]
 8007272:	4313      	orrs	r3, r2
 8007274:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	697a      	ldr	r2, [r7, #20]
 800727a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	68fa      	ldr	r2, [r7, #12]
 8007280:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	685a      	ldr	r2, [r3, #4]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	621a      	str	r2, [r3, #32]
}
 8007290:	bf00      	nop
 8007292:	371c      	adds	r7, #28
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr
 800729c:	fffeff8f 	.word	0xfffeff8f
 80072a0:	40010000 	.word	0x40010000
 80072a4:	40010400 	.word	0x40010400

080072a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b087      	sub	sp, #28
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a1b      	ldr	r3, [r3, #32]
 80072c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	4b1c      	ldr	r3, [pc, #112]	; (8007344 <TIM_OC6_SetConfig+0x9c>)
 80072d4:	4013      	ands	r3, r2
 80072d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	021b      	lsls	r3, r3, #8
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80072ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	051b      	lsls	r3, r3, #20
 80072f2:	693a      	ldr	r2, [r7, #16]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4a13      	ldr	r2, [pc, #76]	; (8007348 <TIM_OC6_SetConfig+0xa0>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d003      	beq.n	8007308 <TIM_OC6_SetConfig+0x60>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4a12      	ldr	r2, [pc, #72]	; (800734c <TIM_OC6_SetConfig+0xa4>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d109      	bne.n	800731c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800730e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	695b      	ldr	r3, [r3, #20]
 8007314:	029b      	lsls	r3, r3, #10
 8007316:	697a      	ldr	r2, [r7, #20]
 8007318:	4313      	orrs	r3, r2
 800731a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	697a      	ldr	r2, [r7, #20]
 8007320:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	685a      	ldr	r2, [r3, #4]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	693a      	ldr	r2, [r7, #16]
 8007334:	621a      	str	r2, [r3, #32]
}
 8007336:	bf00      	nop
 8007338:	371c      	adds	r7, #28
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	feff8fff 	.word	0xfeff8fff
 8007348:	40010000 	.word	0x40010000
 800734c:	40010400 	.word	0x40010400

08007350 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007350:	b480      	push	{r7}
 8007352:	b087      	sub	sp, #28
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6a1b      	ldr	r3, [r3, #32]
 8007360:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6a1b      	ldr	r3, [r3, #32]
 8007366:	f023 0201 	bic.w	r2, r3, #1
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	699b      	ldr	r3, [r3, #24]
 8007372:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800737a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	011b      	lsls	r3, r3, #4
 8007380:	693a      	ldr	r2, [r7, #16]
 8007382:	4313      	orrs	r3, r2
 8007384:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	f023 030a 	bic.w	r3, r3, #10
 800738c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	4313      	orrs	r3, r2
 8007394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	693a      	ldr	r2, [r7, #16]
 800739a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	621a      	str	r2, [r3, #32]
}
 80073a2:	bf00      	nop
 80073a4:	371c      	adds	r7, #28
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr

080073ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073ae:	b480      	push	{r7}
 80073b0:	b087      	sub	sp, #28
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	60f8      	str	r0, [r7, #12]
 80073b6:	60b9      	str	r1, [r7, #8]
 80073b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6a1b      	ldr	r3, [r3, #32]
 80073be:	f023 0210 	bic.w	r2, r3, #16
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6a1b      	ldr	r3, [r3, #32]
 80073d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	031b      	lsls	r3, r3, #12
 80073de:	697a      	ldr	r2, [r7, #20]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	011b      	lsls	r3, r3, #4
 80073f0:	693a      	ldr	r2, [r7, #16]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	697a      	ldr	r2, [r7, #20]
 80073fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	693a      	ldr	r2, [r7, #16]
 8007400:	621a      	str	r2, [r3, #32]
}
 8007402:	bf00      	nop
 8007404:	371c      	adds	r7, #28
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr

0800740e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800740e:	b480      	push	{r7}
 8007410:	b085      	sub	sp, #20
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
 8007416:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007424:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007426:	683a      	ldr	r2, [r7, #0]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	4313      	orrs	r3, r2
 800742c:	f043 0307 	orr.w	r3, r3, #7
 8007430:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	609a      	str	r2, [r3, #8]
}
 8007438:	bf00      	nop
 800743a:	3714      	adds	r7, #20
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007444:	b480      	push	{r7}
 8007446:	b087      	sub	sp, #28
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	607a      	str	r2, [r7, #4]
 8007450:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800745e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	021a      	lsls	r2, r3, #8
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	431a      	orrs	r2, r3
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	4313      	orrs	r3, r2
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	4313      	orrs	r3, r2
 8007470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	697a      	ldr	r2, [r7, #20]
 8007476:	609a      	str	r2, [r3, #8]
}
 8007478:	bf00      	nop
 800747a:	371c      	adds	r7, #28
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007484:	b480      	push	{r7}
 8007486:	b087      	sub	sp, #28
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	f003 031f 	and.w	r3, r3, #31
 8007496:	2201      	movs	r2, #1
 8007498:	fa02 f303 	lsl.w	r3, r2, r3
 800749c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6a1a      	ldr	r2, [r3, #32]
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	43db      	mvns	r3, r3
 80074a6:	401a      	ands	r2, r3
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6a1a      	ldr	r2, [r3, #32]
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	f003 031f 	and.w	r3, r3, #31
 80074b6:	6879      	ldr	r1, [r7, #4]
 80074b8:	fa01 f303 	lsl.w	r3, r1, r3
 80074bc:	431a      	orrs	r2, r3
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	621a      	str	r2, [r3, #32]
}
 80074c2:	bf00      	nop
 80074c4:	371c      	adds	r7, #28
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr
	...

080074d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d101      	bne.n	80074e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074e4:	2302      	movs	r3, #2
 80074e6:	e06d      	b.n	80075c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2202      	movs	r2, #2
 80074f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a30      	ldr	r2, [pc, #192]	; (80075d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d004      	beq.n	800751c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a2f      	ldr	r2, [pc, #188]	; (80075d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d108      	bne.n	800752e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007522:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	4313      	orrs	r3, r2
 800752c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007534:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	4313      	orrs	r3, r2
 800753e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a20      	ldr	r2, [pc, #128]	; (80075d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d022      	beq.n	8007598 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800755a:	d01d      	beq.n	8007598 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a1d      	ldr	r2, [pc, #116]	; (80075d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d018      	beq.n	8007598 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a1c      	ldr	r2, [pc, #112]	; (80075dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d013      	beq.n	8007598 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a1a      	ldr	r2, [pc, #104]	; (80075e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d00e      	beq.n	8007598 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a15      	ldr	r2, [pc, #84]	; (80075d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d009      	beq.n	8007598 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a16      	ldr	r2, [pc, #88]	; (80075e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d004      	beq.n	8007598 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a15      	ldr	r2, [pc, #84]	; (80075e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d10c      	bne.n	80075b2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800759e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	68ba      	ldr	r2, [r7, #8]
 80075b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2201      	movs	r2, #1
 80075b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3714      	adds	r7, #20
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr
 80075d0:	40010000 	.word	0x40010000
 80075d4:	40010400 	.word	0x40010400
 80075d8:	40000400 	.word	0x40000400
 80075dc:	40000800 	.word	0x40000800
 80075e0:	40000c00 	.word	0x40000c00
 80075e4:	40014000 	.word	0x40014000
 80075e8:	40001800 	.word	0x40001800

080075ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075f4:	bf00      	nop
 80075f6:	370c      	adds	r7, #12
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007608:	bf00      	nop
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800761c:	bf00      	nop
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d101      	bne.n	800763a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e040      	b.n	80076bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800763e:	2b00      	cmp	r3, #0
 8007640:	d106      	bne.n	8007650 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f7fb f9cc 	bl	80029e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2224      	movs	r2, #36	; 0x24
 8007654:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f022 0201 	bic.w	r2, r2, #1
 8007664:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 fc08 	bl	8007e7c <UART_SetConfig>
 800766c:	4603      	mov	r3, r0
 800766e:	2b01      	cmp	r3, #1
 8007670:	d101      	bne.n	8007676 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	e022      	b.n	80076bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767a:	2b00      	cmp	r3, #0
 800767c:	d002      	beq.n	8007684 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 fe60 	bl	8008344 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	685a      	ldr	r2, [r3, #4]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007692:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	689a      	ldr	r2, [r3, #8]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80076a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f042 0201 	orr.w	r2, r2, #1
 80076b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 fee7 	bl	8008488 <UART_CheckIdleState>
 80076ba:	4603      	mov	r3, r0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b08a      	sub	sp, #40	; 0x28
 80076c8:	af02      	add	r7, sp, #8
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	603b      	str	r3, [r7, #0]
 80076d0:	4613      	mov	r3, r2
 80076d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076d8:	2b20      	cmp	r3, #32
 80076da:	d171      	bne.n	80077c0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d002      	beq.n	80076e8 <HAL_UART_Transmit+0x24>
 80076e2:	88fb      	ldrh	r3, [r7, #6]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d101      	bne.n	80076ec <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	e06a      	b.n	80077c2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2200      	movs	r2, #0
 80076f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2221      	movs	r2, #33	; 0x21
 80076f8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076fa:	f7fb fa89 	bl	8002c10 <HAL_GetTick>
 80076fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	88fa      	ldrh	r2, [r7, #6]
 8007704:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	88fa      	ldrh	r2, [r7, #6]
 800770c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007718:	d108      	bne.n	800772c <HAL_UART_Transmit+0x68>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d104      	bne.n	800772c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007722:	2300      	movs	r3, #0
 8007724:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	61bb      	str	r3, [r7, #24]
 800772a:	e003      	b.n	8007734 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007730:	2300      	movs	r3, #0
 8007732:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007734:	e02c      	b.n	8007790 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	9300      	str	r3, [sp, #0]
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	2200      	movs	r2, #0
 800773e:	2180      	movs	r1, #128	; 0x80
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f000 fed8 	bl	80084f6 <UART_WaitOnFlagUntilTimeout>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d001      	beq.n	8007750 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800774c:	2303      	movs	r3, #3
 800774e:	e038      	b.n	80077c2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d10b      	bne.n	800776e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	881b      	ldrh	r3, [r3, #0]
 800775a:	461a      	mov	r2, r3
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007764:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	3302      	adds	r3, #2
 800776a:	61bb      	str	r3, [r7, #24]
 800776c:	e007      	b.n	800777e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	781a      	ldrb	r2, [r3, #0]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	3301      	adds	r3, #1
 800777c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007784:	b29b      	uxth	r3, r3
 8007786:	3b01      	subs	r3, #1
 8007788:	b29a      	uxth	r2, r3
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007796:	b29b      	uxth	r3, r3
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1cc      	bne.n	8007736 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	9300      	str	r3, [sp, #0]
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	2200      	movs	r2, #0
 80077a4:	2140      	movs	r1, #64	; 0x40
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f000 fea5 	bl	80084f6 <UART_WaitOnFlagUntilTimeout>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d001      	beq.n	80077b6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e005      	b.n	80077c2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2220      	movs	r2, #32
 80077ba:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80077bc:	2300      	movs	r3, #0
 80077be:	e000      	b.n	80077c2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80077c0:	2302      	movs	r3, #2
  }
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3720      	adds	r7, #32
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
	...

080077cc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b08b      	sub	sp, #44	; 0x2c
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	4613      	mov	r3, r2
 80077d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077de:	2b20      	cmp	r3, #32
 80077e0:	d147      	bne.n	8007872 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d002      	beq.n	80077ee <HAL_UART_Transmit_IT+0x22>
 80077e8:	88fb      	ldrh	r3, [r7, #6]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d101      	bne.n	80077f2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e040      	b.n	8007874 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	68ba      	ldr	r2, [r7, #8]
 80077f6:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	88fa      	ldrh	r2, [r7, #6]
 80077fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	88fa      	ldrh	r2, [r7, #6]
 8007804:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2200      	movs	r2, #0
 800780c:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2200      	movs	r2, #0
 8007812:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2221      	movs	r2, #33	; 0x21
 800781a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007824:	d107      	bne.n	8007836 <HAL_UART_Transmit_IT+0x6a>
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d103      	bne.n	8007836 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	4a13      	ldr	r2, [pc, #76]	; (8007880 <HAL_UART_Transmit_IT+0xb4>)
 8007832:	66da      	str	r2, [r3, #108]	; 0x6c
 8007834:	e002      	b.n	800783c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	4a12      	ldr	r2, [pc, #72]	; (8007884 <HAL_UART_Transmit_IT+0xb8>)
 800783a:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	e853 3f00 	ldrex	r3, [r3]
 8007848:	613b      	str	r3, [r7, #16]
   return(result);
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007850:	627b      	str	r3, [r7, #36]	; 0x24
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	461a      	mov	r2, r3
 8007858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785a:	623b      	str	r3, [r7, #32]
 800785c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785e:	69f9      	ldr	r1, [r7, #28]
 8007860:	6a3a      	ldr	r2, [r7, #32]
 8007862:	e841 2300 	strex	r3, r2, [r1]
 8007866:	61bb      	str	r3, [r7, #24]
   return(result);
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1e6      	bne.n	800783c <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800786e:	2300      	movs	r3, #0
 8007870:	e000      	b.n	8007874 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007872:	2302      	movs	r3, #2
  }
}
 8007874:	4618      	mov	r0, r3
 8007876:	372c      	adds	r7, #44	; 0x2c
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr
 8007880:	08008b9f 	.word	0x08008b9f
 8007884:	08008ae9 	.word	0x08008ae9

08007888 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b0ba      	sub	sp, #232	; 0xe8
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	69db      	ldr	r3, [r3, #28]
 8007896:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80078ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80078b2:	f640 030f 	movw	r3, #2063	; 0x80f
 80078b6:	4013      	ands	r3, r2
 80078b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80078bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d115      	bne.n	80078f0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80078c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078c8:	f003 0320 	and.w	r3, r3, #32
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00f      	beq.n	80078f0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80078d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078d4:	f003 0320 	and.w	r3, r3, #32
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d009      	beq.n	80078f0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f000 8297 	beq.w	8007e14 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	4798      	blx	r3
      }
      return;
 80078ee:	e291      	b.n	8007e14 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80078f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	f000 8117 	beq.w	8007b28 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80078fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	2b00      	cmp	r3, #0
 8007904:	d106      	bne.n	8007914 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007906:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800790a:	4b85      	ldr	r3, [pc, #532]	; (8007b20 <HAL_UART_IRQHandler+0x298>)
 800790c:	4013      	ands	r3, r2
 800790e:	2b00      	cmp	r3, #0
 8007910:	f000 810a 	beq.w	8007b28 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007918:	f003 0301 	and.w	r3, r3, #1
 800791c:	2b00      	cmp	r3, #0
 800791e:	d011      	beq.n	8007944 <HAL_UART_IRQHandler+0xbc>
 8007920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00b      	beq.n	8007944 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2201      	movs	r2, #1
 8007932:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800793a:	f043 0201 	orr.w	r2, r3, #1
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007948:	f003 0302 	and.w	r3, r3, #2
 800794c:	2b00      	cmp	r3, #0
 800794e:	d011      	beq.n	8007974 <HAL_UART_IRQHandler+0xec>
 8007950:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007954:	f003 0301 	and.w	r3, r3, #1
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00b      	beq.n	8007974 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2202      	movs	r2, #2
 8007962:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800796a:	f043 0204 	orr.w	r2, r3, #4
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007978:	f003 0304 	and.w	r3, r3, #4
 800797c:	2b00      	cmp	r3, #0
 800797e:	d011      	beq.n	80079a4 <HAL_UART_IRQHandler+0x11c>
 8007980:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007984:	f003 0301 	and.w	r3, r3, #1
 8007988:	2b00      	cmp	r3, #0
 800798a:	d00b      	beq.n	80079a4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2204      	movs	r2, #4
 8007992:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800799a:	f043 0202 	orr.w	r2, r3, #2
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80079a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079a8:	f003 0308 	and.w	r3, r3, #8
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d017      	beq.n	80079e0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80079b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079b4:	f003 0320 	and.w	r3, r3, #32
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d105      	bne.n	80079c8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80079bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079c0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00b      	beq.n	80079e0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2208      	movs	r2, #8
 80079ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079d6:	f043 0208 	orr.w	r2, r3, #8
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80079e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d012      	beq.n	8007a12 <HAL_UART_IRQHandler+0x18a>
 80079ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00c      	beq.n	8007a12 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a08:	f043 0220 	orr.w	r2, r3, #32
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f000 81fd 	beq.w	8007e18 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a22:	f003 0320 	and.w	r3, r3, #32
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00d      	beq.n	8007a46 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007a2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a2e:	f003 0320 	and.w	r3, r3, #32
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d007      	beq.n	8007a46 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d003      	beq.n	8007a46 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a5a:	2b40      	cmp	r3, #64	; 0x40
 8007a5c:	d005      	beq.n	8007a6a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007a5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a62:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d04f      	beq.n	8007b0a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 fed0 	bl	8008810 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a7a:	2b40      	cmp	r3, #64	; 0x40
 8007a7c:	d141      	bne.n	8007b02 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	3308      	adds	r3, #8
 8007a84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007a8c:	e853 3f00 	ldrex	r3, [r3]
 8007a90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007a94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	3308      	adds	r3, #8
 8007aa6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007aaa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007aae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007ab6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007aba:	e841 2300 	strex	r3, r2, [r1]
 8007abe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007ac2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1d9      	bne.n	8007a7e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d013      	beq.n	8007afa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ad6:	4a13      	ldr	r2, [pc, #76]	; (8007b24 <HAL_UART_IRQHandler+0x29c>)
 8007ad8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7fb fb56 	bl	8003190 <HAL_DMA_Abort_IT>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d017      	beq.n	8007b1a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007af4:	4610      	mov	r0, r2
 8007af6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007af8:	e00f      	b.n	8007b1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 f9b4 	bl	8007e68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b00:	e00b      	b.n	8007b1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 f9b0 	bl	8007e68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b08:	e007      	b.n	8007b1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 f9ac 	bl	8007e68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007b18:	e17e      	b.n	8007e18 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b1a:	bf00      	nop
    return;
 8007b1c:	e17c      	b.n	8007e18 <HAL_UART_IRQHandler+0x590>
 8007b1e:	bf00      	nop
 8007b20:	04000120 	.word	0x04000120
 8007b24:	08008abd 	.word	0x08008abd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	f040 814c 	bne.w	8007dca <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b36:	f003 0310 	and.w	r3, r3, #16
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	f000 8145 	beq.w	8007dca <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b44:	f003 0310 	and.w	r3, r3, #16
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	f000 813e 	beq.w	8007dca <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2210      	movs	r2, #16
 8007b54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b60:	2b40      	cmp	r3, #64	; 0x40
 8007b62:	f040 80b6 	bne.w	8007cd2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007b72:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	f000 8150 	beq.w	8007e1c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007b82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007b86:	429a      	cmp	r2, r3
 8007b88:	f080 8148 	bcs.w	8007e1c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007b92:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b9a:	69db      	ldr	r3, [r3, #28]
 8007b9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ba0:	f000 8086 	beq.w	8007cb0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007bb0:	e853 3f00 	ldrex	r3, [r3]
 8007bb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007bb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007bbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	461a      	mov	r2, r3
 8007bca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007bce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007bd2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007bda:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007bde:	e841 2300 	strex	r3, r2, [r1]
 8007be2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007be6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d1da      	bne.n	8007ba4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	3308      	adds	r3, #8
 8007bf4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bf8:	e853 3f00 	ldrex	r3, [r3]
 8007bfc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007bfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c00:	f023 0301 	bic.w	r3, r3, #1
 8007c04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	3308      	adds	r3, #8
 8007c0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007c12:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007c16:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c18:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007c1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007c1e:	e841 2300 	strex	r3, r2, [r1]
 8007c22:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007c24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1e1      	bne.n	8007bee <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	3308      	adds	r3, #8
 8007c30:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c34:	e853 3f00 	ldrex	r3, [r3]
 8007c38:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007c3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	3308      	adds	r3, #8
 8007c4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007c4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007c50:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c52:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007c54:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007c56:	e841 2300 	strex	r3, r2, [r1]
 8007c5a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007c5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d1e3      	bne.n	8007c2a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2220      	movs	r2, #32
 8007c66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c78:	e853 3f00 	ldrex	r3, [r3]
 8007c7c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c80:	f023 0310 	bic.w	r3, r3, #16
 8007c84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c92:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c94:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007c98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c9a:	e841 2300 	strex	r3, r2, [r1]
 8007c9e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d1e4      	bne.n	8007c70 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7fb fa00 	bl	80030b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2202      	movs	r2, #2
 8007cb4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	1ad3      	subs	r3, r2, r3
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	4619      	mov	r1, r3
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f7fa fb0e 	bl	80022ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007cd0:	e0a4      	b.n	8007e1c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	1ad3      	subs	r3, r2, r3
 8007ce2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	f000 8096 	beq.w	8007e20 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8007cf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f000 8091 	beq.w	8007e20 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d06:	e853 3f00 	ldrex	r3, [r3]
 8007d0a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d20:	647b      	str	r3, [r7, #68]	; 0x44
 8007d22:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d28:	e841 2300 	strex	r3, r2, [r1]
 8007d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1e4      	bne.n	8007cfe <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	3308      	adds	r3, #8
 8007d3a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3e:	e853 3f00 	ldrex	r3, [r3]
 8007d42:	623b      	str	r3, [r7, #32]
   return(result);
 8007d44:	6a3b      	ldr	r3, [r7, #32]
 8007d46:	f023 0301 	bic.w	r3, r3, #1
 8007d4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	3308      	adds	r3, #8
 8007d54:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007d58:	633a      	str	r2, [r7, #48]	; 0x30
 8007d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d60:	e841 2300 	strex	r3, r2, [r1]
 8007d64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1e3      	bne.n	8007d34 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2220      	movs	r2, #32
 8007d70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	e853 3f00 	ldrex	r3, [r3]
 8007d8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f023 0310 	bic.w	r3, r3, #16
 8007d94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007da2:	61fb      	str	r3, [r7, #28]
 8007da4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da6:	69b9      	ldr	r1, [r7, #24]
 8007da8:	69fa      	ldr	r2, [r7, #28]
 8007daa:	e841 2300 	strex	r3, r2, [r1]
 8007dae:	617b      	str	r3, [r7, #20]
   return(result);
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d1e4      	bne.n	8007d80 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2202      	movs	r2, #2
 8007dba:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007dbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f7fa fa92 	bl	80022ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007dc8:	e02a      	b.n	8007e20 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00e      	beq.n	8007df4 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d008      	beq.n	8007df4 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d01c      	beq.n	8007e24 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	4798      	blx	r3
    }
    return;
 8007df2:	e017      	b.n	8007e24 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d012      	beq.n	8007e26 <HAL_UART_IRQHandler+0x59e>
 8007e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00c      	beq.n	8007e26 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 ff26 	bl	8008c5e <UART_EndTransmit_IT>
    return;
 8007e12:	e008      	b.n	8007e26 <HAL_UART_IRQHandler+0x59e>
      return;
 8007e14:	bf00      	nop
 8007e16:	e006      	b.n	8007e26 <HAL_UART_IRQHandler+0x59e>
    return;
 8007e18:	bf00      	nop
 8007e1a:	e004      	b.n	8007e26 <HAL_UART_IRQHandler+0x59e>
      return;
 8007e1c:	bf00      	nop
 8007e1e:	e002      	b.n	8007e26 <HAL_UART_IRQHandler+0x59e>
      return;
 8007e20:	bf00      	nop
 8007e22:	e000      	b.n	8007e26 <HAL_UART_IRQHandler+0x59e>
    return;
 8007e24:	bf00      	nop
  }

}
 8007e26:	37e8      	adds	r7, #232	; 0xe8
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007e34:	bf00      	nop
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007e48:	bf00      	nop
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007e5c:	bf00      	nop
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007e70:	bf00      	nop
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b088      	sub	sp, #32
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e84:	2300      	movs	r3, #0
 8007e86:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	689a      	ldr	r2, [r3, #8]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	431a      	orrs	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	695b      	ldr	r3, [r3, #20]
 8007e96:	431a      	orrs	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	69db      	ldr	r3, [r3, #28]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	4ba6      	ldr	r3, [pc, #664]	; (8008140 <UART_SetConfig+0x2c4>)
 8007ea8:	4013      	ands	r3, r2
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	6812      	ldr	r2, [r2, #0]
 8007eae:	6979      	ldr	r1, [r7, #20]
 8007eb0:	430b      	orrs	r3, r1
 8007eb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	68da      	ldr	r2, [r3, #12]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	430a      	orrs	r2, r1
 8007ec8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	699b      	ldr	r3, [r3, #24]
 8007ece:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6a1b      	ldr	r3, [r3, #32]
 8007ed4:	697a      	ldr	r2, [r7, #20]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	697a      	ldr	r2, [r7, #20]
 8007eea:	430a      	orrs	r2, r1
 8007eec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a94      	ldr	r2, [pc, #592]	; (8008144 <UART_SetConfig+0x2c8>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d120      	bne.n	8007f3a <UART_SetConfig+0xbe>
 8007ef8:	4b93      	ldr	r3, [pc, #588]	; (8008148 <UART_SetConfig+0x2cc>)
 8007efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007efe:	f003 0303 	and.w	r3, r3, #3
 8007f02:	2b03      	cmp	r3, #3
 8007f04:	d816      	bhi.n	8007f34 <UART_SetConfig+0xb8>
 8007f06:	a201      	add	r2, pc, #4	; (adr r2, 8007f0c <UART_SetConfig+0x90>)
 8007f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f0c:	08007f1d 	.word	0x08007f1d
 8007f10:	08007f29 	.word	0x08007f29
 8007f14:	08007f23 	.word	0x08007f23
 8007f18:	08007f2f 	.word	0x08007f2f
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	77fb      	strb	r3, [r7, #31]
 8007f20:	e150      	b.n	80081c4 <UART_SetConfig+0x348>
 8007f22:	2302      	movs	r3, #2
 8007f24:	77fb      	strb	r3, [r7, #31]
 8007f26:	e14d      	b.n	80081c4 <UART_SetConfig+0x348>
 8007f28:	2304      	movs	r3, #4
 8007f2a:	77fb      	strb	r3, [r7, #31]
 8007f2c:	e14a      	b.n	80081c4 <UART_SetConfig+0x348>
 8007f2e:	2308      	movs	r3, #8
 8007f30:	77fb      	strb	r3, [r7, #31]
 8007f32:	e147      	b.n	80081c4 <UART_SetConfig+0x348>
 8007f34:	2310      	movs	r3, #16
 8007f36:	77fb      	strb	r3, [r7, #31]
 8007f38:	e144      	b.n	80081c4 <UART_SetConfig+0x348>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a83      	ldr	r2, [pc, #524]	; (800814c <UART_SetConfig+0x2d0>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d132      	bne.n	8007faa <UART_SetConfig+0x12e>
 8007f44:	4b80      	ldr	r3, [pc, #512]	; (8008148 <UART_SetConfig+0x2cc>)
 8007f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f4a:	f003 030c 	and.w	r3, r3, #12
 8007f4e:	2b0c      	cmp	r3, #12
 8007f50:	d828      	bhi.n	8007fa4 <UART_SetConfig+0x128>
 8007f52:	a201      	add	r2, pc, #4	; (adr r2, 8007f58 <UART_SetConfig+0xdc>)
 8007f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f58:	08007f8d 	.word	0x08007f8d
 8007f5c:	08007fa5 	.word	0x08007fa5
 8007f60:	08007fa5 	.word	0x08007fa5
 8007f64:	08007fa5 	.word	0x08007fa5
 8007f68:	08007f99 	.word	0x08007f99
 8007f6c:	08007fa5 	.word	0x08007fa5
 8007f70:	08007fa5 	.word	0x08007fa5
 8007f74:	08007fa5 	.word	0x08007fa5
 8007f78:	08007f93 	.word	0x08007f93
 8007f7c:	08007fa5 	.word	0x08007fa5
 8007f80:	08007fa5 	.word	0x08007fa5
 8007f84:	08007fa5 	.word	0x08007fa5
 8007f88:	08007f9f 	.word	0x08007f9f
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	77fb      	strb	r3, [r7, #31]
 8007f90:	e118      	b.n	80081c4 <UART_SetConfig+0x348>
 8007f92:	2302      	movs	r3, #2
 8007f94:	77fb      	strb	r3, [r7, #31]
 8007f96:	e115      	b.n	80081c4 <UART_SetConfig+0x348>
 8007f98:	2304      	movs	r3, #4
 8007f9a:	77fb      	strb	r3, [r7, #31]
 8007f9c:	e112      	b.n	80081c4 <UART_SetConfig+0x348>
 8007f9e:	2308      	movs	r3, #8
 8007fa0:	77fb      	strb	r3, [r7, #31]
 8007fa2:	e10f      	b.n	80081c4 <UART_SetConfig+0x348>
 8007fa4:	2310      	movs	r3, #16
 8007fa6:	77fb      	strb	r3, [r7, #31]
 8007fa8:	e10c      	b.n	80081c4 <UART_SetConfig+0x348>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a68      	ldr	r2, [pc, #416]	; (8008150 <UART_SetConfig+0x2d4>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d120      	bne.n	8007ff6 <UART_SetConfig+0x17a>
 8007fb4:	4b64      	ldr	r3, [pc, #400]	; (8008148 <UART_SetConfig+0x2cc>)
 8007fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007fbe:	2b30      	cmp	r3, #48	; 0x30
 8007fc0:	d013      	beq.n	8007fea <UART_SetConfig+0x16e>
 8007fc2:	2b30      	cmp	r3, #48	; 0x30
 8007fc4:	d814      	bhi.n	8007ff0 <UART_SetConfig+0x174>
 8007fc6:	2b20      	cmp	r3, #32
 8007fc8:	d009      	beq.n	8007fde <UART_SetConfig+0x162>
 8007fca:	2b20      	cmp	r3, #32
 8007fcc:	d810      	bhi.n	8007ff0 <UART_SetConfig+0x174>
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d002      	beq.n	8007fd8 <UART_SetConfig+0x15c>
 8007fd2:	2b10      	cmp	r3, #16
 8007fd4:	d006      	beq.n	8007fe4 <UART_SetConfig+0x168>
 8007fd6:	e00b      	b.n	8007ff0 <UART_SetConfig+0x174>
 8007fd8:	2300      	movs	r3, #0
 8007fda:	77fb      	strb	r3, [r7, #31]
 8007fdc:	e0f2      	b.n	80081c4 <UART_SetConfig+0x348>
 8007fde:	2302      	movs	r3, #2
 8007fe0:	77fb      	strb	r3, [r7, #31]
 8007fe2:	e0ef      	b.n	80081c4 <UART_SetConfig+0x348>
 8007fe4:	2304      	movs	r3, #4
 8007fe6:	77fb      	strb	r3, [r7, #31]
 8007fe8:	e0ec      	b.n	80081c4 <UART_SetConfig+0x348>
 8007fea:	2308      	movs	r3, #8
 8007fec:	77fb      	strb	r3, [r7, #31]
 8007fee:	e0e9      	b.n	80081c4 <UART_SetConfig+0x348>
 8007ff0:	2310      	movs	r3, #16
 8007ff2:	77fb      	strb	r3, [r7, #31]
 8007ff4:	e0e6      	b.n	80081c4 <UART_SetConfig+0x348>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a56      	ldr	r2, [pc, #344]	; (8008154 <UART_SetConfig+0x2d8>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d120      	bne.n	8008042 <UART_SetConfig+0x1c6>
 8008000:	4b51      	ldr	r3, [pc, #324]	; (8008148 <UART_SetConfig+0x2cc>)
 8008002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008006:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800800a:	2bc0      	cmp	r3, #192	; 0xc0
 800800c:	d013      	beq.n	8008036 <UART_SetConfig+0x1ba>
 800800e:	2bc0      	cmp	r3, #192	; 0xc0
 8008010:	d814      	bhi.n	800803c <UART_SetConfig+0x1c0>
 8008012:	2b80      	cmp	r3, #128	; 0x80
 8008014:	d009      	beq.n	800802a <UART_SetConfig+0x1ae>
 8008016:	2b80      	cmp	r3, #128	; 0x80
 8008018:	d810      	bhi.n	800803c <UART_SetConfig+0x1c0>
 800801a:	2b00      	cmp	r3, #0
 800801c:	d002      	beq.n	8008024 <UART_SetConfig+0x1a8>
 800801e:	2b40      	cmp	r3, #64	; 0x40
 8008020:	d006      	beq.n	8008030 <UART_SetConfig+0x1b4>
 8008022:	e00b      	b.n	800803c <UART_SetConfig+0x1c0>
 8008024:	2300      	movs	r3, #0
 8008026:	77fb      	strb	r3, [r7, #31]
 8008028:	e0cc      	b.n	80081c4 <UART_SetConfig+0x348>
 800802a:	2302      	movs	r3, #2
 800802c:	77fb      	strb	r3, [r7, #31]
 800802e:	e0c9      	b.n	80081c4 <UART_SetConfig+0x348>
 8008030:	2304      	movs	r3, #4
 8008032:	77fb      	strb	r3, [r7, #31]
 8008034:	e0c6      	b.n	80081c4 <UART_SetConfig+0x348>
 8008036:	2308      	movs	r3, #8
 8008038:	77fb      	strb	r3, [r7, #31]
 800803a:	e0c3      	b.n	80081c4 <UART_SetConfig+0x348>
 800803c:	2310      	movs	r3, #16
 800803e:	77fb      	strb	r3, [r7, #31]
 8008040:	e0c0      	b.n	80081c4 <UART_SetConfig+0x348>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a44      	ldr	r2, [pc, #272]	; (8008158 <UART_SetConfig+0x2dc>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d125      	bne.n	8008098 <UART_SetConfig+0x21c>
 800804c:	4b3e      	ldr	r3, [pc, #248]	; (8008148 <UART_SetConfig+0x2cc>)
 800804e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008056:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800805a:	d017      	beq.n	800808c <UART_SetConfig+0x210>
 800805c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008060:	d817      	bhi.n	8008092 <UART_SetConfig+0x216>
 8008062:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008066:	d00b      	beq.n	8008080 <UART_SetConfig+0x204>
 8008068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800806c:	d811      	bhi.n	8008092 <UART_SetConfig+0x216>
 800806e:	2b00      	cmp	r3, #0
 8008070:	d003      	beq.n	800807a <UART_SetConfig+0x1fe>
 8008072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008076:	d006      	beq.n	8008086 <UART_SetConfig+0x20a>
 8008078:	e00b      	b.n	8008092 <UART_SetConfig+0x216>
 800807a:	2300      	movs	r3, #0
 800807c:	77fb      	strb	r3, [r7, #31]
 800807e:	e0a1      	b.n	80081c4 <UART_SetConfig+0x348>
 8008080:	2302      	movs	r3, #2
 8008082:	77fb      	strb	r3, [r7, #31]
 8008084:	e09e      	b.n	80081c4 <UART_SetConfig+0x348>
 8008086:	2304      	movs	r3, #4
 8008088:	77fb      	strb	r3, [r7, #31]
 800808a:	e09b      	b.n	80081c4 <UART_SetConfig+0x348>
 800808c:	2308      	movs	r3, #8
 800808e:	77fb      	strb	r3, [r7, #31]
 8008090:	e098      	b.n	80081c4 <UART_SetConfig+0x348>
 8008092:	2310      	movs	r3, #16
 8008094:	77fb      	strb	r3, [r7, #31]
 8008096:	e095      	b.n	80081c4 <UART_SetConfig+0x348>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a2f      	ldr	r2, [pc, #188]	; (800815c <UART_SetConfig+0x2e0>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d125      	bne.n	80080ee <UART_SetConfig+0x272>
 80080a2:	4b29      	ldr	r3, [pc, #164]	; (8008148 <UART_SetConfig+0x2cc>)
 80080a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80080ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080b0:	d017      	beq.n	80080e2 <UART_SetConfig+0x266>
 80080b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080b6:	d817      	bhi.n	80080e8 <UART_SetConfig+0x26c>
 80080b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080bc:	d00b      	beq.n	80080d6 <UART_SetConfig+0x25a>
 80080be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080c2:	d811      	bhi.n	80080e8 <UART_SetConfig+0x26c>
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d003      	beq.n	80080d0 <UART_SetConfig+0x254>
 80080c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080cc:	d006      	beq.n	80080dc <UART_SetConfig+0x260>
 80080ce:	e00b      	b.n	80080e8 <UART_SetConfig+0x26c>
 80080d0:	2301      	movs	r3, #1
 80080d2:	77fb      	strb	r3, [r7, #31]
 80080d4:	e076      	b.n	80081c4 <UART_SetConfig+0x348>
 80080d6:	2302      	movs	r3, #2
 80080d8:	77fb      	strb	r3, [r7, #31]
 80080da:	e073      	b.n	80081c4 <UART_SetConfig+0x348>
 80080dc:	2304      	movs	r3, #4
 80080de:	77fb      	strb	r3, [r7, #31]
 80080e0:	e070      	b.n	80081c4 <UART_SetConfig+0x348>
 80080e2:	2308      	movs	r3, #8
 80080e4:	77fb      	strb	r3, [r7, #31]
 80080e6:	e06d      	b.n	80081c4 <UART_SetConfig+0x348>
 80080e8:	2310      	movs	r3, #16
 80080ea:	77fb      	strb	r3, [r7, #31]
 80080ec:	e06a      	b.n	80081c4 <UART_SetConfig+0x348>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a1b      	ldr	r2, [pc, #108]	; (8008160 <UART_SetConfig+0x2e4>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d138      	bne.n	800816a <UART_SetConfig+0x2ee>
 80080f8:	4b13      	ldr	r3, [pc, #76]	; (8008148 <UART_SetConfig+0x2cc>)
 80080fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080fe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008102:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008106:	d017      	beq.n	8008138 <UART_SetConfig+0x2bc>
 8008108:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800810c:	d82a      	bhi.n	8008164 <UART_SetConfig+0x2e8>
 800810e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008112:	d00b      	beq.n	800812c <UART_SetConfig+0x2b0>
 8008114:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008118:	d824      	bhi.n	8008164 <UART_SetConfig+0x2e8>
 800811a:	2b00      	cmp	r3, #0
 800811c:	d003      	beq.n	8008126 <UART_SetConfig+0x2aa>
 800811e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008122:	d006      	beq.n	8008132 <UART_SetConfig+0x2b6>
 8008124:	e01e      	b.n	8008164 <UART_SetConfig+0x2e8>
 8008126:	2300      	movs	r3, #0
 8008128:	77fb      	strb	r3, [r7, #31]
 800812a:	e04b      	b.n	80081c4 <UART_SetConfig+0x348>
 800812c:	2302      	movs	r3, #2
 800812e:	77fb      	strb	r3, [r7, #31]
 8008130:	e048      	b.n	80081c4 <UART_SetConfig+0x348>
 8008132:	2304      	movs	r3, #4
 8008134:	77fb      	strb	r3, [r7, #31]
 8008136:	e045      	b.n	80081c4 <UART_SetConfig+0x348>
 8008138:	2308      	movs	r3, #8
 800813a:	77fb      	strb	r3, [r7, #31]
 800813c:	e042      	b.n	80081c4 <UART_SetConfig+0x348>
 800813e:	bf00      	nop
 8008140:	efff69f3 	.word	0xefff69f3
 8008144:	40011000 	.word	0x40011000
 8008148:	40023800 	.word	0x40023800
 800814c:	40004400 	.word	0x40004400
 8008150:	40004800 	.word	0x40004800
 8008154:	40004c00 	.word	0x40004c00
 8008158:	40005000 	.word	0x40005000
 800815c:	40011400 	.word	0x40011400
 8008160:	40007800 	.word	0x40007800
 8008164:	2310      	movs	r3, #16
 8008166:	77fb      	strb	r3, [r7, #31]
 8008168:	e02c      	b.n	80081c4 <UART_SetConfig+0x348>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a72      	ldr	r2, [pc, #456]	; (8008338 <UART_SetConfig+0x4bc>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d125      	bne.n	80081c0 <UART_SetConfig+0x344>
 8008174:	4b71      	ldr	r3, [pc, #452]	; (800833c <UART_SetConfig+0x4c0>)
 8008176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800817a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800817e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008182:	d017      	beq.n	80081b4 <UART_SetConfig+0x338>
 8008184:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008188:	d817      	bhi.n	80081ba <UART_SetConfig+0x33e>
 800818a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800818e:	d00b      	beq.n	80081a8 <UART_SetConfig+0x32c>
 8008190:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008194:	d811      	bhi.n	80081ba <UART_SetConfig+0x33e>
 8008196:	2b00      	cmp	r3, #0
 8008198:	d003      	beq.n	80081a2 <UART_SetConfig+0x326>
 800819a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800819e:	d006      	beq.n	80081ae <UART_SetConfig+0x332>
 80081a0:	e00b      	b.n	80081ba <UART_SetConfig+0x33e>
 80081a2:	2300      	movs	r3, #0
 80081a4:	77fb      	strb	r3, [r7, #31]
 80081a6:	e00d      	b.n	80081c4 <UART_SetConfig+0x348>
 80081a8:	2302      	movs	r3, #2
 80081aa:	77fb      	strb	r3, [r7, #31]
 80081ac:	e00a      	b.n	80081c4 <UART_SetConfig+0x348>
 80081ae:	2304      	movs	r3, #4
 80081b0:	77fb      	strb	r3, [r7, #31]
 80081b2:	e007      	b.n	80081c4 <UART_SetConfig+0x348>
 80081b4:	2308      	movs	r3, #8
 80081b6:	77fb      	strb	r3, [r7, #31]
 80081b8:	e004      	b.n	80081c4 <UART_SetConfig+0x348>
 80081ba:	2310      	movs	r3, #16
 80081bc:	77fb      	strb	r3, [r7, #31]
 80081be:	e001      	b.n	80081c4 <UART_SetConfig+0x348>
 80081c0:	2310      	movs	r3, #16
 80081c2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	69db      	ldr	r3, [r3, #28]
 80081c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081cc:	d15b      	bne.n	8008286 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80081ce:	7ffb      	ldrb	r3, [r7, #31]
 80081d0:	2b08      	cmp	r3, #8
 80081d2:	d828      	bhi.n	8008226 <UART_SetConfig+0x3aa>
 80081d4:	a201      	add	r2, pc, #4	; (adr r2, 80081dc <UART_SetConfig+0x360>)
 80081d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081da:	bf00      	nop
 80081dc:	08008201 	.word	0x08008201
 80081e0:	08008209 	.word	0x08008209
 80081e4:	08008211 	.word	0x08008211
 80081e8:	08008227 	.word	0x08008227
 80081ec:	08008217 	.word	0x08008217
 80081f0:	08008227 	.word	0x08008227
 80081f4:	08008227 	.word	0x08008227
 80081f8:	08008227 	.word	0x08008227
 80081fc:	0800821f 	.word	0x0800821f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008200:	f7fd fc3e 	bl	8005a80 <HAL_RCC_GetPCLK1Freq>
 8008204:	61b8      	str	r0, [r7, #24]
        break;
 8008206:	e013      	b.n	8008230 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008208:	f7fd fc4e 	bl	8005aa8 <HAL_RCC_GetPCLK2Freq>
 800820c:	61b8      	str	r0, [r7, #24]
        break;
 800820e:	e00f      	b.n	8008230 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008210:	4b4b      	ldr	r3, [pc, #300]	; (8008340 <UART_SetConfig+0x4c4>)
 8008212:	61bb      	str	r3, [r7, #24]
        break;
 8008214:	e00c      	b.n	8008230 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008216:	f7fd fb21 	bl	800585c <HAL_RCC_GetSysClockFreq>
 800821a:	61b8      	str	r0, [r7, #24]
        break;
 800821c:	e008      	b.n	8008230 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800821e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008222:	61bb      	str	r3, [r7, #24]
        break;
 8008224:	e004      	b.n	8008230 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008226:	2300      	movs	r3, #0
 8008228:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	77bb      	strb	r3, [r7, #30]
        break;
 800822e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d074      	beq.n	8008320 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008236:	69bb      	ldr	r3, [r7, #24]
 8008238:	005a      	lsls	r2, r3, #1
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	085b      	lsrs	r3, r3, #1
 8008240:	441a      	add	r2, r3
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	fbb2 f3f3 	udiv	r3, r2, r3
 800824a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	2b0f      	cmp	r3, #15
 8008250:	d916      	bls.n	8008280 <UART_SetConfig+0x404>
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008258:	d212      	bcs.n	8008280 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	b29b      	uxth	r3, r3
 800825e:	f023 030f 	bic.w	r3, r3, #15
 8008262:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	085b      	lsrs	r3, r3, #1
 8008268:	b29b      	uxth	r3, r3
 800826a:	f003 0307 	and.w	r3, r3, #7
 800826e:	b29a      	uxth	r2, r3
 8008270:	89fb      	ldrh	r3, [r7, #14]
 8008272:	4313      	orrs	r3, r2
 8008274:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	89fa      	ldrh	r2, [r7, #14]
 800827c:	60da      	str	r2, [r3, #12]
 800827e:	e04f      	b.n	8008320 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	77bb      	strb	r3, [r7, #30]
 8008284:	e04c      	b.n	8008320 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008286:	7ffb      	ldrb	r3, [r7, #31]
 8008288:	2b08      	cmp	r3, #8
 800828a:	d828      	bhi.n	80082de <UART_SetConfig+0x462>
 800828c:	a201      	add	r2, pc, #4	; (adr r2, 8008294 <UART_SetConfig+0x418>)
 800828e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008292:	bf00      	nop
 8008294:	080082b9 	.word	0x080082b9
 8008298:	080082c1 	.word	0x080082c1
 800829c:	080082c9 	.word	0x080082c9
 80082a0:	080082df 	.word	0x080082df
 80082a4:	080082cf 	.word	0x080082cf
 80082a8:	080082df 	.word	0x080082df
 80082ac:	080082df 	.word	0x080082df
 80082b0:	080082df 	.word	0x080082df
 80082b4:	080082d7 	.word	0x080082d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082b8:	f7fd fbe2 	bl	8005a80 <HAL_RCC_GetPCLK1Freq>
 80082bc:	61b8      	str	r0, [r7, #24]
        break;
 80082be:	e013      	b.n	80082e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082c0:	f7fd fbf2 	bl	8005aa8 <HAL_RCC_GetPCLK2Freq>
 80082c4:	61b8      	str	r0, [r7, #24]
        break;
 80082c6:	e00f      	b.n	80082e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082c8:	4b1d      	ldr	r3, [pc, #116]	; (8008340 <UART_SetConfig+0x4c4>)
 80082ca:	61bb      	str	r3, [r7, #24]
        break;
 80082cc:	e00c      	b.n	80082e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082ce:	f7fd fac5 	bl	800585c <HAL_RCC_GetSysClockFreq>
 80082d2:	61b8      	str	r0, [r7, #24]
        break;
 80082d4:	e008      	b.n	80082e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082da:	61bb      	str	r3, [r7, #24]
        break;
 80082dc:	e004      	b.n	80082e8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80082de:	2300      	movs	r3, #0
 80082e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	77bb      	strb	r3, [r7, #30]
        break;
 80082e6:	bf00      	nop
    }

    if (pclk != 0U)
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d018      	beq.n	8008320 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	085a      	lsrs	r2, r3, #1
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	441a      	add	r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008300:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	2b0f      	cmp	r3, #15
 8008306:	d909      	bls.n	800831c <UART_SetConfig+0x4a0>
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800830e:	d205      	bcs.n	800831c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	b29a      	uxth	r2, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	60da      	str	r2, [r3, #12]
 800831a:	e001      	b.n	8008320 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800831c:	2301      	movs	r3, #1
 800831e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800832c:	7fbb      	ldrb	r3, [r7, #30]
}
 800832e:	4618      	mov	r0, r3
 8008330:	3720      	adds	r7, #32
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	40007c00 	.word	0x40007c00
 800833c:	40023800 	.word	0x40023800
 8008340:	00f42400 	.word	0x00f42400

08008344 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008350:	f003 0301 	and.w	r3, r3, #1
 8008354:	2b00      	cmp	r3, #0
 8008356:	d00a      	beq.n	800836e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	430a      	orrs	r2, r1
 800836c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008372:	f003 0302 	and.w	r3, r3, #2
 8008376:	2b00      	cmp	r3, #0
 8008378:	d00a      	beq.n	8008390 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	430a      	orrs	r2, r1
 800838e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008394:	f003 0304 	and.w	r3, r3, #4
 8008398:	2b00      	cmp	r3, #0
 800839a:	d00a      	beq.n	80083b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	430a      	orrs	r2, r1
 80083b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b6:	f003 0308 	and.w	r3, r3, #8
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00a      	beq.n	80083d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	430a      	orrs	r2, r1
 80083d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d8:	f003 0310 	and.w	r3, r3, #16
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d00a      	beq.n	80083f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	430a      	orrs	r2, r1
 80083f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fa:	f003 0320 	and.w	r3, r3, #32
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00a      	beq.n	8008418 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	430a      	orrs	r2, r1
 8008416:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008420:	2b00      	cmp	r3, #0
 8008422:	d01a      	beq.n	800845a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	430a      	orrs	r2, r1
 8008438:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008442:	d10a      	bne.n	800845a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	430a      	orrs	r2, r1
 8008458:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00a      	beq.n	800847c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	430a      	orrs	r2, r1
 800847a:	605a      	str	r2, [r3, #4]
  }
}
 800847c:	bf00      	nop
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b086      	sub	sp, #24
 800848c:	af02      	add	r7, sp, #8
 800848e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008498:	f7fa fbba 	bl	8002c10 <HAL_GetTick>
 800849c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 0308 	and.w	r3, r3, #8
 80084a8:	2b08      	cmp	r3, #8
 80084aa:	d10e      	bne.n	80084ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80084b0:	9300      	str	r3, [sp, #0]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2200      	movs	r2, #0
 80084b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 f81b 	bl	80084f6 <UART_WaitOnFlagUntilTimeout>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d001      	beq.n	80084ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084c6:	2303      	movs	r3, #3
 80084c8:	e011      	b.n	80084ee <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2220      	movs	r2, #32
 80084ce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2220      	movs	r2, #32
 80084d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b09c      	sub	sp, #112	; 0x70
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	60f8      	str	r0, [r7, #12]
 80084fe:	60b9      	str	r1, [r7, #8]
 8008500:	603b      	str	r3, [r7, #0]
 8008502:	4613      	mov	r3, r2
 8008504:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008506:	e0a7      	b.n	8008658 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008508:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800850a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800850e:	f000 80a3 	beq.w	8008658 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008512:	f7fa fb7d 	bl	8002c10 <HAL_GetTick>
 8008516:	4602      	mov	r2, r0
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	1ad3      	subs	r3, r2, r3
 800851c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800851e:	429a      	cmp	r2, r3
 8008520:	d302      	bcc.n	8008528 <UART_WaitOnFlagUntilTimeout+0x32>
 8008522:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008524:	2b00      	cmp	r3, #0
 8008526:	d13f      	bne.n	80085a8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800852e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008530:	e853 3f00 	ldrex	r3, [r3]
 8008534:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008538:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800853c:	667b      	str	r3, [r7, #100]	; 0x64
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	461a      	mov	r2, r3
 8008544:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008546:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008548:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800854c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800854e:	e841 2300 	strex	r3, r2, [r1]
 8008552:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008554:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008556:	2b00      	cmp	r3, #0
 8008558:	d1e6      	bne.n	8008528 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	3308      	adds	r3, #8
 8008560:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008564:	e853 3f00 	ldrex	r3, [r3]
 8008568:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800856a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800856c:	f023 0301 	bic.w	r3, r3, #1
 8008570:	663b      	str	r3, [r7, #96]	; 0x60
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	3308      	adds	r3, #8
 8008578:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800857a:	64ba      	str	r2, [r7, #72]	; 0x48
 800857c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800857e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008580:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008582:	e841 2300 	strex	r3, r2, [r1]
 8008586:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800858a:	2b00      	cmp	r3, #0
 800858c:	d1e5      	bne.n	800855a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2220      	movs	r2, #32
 8008592:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2220      	movs	r2, #32
 8008598:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80085a4:	2303      	movs	r3, #3
 80085a6:	e068      	b.n	800867a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f003 0304 	and.w	r3, r3, #4
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d050      	beq.n	8008658 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	69db      	ldr	r3, [r3, #28]
 80085bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085c4:	d148      	bne.n	8008658 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085ce:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d8:	e853 3f00 	ldrex	r3, [r3]
 80085dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80085e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	461a      	mov	r2, r3
 80085ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085ee:	637b      	str	r3, [r7, #52]	; 0x34
 80085f0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80085f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085f6:	e841 2300 	strex	r3, r2, [r1]
 80085fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80085fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d1e6      	bne.n	80085d0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	3308      	adds	r3, #8
 8008608:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	e853 3f00 	ldrex	r3, [r3]
 8008610:	613b      	str	r3, [r7, #16]
   return(result);
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	f023 0301 	bic.w	r3, r3, #1
 8008618:	66bb      	str	r3, [r7, #104]	; 0x68
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	3308      	adds	r3, #8
 8008620:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008622:	623a      	str	r2, [r7, #32]
 8008624:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008626:	69f9      	ldr	r1, [r7, #28]
 8008628:	6a3a      	ldr	r2, [r7, #32]
 800862a:	e841 2300 	strex	r3, r2, [r1]
 800862e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d1e5      	bne.n	8008602 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2220      	movs	r2, #32
 800863a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2220      	movs	r2, #32
 8008640:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2220      	movs	r2, #32
 8008648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2200      	movs	r2, #0
 8008650:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008654:	2303      	movs	r3, #3
 8008656:	e010      	b.n	800867a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	69da      	ldr	r2, [r3, #28]
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	4013      	ands	r3, r2
 8008662:	68ba      	ldr	r2, [r7, #8]
 8008664:	429a      	cmp	r2, r3
 8008666:	bf0c      	ite	eq
 8008668:	2301      	moveq	r3, #1
 800866a:	2300      	movne	r3, #0
 800866c:	b2db      	uxtb	r3, r3
 800866e:	461a      	mov	r2, r3
 8008670:	79fb      	ldrb	r3, [r7, #7]
 8008672:	429a      	cmp	r2, r3
 8008674:	f43f af48 	beq.w	8008508 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3770      	adds	r7, #112	; 0x70
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
	...

08008684 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b096      	sub	sp, #88	; 0x58
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	4613      	mov	r3, r2
 8008690:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	68ba      	ldr	r2, [r7, #8]
 8008696:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	88fa      	ldrh	r2, [r7, #6]
 800869c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2222      	movs	r2, #34	; 0x22
 80086ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d028      	beq.n	800870a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086bc:	4a3e      	ldr	r2, [pc, #248]	; (80087b8 <UART_Start_Receive_DMA+0x134>)
 80086be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086c4:	4a3d      	ldr	r2, [pc, #244]	; (80087bc <UART_Start_Receive_DMA+0x138>)
 80086c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086cc:	4a3c      	ldr	r2, [pc, #240]	; (80087c0 <UART_Start_Receive_DMA+0x13c>)
 80086ce:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086d4:	2200      	movs	r2, #0
 80086d6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	3324      	adds	r3, #36	; 0x24
 80086e2:	4619      	mov	r1, r3
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086e8:	461a      	mov	r2, r3
 80086ea:	88fb      	ldrh	r3, [r7, #6]
 80086ec:	f7fa fc80 	bl	8002ff0 <HAL_DMA_Start_IT>
 80086f0:	4603      	mov	r3, r0
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d009      	beq.n	800870a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2210      	movs	r2, #16
 80086fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2220      	movs	r2, #32
 8008702:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8008706:	2301      	movs	r3, #1
 8008708:	e051      	b.n	80087ae <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	691b      	ldr	r3, [r3, #16]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d018      	beq.n	8008744 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800871a:	e853 3f00 	ldrex	r3, [r3]
 800871e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008726:	657b      	str	r3, [r7, #84]	; 0x54
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	461a      	mov	r2, r3
 800872e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008730:	64bb      	str	r3, [r7, #72]	; 0x48
 8008732:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008734:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008736:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008738:	e841 2300 	strex	r3, r2, [r1]
 800873c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800873e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008740:	2b00      	cmp	r3, #0
 8008742:	d1e6      	bne.n	8008712 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	3308      	adds	r3, #8
 800874a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874e:	e853 3f00 	ldrex	r3, [r3]
 8008752:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008756:	f043 0301 	orr.w	r3, r3, #1
 800875a:	653b      	str	r3, [r7, #80]	; 0x50
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	3308      	adds	r3, #8
 8008762:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008764:	637a      	str	r2, [r7, #52]	; 0x34
 8008766:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008768:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800876a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800876c:	e841 2300 	strex	r3, r2, [r1]
 8008770:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008774:	2b00      	cmp	r3, #0
 8008776:	d1e5      	bne.n	8008744 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	3308      	adds	r3, #8
 800877e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	e853 3f00 	ldrex	r3, [r3]
 8008786:	613b      	str	r3, [r7, #16]
   return(result);
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800878e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	3308      	adds	r3, #8
 8008796:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008798:	623a      	str	r2, [r7, #32]
 800879a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879c:	69f9      	ldr	r1, [r7, #28]
 800879e:	6a3a      	ldr	r2, [r7, #32]
 80087a0:	e841 2300 	strex	r3, r2, [r1]
 80087a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d1e5      	bne.n	8008778 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3758      	adds	r7, #88	; 0x58
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	080088d9 	.word	0x080088d9
 80087bc:	08008a01 	.word	0x08008a01
 80087c0:	08008a3f 	.word	0x08008a3f

080087c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b089      	sub	sp, #36	; 0x24
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	e853 3f00 	ldrex	r3, [r3]
 80087d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80087e0:	61fb      	str	r3, [r7, #28]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	461a      	mov	r2, r3
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	61bb      	str	r3, [r7, #24]
 80087ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ee:	6979      	ldr	r1, [r7, #20]
 80087f0:	69ba      	ldr	r2, [r7, #24]
 80087f2:	e841 2300 	strex	r3, r2, [r1]
 80087f6:	613b      	str	r3, [r7, #16]
   return(result);
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1e6      	bne.n	80087cc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2220      	movs	r2, #32
 8008802:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8008804:	bf00      	nop
 8008806:	3724      	adds	r7, #36	; 0x24
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008810:	b480      	push	{r7}
 8008812:	b095      	sub	sp, #84	; 0x54
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008820:	e853 3f00 	ldrex	r3, [r3]
 8008824:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008828:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800882c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	461a      	mov	r2, r3
 8008834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008836:	643b      	str	r3, [r7, #64]	; 0x40
 8008838:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800883a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800883c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800883e:	e841 2300 	strex	r3, r2, [r1]
 8008842:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008846:	2b00      	cmp	r3, #0
 8008848:	d1e6      	bne.n	8008818 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	3308      	adds	r3, #8
 8008850:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008852:	6a3b      	ldr	r3, [r7, #32]
 8008854:	e853 3f00 	ldrex	r3, [r3]
 8008858:	61fb      	str	r3, [r7, #28]
   return(result);
 800885a:	69fb      	ldr	r3, [r7, #28]
 800885c:	f023 0301 	bic.w	r3, r3, #1
 8008860:	64bb      	str	r3, [r7, #72]	; 0x48
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	3308      	adds	r3, #8
 8008868:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800886a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800886c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800886e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008870:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008872:	e841 2300 	strex	r3, r2, [r1]
 8008876:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887a:	2b00      	cmp	r3, #0
 800887c:	d1e5      	bne.n	800884a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008882:	2b01      	cmp	r3, #1
 8008884:	d118      	bne.n	80088b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	e853 3f00 	ldrex	r3, [r3]
 8008892:	60bb      	str	r3, [r7, #8]
   return(result);
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	f023 0310 	bic.w	r3, r3, #16
 800889a:	647b      	str	r3, [r7, #68]	; 0x44
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	461a      	mov	r2, r3
 80088a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088a4:	61bb      	str	r3, [r7, #24]
 80088a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a8:	6979      	ldr	r1, [r7, #20]
 80088aa:	69ba      	ldr	r2, [r7, #24]
 80088ac:	e841 2300 	strex	r3, r2, [r1]
 80088b0:	613b      	str	r3, [r7, #16]
   return(result);
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d1e6      	bne.n	8008886 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2220      	movs	r2, #32
 80088bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	669a      	str	r2, [r3, #104]	; 0x68
}
 80088cc:	bf00      	nop
 80088ce:	3754      	adds	r7, #84	; 0x54
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b09c      	sub	sp, #112	; 0x70
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	69db      	ldr	r3, [r3, #28]
 80088ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088ee:	d071      	beq.n	80089d4 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80088f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088f2:	2200      	movs	r2, #0
 80088f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008900:	e853 3f00 	ldrex	r3, [r3]
 8008904:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008906:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008908:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800890c:	66bb      	str	r3, [r7, #104]	; 0x68
 800890e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	461a      	mov	r2, r3
 8008914:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008916:	65bb      	str	r3, [r7, #88]	; 0x58
 8008918:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800891c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800891e:	e841 2300 	strex	r3, r2, [r1]
 8008922:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008926:	2b00      	cmp	r3, #0
 8008928:	d1e6      	bne.n	80088f8 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800892a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	3308      	adds	r3, #8
 8008930:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008934:	e853 3f00 	ldrex	r3, [r3]
 8008938:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800893a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800893c:	f023 0301 	bic.w	r3, r3, #1
 8008940:	667b      	str	r3, [r7, #100]	; 0x64
 8008942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	3308      	adds	r3, #8
 8008948:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800894a:	647a      	str	r2, [r7, #68]	; 0x44
 800894c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008950:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008952:	e841 2300 	strex	r3, r2, [r1]
 8008956:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800895a:	2b00      	cmp	r3, #0
 800895c:	d1e5      	bne.n	800892a <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800895e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	3308      	adds	r3, #8
 8008964:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008968:	e853 3f00 	ldrex	r3, [r3]
 800896c:	623b      	str	r3, [r7, #32]
   return(result);
 800896e:	6a3b      	ldr	r3, [r7, #32]
 8008970:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008974:	663b      	str	r3, [r7, #96]	; 0x60
 8008976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	3308      	adds	r3, #8
 800897c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800897e:	633a      	str	r2, [r7, #48]	; 0x30
 8008980:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008982:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008986:	e841 2300 	strex	r3, r2, [r1]
 800898a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800898c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800898e:	2b00      	cmp	r3, #0
 8008990:	d1e5      	bne.n	800895e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008994:	2220      	movs	r2, #32
 8008996:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800899a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800899c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d118      	bne.n	80089d4 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	e853 3f00 	ldrex	r3, [r3]
 80089ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f023 0310 	bic.w	r3, r3, #16
 80089b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	461a      	mov	r2, r3
 80089be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089c0:	61fb      	str	r3, [r7, #28]
 80089c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c4:	69b9      	ldr	r1, [r7, #24]
 80089c6:	69fa      	ldr	r2, [r7, #28]
 80089c8:	e841 2300 	strex	r3, r2, [r1]
 80089cc:	617b      	str	r3, [r7, #20]
   return(result);
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d1e6      	bne.n	80089a2 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089d6:	2200      	movs	r2, #0
 80089d8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d107      	bne.n	80089f2 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80089e8:	4619      	mov	r1, r3
 80089ea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80089ec:	f7f9 fc7e 	bl	80022ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80089f0:	e002      	b.n	80089f8 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80089f2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80089f4:	f7ff fa24 	bl	8007e40 <HAL_UART_RxCpltCallback>
}
 80089f8:	bf00      	nop
 80089fa:	3770      	adds	r7, #112	; 0x70
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a0c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2201      	movs	r2, #1
 8008a12:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d109      	bne.n	8008a30 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008a22:	085b      	lsrs	r3, r3, #1
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	4619      	mov	r1, r3
 8008a28:	68f8      	ldr	r0, [r7, #12]
 8008a2a:	f7f9 fc5f 	bl	80022ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008a2e:	e002      	b.n	8008a36 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008a30:	68f8      	ldr	r0, [r7, #12]
 8008a32:	f7ff fa0f 	bl	8007e54 <HAL_UART_RxHalfCpltCallback>
}
 8008a36:	bf00      	nop
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b086      	sub	sp, #24
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a4a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a50:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a58:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a64:	2b80      	cmp	r3, #128	; 0x80
 8008a66:	d109      	bne.n	8008a7c <UART_DMAError+0x3e>
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	2b21      	cmp	r3, #33	; 0x21
 8008a6c:	d106      	bne.n	8008a7c <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8008a76:	6978      	ldr	r0, [r7, #20]
 8008a78:	f7ff fea4 	bl	80087c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a86:	2b40      	cmp	r3, #64	; 0x40
 8008a88:	d109      	bne.n	8008a9e <UART_DMAError+0x60>
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2b22      	cmp	r3, #34	; 0x22
 8008a8e:	d106      	bne.n	8008a9e <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8008a98:	6978      	ldr	r0, [r7, #20]
 8008a9a:	f7ff feb9 	bl	8008810 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008aa4:	f043 0210 	orr.w	r2, r3, #16
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008aae:	6978      	ldr	r0, [r7, #20]
 8008ab0:	f7ff f9da 	bl	8007e68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ab4:	bf00      	nop
 8008ab6:	3718      	adds	r7, #24
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2200      	movs	r2, #0
 8008ace:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ada:	68f8      	ldr	r0, [r7, #12]
 8008adc:	f7ff f9c4 	bl	8007e68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ae0:	bf00      	nop
 8008ae2:	3710      	adds	r7, #16
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b08f      	sub	sp, #60	; 0x3c
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008af4:	2b21      	cmp	r3, #33	; 0x21
 8008af6:	d14c      	bne.n	8008b92 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d132      	bne.n	8008b6a <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0a:	6a3b      	ldr	r3, [r7, #32]
 8008b0c:	e853 3f00 	ldrex	r3, [r3]
 8008b10:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b12:	69fb      	ldr	r3, [r7, #28]
 8008b14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b18:	637b      	str	r3, [r7, #52]	; 0x34
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	461a      	mov	r2, r3
 8008b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b24:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b2a:	e841 2300 	strex	r3, r2, [r1]
 8008b2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d1e6      	bne.n	8008b04 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	e853 3f00 	ldrex	r3, [r3]
 8008b42:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b4a:	633b      	str	r3, [r7, #48]	; 0x30
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	461a      	mov	r2, r3
 8008b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b54:	61bb      	str	r3, [r7, #24]
 8008b56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b58:	6979      	ldr	r1, [r7, #20]
 8008b5a:	69ba      	ldr	r2, [r7, #24]
 8008b5c:	e841 2300 	strex	r3, r2, [r1]
 8008b60:	613b      	str	r3, [r7, #16]
   return(result);
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d1e6      	bne.n	8008b36 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008b68:	e013      	b.n	8008b92 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b6e:	781a      	ldrb	r2, [r3, #0]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b7a:	1c5a      	adds	r2, r3, #1
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	3b01      	subs	r3, #1
 8008b8a:	b29a      	uxth	r2, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8008b92:	bf00      	nop
 8008b94:	373c      	adds	r7, #60	; 0x3c
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr

08008b9e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008b9e:	b480      	push	{r7}
 8008ba0:	b091      	sub	sp, #68	; 0x44
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008baa:	2b21      	cmp	r3, #33	; 0x21
 8008bac:	d151      	bne.n	8008c52 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008bb4:	b29b      	uxth	r3, r3
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d132      	bne.n	8008c20 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc2:	e853 3f00 	ldrex	r3, [r3]
 8008bc6:	623b      	str	r3, [r7, #32]
   return(result);
 8008bc8:	6a3b      	ldr	r3, [r7, #32]
 8008bca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bce:	63bb      	str	r3, [r7, #56]	; 0x38
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd8:	633b      	str	r3, [r7, #48]	; 0x30
 8008bda:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bdc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008bde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008be0:	e841 2300 	strex	r3, r2, [r1]
 8008be4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d1e6      	bne.n	8008bba <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	e853 3f00 	ldrex	r3, [r3]
 8008bf8:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c00:	637b      	str	r3, [r7, #52]	; 0x34
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	461a      	mov	r2, r3
 8008c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c0a:	61fb      	str	r3, [r7, #28]
 8008c0c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c0e:	69b9      	ldr	r1, [r7, #24]
 8008c10:	69fa      	ldr	r2, [r7, #28]
 8008c12:	e841 2300 	strex	r3, r2, [r1]
 8008c16:	617b      	str	r3, [r7, #20]
   return(result);
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d1e6      	bne.n	8008bec <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008c1e:	e018      	b.n	8008c52 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c24:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c28:	881b      	ldrh	r3, [r3, #0]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c34:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c3a:	1c9a      	adds	r2, r3, #2
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	b29a      	uxth	r2, r3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8008c52:	bf00      	nop
 8008c54:	3744      	adds	r7, #68	; 0x44
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr

08008c5e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b088      	sub	sp, #32
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	e853 3f00 	ldrex	r3, [r3]
 8008c72:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c7a:	61fb      	str	r3, [r7, #28]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	461a      	mov	r2, r3
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	61bb      	str	r3, [r7, #24]
 8008c86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c88:	6979      	ldr	r1, [r7, #20]
 8008c8a:	69ba      	ldr	r2, [r7, #24]
 8008c8c:	e841 2300 	strex	r3, r2, [r1]
 8008c90:	613b      	str	r3, [r7, #16]
   return(result);
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d1e6      	bne.n	8008c66 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2220      	movs	r2, #32
 8008c9c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f7ff f8c1 	bl	8007e2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008caa:	bf00      	nop
 8008cac:	3720      	adds	r7, #32
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b08c      	sub	sp, #48	; 0x30
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	60f8      	str	r0, [r7, #12]
 8008cba:	60b9      	str	r1, [r7, #8]
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008cc6:	2b20      	cmp	r3, #32
 8008cc8:	d142      	bne.n	8008d50 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d002      	beq.n	8008cd6 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8008cd0:	88fb      	ldrh	r3, [r7, #6]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d101      	bne.n	8008cda <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e03b      	b.n	8008d52 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2201      	movs	r2, #1
 8008cde:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008ce6:	88fb      	ldrh	r3, [r7, #6]
 8008ce8:	461a      	mov	r2, r3
 8008cea:	68b9      	ldr	r1, [r7, #8]
 8008cec:	68f8      	ldr	r0, [r7, #12]
 8008cee:	f7ff fcc9 	bl	8008684 <UART_Start_Receive_DMA>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008cf8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d124      	bne.n	8008d4a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d11d      	bne.n	8008d44 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	2210      	movs	r2, #16
 8008d0e:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	e853 3f00 	ldrex	r3, [r3]
 8008d1c:	617b      	str	r3, [r7, #20]
   return(result);
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	f043 0310 	orr.w	r3, r3, #16
 8008d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8008d30:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d32:	6a39      	ldr	r1, [r7, #32]
 8008d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d36:	e841 2300 	strex	r3, r2, [r1]
 8008d3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d1e6      	bne.n	8008d10 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8008d42:	e002      	b.n	8008d4a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008d44:	2301      	movs	r3, #1
 8008d46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8008d4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008d4e:	e000      	b.n	8008d52 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008d50:	2302      	movs	r3, #2
  }
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3730      	adds	r7, #48	; 0x30
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
	...

08008d5c <arm_pid_init_f32>:
 8008d5c:	ed90 7a08 	vldr	s14, [r0, #32]
 8008d60:	edd0 7a06 	vldr	s15, [r0, #24]
 8008d64:	ed90 6a07 	vldr	s12, [r0, #28]
 8008d68:	eef1 6a67 	vneg.f32	s13, s15
 8008d6c:	ed80 7a02 	vstr	s14, [r0, #8]
 8008d70:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008d74:	ee37 6a07 	vadd.f32	s12, s14, s14
 8008d78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008d7c:	ee36 7ac6 	vsub.f32	s14, s13, s12
 8008d80:	edc0 7a00 	vstr	s15, [r0]
 8008d84:	ed80 7a01 	vstr	s14, [r0, #4]
 8008d88:	b901      	cbnz	r1, 8008d8c <arm_pid_init_f32+0x30>
 8008d8a:	4770      	bx	lr
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	60c3      	str	r3, [r0, #12]
 8008d90:	6103      	str	r3, [r0, #16]
 8008d92:	6143      	str	r3, [r0, #20]
 8008d94:	4770      	bx	lr
 8008d96:	bf00      	nop

08008d98 <__cvt>:
 8008d98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d9c:	ec55 4b10 	vmov	r4, r5, d0
 8008da0:	2d00      	cmp	r5, #0
 8008da2:	460e      	mov	r6, r1
 8008da4:	4619      	mov	r1, r3
 8008da6:	462b      	mov	r3, r5
 8008da8:	bfbb      	ittet	lt
 8008daa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008dae:	461d      	movlt	r5, r3
 8008db0:	2300      	movge	r3, #0
 8008db2:	232d      	movlt	r3, #45	; 0x2d
 8008db4:	700b      	strb	r3, [r1, #0]
 8008db6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008db8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008dbc:	4691      	mov	r9, r2
 8008dbe:	f023 0820 	bic.w	r8, r3, #32
 8008dc2:	bfbc      	itt	lt
 8008dc4:	4622      	movlt	r2, r4
 8008dc6:	4614      	movlt	r4, r2
 8008dc8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008dcc:	d005      	beq.n	8008dda <__cvt+0x42>
 8008dce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008dd2:	d100      	bne.n	8008dd6 <__cvt+0x3e>
 8008dd4:	3601      	adds	r6, #1
 8008dd6:	2102      	movs	r1, #2
 8008dd8:	e000      	b.n	8008ddc <__cvt+0x44>
 8008dda:	2103      	movs	r1, #3
 8008ddc:	ab03      	add	r3, sp, #12
 8008dde:	9301      	str	r3, [sp, #4]
 8008de0:	ab02      	add	r3, sp, #8
 8008de2:	9300      	str	r3, [sp, #0]
 8008de4:	ec45 4b10 	vmov	d0, r4, r5
 8008de8:	4653      	mov	r3, sl
 8008dea:	4632      	mov	r2, r6
 8008dec:	f001 f8ac 	bl	8009f48 <_dtoa_r>
 8008df0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008df4:	4607      	mov	r7, r0
 8008df6:	d102      	bne.n	8008dfe <__cvt+0x66>
 8008df8:	f019 0f01 	tst.w	r9, #1
 8008dfc:	d022      	beq.n	8008e44 <__cvt+0xac>
 8008dfe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008e02:	eb07 0906 	add.w	r9, r7, r6
 8008e06:	d110      	bne.n	8008e2a <__cvt+0x92>
 8008e08:	783b      	ldrb	r3, [r7, #0]
 8008e0a:	2b30      	cmp	r3, #48	; 0x30
 8008e0c:	d10a      	bne.n	8008e24 <__cvt+0x8c>
 8008e0e:	2200      	movs	r2, #0
 8008e10:	2300      	movs	r3, #0
 8008e12:	4620      	mov	r0, r4
 8008e14:	4629      	mov	r1, r5
 8008e16:	f7f7 fe77 	bl	8000b08 <__aeabi_dcmpeq>
 8008e1a:	b918      	cbnz	r0, 8008e24 <__cvt+0x8c>
 8008e1c:	f1c6 0601 	rsb	r6, r6, #1
 8008e20:	f8ca 6000 	str.w	r6, [sl]
 8008e24:	f8da 3000 	ldr.w	r3, [sl]
 8008e28:	4499      	add	r9, r3
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	4620      	mov	r0, r4
 8008e30:	4629      	mov	r1, r5
 8008e32:	f7f7 fe69 	bl	8000b08 <__aeabi_dcmpeq>
 8008e36:	b108      	cbz	r0, 8008e3c <__cvt+0xa4>
 8008e38:	f8cd 900c 	str.w	r9, [sp, #12]
 8008e3c:	2230      	movs	r2, #48	; 0x30
 8008e3e:	9b03      	ldr	r3, [sp, #12]
 8008e40:	454b      	cmp	r3, r9
 8008e42:	d307      	bcc.n	8008e54 <__cvt+0xbc>
 8008e44:	9b03      	ldr	r3, [sp, #12]
 8008e46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e48:	1bdb      	subs	r3, r3, r7
 8008e4a:	4638      	mov	r0, r7
 8008e4c:	6013      	str	r3, [r2, #0]
 8008e4e:	b004      	add	sp, #16
 8008e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e54:	1c59      	adds	r1, r3, #1
 8008e56:	9103      	str	r1, [sp, #12]
 8008e58:	701a      	strb	r2, [r3, #0]
 8008e5a:	e7f0      	b.n	8008e3e <__cvt+0xa6>

08008e5c <__exponent>:
 8008e5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e5e:	4603      	mov	r3, r0
 8008e60:	2900      	cmp	r1, #0
 8008e62:	bfb8      	it	lt
 8008e64:	4249      	neglt	r1, r1
 8008e66:	f803 2b02 	strb.w	r2, [r3], #2
 8008e6a:	bfb4      	ite	lt
 8008e6c:	222d      	movlt	r2, #45	; 0x2d
 8008e6e:	222b      	movge	r2, #43	; 0x2b
 8008e70:	2909      	cmp	r1, #9
 8008e72:	7042      	strb	r2, [r0, #1]
 8008e74:	dd2a      	ble.n	8008ecc <__exponent+0x70>
 8008e76:	f10d 0207 	add.w	r2, sp, #7
 8008e7a:	4617      	mov	r7, r2
 8008e7c:	260a      	movs	r6, #10
 8008e7e:	4694      	mov	ip, r2
 8008e80:	fb91 f5f6 	sdiv	r5, r1, r6
 8008e84:	fb06 1415 	mls	r4, r6, r5, r1
 8008e88:	3430      	adds	r4, #48	; 0x30
 8008e8a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008e8e:	460c      	mov	r4, r1
 8008e90:	2c63      	cmp	r4, #99	; 0x63
 8008e92:	f102 32ff 	add.w	r2, r2, #4294967295
 8008e96:	4629      	mov	r1, r5
 8008e98:	dcf1      	bgt.n	8008e7e <__exponent+0x22>
 8008e9a:	3130      	adds	r1, #48	; 0x30
 8008e9c:	f1ac 0402 	sub.w	r4, ip, #2
 8008ea0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008ea4:	1c41      	adds	r1, r0, #1
 8008ea6:	4622      	mov	r2, r4
 8008ea8:	42ba      	cmp	r2, r7
 8008eaa:	d30a      	bcc.n	8008ec2 <__exponent+0x66>
 8008eac:	f10d 0209 	add.w	r2, sp, #9
 8008eb0:	eba2 020c 	sub.w	r2, r2, ip
 8008eb4:	42bc      	cmp	r4, r7
 8008eb6:	bf88      	it	hi
 8008eb8:	2200      	movhi	r2, #0
 8008eba:	4413      	add	r3, r2
 8008ebc:	1a18      	subs	r0, r3, r0
 8008ebe:	b003      	add	sp, #12
 8008ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ec2:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008ec6:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008eca:	e7ed      	b.n	8008ea8 <__exponent+0x4c>
 8008ecc:	2330      	movs	r3, #48	; 0x30
 8008ece:	3130      	adds	r1, #48	; 0x30
 8008ed0:	7083      	strb	r3, [r0, #2]
 8008ed2:	70c1      	strb	r1, [r0, #3]
 8008ed4:	1d03      	adds	r3, r0, #4
 8008ed6:	e7f1      	b.n	8008ebc <__exponent+0x60>

08008ed8 <_printf_float>:
 8008ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008edc:	ed2d 8b02 	vpush	{d8}
 8008ee0:	b08d      	sub	sp, #52	; 0x34
 8008ee2:	460c      	mov	r4, r1
 8008ee4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008ee8:	4616      	mov	r6, r2
 8008eea:	461f      	mov	r7, r3
 8008eec:	4605      	mov	r5, r0
 8008eee:	f000 ff25 	bl	8009d3c <_localeconv_r>
 8008ef2:	f8d0 a000 	ldr.w	sl, [r0]
 8008ef6:	4650      	mov	r0, sl
 8008ef8:	f7f7 f9da 	bl	80002b0 <strlen>
 8008efc:	2300      	movs	r3, #0
 8008efe:	930a      	str	r3, [sp, #40]	; 0x28
 8008f00:	6823      	ldr	r3, [r4, #0]
 8008f02:	9305      	str	r3, [sp, #20]
 8008f04:	f8d8 3000 	ldr.w	r3, [r8]
 8008f08:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008f0c:	3307      	adds	r3, #7
 8008f0e:	f023 0307 	bic.w	r3, r3, #7
 8008f12:	f103 0208 	add.w	r2, r3, #8
 8008f16:	f8c8 2000 	str.w	r2, [r8]
 8008f1a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f1e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008f22:	9307      	str	r3, [sp, #28]
 8008f24:	f8cd 8018 	str.w	r8, [sp, #24]
 8008f28:	ee08 0a10 	vmov	s16, r0
 8008f2c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008f30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f34:	4b9e      	ldr	r3, [pc, #632]	; (80091b0 <_printf_float+0x2d8>)
 8008f36:	f04f 32ff 	mov.w	r2, #4294967295
 8008f3a:	f7f7 fe17 	bl	8000b6c <__aeabi_dcmpun>
 8008f3e:	bb88      	cbnz	r0, 8008fa4 <_printf_float+0xcc>
 8008f40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f44:	4b9a      	ldr	r3, [pc, #616]	; (80091b0 <_printf_float+0x2d8>)
 8008f46:	f04f 32ff 	mov.w	r2, #4294967295
 8008f4a:	f7f7 fdf1 	bl	8000b30 <__aeabi_dcmple>
 8008f4e:	bb48      	cbnz	r0, 8008fa4 <_printf_float+0xcc>
 8008f50:	2200      	movs	r2, #0
 8008f52:	2300      	movs	r3, #0
 8008f54:	4640      	mov	r0, r8
 8008f56:	4649      	mov	r1, r9
 8008f58:	f7f7 fde0 	bl	8000b1c <__aeabi_dcmplt>
 8008f5c:	b110      	cbz	r0, 8008f64 <_printf_float+0x8c>
 8008f5e:	232d      	movs	r3, #45	; 0x2d
 8008f60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f64:	4a93      	ldr	r2, [pc, #588]	; (80091b4 <_printf_float+0x2dc>)
 8008f66:	4b94      	ldr	r3, [pc, #592]	; (80091b8 <_printf_float+0x2e0>)
 8008f68:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008f6c:	bf94      	ite	ls
 8008f6e:	4690      	movls	r8, r2
 8008f70:	4698      	movhi	r8, r3
 8008f72:	2303      	movs	r3, #3
 8008f74:	6123      	str	r3, [r4, #16]
 8008f76:	9b05      	ldr	r3, [sp, #20]
 8008f78:	f023 0304 	bic.w	r3, r3, #4
 8008f7c:	6023      	str	r3, [r4, #0]
 8008f7e:	f04f 0900 	mov.w	r9, #0
 8008f82:	9700      	str	r7, [sp, #0]
 8008f84:	4633      	mov	r3, r6
 8008f86:	aa0b      	add	r2, sp, #44	; 0x2c
 8008f88:	4621      	mov	r1, r4
 8008f8a:	4628      	mov	r0, r5
 8008f8c:	f000 f9da 	bl	8009344 <_printf_common>
 8008f90:	3001      	adds	r0, #1
 8008f92:	f040 8090 	bne.w	80090b6 <_printf_float+0x1de>
 8008f96:	f04f 30ff 	mov.w	r0, #4294967295
 8008f9a:	b00d      	add	sp, #52	; 0x34
 8008f9c:	ecbd 8b02 	vpop	{d8}
 8008fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fa4:	4642      	mov	r2, r8
 8008fa6:	464b      	mov	r3, r9
 8008fa8:	4640      	mov	r0, r8
 8008faa:	4649      	mov	r1, r9
 8008fac:	f7f7 fdde 	bl	8000b6c <__aeabi_dcmpun>
 8008fb0:	b140      	cbz	r0, 8008fc4 <_printf_float+0xec>
 8008fb2:	464b      	mov	r3, r9
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	bfbc      	itt	lt
 8008fb8:	232d      	movlt	r3, #45	; 0x2d
 8008fba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008fbe:	4a7f      	ldr	r2, [pc, #508]	; (80091bc <_printf_float+0x2e4>)
 8008fc0:	4b7f      	ldr	r3, [pc, #508]	; (80091c0 <_printf_float+0x2e8>)
 8008fc2:	e7d1      	b.n	8008f68 <_printf_float+0x90>
 8008fc4:	6863      	ldr	r3, [r4, #4]
 8008fc6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008fca:	9206      	str	r2, [sp, #24]
 8008fcc:	1c5a      	adds	r2, r3, #1
 8008fce:	d13f      	bne.n	8009050 <_printf_float+0x178>
 8008fd0:	2306      	movs	r3, #6
 8008fd2:	6063      	str	r3, [r4, #4]
 8008fd4:	9b05      	ldr	r3, [sp, #20]
 8008fd6:	6861      	ldr	r1, [r4, #4]
 8008fd8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008fdc:	2300      	movs	r3, #0
 8008fde:	9303      	str	r3, [sp, #12]
 8008fe0:	ab0a      	add	r3, sp, #40	; 0x28
 8008fe2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008fe6:	ab09      	add	r3, sp, #36	; 0x24
 8008fe8:	ec49 8b10 	vmov	d0, r8, r9
 8008fec:	9300      	str	r3, [sp, #0]
 8008fee:	6022      	str	r2, [r4, #0]
 8008ff0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008ff4:	4628      	mov	r0, r5
 8008ff6:	f7ff fecf 	bl	8008d98 <__cvt>
 8008ffa:	9b06      	ldr	r3, [sp, #24]
 8008ffc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ffe:	2b47      	cmp	r3, #71	; 0x47
 8009000:	4680      	mov	r8, r0
 8009002:	d108      	bne.n	8009016 <_printf_float+0x13e>
 8009004:	1cc8      	adds	r0, r1, #3
 8009006:	db02      	blt.n	800900e <_printf_float+0x136>
 8009008:	6863      	ldr	r3, [r4, #4]
 800900a:	4299      	cmp	r1, r3
 800900c:	dd41      	ble.n	8009092 <_printf_float+0x1ba>
 800900e:	f1ab 0302 	sub.w	r3, fp, #2
 8009012:	fa5f fb83 	uxtb.w	fp, r3
 8009016:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800901a:	d820      	bhi.n	800905e <_printf_float+0x186>
 800901c:	3901      	subs	r1, #1
 800901e:	465a      	mov	r2, fp
 8009020:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009024:	9109      	str	r1, [sp, #36]	; 0x24
 8009026:	f7ff ff19 	bl	8008e5c <__exponent>
 800902a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800902c:	1813      	adds	r3, r2, r0
 800902e:	2a01      	cmp	r2, #1
 8009030:	4681      	mov	r9, r0
 8009032:	6123      	str	r3, [r4, #16]
 8009034:	dc02      	bgt.n	800903c <_printf_float+0x164>
 8009036:	6822      	ldr	r2, [r4, #0]
 8009038:	07d2      	lsls	r2, r2, #31
 800903a:	d501      	bpl.n	8009040 <_printf_float+0x168>
 800903c:	3301      	adds	r3, #1
 800903e:	6123      	str	r3, [r4, #16]
 8009040:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009044:	2b00      	cmp	r3, #0
 8009046:	d09c      	beq.n	8008f82 <_printf_float+0xaa>
 8009048:	232d      	movs	r3, #45	; 0x2d
 800904a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800904e:	e798      	b.n	8008f82 <_printf_float+0xaa>
 8009050:	9a06      	ldr	r2, [sp, #24]
 8009052:	2a47      	cmp	r2, #71	; 0x47
 8009054:	d1be      	bne.n	8008fd4 <_printf_float+0xfc>
 8009056:	2b00      	cmp	r3, #0
 8009058:	d1bc      	bne.n	8008fd4 <_printf_float+0xfc>
 800905a:	2301      	movs	r3, #1
 800905c:	e7b9      	b.n	8008fd2 <_printf_float+0xfa>
 800905e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009062:	d118      	bne.n	8009096 <_printf_float+0x1be>
 8009064:	2900      	cmp	r1, #0
 8009066:	6863      	ldr	r3, [r4, #4]
 8009068:	dd0b      	ble.n	8009082 <_printf_float+0x1aa>
 800906a:	6121      	str	r1, [r4, #16]
 800906c:	b913      	cbnz	r3, 8009074 <_printf_float+0x19c>
 800906e:	6822      	ldr	r2, [r4, #0]
 8009070:	07d0      	lsls	r0, r2, #31
 8009072:	d502      	bpl.n	800907a <_printf_float+0x1a2>
 8009074:	3301      	adds	r3, #1
 8009076:	440b      	add	r3, r1
 8009078:	6123      	str	r3, [r4, #16]
 800907a:	65a1      	str	r1, [r4, #88]	; 0x58
 800907c:	f04f 0900 	mov.w	r9, #0
 8009080:	e7de      	b.n	8009040 <_printf_float+0x168>
 8009082:	b913      	cbnz	r3, 800908a <_printf_float+0x1b2>
 8009084:	6822      	ldr	r2, [r4, #0]
 8009086:	07d2      	lsls	r2, r2, #31
 8009088:	d501      	bpl.n	800908e <_printf_float+0x1b6>
 800908a:	3302      	adds	r3, #2
 800908c:	e7f4      	b.n	8009078 <_printf_float+0x1a0>
 800908e:	2301      	movs	r3, #1
 8009090:	e7f2      	b.n	8009078 <_printf_float+0x1a0>
 8009092:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009098:	4299      	cmp	r1, r3
 800909a:	db05      	blt.n	80090a8 <_printf_float+0x1d0>
 800909c:	6823      	ldr	r3, [r4, #0]
 800909e:	6121      	str	r1, [r4, #16]
 80090a0:	07d8      	lsls	r0, r3, #31
 80090a2:	d5ea      	bpl.n	800907a <_printf_float+0x1a2>
 80090a4:	1c4b      	adds	r3, r1, #1
 80090a6:	e7e7      	b.n	8009078 <_printf_float+0x1a0>
 80090a8:	2900      	cmp	r1, #0
 80090aa:	bfd4      	ite	le
 80090ac:	f1c1 0202 	rsble	r2, r1, #2
 80090b0:	2201      	movgt	r2, #1
 80090b2:	4413      	add	r3, r2
 80090b4:	e7e0      	b.n	8009078 <_printf_float+0x1a0>
 80090b6:	6823      	ldr	r3, [r4, #0]
 80090b8:	055a      	lsls	r2, r3, #21
 80090ba:	d407      	bmi.n	80090cc <_printf_float+0x1f4>
 80090bc:	6923      	ldr	r3, [r4, #16]
 80090be:	4642      	mov	r2, r8
 80090c0:	4631      	mov	r1, r6
 80090c2:	4628      	mov	r0, r5
 80090c4:	47b8      	blx	r7
 80090c6:	3001      	adds	r0, #1
 80090c8:	d12c      	bne.n	8009124 <_printf_float+0x24c>
 80090ca:	e764      	b.n	8008f96 <_printf_float+0xbe>
 80090cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80090d0:	f240 80e0 	bls.w	8009294 <_printf_float+0x3bc>
 80090d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80090d8:	2200      	movs	r2, #0
 80090da:	2300      	movs	r3, #0
 80090dc:	f7f7 fd14 	bl	8000b08 <__aeabi_dcmpeq>
 80090e0:	2800      	cmp	r0, #0
 80090e2:	d034      	beq.n	800914e <_printf_float+0x276>
 80090e4:	4a37      	ldr	r2, [pc, #220]	; (80091c4 <_printf_float+0x2ec>)
 80090e6:	2301      	movs	r3, #1
 80090e8:	4631      	mov	r1, r6
 80090ea:	4628      	mov	r0, r5
 80090ec:	47b8      	blx	r7
 80090ee:	3001      	adds	r0, #1
 80090f0:	f43f af51 	beq.w	8008f96 <_printf_float+0xbe>
 80090f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090f8:	429a      	cmp	r2, r3
 80090fa:	db02      	blt.n	8009102 <_printf_float+0x22a>
 80090fc:	6823      	ldr	r3, [r4, #0]
 80090fe:	07d8      	lsls	r0, r3, #31
 8009100:	d510      	bpl.n	8009124 <_printf_float+0x24c>
 8009102:	ee18 3a10 	vmov	r3, s16
 8009106:	4652      	mov	r2, sl
 8009108:	4631      	mov	r1, r6
 800910a:	4628      	mov	r0, r5
 800910c:	47b8      	blx	r7
 800910e:	3001      	adds	r0, #1
 8009110:	f43f af41 	beq.w	8008f96 <_printf_float+0xbe>
 8009114:	f04f 0800 	mov.w	r8, #0
 8009118:	f104 091a 	add.w	r9, r4, #26
 800911c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800911e:	3b01      	subs	r3, #1
 8009120:	4543      	cmp	r3, r8
 8009122:	dc09      	bgt.n	8009138 <_printf_float+0x260>
 8009124:	6823      	ldr	r3, [r4, #0]
 8009126:	079b      	lsls	r3, r3, #30
 8009128:	f100 8107 	bmi.w	800933a <_printf_float+0x462>
 800912c:	68e0      	ldr	r0, [r4, #12]
 800912e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009130:	4298      	cmp	r0, r3
 8009132:	bfb8      	it	lt
 8009134:	4618      	movlt	r0, r3
 8009136:	e730      	b.n	8008f9a <_printf_float+0xc2>
 8009138:	2301      	movs	r3, #1
 800913a:	464a      	mov	r2, r9
 800913c:	4631      	mov	r1, r6
 800913e:	4628      	mov	r0, r5
 8009140:	47b8      	blx	r7
 8009142:	3001      	adds	r0, #1
 8009144:	f43f af27 	beq.w	8008f96 <_printf_float+0xbe>
 8009148:	f108 0801 	add.w	r8, r8, #1
 800914c:	e7e6      	b.n	800911c <_printf_float+0x244>
 800914e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009150:	2b00      	cmp	r3, #0
 8009152:	dc39      	bgt.n	80091c8 <_printf_float+0x2f0>
 8009154:	4a1b      	ldr	r2, [pc, #108]	; (80091c4 <_printf_float+0x2ec>)
 8009156:	2301      	movs	r3, #1
 8009158:	4631      	mov	r1, r6
 800915a:	4628      	mov	r0, r5
 800915c:	47b8      	blx	r7
 800915e:	3001      	adds	r0, #1
 8009160:	f43f af19 	beq.w	8008f96 <_printf_float+0xbe>
 8009164:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009168:	4313      	orrs	r3, r2
 800916a:	d102      	bne.n	8009172 <_printf_float+0x29a>
 800916c:	6823      	ldr	r3, [r4, #0]
 800916e:	07d9      	lsls	r1, r3, #31
 8009170:	d5d8      	bpl.n	8009124 <_printf_float+0x24c>
 8009172:	ee18 3a10 	vmov	r3, s16
 8009176:	4652      	mov	r2, sl
 8009178:	4631      	mov	r1, r6
 800917a:	4628      	mov	r0, r5
 800917c:	47b8      	blx	r7
 800917e:	3001      	adds	r0, #1
 8009180:	f43f af09 	beq.w	8008f96 <_printf_float+0xbe>
 8009184:	f04f 0900 	mov.w	r9, #0
 8009188:	f104 0a1a 	add.w	sl, r4, #26
 800918c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800918e:	425b      	negs	r3, r3
 8009190:	454b      	cmp	r3, r9
 8009192:	dc01      	bgt.n	8009198 <_printf_float+0x2c0>
 8009194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009196:	e792      	b.n	80090be <_printf_float+0x1e6>
 8009198:	2301      	movs	r3, #1
 800919a:	4652      	mov	r2, sl
 800919c:	4631      	mov	r1, r6
 800919e:	4628      	mov	r0, r5
 80091a0:	47b8      	blx	r7
 80091a2:	3001      	adds	r0, #1
 80091a4:	f43f aef7 	beq.w	8008f96 <_printf_float+0xbe>
 80091a8:	f109 0901 	add.w	r9, r9, #1
 80091ac:	e7ee      	b.n	800918c <_printf_float+0x2b4>
 80091ae:	bf00      	nop
 80091b0:	7fefffff 	.word	0x7fefffff
 80091b4:	0800de44 	.word	0x0800de44
 80091b8:	0800de48 	.word	0x0800de48
 80091bc:	0800de4c 	.word	0x0800de4c
 80091c0:	0800de50 	.word	0x0800de50
 80091c4:	0800e1e0 	.word	0x0800e1e0
 80091c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80091cc:	429a      	cmp	r2, r3
 80091ce:	bfa8      	it	ge
 80091d0:	461a      	movge	r2, r3
 80091d2:	2a00      	cmp	r2, #0
 80091d4:	4691      	mov	r9, r2
 80091d6:	dc37      	bgt.n	8009248 <_printf_float+0x370>
 80091d8:	f04f 0b00 	mov.w	fp, #0
 80091dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80091e0:	f104 021a 	add.w	r2, r4, #26
 80091e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80091e6:	9305      	str	r3, [sp, #20]
 80091e8:	eba3 0309 	sub.w	r3, r3, r9
 80091ec:	455b      	cmp	r3, fp
 80091ee:	dc33      	bgt.n	8009258 <_printf_float+0x380>
 80091f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80091f4:	429a      	cmp	r2, r3
 80091f6:	db3b      	blt.n	8009270 <_printf_float+0x398>
 80091f8:	6823      	ldr	r3, [r4, #0]
 80091fa:	07da      	lsls	r2, r3, #31
 80091fc:	d438      	bmi.n	8009270 <_printf_float+0x398>
 80091fe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009202:	eba2 0903 	sub.w	r9, r2, r3
 8009206:	9b05      	ldr	r3, [sp, #20]
 8009208:	1ad2      	subs	r2, r2, r3
 800920a:	4591      	cmp	r9, r2
 800920c:	bfa8      	it	ge
 800920e:	4691      	movge	r9, r2
 8009210:	f1b9 0f00 	cmp.w	r9, #0
 8009214:	dc35      	bgt.n	8009282 <_printf_float+0x3aa>
 8009216:	f04f 0800 	mov.w	r8, #0
 800921a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800921e:	f104 0a1a 	add.w	sl, r4, #26
 8009222:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009226:	1a9b      	subs	r3, r3, r2
 8009228:	eba3 0309 	sub.w	r3, r3, r9
 800922c:	4543      	cmp	r3, r8
 800922e:	f77f af79 	ble.w	8009124 <_printf_float+0x24c>
 8009232:	2301      	movs	r3, #1
 8009234:	4652      	mov	r2, sl
 8009236:	4631      	mov	r1, r6
 8009238:	4628      	mov	r0, r5
 800923a:	47b8      	blx	r7
 800923c:	3001      	adds	r0, #1
 800923e:	f43f aeaa 	beq.w	8008f96 <_printf_float+0xbe>
 8009242:	f108 0801 	add.w	r8, r8, #1
 8009246:	e7ec      	b.n	8009222 <_printf_float+0x34a>
 8009248:	4613      	mov	r3, r2
 800924a:	4631      	mov	r1, r6
 800924c:	4642      	mov	r2, r8
 800924e:	4628      	mov	r0, r5
 8009250:	47b8      	blx	r7
 8009252:	3001      	adds	r0, #1
 8009254:	d1c0      	bne.n	80091d8 <_printf_float+0x300>
 8009256:	e69e      	b.n	8008f96 <_printf_float+0xbe>
 8009258:	2301      	movs	r3, #1
 800925a:	4631      	mov	r1, r6
 800925c:	4628      	mov	r0, r5
 800925e:	9205      	str	r2, [sp, #20]
 8009260:	47b8      	blx	r7
 8009262:	3001      	adds	r0, #1
 8009264:	f43f ae97 	beq.w	8008f96 <_printf_float+0xbe>
 8009268:	9a05      	ldr	r2, [sp, #20]
 800926a:	f10b 0b01 	add.w	fp, fp, #1
 800926e:	e7b9      	b.n	80091e4 <_printf_float+0x30c>
 8009270:	ee18 3a10 	vmov	r3, s16
 8009274:	4652      	mov	r2, sl
 8009276:	4631      	mov	r1, r6
 8009278:	4628      	mov	r0, r5
 800927a:	47b8      	blx	r7
 800927c:	3001      	adds	r0, #1
 800927e:	d1be      	bne.n	80091fe <_printf_float+0x326>
 8009280:	e689      	b.n	8008f96 <_printf_float+0xbe>
 8009282:	9a05      	ldr	r2, [sp, #20]
 8009284:	464b      	mov	r3, r9
 8009286:	4442      	add	r2, r8
 8009288:	4631      	mov	r1, r6
 800928a:	4628      	mov	r0, r5
 800928c:	47b8      	blx	r7
 800928e:	3001      	adds	r0, #1
 8009290:	d1c1      	bne.n	8009216 <_printf_float+0x33e>
 8009292:	e680      	b.n	8008f96 <_printf_float+0xbe>
 8009294:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009296:	2a01      	cmp	r2, #1
 8009298:	dc01      	bgt.n	800929e <_printf_float+0x3c6>
 800929a:	07db      	lsls	r3, r3, #31
 800929c:	d53a      	bpl.n	8009314 <_printf_float+0x43c>
 800929e:	2301      	movs	r3, #1
 80092a0:	4642      	mov	r2, r8
 80092a2:	4631      	mov	r1, r6
 80092a4:	4628      	mov	r0, r5
 80092a6:	47b8      	blx	r7
 80092a8:	3001      	adds	r0, #1
 80092aa:	f43f ae74 	beq.w	8008f96 <_printf_float+0xbe>
 80092ae:	ee18 3a10 	vmov	r3, s16
 80092b2:	4652      	mov	r2, sl
 80092b4:	4631      	mov	r1, r6
 80092b6:	4628      	mov	r0, r5
 80092b8:	47b8      	blx	r7
 80092ba:	3001      	adds	r0, #1
 80092bc:	f43f ae6b 	beq.w	8008f96 <_printf_float+0xbe>
 80092c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80092c4:	2200      	movs	r2, #0
 80092c6:	2300      	movs	r3, #0
 80092c8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80092cc:	f7f7 fc1c 	bl	8000b08 <__aeabi_dcmpeq>
 80092d0:	b9d8      	cbnz	r0, 800930a <_printf_float+0x432>
 80092d2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80092d6:	f108 0201 	add.w	r2, r8, #1
 80092da:	4631      	mov	r1, r6
 80092dc:	4628      	mov	r0, r5
 80092de:	47b8      	blx	r7
 80092e0:	3001      	adds	r0, #1
 80092e2:	d10e      	bne.n	8009302 <_printf_float+0x42a>
 80092e4:	e657      	b.n	8008f96 <_printf_float+0xbe>
 80092e6:	2301      	movs	r3, #1
 80092e8:	4652      	mov	r2, sl
 80092ea:	4631      	mov	r1, r6
 80092ec:	4628      	mov	r0, r5
 80092ee:	47b8      	blx	r7
 80092f0:	3001      	adds	r0, #1
 80092f2:	f43f ae50 	beq.w	8008f96 <_printf_float+0xbe>
 80092f6:	f108 0801 	add.w	r8, r8, #1
 80092fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092fc:	3b01      	subs	r3, #1
 80092fe:	4543      	cmp	r3, r8
 8009300:	dcf1      	bgt.n	80092e6 <_printf_float+0x40e>
 8009302:	464b      	mov	r3, r9
 8009304:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009308:	e6da      	b.n	80090c0 <_printf_float+0x1e8>
 800930a:	f04f 0800 	mov.w	r8, #0
 800930e:	f104 0a1a 	add.w	sl, r4, #26
 8009312:	e7f2      	b.n	80092fa <_printf_float+0x422>
 8009314:	2301      	movs	r3, #1
 8009316:	4642      	mov	r2, r8
 8009318:	e7df      	b.n	80092da <_printf_float+0x402>
 800931a:	2301      	movs	r3, #1
 800931c:	464a      	mov	r2, r9
 800931e:	4631      	mov	r1, r6
 8009320:	4628      	mov	r0, r5
 8009322:	47b8      	blx	r7
 8009324:	3001      	adds	r0, #1
 8009326:	f43f ae36 	beq.w	8008f96 <_printf_float+0xbe>
 800932a:	f108 0801 	add.w	r8, r8, #1
 800932e:	68e3      	ldr	r3, [r4, #12]
 8009330:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009332:	1a5b      	subs	r3, r3, r1
 8009334:	4543      	cmp	r3, r8
 8009336:	dcf0      	bgt.n	800931a <_printf_float+0x442>
 8009338:	e6f8      	b.n	800912c <_printf_float+0x254>
 800933a:	f04f 0800 	mov.w	r8, #0
 800933e:	f104 0919 	add.w	r9, r4, #25
 8009342:	e7f4      	b.n	800932e <_printf_float+0x456>

08009344 <_printf_common>:
 8009344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009348:	4616      	mov	r6, r2
 800934a:	4699      	mov	r9, r3
 800934c:	688a      	ldr	r2, [r1, #8]
 800934e:	690b      	ldr	r3, [r1, #16]
 8009350:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009354:	4293      	cmp	r3, r2
 8009356:	bfb8      	it	lt
 8009358:	4613      	movlt	r3, r2
 800935a:	6033      	str	r3, [r6, #0]
 800935c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009360:	4607      	mov	r7, r0
 8009362:	460c      	mov	r4, r1
 8009364:	b10a      	cbz	r2, 800936a <_printf_common+0x26>
 8009366:	3301      	adds	r3, #1
 8009368:	6033      	str	r3, [r6, #0]
 800936a:	6823      	ldr	r3, [r4, #0]
 800936c:	0699      	lsls	r1, r3, #26
 800936e:	bf42      	ittt	mi
 8009370:	6833      	ldrmi	r3, [r6, #0]
 8009372:	3302      	addmi	r3, #2
 8009374:	6033      	strmi	r3, [r6, #0]
 8009376:	6825      	ldr	r5, [r4, #0]
 8009378:	f015 0506 	ands.w	r5, r5, #6
 800937c:	d106      	bne.n	800938c <_printf_common+0x48>
 800937e:	f104 0a19 	add.w	sl, r4, #25
 8009382:	68e3      	ldr	r3, [r4, #12]
 8009384:	6832      	ldr	r2, [r6, #0]
 8009386:	1a9b      	subs	r3, r3, r2
 8009388:	42ab      	cmp	r3, r5
 800938a:	dc26      	bgt.n	80093da <_printf_common+0x96>
 800938c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009390:	1e13      	subs	r3, r2, #0
 8009392:	6822      	ldr	r2, [r4, #0]
 8009394:	bf18      	it	ne
 8009396:	2301      	movne	r3, #1
 8009398:	0692      	lsls	r2, r2, #26
 800939a:	d42b      	bmi.n	80093f4 <_printf_common+0xb0>
 800939c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093a0:	4649      	mov	r1, r9
 80093a2:	4638      	mov	r0, r7
 80093a4:	47c0      	blx	r8
 80093a6:	3001      	adds	r0, #1
 80093a8:	d01e      	beq.n	80093e8 <_printf_common+0xa4>
 80093aa:	6823      	ldr	r3, [r4, #0]
 80093ac:	6922      	ldr	r2, [r4, #16]
 80093ae:	f003 0306 	and.w	r3, r3, #6
 80093b2:	2b04      	cmp	r3, #4
 80093b4:	bf02      	ittt	eq
 80093b6:	68e5      	ldreq	r5, [r4, #12]
 80093b8:	6833      	ldreq	r3, [r6, #0]
 80093ba:	1aed      	subeq	r5, r5, r3
 80093bc:	68a3      	ldr	r3, [r4, #8]
 80093be:	bf0c      	ite	eq
 80093c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093c4:	2500      	movne	r5, #0
 80093c6:	4293      	cmp	r3, r2
 80093c8:	bfc4      	itt	gt
 80093ca:	1a9b      	subgt	r3, r3, r2
 80093cc:	18ed      	addgt	r5, r5, r3
 80093ce:	2600      	movs	r6, #0
 80093d0:	341a      	adds	r4, #26
 80093d2:	42b5      	cmp	r5, r6
 80093d4:	d11a      	bne.n	800940c <_printf_common+0xc8>
 80093d6:	2000      	movs	r0, #0
 80093d8:	e008      	b.n	80093ec <_printf_common+0xa8>
 80093da:	2301      	movs	r3, #1
 80093dc:	4652      	mov	r2, sl
 80093de:	4649      	mov	r1, r9
 80093e0:	4638      	mov	r0, r7
 80093e2:	47c0      	blx	r8
 80093e4:	3001      	adds	r0, #1
 80093e6:	d103      	bne.n	80093f0 <_printf_common+0xac>
 80093e8:	f04f 30ff 	mov.w	r0, #4294967295
 80093ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093f0:	3501      	adds	r5, #1
 80093f2:	e7c6      	b.n	8009382 <_printf_common+0x3e>
 80093f4:	18e1      	adds	r1, r4, r3
 80093f6:	1c5a      	adds	r2, r3, #1
 80093f8:	2030      	movs	r0, #48	; 0x30
 80093fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80093fe:	4422      	add	r2, r4
 8009400:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009404:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009408:	3302      	adds	r3, #2
 800940a:	e7c7      	b.n	800939c <_printf_common+0x58>
 800940c:	2301      	movs	r3, #1
 800940e:	4622      	mov	r2, r4
 8009410:	4649      	mov	r1, r9
 8009412:	4638      	mov	r0, r7
 8009414:	47c0      	blx	r8
 8009416:	3001      	adds	r0, #1
 8009418:	d0e6      	beq.n	80093e8 <_printf_common+0xa4>
 800941a:	3601      	adds	r6, #1
 800941c:	e7d9      	b.n	80093d2 <_printf_common+0x8e>
	...

08009420 <_printf_i>:
 8009420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009424:	7e0f      	ldrb	r7, [r1, #24]
 8009426:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009428:	2f78      	cmp	r7, #120	; 0x78
 800942a:	4691      	mov	r9, r2
 800942c:	4680      	mov	r8, r0
 800942e:	460c      	mov	r4, r1
 8009430:	469a      	mov	sl, r3
 8009432:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009436:	d807      	bhi.n	8009448 <_printf_i+0x28>
 8009438:	2f62      	cmp	r7, #98	; 0x62
 800943a:	d80a      	bhi.n	8009452 <_printf_i+0x32>
 800943c:	2f00      	cmp	r7, #0
 800943e:	f000 80d4 	beq.w	80095ea <_printf_i+0x1ca>
 8009442:	2f58      	cmp	r7, #88	; 0x58
 8009444:	f000 80c0 	beq.w	80095c8 <_printf_i+0x1a8>
 8009448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800944c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009450:	e03a      	b.n	80094c8 <_printf_i+0xa8>
 8009452:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009456:	2b15      	cmp	r3, #21
 8009458:	d8f6      	bhi.n	8009448 <_printf_i+0x28>
 800945a:	a101      	add	r1, pc, #4	; (adr r1, 8009460 <_printf_i+0x40>)
 800945c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009460:	080094b9 	.word	0x080094b9
 8009464:	080094cd 	.word	0x080094cd
 8009468:	08009449 	.word	0x08009449
 800946c:	08009449 	.word	0x08009449
 8009470:	08009449 	.word	0x08009449
 8009474:	08009449 	.word	0x08009449
 8009478:	080094cd 	.word	0x080094cd
 800947c:	08009449 	.word	0x08009449
 8009480:	08009449 	.word	0x08009449
 8009484:	08009449 	.word	0x08009449
 8009488:	08009449 	.word	0x08009449
 800948c:	080095d1 	.word	0x080095d1
 8009490:	080094f9 	.word	0x080094f9
 8009494:	0800958b 	.word	0x0800958b
 8009498:	08009449 	.word	0x08009449
 800949c:	08009449 	.word	0x08009449
 80094a0:	080095f3 	.word	0x080095f3
 80094a4:	08009449 	.word	0x08009449
 80094a8:	080094f9 	.word	0x080094f9
 80094ac:	08009449 	.word	0x08009449
 80094b0:	08009449 	.word	0x08009449
 80094b4:	08009593 	.word	0x08009593
 80094b8:	682b      	ldr	r3, [r5, #0]
 80094ba:	1d1a      	adds	r2, r3, #4
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	602a      	str	r2, [r5, #0]
 80094c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094c8:	2301      	movs	r3, #1
 80094ca:	e09f      	b.n	800960c <_printf_i+0x1ec>
 80094cc:	6820      	ldr	r0, [r4, #0]
 80094ce:	682b      	ldr	r3, [r5, #0]
 80094d0:	0607      	lsls	r7, r0, #24
 80094d2:	f103 0104 	add.w	r1, r3, #4
 80094d6:	6029      	str	r1, [r5, #0]
 80094d8:	d501      	bpl.n	80094de <_printf_i+0xbe>
 80094da:	681e      	ldr	r6, [r3, #0]
 80094dc:	e003      	b.n	80094e6 <_printf_i+0xc6>
 80094de:	0646      	lsls	r6, r0, #25
 80094e0:	d5fb      	bpl.n	80094da <_printf_i+0xba>
 80094e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80094e6:	2e00      	cmp	r6, #0
 80094e8:	da03      	bge.n	80094f2 <_printf_i+0xd2>
 80094ea:	232d      	movs	r3, #45	; 0x2d
 80094ec:	4276      	negs	r6, r6
 80094ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094f2:	485a      	ldr	r0, [pc, #360]	; (800965c <_printf_i+0x23c>)
 80094f4:	230a      	movs	r3, #10
 80094f6:	e012      	b.n	800951e <_printf_i+0xfe>
 80094f8:	682b      	ldr	r3, [r5, #0]
 80094fa:	6820      	ldr	r0, [r4, #0]
 80094fc:	1d19      	adds	r1, r3, #4
 80094fe:	6029      	str	r1, [r5, #0]
 8009500:	0605      	lsls	r5, r0, #24
 8009502:	d501      	bpl.n	8009508 <_printf_i+0xe8>
 8009504:	681e      	ldr	r6, [r3, #0]
 8009506:	e002      	b.n	800950e <_printf_i+0xee>
 8009508:	0641      	lsls	r1, r0, #25
 800950a:	d5fb      	bpl.n	8009504 <_printf_i+0xe4>
 800950c:	881e      	ldrh	r6, [r3, #0]
 800950e:	4853      	ldr	r0, [pc, #332]	; (800965c <_printf_i+0x23c>)
 8009510:	2f6f      	cmp	r7, #111	; 0x6f
 8009512:	bf0c      	ite	eq
 8009514:	2308      	moveq	r3, #8
 8009516:	230a      	movne	r3, #10
 8009518:	2100      	movs	r1, #0
 800951a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800951e:	6865      	ldr	r5, [r4, #4]
 8009520:	60a5      	str	r5, [r4, #8]
 8009522:	2d00      	cmp	r5, #0
 8009524:	bfa2      	ittt	ge
 8009526:	6821      	ldrge	r1, [r4, #0]
 8009528:	f021 0104 	bicge.w	r1, r1, #4
 800952c:	6021      	strge	r1, [r4, #0]
 800952e:	b90e      	cbnz	r6, 8009534 <_printf_i+0x114>
 8009530:	2d00      	cmp	r5, #0
 8009532:	d04b      	beq.n	80095cc <_printf_i+0x1ac>
 8009534:	4615      	mov	r5, r2
 8009536:	fbb6 f1f3 	udiv	r1, r6, r3
 800953a:	fb03 6711 	mls	r7, r3, r1, r6
 800953e:	5dc7      	ldrb	r7, [r0, r7]
 8009540:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009544:	4637      	mov	r7, r6
 8009546:	42bb      	cmp	r3, r7
 8009548:	460e      	mov	r6, r1
 800954a:	d9f4      	bls.n	8009536 <_printf_i+0x116>
 800954c:	2b08      	cmp	r3, #8
 800954e:	d10b      	bne.n	8009568 <_printf_i+0x148>
 8009550:	6823      	ldr	r3, [r4, #0]
 8009552:	07de      	lsls	r6, r3, #31
 8009554:	d508      	bpl.n	8009568 <_printf_i+0x148>
 8009556:	6923      	ldr	r3, [r4, #16]
 8009558:	6861      	ldr	r1, [r4, #4]
 800955a:	4299      	cmp	r1, r3
 800955c:	bfde      	ittt	le
 800955e:	2330      	movle	r3, #48	; 0x30
 8009560:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009564:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009568:	1b52      	subs	r2, r2, r5
 800956a:	6122      	str	r2, [r4, #16]
 800956c:	f8cd a000 	str.w	sl, [sp]
 8009570:	464b      	mov	r3, r9
 8009572:	aa03      	add	r2, sp, #12
 8009574:	4621      	mov	r1, r4
 8009576:	4640      	mov	r0, r8
 8009578:	f7ff fee4 	bl	8009344 <_printf_common>
 800957c:	3001      	adds	r0, #1
 800957e:	d14a      	bne.n	8009616 <_printf_i+0x1f6>
 8009580:	f04f 30ff 	mov.w	r0, #4294967295
 8009584:	b004      	add	sp, #16
 8009586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800958a:	6823      	ldr	r3, [r4, #0]
 800958c:	f043 0320 	orr.w	r3, r3, #32
 8009590:	6023      	str	r3, [r4, #0]
 8009592:	4833      	ldr	r0, [pc, #204]	; (8009660 <_printf_i+0x240>)
 8009594:	2778      	movs	r7, #120	; 0x78
 8009596:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800959a:	6823      	ldr	r3, [r4, #0]
 800959c:	6829      	ldr	r1, [r5, #0]
 800959e:	061f      	lsls	r7, r3, #24
 80095a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80095a4:	d402      	bmi.n	80095ac <_printf_i+0x18c>
 80095a6:	065f      	lsls	r7, r3, #25
 80095a8:	bf48      	it	mi
 80095aa:	b2b6      	uxthmi	r6, r6
 80095ac:	07df      	lsls	r7, r3, #31
 80095ae:	bf48      	it	mi
 80095b0:	f043 0320 	orrmi.w	r3, r3, #32
 80095b4:	6029      	str	r1, [r5, #0]
 80095b6:	bf48      	it	mi
 80095b8:	6023      	strmi	r3, [r4, #0]
 80095ba:	b91e      	cbnz	r6, 80095c4 <_printf_i+0x1a4>
 80095bc:	6823      	ldr	r3, [r4, #0]
 80095be:	f023 0320 	bic.w	r3, r3, #32
 80095c2:	6023      	str	r3, [r4, #0]
 80095c4:	2310      	movs	r3, #16
 80095c6:	e7a7      	b.n	8009518 <_printf_i+0xf8>
 80095c8:	4824      	ldr	r0, [pc, #144]	; (800965c <_printf_i+0x23c>)
 80095ca:	e7e4      	b.n	8009596 <_printf_i+0x176>
 80095cc:	4615      	mov	r5, r2
 80095ce:	e7bd      	b.n	800954c <_printf_i+0x12c>
 80095d0:	682b      	ldr	r3, [r5, #0]
 80095d2:	6826      	ldr	r6, [r4, #0]
 80095d4:	6961      	ldr	r1, [r4, #20]
 80095d6:	1d18      	adds	r0, r3, #4
 80095d8:	6028      	str	r0, [r5, #0]
 80095da:	0635      	lsls	r5, r6, #24
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	d501      	bpl.n	80095e4 <_printf_i+0x1c4>
 80095e0:	6019      	str	r1, [r3, #0]
 80095e2:	e002      	b.n	80095ea <_printf_i+0x1ca>
 80095e4:	0670      	lsls	r0, r6, #25
 80095e6:	d5fb      	bpl.n	80095e0 <_printf_i+0x1c0>
 80095e8:	8019      	strh	r1, [r3, #0]
 80095ea:	2300      	movs	r3, #0
 80095ec:	6123      	str	r3, [r4, #16]
 80095ee:	4615      	mov	r5, r2
 80095f0:	e7bc      	b.n	800956c <_printf_i+0x14c>
 80095f2:	682b      	ldr	r3, [r5, #0]
 80095f4:	1d1a      	adds	r2, r3, #4
 80095f6:	602a      	str	r2, [r5, #0]
 80095f8:	681d      	ldr	r5, [r3, #0]
 80095fa:	6862      	ldr	r2, [r4, #4]
 80095fc:	2100      	movs	r1, #0
 80095fe:	4628      	mov	r0, r5
 8009600:	f7f6 fe06 	bl	8000210 <memchr>
 8009604:	b108      	cbz	r0, 800960a <_printf_i+0x1ea>
 8009606:	1b40      	subs	r0, r0, r5
 8009608:	6060      	str	r0, [r4, #4]
 800960a:	6863      	ldr	r3, [r4, #4]
 800960c:	6123      	str	r3, [r4, #16]
 800960e:	2300      	movs	r3, #0
 8009610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009614:	e7aa      	b.n	800956c <_printf_i+0x14c>
 8009616:	6923      	ldr	r3, [r4, #16]
 8009618:	462a      	mov	r2, r5
 800961a:	4649      	mov	r1, r9
 800961c:	4640      	mov	r0, r8
 800961e:	47d0      	blx	sl
 8009620:	3001      	adds	r0, #1
 8009622:	d0ad      	beq.n	8009580 <_printf_i+0x160>
 8009624:	6823      	ldr	r3, [r4, #0]
 8009626:	079b      	lsls	r3, r3, #30
 8009628:	d413      	bmi.n	8009652 <_printf_i+0x232>
 800962a:	68e0      	ldr	r0, [r4, #12]
 800962c:	9b03      	ldr	r3, [sp, #12]
 800962e:	4298      	cmp	r0, r3
 8009630:	bfb8      	it	lt
 8009632:	4618      	movlt	r0, r3
 8009634:	e7a6      	b.n	8009584 <_printf_i+0x164>
 8009636:	2301      	movs	r3, #1
 8009638:	4632      	mov	r2, r6
 800963a:	4649      	mov	r1, r9
 800963c:	4640      	mov	r0, r8
 800963e:	47d0      	blx	sl
 8009640:	3001      	adds	r0, #1
 8009642:	d09d      	beq.n	8009580 <_printf_i+0x160>
 8009644:	3501      	adds	r5, #1
 8009646:	68e3      	ldr	r3, [r4, #12]
 8009648:	9903      	ldr	r1, [sp, #12]
 800964a:	1a5b      	subs	r3, r3, r1
 800964c:	42ab      	cmp	r3, r5
 800964e:	dcf2      	bgt.n	8009636 <_printf_i+0x216>
 8009650:	e7eb      	b.n	800962a <_printf_i+0x20a>
 8009652:	2500      	movs	r5, #0
 8009654:	f104 0619 	add.w	r6, r4, #25
 8009658:	e7f5      	b.n	8009646 <_printf_i+0x226>
 800965a:	bf00      	nop
 800965c:	0800de54 	.word	0x0800de54
 8009660:	0800de65 	.word	0x0800de65

08009664 <_scanf_float>:
 8009664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009668:	b087      	sub	sp, #28
 800966a:	4617      	mov	r7, r2
 800966c:	9303      	str	r3, [sp, #12]
 800966e:	688b      	ldr	r3, [r1, #8]
 8009670:	1e5a      	subs	r2, r3, #1
 8009672:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009676:	bf83      	ittte	hi
 8009678:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800967c:	195b      	addhi	r3, r3, r5
 800967e:	9302      	strhi	r3, [sp, #8]
 8009680:	2300      	movls	r3, #0
 8009682:	bf86      	itte	hi
 8009684:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009688:	608b      	strhi	r3, [r1, #8]
 800968a:	9302      	strls	r3, [sp, #8]
 800968c:	680b      	ldr	r3, [r1, #0]
 800968e:	468b      	mov	fp, r1
 8009690:	2500      	movs	r5, #0
 8009692:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009696:	f84b 3b1c 	str.w	r3, [fp], #28
 800969a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800969e:	4680      	mov	r8, r0
 80096a0:	460c      	mov	r4, r1
 80096a2:	465e      	mov	r6, fp
 80096a4:	46aa      	mov	sl, r5
 80096a6:	46a9      	mov	r9, r5
 80096a8:	9501      	str	r5, [sp, #4]
 80096aa:	68a2      	ldr	r2, [r4, #8]
 80096ac:	b152      	cbz	r2, 80096c4 <_scanf_float+0x60>
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	2b4e      	cmp	r3, #78	; 0x4e
 80096b4:	d864      	bhi.n	8009780 <_scanf_float+0x11c>
 80096b6:	2b40      	cmp	r3, #64	; 0x40
 80096b8:	d83c      	bhi.n	8009734 <_scanf_float+0xd0>
 80096ba:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80096be:	b2c8      	uxtb	r0, r1
 80096c0:	280e      	cmp	r0, #14
 80096c2:	d93a      	bls.n	800973a <_scanf_float+0xd6>
 80096c4:	f1b9 0f00 	cmp.w	r9, #0
 80096c8:	d003      	beq.n	80096d2 <_scanf_float+0x6e>
 80096ca:	6823      	ldr	r3, [r4, #0]
 80096cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096d0:	6023      	str	r3, [r4, #0]
 80096d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80096d6:	f1ba 0f01 	cmp.w	sl, #1
 80096da:	f200 8113 	bhi.w	8009904 <_scanf_float+0x2a0>
 80096de:	455e      	cmp	r6, fp
 80096e0:	f200 8105 	bhi.w	80098ee <_scanf_float+0x28a>
 80096e4:	2501      	movs	r5, #1
 80096e6:	4628      	mov	r0, r5
 80096e8:	b007      	add	sp, #28
 80096ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ee:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80096f2:	2a0d      	cmp	r2, #13
 80096f4:	d8e6      	bhi.n	80096c4 <_scanf_float+0x60>
 80096f6:	a101      	add	r1, pc, #4	; (adr r1, 80096fc <_scanf_float+0x98>)
 80096f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80096fc:	0800983b 	.word	0x0800983b
 8009700:	080096c5 	.word	0x080096c5
 8009704:	080096c5 	.word	0x080096c5
 8009708:	080096c5 	.word	0x080096c5
 800970c:	0800989b 	.word	0x0800989b
 8009710:	08009873 	.word	0x08009873
 8009714:	080096c5 	.word	0x080096c5
 8009718:	080096c5 	.word	0x080096c5
 800971c:	08009849 	.word	0x08009849
 8009720:	080096c5 	.word	0x080096c5
 8009724:	080096c5 	.word	0x080096c5
 8009728:	080096c5 	.word	0x080096c5
 800972c:	080096c5 	.word	0x080096c5
 8009730:	08009801 	.word	0x08009801
 8009734:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009738:	e7db      	b.n	80096f2 <_scanf_float+0x8e>
 800973a:	290e      	cmp	r1, #14
 800973c:	d8c2      	bhi.n	80096c4 <_scanf_float+0x60>
 800973e:	a001      	add	r0, pc, #4	; (adr r0, 8009744 <_scanf_float+0xe0>)
 8009740:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009744:	080097f3 	.word	0x080097f3
 8009748:	080096c5 	.word	0x080096c5
 800974c:	080097f3 	.word	0x080097f3
 8009750:	08009887 	.word	0x08009887
 8009754:	080096c5 	.word	0x080096c5
 8009758:	080097a1 	.word	0x080097a1
 800975c:	080097dd 	.word	0x080097dd
 8009760:	080097dd 	.word	0x080097dd
 8009764:	080097dd 	.word	0x080097dd
 8009768:	080097dd 	.word	0x080097dd
 800976c:	080097dd 	.word	0x080097dd
 8009770:	080097dd 	.word	0x080097dd
 8009774:	080097dd 	.word	0x080097dd
 8009778:	080097dd 	.word	0x080097dd
 800977c:	080097dd 	.word	0x080097dd
 8009780:	2b6e      	cmp	r3, #110	; 0x6e
 8009782:	d809      	bhi.n	8009798 <_scanf_float+0x134>
 8009784:	2b60      	cmp	r3, #96	; 0x60
 8009786:	d8b2      	bhi.n	80096ee <_scanf_float+0x8a>
 8009788:	2b54      	cmp	r3, #84	; 0x54
 800978a:	d077      	beq.n	800987c <_scanf_float+0x218>
 800978c:	2b59      	cmp	r3, #89	; 0x59
 800978e:	d199      	bne.n	80096c4 <_scanf_float+0x60>
 8009790:	2d07      	cmp	r5, #7
 8009792:	d197      	bne.n	80096c4 <_scanf_float+0x60>
 8009794:	2508      	movs	r5, #8
 8009796:	e029      	b.n	80097ec <_scanf_float+0x188>
 8009798:	2b74      	cmp	r3, #116	; 0x74
 800979a:	d06f      	beq.n	800987c <_scanf_float+0x218>
 800979c:	2b79      	cmp	r3, #121	; 0x79
 800979e:	e7f6      	b.n	800978e <_scanf_float+0x12a>
 80097a0:	6821      	ldr	r1, [r4, #0]
 80097a2:	05c8      	lsls	r0, r1, #23
 80097a4:	d51a      	bpl.n	80097dc <_scanf_float+0x178>
 80097a6:	9b02      	ldr	r3, [sp, #8]
 80097a8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80097ac:	6021      	str	r1, [r4, #0]
 80097ae:	f109 0901 	add.w	r9, r9, #1
 80097b2:	b11b      	cbz	r3, 80097bc <_scanf_float+0x158>
 80097b4:	3b01      	subs	r3, #1
 80097b6:	3201      	adds	r2, #1
 80097b8:	9302      	str	r3, [sp, #8]
 80097ba:	60a2      	str	r2, [r4, #8]
 80097bc:	68a3      	ldr	r3, [r4, #8]
 80097be:	3b01      	subs	r3, #1
 80097c0:	60a3      	str	r3, [r4, #8]
 80097c2:	6923      	ldr	r3, [r4, #16]
 80097c4:	3301      	adds	r3, #1
 80097c6:	6123      	str	r3, [r4, #16]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	3b01      	subs	r3, #1
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	607b      	str	r3, [r7, #4]
 80097d0:	f340 8084 	ble.w	80098dc <_scanf_float+0x278>
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	3301      	adds	r3, #1
 80097d8:	603b      	str	r3, [r7, #0]
 80097da:	e766      	b.n	80096aa <_scanf_float+0x46>
 80097dc:	eb1a 0f05 	cmn.w	sl, r5
 80097e0:	f47f af70 	bne.w	80096c4 <_scanf_float+0x60>
 80097e4:	6822      	ldr	r2, [r4, #0]
 80097e6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80097ea:	6022      	str	r2, [r4, #0]
 80097ec:	f806 3b01 	strb.w	r3, [r6], #1
 80097f0:	e7e4      	b.n	80097bc <_scanf_float+0x158>
 80097f2:	6822      	ldr	r2, [r4, #0]
 80097f4:	0610      	lsls	r0, r2, #24
 80097f6:	f57f af65 	bpl.w	80096c4 <_scanf_float+0x60>
 80097fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80097fe:	e7f4      	b.n	80097ea <_scanf_float+0x186>
 8009800:	f1ba 0f00 	cmp.w	sl, #0
 8009804:	d10e      	bne.n	8009824 <_scanf_float+0x1c0>
 8009806:	f1b9 0f00 	cmp.w	r9, #0
 800980a:	d10e      	bne.n	800982a <_scanf_float+0x1c6>
 800980c:	6822      	ldr	r2, [r4, #0]
 800980e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009812:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009816:	d108      	bne.n	800982a <_scanf_float+0x1c6>
 8009818:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800981c:	6022      	str	r2, [r4, #0]
 800981e:	f04f 0a01 	mov.w	sl, #1
 8009822:	e7e3      	b.n	80097ec <_scanf_float+0x188>
 8009824:	f1ba 0f02 	cmp.w	sl, #2
 8009828:	d055      	beq.n	80098d6 <_scanf_float+0x272>
 800982a:	2d01      	cmp	r5, #1
 800982c:	d002      	beq.n	8009834 <_scanf_float+0x1d0>
 800982e:	2d04      	cmp	r5, #4
 8009830:	f47f af48 	bne.w	80096c4 <_scanf_float+0x60>
 8009834:	3501      	adds	r5, #1
 8009836:	b2ed      	uxtb	r5, r5
 8009838:	e7d8      	b.n	80097ec <_scanf_float+0x188>
 800983a:	f1ba 0f01 	cmp.w	sl, #1
 800983e:	f47f af41 	bne.w	80096c4 <_scanf_float+0x60>
 8009842:	f04f 0a02 	mov.w	sl, #2
 8009846:	e7d1      	b.n	80097ec <_scanf_float+0x188>
 8009848:	b97d      	cbnz	r5, 800986a <_scanf_float+0x206>
 800984a:	f1b9 0f00 	cmp.w	r9, #0
 800984e:	f47f af3c 	bne.w	80096ca <_scanf_float+0x66>
 8009852:	6822      	ldr	r2, [r4, #0]
 8009854:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009858:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800985c:	f47f af39 	bne.w	80096d2 <_scanf_float+0x6e>
 8009860:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009864:	6022      	str	r2, [r4, #0]
 8009866:	2501      	movs	r5, #1
 8009868:	e7c0      	b.n	80097ec <_scanf_float+0x188>
 800986a:	2d03      	cmp	r5, #3
 800986c:	d0e2      	beq.n	8009834 <_scanf_float+0x1d0>
 800986e:	2d05      	cmp	r5, #5
 8009870:	e7de      	b.n	8009830 <_scanf_float+0x1cc>
 8009872:	2d02      	cmp	r5, #2
 8009874:	f47f af26 	bne.w	80096c4 <_scanf_float+0x60>
 8009878:	2503      	movs	r5, #3
 800987a:	e7b7      	b.n	80097ec <_scanf_float+0x188>
 800987c:	2d06      	cmp	r5, #6
 800987e:	f47f af21 	bne.w	80096c4 <_scanf_float+0x60>
 8009882:	2507      	movs	r5, #7
 8009884:	e7b2      	b.n	80097ec <_scanf_float+0x188>
 8009886:	6822      	ldr	r2, [r4, #0]
 8009888:	0591      	lsls	r1, r2, #22
 800988a:	f57f af1b 	bpl.w	80096c4 <_scanf_float+0x60>
 800988e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009892:	6022      	str	r2, [r4, #0]
 8009894:	f8cd 9004 	str.w	r9, [sp, #4]
 8009898:	e7a8      	b.n	80097ec <_scanf_float+0x188>
 800989a:	6822      	ldr	r2, [r4, #0]
 800989c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80098a0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80098a4:	d006      	beq.n	80098b4 <_scanf_float+0x250>
 80098a6:	0550      	lsls	r0, r2, #21
 80098a8:	f57f af0c 	bpl.w	80096c4 <_scanf_float+0x60>
 80098ac:	f1b9 0f00 	cmp.w	r9, #0
 80098b0:	f43f af0f 	beq.w	80096d2 <_scanf_float+0x6e>
 80098b4:	0591      	lsls	r1, r2, #22
 80098b6:	bf58      	it	pl
 80098b8:	9901      	ldrpl	r1, [sp, #4]
 80098ba:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80098be:	bf58      	it	pl
 80098c0:	eba9 0101 	subpl.w	r1, r9, r1
 80098c4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80098c8:	bf58      	it	pl
 80098ca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80098ce:	6022      	str	r2, [r4, #0]
 80098d0:	f04f 0900 	mov.w	r9, #0
 80098d4:	e78a      	b.n	80097ec <_scanf_float+0x188>
 80098d6:	f04f 0a03 	mov.w	sl, #3
 80098da:	e787      	b.n	80097ec <_scanf_float+0x188>
 80098dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80098e0:	4639      	mov	r1, r7
 80098e2:	4640      	mov	r0, r8
 80098e4:	4798      	blx	r3
 80098e6:	2800      	cmp	r0, #0
 80098e8:	f43f aedf 	beq.w	80096aa <_scanf_float+0x46>
 80098ec:	e6ea      	b.n	80096c4 <_scanf_float+0x60>
 80098ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80098f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80098f6:	463a      	mov	r2, r7
 80098f8:	4640      	mov	r0, r8
 80098fa:	4798      	blx	r3
 80098fc:	6923      	ldr	r3, [r4, #16]
 80098fe:	3b01      	subs	r3, #1
 8009900:	6123      	str	r3, [r4, #16]
 8009902:	e6ec      	b.n	80096de <_scanf_float+0x7a>
 8009904:	1e6b      	subs	r3, r5, #1
 8009906:	2b06      	cmp	r3, #6
 8009908:	d825      	bhi.n	8009956 <_scanf_float+0x2f2>
 800990a:	2d02      	cmp	r5, #2
 800990c:	d836      	bhi.n	800997c <_scanf_float+0x318>
 800990e:	455e      	cmp	r6, fp
 8009910:	f67f aee8 	bls.w	80096e4 <_scanf_float+0x80>
 8009914:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009918:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800991c:	463a      	mov	r2, r7
 800991e:	4640      	mov	r0, r8
 8009920:	4798      	blx	r3
 8009922:	6923      	ldr	r3, [r4, #16]
 8009924:	3b01      	subs	r3, #1
 8009926:	6123      	str	r3, [r4, #16]
 8009928:	e7f1      	b.n	800990e <_scanf_float+0x2aa>
 800992a:	9802      	ldr	r0, [sp, #8]
 800992c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009930:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009934:	9002      	str	r0, [sp, #8]
 8009936:	463a      	mov	r2, r7
 8009938:	4640      	mov	r0, r8
 800993a:	4798      	blx	r3
 800993c:	6923      	ldr	r3, [r4, #16]
 800993e:	3b01      	subs	r3, #1
 8009940:	6123      	str	r3, [r4, #16]
 8009942:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009946:	fa5f fa8a 	uxtb.w	sl, sl
 800994a:	f1ba 0f02 	cmp.w	sl, #2
 800994e:	d1ec      	bne.n	800992a <_scanf_float+0x2c6>
 8009950:	3d03      	subs	r5, #3
 8009952:	b2ed      	uxtb	r5, r5
 8009954:	1b76      	subs	r6, r6, r5
 8009956:	6823      	ldr	r3, [r4, #0]
 8009958:	05da      	lsls	r2, r3, #23
 800995a:	d52f      	bpl.n	80099bc <_scanf_float+0x358>
 800995c:	055b      	lsls	r3, r3, #21
 800995e:	d510      	bpl.n	8009982 <_scanf_float+0x31e>
 8009960:	455e      	cmp	r6, fp
 8009962:	f67f aebf 	bls.w	80096e4 <_scanf_float+0x80>
 8009966:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800996a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800996e:	463a      	mov	r2, r7
 8009970:	4640      	mov	r0, r8
 8009972:	4798      	blx	r3
 8009974:	6923      	ldr	r3, [r4, #16]
 8009976:	3b01      	subs	r3, #1
 8009978:	6123      	str	r3, [r4, #16]
 800997a:	e7f1      	b.n	8009960 <_scanf_float+0x2fc>
 800997c:	46aa      	mov	sl, r5
 800997e:	9602      	str	r6, [sp, #8]
 8009980:	e7df      	b.n	8009942 <_scanf_float+0x2de>
 8009982:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009986:	6923      	ldr	r3, [r4, #16]
 8009988:	2965      	cmp	r1, #101	; 0x65
 800998a:	f103 33ff 	add.w	r3, r3, #4294967295
 800998e:	f106 35ff 	add.w	r5, r6, #4294967295
 8009992:	6123      	str	r3, [r4, #16]
 8009994:	d00c      	beq.n	80099b0 <_scanf_float+0x34c>
 8009996:	2945      	cmp	r1, #69	; 0x45
 8009998:	d00a      	beq.n	80099b0 <_scanf_float+0x34c>
 800999a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800999e:	463a      	mov	r2, r7
 80099a0:	4640      	mov	r0, r8
 80099a2:	4798      	blx	r3
 80099a4:	6923      	ldr	r3, [r4, #16]
 80099a6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80099aa:	3b01      	subs	r3, #1
 80099ac:	1eb5      	subs	r5, r6, #2
 80099ae:	6123      	str	r3, [r4, #16]
 80099b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80099b4:	463a      	mov	r2, r7
 80099b6:	4640      	mov	r0, r8
 80099b8:	4798      	blx	r3
 80099ba:	462e      	mov	r6, r5
 80099bc:	6825      	ldr	r5, [r4, #0]
 80099be:	f015 0510 	ands.w	r5, r5, #16
 80099c2:	d158      	bne.n	8009a76 <_scanf_float+0x412>
 80099c4:	7035      	strb	r5, [r6, #0]
 80099c6:	6823      	ldr	r3, [r4, #0]
 80099c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80099cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099d0:	d11c      	bne.n	8009a0c <_scanf_float+0x3a8>
 80099d2:	9b01      	ldr	r3, [sp, #4]
 80099d4:	454b      	cmp	r3, r9
 80099d6:	eba3 0209 	sub.w	r2, r3, r9
 80099da:	d124      	bne.n	8009a26 <_scanf_float+0x3c2>
 80099dc:	2200      	movs	r2, #0
 80099de:	4659      	mov	r1, fp
 80099e0:	4640      	mov	r0, r8
 80099e2:	f002 fc5d 	bl	800c2a0 <_strtod_r>
 80099e6:	9b03      	ldr	r3, [sp, #12]
 80099e8:	6821      	ldr	r1, [r4, #0]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f011 0f02 	tst.w	r1, #2
 80099f0:	ec57 6b10 	vmov	r6, r7, d0
 80099f4:	f103 0204 	add.w	r2, r3, #4
 80099f8:	d020      	beq.n	8009a3c <_scanf_float+0x3d8>
 80099fa:	9903      	ldr	r1, [sp, #12]
 80099fc:	600a      	str	r2, [r1, #0]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	e9c3 6700 	strd	r6, r7, [r3]
 8009a04:	68e3      	ldr	r3, [r4, #12]
 8009a06:	3301      	adds	r3, #1
 8009a08:	60e3      	str	r3, [r4, #12]
 8009a0a:	e66c      	b.n	80096e6 <_scanf_float+0x82>
 8009a0c:	9b04      	ldr	r3, [sp, #16]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d0e4      	beq.n	80099dc <_scanf_float+0x378>
 8009a12:	9905      	ldr	r1, [sp, #20]
 8009a14:	230a      	movs	r3, #10
 8009a16:	462a      	mov	r2, r5
 8009a18:	3101      	adds	r1, #1
 8009a1a:	4640      	mov	r0, r8
 8009a1c:	f002 fcc8 	bl	800c3b0 <_strtol_r>
 8009a20:	9b04      	ldr	r3, [sp, #16]
 8009a22:	9e05      	ldr	r6, [sp, #20]
 8009a24:	1ac2      	subs	r2, r0, r3
 8009a26:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009a2a:	429e      	cmp	r6, r3
 8009a2c:	bf28      	it	cs
 8009a2e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009a32:	4912      	ldr	r1, [pc, #72]	; (8009a7c <_scanf_float+0x418>)
 8009a34:	4630      	mov	r0, r6
 8009a36:	f000 f8e7 	bl	8009c08 <siprintf>
 8009a3a:	e7cf      	b.n	80099dc <_scanf_float+0x378>
 8009a3c:	f011 0f04 	tst.w	r1, #4
 8009a40:	9903      	ldr	r1, [sp, #12]
 8009a42:	600a      	str	r2, [r1, #0]
 8009a44:	d1db      	bne.n	80099fe <_scanf_float+0x39a>
 8009a46:	f8d3 8000 	ldr.w	r8, [r3]
 8009a4a:	ee10 2a10 	vmov	r2, s0
 8009a4e:	ee10 0a10 	vmov	r0, s0
 8009a52:	463b      	mov	r3, r7
 8009a54:	4639      	mov	r1, r7
 8009a56:	f7f7 f889 	bl	8000b6c <__aeabi_dcmpun>
 8009a5a:	b128      	cbz	r0, 8009a68 <_scanf_float+0x404>
 8009a5c:	4808      	ldr	r0, [pc, #32]	; (8009a80 <_scanf_float+0x41c>)
 8009a5e:	f000 f9e5 	bl	8009e2c <nanf>
 8009a62:	ed88 0a00 	vstr	s0, [r8]
 8009a66:	e7cd      	b.n	8009a04 <_scanf_float+0x3a0>
 8009a68:	4630      	mov	r0, r6
 8009a6a:	4639      	mov	r1, r7
 8009a6c:	f7f7 f8dc 	bl	8000c28 <__aeabi_d2f>
 8009a70:	f8c8 0000 	str.w	r0, [r8]
 8009a74:	e7c6      	b.n	8009a04 <_scanf_float+0x3a0>
 8009a76:	2500      	movs	r5, #0
 8009a78:	e635      	b.n	80096e6 <_scanf_float+0x82>
 8009a7a:	bf00      	nop
 8009a7c:	0800de76 	.word	0x0800de76
 8009a80:	0800e228 	.word	0x0800e228

08009a84 <std>:
 8009a84:	2300      	movs	r3, #0
 8009a86:	b510      	push	{r4, lr}
 8009a88:	4604      	mov	r4, r0
 8009a8a:	e9c0 3300 	strd	r3, r3, [r0]
 8009a8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a92:	6083      	str	r3, [r0, #8]
 8009a94:	8181      	strh	r1, [r0, #12]
 8009a96:	6643      	str	r3, [r0, #100]	; 0x64
 8009a98:	81c2      	strh	r2, [r0, #14]
 8009a9a:	6183      	str	r3, [r0, #24]
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	2208      	movs	r2, #8
 8009aa0:	305c      	adds	r0, #92	; 0x5c
 8009aa2:	f000 f942 	bl	8009d2a <memset>
 8009aa6:	4b0d      	ldr	r3, [pc, #52]	; (8009adc <std+0x58>)
 8009aa8:	6263      	str	r3, [r4, #36]	; 0x24
 8009aaa:	4b0d      	ldr	r3, [pc, #52]	; (8009ae0 <std+0x5c>)
 8009aac:	62a3      	str	r3, [r4, #40]	; 0x28
 8009aae:	4b0d      	ldr	r3, [pc, #52]	; (8009ae4 <std+0x60>)
 8009ab0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ab2:	4b0d      	ldr	r3, [pc, #52]	; (8009ae8 <std+0x64>)
 8009ab4:	6323      	str	r3, [r4, #48]	; 0x30
 8009ab6:	4b0d      	ldr	r3, [pc, #52]	; (8009aec <std+0x68>)
 8009ab8:	6224      	str	r4, [r4, #32]
 8009aba:	429c      	cmp	r4, r3
 8009abc:	d006      	beq.n	8009acc <std+0x48>
 8009abe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009ac2:	4294      	cmp	r4, r2
 8009ac4:	d002      	beq.n	8009acc <std+0x48>
 8009ac6:	33d0      	adds	r3, #208	; 0xd0
 8009ac8:	429c      	cmp	r4, r3
 8009aca:	d105      	bne.n	8009ad8 <std+0x54>
 8009acc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ad4:	f000 b9a6 	b.w	8009e24 <__retarget_lock_init_recursive>
 8009ad8:	bd10      	pop	{r4, pc}
 8009ada:	bf00      	nop
 8009adc:	08009ca1 	.word	0x08009ca1
 8009ae0:	08009cc7 	.word	0x08009cc7
 8009ae4:	08009cff 	.word	0x08009cff
 8009ae8:	08009d23 	.word	0x08009d23
 8009aec:	2000049c 	.word	0x2000049c

08009af0 <stdio_exit_handler>:
 8009af0:	4a02      	ldr	r2, [pc, #8]	; (8009afc <stdio_exit_handler+0xc>)
 8009af2:	4903      	ldr	r1, [pc, #12]	; (8009b00 <stdio_exit_handler+0x10>)
 8009af4:	4803      	ldr	r0, [pc, #12]	; (8009b04 <stdio_exit_handler+0x14>)
 8009af6:	f000 b869 	b.w	8009bcc <_fwalk_sglue>
 8009afa:	bf00      	nop
 8009afc:	20000014 	.word	0x20000014
 8009b00:	0800cdb1 	.word	0x0800cdb1
 8009b04:	20000020 	.word	0x20000020

08009b08 <cleanup_stdio>:
 8009b08:	6841      	ldr	r1, [r0, #4]
 8009b0a:	4b0c      	ldr	r3, [pc, #48]	; (8009b3c <cleanup_stdio+0x34>)
 8009b0c:	4299      	cmp	r1, r3
 8009b0e:	b510      	push	{r4, lr}
 8009b10:	4604      	mov	r4, r0
 8009b12:	d001      	beq.n	8009b18 <cleanup_stdio+0x10>
 8009b14:	f003 f94c 	bl	800cdb0 <_fflush_r>
 8009b18:	68a1      	ldr	r1, [r4, #8]
 8009b1a:	4b09      	ldr	r3, [pc, #36]	; (8009b40 <cleanup_stdio+0x38>)
 8009b1c:	4299      	cmp	r1, r3
 8009b1e:	d002      	beq.n	8009b26 <cleanup_stdio+0x1e>
 8009b20:	4620      	mov	r0, r4
 8009b22:	f003 f945 	bl	800cdb0 <_fflush_r>
 8009b26:	68e1      	ldr	r1, [r4, #12]
 8009b28:	4b06      	ldr	r3, [pc, #24]	; (8009b44 <cleanup_stdio+0x3c>)
 8009b2a:	4299      	cmp	r1, r3
 8009b2c:	d004      	beq.n	8009b38 <cleanup_stdio+0x30>
 8009b2e:	4620      	mov	r0, r4
 8009b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b34:	f003 b93c 	b.w	800cdb0 <_fflush_r>
 8009b38:	bd10      	pop	{r4, pc}
 8009b3a:	bf00      	nop
 8009b3c:	2000049c 	.word	0x2000049c
 8009b40:	20000504 	.word	0x20000504
 8009b44:	2000056c 	.word	0x2000056c

08009b48 <global_stdio_init.part.0>:
 8009b48:	b510      	push	{r4, lr}
 8009b4a:	4b0b      	ldr	r3, [pc, #44]	; (8009b78 <global_stdio_init.part.0+0x30>)
 8009b4c:	4c0b      	ldr	r4, [pc, #44]	; (8009b7c <global_stdio_init.part.0+0x34>)
 8009b4e:	4a0c      	ldr	r2, [pc, #48]	; (8009b80 <global_stdio_init.part.0+0x38>)
 8009b50:	601a      	str	r2, [r3, #0]
 8009b52:	4620      	mov	r0, r4
 8009b54:	2200      	movs	r2, #0
 8009b56:	2104      	movs	r1, #4
 8009b58:	f7ff ff94 	bl	8009a84 <std>
 8009b5c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009b60:	2201      	movs	r2, #1
 8009b62:	2109      	movs	r1, #9
 8009b64:	f7ff ff8e 	bl	8009a84 <std>
 8009b68:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009b6c:	2202      	movs	r2, #2
 8009b6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b72:	2112      	movs	r1, #18
 8009b74:	f7ff bf86 	b.w	8009a84 <std>
 8009b78:	200005d4 	.word	0x200005d4
 8009b7c:	2000049c 	.word	0x2000049c
 8009b80:	08009af1 	.word	0x08009af1

08009b84 <__sfp_lock_acquire>:
 8009b84:	4801      	ldr	r0, [pc, #4]	; (8009b8c <__sfp_lock_acquire+0x8>)
 8009b86:	f000 b94e 	b.w	8009e26 <__retarget_lock_acquire_recursive>
 8009b8a:	bf00      	nop
 8009b8c:	200005dd 	.word	0x200005dd

08009b90 <__sfp_lock_release>:
 8009b90:	4801      	ldr	r0, [pc, #4]	; (8009b98 <__sfp_lock_release+0x8>)
 8009b92:	f000 b949 	b.w	8009e28 <__retarget_lock_release_recursive>
 8009b96:	bf00      	nop
 8009b98:	200005dd 	.word	0x200005dd

08009b9c <__sinit>:
 8009b9c:	b510      	push	{r4, lr}
 8009b9e:	4604      	mov	r4, r0
 8009ba0:	f7ff fff0 	bl	8009b84 <__sfp_lock_acquire>
 8009ba4:	6a23      	ldr	r3, [r4, #32]
 8009ba6:	b11b      	cbz	r3, 8009bb0 <__sinit+0x14>
 8009ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bac:	f7ff bff0 	b.w	8009b90 <__sfp_lock_release>
 8009bb0:	4b04      	ldr	r3, [pc, #16]	; (8009bc4 <__sinit+0x28>)
 8009bb2:	6223      	str	r3, [r4, #32]
 8009bb4:	4b04      	ldr	r3, [pc, #16]	; (8009bc8 <__sinit+0x2c>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d1f5      	bne.n	8009ba8 <__sinit+0xc>
 8009bbc:	f7ff ffc4 	bl	8009b48 <global_stdio_init.part.0>
 8009bc0:	e7f2      	b.n	8009ba8 <__sinit+0xc>
 8009bc2:	bf00      	nop
 8009bc4:	08009b09 	.word	0x08009b09
 8009bc8:	200005d4 	.word	0x200005d4

08009bcc <_fwalk_sglue>:
 8009bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bd0:	4607      	mov	r7, r0
 8009bd2:	4688      	mov	r8, r1
 8009bd4:	4614      	mov	r4, r2
 8009bd6:	2600      	movs	r6, #0
 8009bd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009bdc:	f1b9 0901 	subs.w	r9, r9, #1
 8009be0:	d505      	bpl.n	8009bee <_fwalk_sglue+0x22>
 8009be2:	6824      	ldr	r4, [r4, #0]
 8009be4:	2c00      	cmp	r4, #0
 8009be6:	d1f7      	bne.n	8009bd8 <_fwalk_sglue+0xc>
 8009be8:	4630      	mov	r0, r6
 8009bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bee:	89ab      	ldrh	r3, [r5, #12]
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	d907      	bls.n	8009c04 <_fwalk_sglue+0x38>
 8009bf4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	d003      	beq.n	8009c04 <_fwalk_sglue+0x38>
 8009bfc:	4629      	mov	r1, r5
 8009bfe:	4638      	mov	r0, r7
 8009c00:	47c0      	blx	r8
 8009c02:	4306      	orrs	r6, r0
 8009c04:	3568      	adds	r5, #104	; 0x68
 8009c06:	e7e9      	b.n	8009bdc <_fwalk_sglue+0x10>

08009c08 <siprintf>:
 8009c08:	b40e      	push	{r1, r2, r3}
 8009c0a:	b500      	push	{lr}
 8009c0c:	b09c      	sub	sp, #112	; 0x70
 8009c0e:	ab1d      	add	r3, sp, #116	; 0x74
 8009c10:	9002      	str	r0, [sp, #8]
 8009c12:	9006      	str	r0, [sp, #24]
 8009c14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009c18:	4809      	ldr	r0, [pc, #36]	; (8009c40 <siprintf+0x38>)
 8009c1a:	9107      	str	r1, [sp, #28]
 8009c1c:	9104      	str	r1, [sp, #16]
 8009c1e:	4909      	ldr	r1, [pc, #36]	; (8009c44 <siprintf+0x3c>)
 8009c20:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c24:	9105      	str	r1, [sp, #20]
 8009c26:	6800      	ldr	r0, [r0, #0]
 8009c28:	9301      	str	r3, [sp, #4]
 8009c2a:	a902      	add	r1, sp, #8
 8009c2c:	f002 fc1c 	bl	800c468 <_svfiprintf_r>
 8009c30:	9b02      	ldr	r3, [sp, #8]
 8009c32:	2200      	movs	r2, #0
 8009c34:	701a      	strb	r2, [r3, #0]
 8009c36:	b01c      	add	sp, #112	; 0x70
 8009c38:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c3c:	b003      	add	sp, #12
 8009c3e:	4770      	bx	lr
 8009c40:	2000006c 	.word	0x2000006c
 8009c44:	ffff0208 	.word	0xffff0208

08009c48 <siscanf>:
 8009c48:	b40e      	push	{r1, r2, r3}
 8009c4a:	b510      	push	{r4, lr}
 8009c4c:	b09f      	sub	sp, #124	; 0x7c
 8009c4e:	ac21      	add	r4, sp, #132	; 0x84
 8009c50:	f44f 7101 	mov.w	r1, #516	; 0x204
 8009c54:	f854 2b04 	ldr.w	r2, [r4], #4
 8009c58:	9201      	str	r2, [sp, #4]
 8009c5a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8009c5e:	9004      	str	r0, [sp, #16]
 8009c60:	9008      	str	r0, [sp, #32]
 8009c62:	f7f6 fb25 	bl	80002b0 <strlen>
 8009c66:	4b0c      	ldr	r3, [pc, #48]	; (8009c98 <siscanf+0x50>)
 8009c68:	9005      	str	r0, [sp, #20]
 8009c6a:	9009      	str	r0, [sp, #36]	; 0x24
 8009c6c:	930d      	str	r3, [sp, #52]	; 0x34
 8009c6e:	480b      	ldr	r0, [pc, #44]	; (8009c9c <siscanf+0x54>)
 8009c70:	9a01      	ldr	r2, [sp, #4]
 8009c72:	6800      	ldr	r0, [r0, #0]
 8009c74:	9403      	str	r4, [sp, #12]
 8009c76:	2300      	movs	r3, #0
 8009c78:	9311      	str	r3, [sp, #68]	; 0x44
 8009c7a:	9316      	str	r3, [sp, #88]	; 0x58
 8009c7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009c80:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009c84:	a904      	add	r1, sp, #16
 8009c86:	4623      	mov	r3, r4
 8009c88:	f002 fd46 	bl	800c718 <__ssvfiscanf_r>
 8009c8c:	b01f      	add	sp, #124	; 0x7c
 8009c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c92:	b003      	add	sp, #12
 8009c94:	4770      	bx	lr
 8009c96:	bf00      	nop
 8009c98:	08009cc3 	.word	0x08009cc3
 8009c9c:	2000006c 	.word	0x2000006c

08009ca0 <__sread>:
 8009ca0:	b510      	push	{r4, lr}
 8009ca2:	460c      	mov	r4, r1
 8009ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ca8:	f000 f86e 	bl	8009d88 <_read_r>
 8009cac:	2800      	cmp	r0, #0
 8009cae:	bfab      	itete	ge
 8009cb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009cb2:	89a3      	ldrhlt	r3, [r4, #12]
 8009cb4:	181b      	addge	r3, r3, r0
 8009cb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009cba:	bfac      	ite	ge
 8009cbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8009cbe:	81a3      	strhlt	r3, [r4, #12]
 8009cc0:	bd10      	pop	{r4, pc}

08009cc2 <__seofread>:
 8009cc2:	2000      	movs	r0, #0
 8009cc4:	4770      	bx	lr

08009cc6 <__swrite>:
 8009cc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cca:	461f      	mov	r7, r3
 8009ccc:	898b      	ldrh	r3, [r1, #12]
 8009cce:	05db      	lsls	r3, r3, #23
 8009cd0:	4605      	mov	r5, r0
 8009cd2:	460c      	mov	r4, r1
 8009cd4:	4616      	mov	r6, r2
 8009cd6:	d505      	bpl.n	8009ce4 <__swrite+0x1e>
 8009cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cdc:	2302      	movs	r3, #2
 8009cde:	2200      	movs	r2, #0
 8009ce0:	f000 f840 	bl	8009d64 <_lseek_r>
 8009ce4:	89a3      	ldrh	r3, [r4, #12]
 8009ce6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cee:	81a3      	strh	r3, [r4, #12]
 8009cf0:	4632      	mov	r2, r6
 8009cf2:	463b      	mov	r3, r7
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cfa:	f000 b857 	b.w	8009dac <_write_r>

08009cfe <__sseek>:
 8009cfe:	b510      	push	{r4, lr}
 8009d00:	460c      	mov	r4, r1
 8009d02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d06:	f000 f82d 	bl	8009d64 <_lseek_r>
 8009d0a:	1c43      	adds	r3, r0, #1
 8009d0c:	89a3      	ldrh	r3, [r4, #12]
 8009d0e:	bf15      	itete	ne
 8009d10:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d1a:	81a3      	strheq	r3, [r4, #12]
 8009d1c:	bf18      	it	ne
 8009d1e:	81a3      	strhne	r3, [r4, #12]
 8009d20:	bd10      	pop	{r4, pc}

08009d22 <__sclose>:
 8009d22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d26:	f000 b80d 	b.w	8009d44 <_close_r>

08009d2a <memset>:
 8009d2a:	4402      	add	r2, r0
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d100      	bne.n	8009d34 <memset+0xa>
 8009d32:	4770      	bx	lr
 8009d34:	f803 1b01 	strb.w	r1, [r3], #1
 8009d38:	e7f9      	b.n	8009d2e <memset+0x4>
	...

08009d3c <_localeconv_r>:
 8009d3c:	4800      	ldr	r0, [pc, #0]	; (8009d40 <_localeconv_r+0x4>)
 8009d3e:	4770      	bx	lr
 8009d40:	20000160 	.word	0x20000160

08009d44 <_close_r>:
 8009d44:	b538      	push	{r3, r4, r5, lr}
 8009d46:	4d06      	ldr	r5, [pc, #24]	; (8009d60 <_close_r+0x1c>)
 8009d48:	2300      	movs	r3, #0
 8009d4a:	4604      	mov	r4, r0
 8009d4c:	4608      	mov	r0, r1
 8009d4e:	602b      	str	r3, [r5, #0]
 8009d50:	f7f8 fd3f 	bl	80027d2 <_close>
 8009d54:	1c43      	adds	r3, r0, #1
 8009d56:	d102      	bne.n	8009d5e <_close_r+0x1a>
 8009d58:	682b      	ldr	r3, [r5, #0]
 8009d5a:	b103      	cbz	r3, 8009d5e <_close_r+0x1a>
 8009d5c:	6023      	str	r3, [r4, #0]
 8009d5e:	bd38      	pop	{r3, r4, r5, pc}
 8009d60:	200005d8 	.word	0x200005d8

08009d64 <_lseek_r>:
 8009d64:	b538      	push	{r3, r4, r5, lr}
 8009d66:	4d07      	ldr	r5, [pc, #28]	; (8009d84 <_lseek_r+0x20>)
 8009d68:	4604      	mov	r4, r0
 8009d6a:	4608      	mov	r0, r1
 8009d6c:	4611      	mov	r1, r2
 8009d6e:	2200      	movs	r2, #0
 8009d70:	602a      	str	r2, [r5, #0]
 8009d72:	461a      	mov	r2, r3
 8009d74:	f7f8 fd54 	bl	8002820 <_lseek>
 8009d78:	1c43      	adds	r3, r0, #1
 8009d7a:	d102      	bne.n	8009d82 <_lseek_r+0x1e>
 8009d7c:	682b      	ldr	r3, [r5, #0]
 8009d7e:	b103      	cbz	r3, 8009d82 <_lseek_r+0x1e>
 8009d80:	6023      	str	r3, [r4, #0]
 8009d82:	bd38      	pop	{r3, r4, r5, pc}
 8009d84:	200005d8 	.word	0x200005d8

08009d88 <_read_r>:
 8009d88:	b538      	push	{r3, r4, r5, lr}
 8009d8a:	4d07      	ldr	r5, [pc, #28]	; (8009da8 <_read_r+0x20>)
 8009d8c:	4604      	mov	r4, r0
 8009d8e:	4608      	mov	r0, r1
 8009d90:	4611      	mov	r1, r2
 8009d92:	2200      	movs	r2, #0
 8009d94:	602a      	str	r2, [r5, #0]
 8009d96:	461a      	mov	r2, r3
 8009d98:	f7f8 fce2 	bl	8002760 <_read>
 8009d9c:	1c43      	adds	r3, r0, #1
 8009d9e:	d102      	bne.n	8009da6 <_read_r+0x1e>
 8009da0:	682b      	ldr	r3, [r5, #0]
 8009da2:	b103      	cbz	r3, 8009da6 <_read_r+0x1e>
 8009da4:	6023      	str	r3, [r4, #0]
 8009da6:	bd38      	pop	{r3, r4, r5, pc}
 8009da8:	200005d8 	.word	0x200005d8

08009dac <_write_r>:
 8009dac:	b538      	push	{r3, r4, r5, lr}
 8009dae:	4d07      	ldr	r5, [pc, #28]	; (8009dcc <_write_r+0x20>)
 8009db0:	4604      	mov	r4, r0
 8009db2:	4608      	mov	r0, r1
 8009db4:	4611      	mov	r1, r2
 8009db6:	2200      	movs	r2, #0
 8009db8:	602a      	str	r2, [r5, #0]
 8009dba:	461a      	mov	r2, r3
 8009dbc:	f7f8 fced 	bl	800279a <_write>
 8009dc0:	1c43      	adds	r3, r0, #1
 8009dc2:	d102      	bne.n	8009dca <_write_r+0x1e>
 8009dc4:	682b      	ldr	r3, [r5, #0]
 8009dc6:	b103      	cbz	r3, 8009dca <_write_r+0x1e>
 8009dc8:	6023      	str	r3, [r4, #0]
 8009dca:	bd38      	pop	{r3, r4, r5, pc}
 8009dcc:	200005d8 	.word	0x200005d8

08009dd0 <__errno>:
 8009dd0:	4b01      	ldr	r3, [pc, #4]	; (8009dd8 <__errno+0x8>)
 8009dd2:	6818      	ldr	r0, [r3, #0]
 8009dd4:	4770      	bx	lr
 8009dd6:	bf00      	nop
 8009dd8:	2000006c 	.word	0x2000006c

08009ddc <__libc_init_array>:
 8009ddc:	b570      	push	{r4, r5, r6, lr}
 8009dde:	4d0d      	ldr	r5, [pc, #52]	; (8009e14 <__libc_init_array+0x38>)
 8009de0:	4c0d      	ldr	r4, [pc, #52]	; (8009e18 <__libc_init_array+0x3c>)
 8009de2:	1b64      	subs	r4, r4, r5
 8009de4:	10a4      	asrs	r4, r4, #2
 8009de6:	2600      	movs	r6, #0
 8009de8:	42a6      	cmp	r6, r4
 8009dea:	d109      	bne.n	8009e00 <__libc_init_array+0x24>
 8009dec:	4d0b      	ldr	r5, [pc, #44]	; (8009e1c <__libc_init_array+0x40>)
 8009dee:	4c0c      	ldr	r4, [pc, #48]	; (8009e20 <__libc_init_array+0x44>)
 8009df0:	f003 ffde 	bl	800ddb0 <_init>
 8009df4:	1b64      	subs	r4, r4, r5
 8009df6:	10a4      	asrs	r4, r4, #2
 8009df8:	2600      	movs	r6, #0
 8009dfa:	42a6      	cmp	r6, r4
 8009dfc:	d105      	bne.n	8009e0a <__libc_init_array+0x2e>
 8009dfe:	bd70      	pop	{r4, r5, r6, pc}
 8009e00:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e04:	4798      	blx	r3
 8009e06:	3601      	adds	r6, #1
 8009e08:	e7ee      	b.n	8009de8 <__libc_init_array+0xc>
 8009e0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e0e:	4798      	blx	r3
 8009e10:	3601      	adds	r6, #1
 8009e12:	e7f2      	b.n	8009dfa <__libc_init_array+0x1e>
 8009e14:	0800e294 	.word	0x0800e294
 8009e18:	0800e294 	.word	0x0800e294
 8009e1c:	0800e294 	.word	0x0800e294
 8009e20:	0800e298 	.word	0x0800e298

08009e24 <__retarget_lock_init_recursive>:
 8009e24:	4770      	bx	lr

08009e26 <__retarget_lock_acquire_recursive>:
 8009e26:	4770      	bx	lr

08009e28 <__retarget_lock_release_recursive>:
 8009e28:	4770      	bx	lr
	...

08009e2c <nanf>:
 8009e2c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009e34 <nanf+0x8>
 8009e30:	4770      	bx	lr
 8009e32:	bf00      	nop
 8009e34:	7fc00000 	.word	0x7fc00000

08009e38 <quorem>:
 8009e38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e3c:	6903      	ldr	r3, [r0, #16]
 8009e3e:	690c      	ldr	r4, [r1, #16]
 8009e40:	42a3      	cmp	r3, r4
 8009e42:	4607      	mov	r7, r0
 8009e44:	db7e      	blt.n	8009f44 <quorem+0x10c>
 8009e46:	3c01      	subs	r4, #1
 8009e48:	f101 0814 	add.w	r8, r1, #20
 8009e4c:	f100 0514 	add.w	r5, r0, #20
 8009e50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e54:	9301      	str	r3, [sp, #4]
 8009e56:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009e5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e5e:	3301      	adds	r3, #1
 8009e60:	429a      	cmp	r2, r3
 8009e62:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009e66:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009e6a:	fbb2 f6f3 	udiv	r6, r2, r3
 8009e6e:	d331      	bcc.n	8009ed4 <quorem+0x9c>
 8009e70:	f04f 0e00 	mov.w	lr, #0
 8009e74:	4640      	mov	r0, r8
 8009e76:	46ac      	mov	ip, r5
 8009e78:	46f2      	mov	sl, lr
 8009e7a:	f850 2b04 	ldr.w	r2, [r0], #4
 8009e7e:	b293      	uxth	r3, r2
 8009e80:	fb06 e303 	mla	r3, r6, r3, lr
 8009e84:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009e88:	0c1a      	lsrs	r2, r3, #16
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	ebaa 0303 	sub.w	r3, sl, r3
 8009e90:	f8dc a000 	ldr.w	sl, [ip]
 8009e94:	fa13 f38a 	uxtah	r3, r3, sl
 8009e98:	fb06 220e 	mla	r2, r6, lr, r2
 8009e9c:	9300      	str	r3, [sp, #0]
 8009e9e:	9b00      	ldr	r3, [sp, #0]
 8009ea0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009ea4:	b292      	uxth	r2, r2
 8009ea6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009eaa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009eae:	f8bd 3000 	ldrh.w	r3, [sp]
 8009eb2:	4581      	cmp	r9, r0
 8009eb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009eb8:	f84c 3b04 	str.w	r3, [ip], #4
 8009ebc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009ec0:	d2db      	bcs.n	8009e7a <quorem+0x42>
 8009ec2:	f855 300b 	ldr.w	r3, [r5, fp]
 8009ec6:	b92b      	cbnz	r3, 8009ed4 <quorem+0x9c>
 8009ec8:	9b01      	ldr	r3, [sp, #4]
 8009eca:	3b04      	subs	r3, #4
 8009ecc:	429d      	cmp	r5, r3
 8009ece:	461a      	mov	r2, r3
 8009ed0:	d32c      	bcc.n	8009f2c <quorem+0xf4>
 8009ed2:	613c      	str	r4, [r7, #16]
 8009ed4:	4638      	mov	r0, r7
 8009ed6:	f001 f9ef 	bl	800b2b8 <__mcmp>
 8009eda:	2800      	cmp	r0, #0
 8009edc:	db22      	blt.n	8009f24 <quorem+0xec>
 8009ede:	3601      	adds	r6, #1
 8009ee0:	4629      	mov	r1, r5
 8009ee2:	2000      	movs	r0, #0
 8009ee4:	f858 2b04 	ldr.w	r2, [r8], #4
 8009ee8:	f8d1 c000 	ldr.w	ip, [r1]
 8009eec:	b293      	uxth	r3, r2
 8009eee:	1ac3      	subs	r3, r0, r3
 8009ef0:	0c12      	lsrs	r2, r2, #16
 8009ef2:	fa13 f38c 	uxtah	r3, r3, ip
 8009ef6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009efa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f04:	45c1      	cmp	r9, r8
 8009f06:	f841 3b04 	str.w	r3, [r1], #4
 8009f0a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009f0e:	d2e9      	bcs.n	8009ee4 <quorem+0xac>
 8009f10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f14:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f18:	b922      	cbnz	r2, 8009f24 <quorem+0xec>
 8009f1a:	3b04      	subs	r3, #4
 8009f1c:	429d      	cmp	r5, r3
 8009f1e:	461a      	mov	r2, r3
 8009f20:	d30a      	bcc.n	8009f38 <quorem+0x100>
 8009f22:	613c      	str	r4, [r7, #16]
 8009f24:	4630      	mov	r0, r6
 8009f26:	b003      	add	sp, #12
 8009f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f2c:	6812      	ldr	r2, [r2, #0]
 8009f2e:	3b04      	subs	r3, #4
 8009f30:	2a00      	cmp	r2, #0
 8009f32:	d1ce      	bne.n	8009ed2 <quorem+0x9a>
 8009f34:	3c01      	subs	r4, #1
 8009f36:	e7c9      	b.n	8009ecc <quorem+0x94>
 8009f38:	6812      	ldr	r2, [r2, #0]
 8009f3a:	3b04      	subs	r3, #4
 8009f3c:	2a00      	cmp	r2, #0
 8009f3e:	d1f0      	bne.n	8009f22 <quorem+0xea>
 8009f40:	3c01      	subs	r4, #1
 8009f42:	e7eb      	b.n	8009f1c <quorem+0xe4>
 8009f44:	2000      	movs	r0, #0
 8009f46:	e7ee      	b.n	8009f26 <quorem+0xee>

08009f48 <_dtoa_r>:
 8009f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f4c:	ed2d 8b04 	vpush	{d8-d9}
 8009f50:	69c5      	ldr	r5, [r0, #28]
 8009f52:	b093      	sub	sp, #76	; 0x4c
 8009f54:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009f58:	ec57 6b10 	vmov	r6, r7, d0
 8009f5c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009f60:	9107      	str	r1, [sp, #28]
 8009f62:	4604      	mov	r4, r0
 8009f64:	920a      	str	r2, [sp, #40]	; 0x28
 8009f66:	930d      	str	r3, [sp, #52]	; 0x34
 8009f68:	b975      	cbnz	r5, 8009f88 <_dtoa_r+0x40>
 8009f6a:	2010      	movs	r0, #16
 8009f6c:	f000 fe2a 	bl	800abc4 <malloc>
 8009f70:	4602      	mov	r2, r0
 8009f72:	61e0      	str	r0, [r4, #28]
 8009f74:	b920      	cbnz	r0, 8009f80 <_dtoa_r+0x38>
 8009f76:	4bae      	ldr	r3, [pc, #696]	; (800a230 <_dtoa_r+0x2e8>)
 8009f78:	21ef      	movs	r1, #239	; 0xef
 8009f7a:	48ae      	ldr	r0, [pc, #696]	; (800a234 <_dtoa_r+0x2ec>)
 8009f7c:	f003 f808 	bl	800cf90 <__assert_func>
 8009f80:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009f84:	6005      	str	r5, [r0, #0]
 8009f86:	60c5      	str	r5, [r0, #12]
 8009f88:	69e3      	ldr	r3, [r4, #28]
 8009f8a:	6819      	ldr	r1, [r3, #0]
 8009f8c:	b151      	cbz	r1, 8009fa4 <_dtoa_r+0x5c>
 8009f8e:	685a      	ldr	r2, [r3, #4]
 8009f90:	604a      	str	r2, [r1, #4]
 8009f92:	2301      	movs	r3, #1
 8009f94:	4093      	lsls	r3, r2
 8009f96:	608b      	str	r3, [r1, #8]
 8009f98:	4620      	mov	r0, r4
 8009f9a:	f000 ff07 	bl	800adac <_Bfree>
 8009f9e:	69e3      	ldr	r3, [r4, #28]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	601a      	str	r2, [r3, #0]
 8009fa4:	1e3b      	subs	r3, r7, #0
 8009fa6:	bfbb      	ittet	lt
 8009fa8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009fac:	9303      	strlt	r3, [sp, #12]
 8009fae:	2300      	movge	r3, #0
 8009fb0:	2201      	movlt	r2, #1
 8009fb2:	bfac      	ite	ge
 8009fb4:	f8c8 3000 	strge.w	r3, [r8]
 8009fb8:	f8c8 2000 	strlt.w	r2, [r8]
 8009fbc:	4b9e      	ldr	r3, [pc, #632]	; (800a238 <_dtoa_r+0x2f0>)
 8009fbe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009fc2:	ea33 0308 	bics.w	r3, r3, r8
 8009fc6:	d11b      	bne.n	800a000 <_dtoa_r+0xb8>
 8009fc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009fca:	f242 730f 	movw	r3, #9999	; 0x270f
 8009fce:	6013      	str	r3, [r2, #0]
 8009fd0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009fd4:	4333      	orrs	r3, r6
 8009fd6:	f000 8593 	beq.w	800ab00 <_dtoa_r+0xbb8>
 8009fda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fdc:	b963      	cbnz	r3, 8009ff8 <_dtoa_r+0xb0>
 8009fde:	4b97      	ldr	r3, [pc, #604]	; (800a23c <_dtoa_r+0x2f4>)
 8009fe0:	e027      	b.n	800a032 <_dtoa_r+0xea>
 8009fe2:	4b97      	ldr	r3, [pc, #604]	; (800a240 <_dtoa_r+0x2f8>)
 8009fe4:	9300      	str	r3, [sp, #0]
 8009fe6:	3308      	adds	r3, #8
 8009fe8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009fea:	6013      	str	r3, [r2, #0]
 8009fec:	9800      	ldr	r0, [sp, #0]
 8009fee:	b013      	add	sp, #76	; 0x4c
 8009ff0:	ecbd 8b04 	vpop	{d8-d9}
 8009ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ff8:	4b90      	ldr	r3, [pc, #576]	; (800a23c <_dtoa_r+0x2f4>)
 8009ffa:	9300      	str	r3, [sp, #0]
 8009ffc:	3303      	adds	r3, #3
 8009ffe:	e7f3      	b.n	8009fe8 <_dtoa_r+0xa0>
 800a000:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a004:	2200      	movs	r2, #0
 800a006:	ec51 0b17 	vmov	r0, r1, d7
 800a00a:	eeb0 8a47 	vmov.f32	s16, s14
 800a00e:	eef0 8a67 	vmov.f32	s17, s15
 800a012:	2300      	movs	r3, #0
 800a014:	f7f6 fd78 	bl	8000b08 <__aeabi_dcmpeq>
 800a018:	4681      	mov	r9, r0
 800a01a:	b160      	cbz	r0, 800a036 <_dtoa_r+0xee>
 800a01c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a01e:	2301      	movs	r3, #1
 800a020:	6013      	str	r3, [r2, #0]
 800a022:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a024:	2b00      	cmp	r3, #0
 800a026:	f000 8568 	beq.w	800aafa <_dtoa_r+0xbb2>
 800a02a:	4b86      	ldr	r3, [pc, #536]	; (800a244 <_dtoa_r+0x2fc>)
 800a02c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a02e:	6013      	str	r3, [r2, #0]
 800a030:	3b01      	subs	r3, #1
 800a032:	9300      	str	r3, [sp, #0]
 800a034:	e7da      	b.n	8009fec <_dtoa_r+0xa4>
 800a036:	aa10      	add	r2, sp, #64	; 0x40
 800a038:	a911      	add	r1, sp, #68	; 0x44
 800a03a:	4620      	mov	r0, r4
 800a03c:	eeb0 0a48 	vmov.f32	s0, s16
 800a040:	eef0 0a68 	vmov.f32	s1, s17
 800a044:	f001 fa4e 	bl	800b4e4 <__d2b>
 800a048:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a04c:	4682      	mov	sl, r0
 800a04e:	2d00      	cmp	r5, #0
 800a050:	d07f      	beq.n	800a152 <_dtoa_r+0x20a>
 800a052:	ee18 3a90 	vmov	r3, s17
 800a056:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a05a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a05e:	ec51 0b18 	vmov	r0, r1, d8
 800a062:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a066:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a06a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a06e:	4619      	mov	r1, r3
 800a070:	2200      	movs	r2, #0
 800a072:	4b75      	ldr	r3, [pc, #468]	; (800a248 <_dtoa_r+0x300>)
 800a074:	f7f6 f928 	bl	80002c8 <__aeabi_dsub>
 800a078:	a367      	add	r3, pc, #412	; (adr r3, 800a218 <_dtoa_r+0x2d0>)
 800a07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07e:	f7f6 fadb 	bl	8000638 <__aeabi_dmul>
 800a082:	a367      	add	r3, pc, #412	; (adr r3, 800a220 <_dtoa_r+0x2d8>)
 800a084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a088:	f7f6 f920 	bl	80002cc <__adddf3>
 800a08c:	4606      	mov	r6, r0
 800a08e:	4628      	mov	r0, r5
 800a090:	460f      	mov	r7, r1
 800a092:	f7f6 fa67 	bl	8000564 <__aeabi_i2d>
 800a096:	a364      	add	r3, pc, #400	; (adr r3, 800a228 <_dtoa_r+0x2e0>)
 800a098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09c:	f7f6 facc 	bl	8000638 <__aeabi_dmul>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	460b      	mov	r3, r1
 800a0a4:	4630      	mov	r0, r6
 800a0a6:	4639      	mov	r1, r7
 800a0a8:	f7f6 f910 	bl	80002cc <__adddf3>
 800a0ac:	4606      	mov	r6, r0
 800a0ae:	460f      	mov	r7, r1
 800a0b0:	f7f6 fd72 	bl	8000b98 <__aeabi_d2iz>
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	4683      	mov	fp, r0
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	4630      	mov	r0, r6
 800a0bc:	4639      	mov	r1, r7
 800a0be:	f7f6 fd2d 	bl	8000b1c <__aeabi_dcmplt>
 800a0c2:	b148      	cbz	r0, 800a0d8 <_dtoa_r+0x190>
 800a0c4:	4658      	mov	r0, fp
 800a0c6:	f7f6 fa4d 	bl	8000564 <__aeabi_i2d>
 800a0ca:	4632      	mov	r2, r6
 800a0cc:	463b      	mov	r3, r7
 800a0ce:	f7f6 fd1b 	bl	8000b08 <__aeabi_dcmpeq>
 800a0d2:	b908      	cbnz	r0, 800a0d8 <_dtoa_r+0x190>
 800a0d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a0d8:	f1bb 0f16 	cmp.w	fp, #22
 800a0dc:	d857      	bhi.n	800a18e <_dtoa_r+0x246>
 800a0de:	4b5b      	ldr	r3, [pc, #364]	; (800a24c <_dtoa_r+0x304>)
 800a0e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e8:	ec51 0b18 	vmov	r0, r1, d8
 800a0ec:	f7f6 fd16 	bl	8000b1c <__aeabi_dcmplt>
 800a0f0:	2800      	cmp	r0, #0
 800a0f2:	d04e      	beq.n	800a192 <_dtoa_r+0x24a>
 800a0f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	930c      	str	r3, [sp, #48]	; 0x30
 800a0fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a0fe:	1b5b      	subs	r3, r3, r5
 800a100:	1e5a      	subs	r2, r3, #1
 800a102:	bf45      	ittet	mi
 800a104:	f1c3 0301 	rsbmi	r3, r3, #1
 800a108:	9305      	strmi	r3, [sp, #20]
 800a10a:	2300      	movpl	r3, #0
 800a10c:	2300      	movmi	r3, #0
 800a10e:	9206      	str	r2, [sp, #24]
 800a110:	bf54      	ite	pl
 800a112:	9305      	strpl	r3, [sp, #20]
 800a114:	9306      	strmi	r3, [sp, #24]
 800a116:	f1bb 0f00 	cmp.w	fp, #0
 800a11a:	db3c      	blt.n	800a196 <_dtoa_r+0x24e>
 800a11c:	9b06      	ldr	r3, [sp, #24]
 800a11e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a122:	445b      	add	r3, fp
 800a124:	9306      	str	r3, [sp, #24]
 800a126:	2300      	movs	r3, #0
 800a128:	9308      	str	r3, [sp, #32]
 800a12a:	9b07      	ldr	r3, [sp, #28]
 800a12c:	2b09      	cmp	r3, #9
 800a12e:	d868      	bhi.n	800a202 <_dtoa_r+0x2ba>
 800a130:	2b05      	cmp	r3, #5
 800a132:	bfc4      	itt	gt
 800a134:	3b04      	subgt	r3, #4
 800a136:	9307      	strgt	r3, [sp, #28]
 800a138:	9b07      	ldr	r3, [sp, #28]
 800a13a:	f1a3 0302 	sub.w	r3, r3, #2
 800a13e:	bfcc      	ite	gt
 800a140:	2500      	movgt	r5, #0
 800a142:	2501      	movle	r5, #1
 800a144:	2b03      	cmp	r3, #3
 800a146:	f200 8085 	bhi.w	800a254 <_dtoa_r+0x30c>
 800a14a:	e8df f003 	tbb	[pc, r3]
 800a14e:	3b2e      	.short	0x3b2e
 800a150:	5839      	.short	0x5839
 800a152:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a156:	441d      	add	r5, r3
 800a158:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a15c:	2b20      	cmp	r3, #32
 800a15e:	bfc1      	itttt	gt
 800a160:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a164:	fa08 f803 	lslgt.w	r8, r8, r3
 800a168:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a16c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a170:	bfd6      	itet	le
 800a172:	f1c3 0320 	rsble	r3, r3, #32
 800a176:	ea48 0003 	orrgt.w	r0, r8, r3
 800a17a:	fa06 f003 	lslle.w	r0, r6, r3
 800a17e:	f7f6 f9e1 	bl	8000544 <__aeabi_ui2d>
 800a182:	2201      	movs	r2, #1
 800a184:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a188:	3d01      	subs	r5, #1
 800a18a:	920e      	str	r2, [sp, #56]	; 0x38
 800a18c:	e76f      	b.n	800a06e <_dtoa_r+0x126>
 800a18e:	2301      	movs	r3, #1
 800a190:	e7b3      	b.n	800a0fa <_dtoa_r+0x1b2>
 800a192:	900c      	str	r0, [sp, #48]	; 0x30
 800a194:	e7b2      	b.n	800a0fc <_dtoa_r+0x1b4>
 800a196:	9b05      	ldr	r3, [sp, #20]
 800a198:	eba3 030b 	sub.w	r3, r3, fp
 800a19c:	9305      	str	r3, [sp, #20]
 800a19e:	f1cb 0300 	rsb	r3, fp, #0
 800a1a2:	9308      	str	r3, [sp, #32]
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1a8:	e7bf      	b.n	800a12a <_dtoa_r+0x1e2>
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	9309      	str	r3, [sp, #36]	; 0x24
 800a1ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	dc52      	bgt.n	800a25a <_dtoa_r+0x312>
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	9301      	str	r3, [sp, #4]
 800a1b8:	9304      	str	r3, [sp, #16]
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	920a      	str	r2, [sp, #40]	; 0x28
 800a1be:	e00b      	b.n	800a1d8 <_dtoa_r+0x290>
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	e7f3      	b.n	800a1ac <_dtoa_r+0x264>
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	9309      	str	r3, [sp, #36]	; 0x24
 800a1c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1ca:	445b      	add	r3, fp
 800a1cc:	9301      	str	r3, [sp, #4]
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	9304      	str	r3, [sp, #16]
 800a1d4:	bfb8      	it	lt
 800a1d6:	2301      	movlt	r3, #1
 800a1d8:	69e0      	ldr	r0, [r4, #28]
 800a1da:	2100      	movs	r1, #0
 800a1dc:	2204      	movs	r2, #4
 800a1de:	f102 0614 	add.w	r6, r2, #20
 800a1e2:	429e      	cmp	r6, r3
 800a1e4:	d93d      	bls.n	800a262 <_dtoa_r+0x31a>
 800a1e6:	6041      	str	r1, [r0, #4]
 800a1e8:	4620      	mov	r0, r4
 800a1ea:	f000 fd9f 	bl	800ad2c <_Balloc>
 800a1ee:	9000      	str	r0, [sp, #0]
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	d139      	bne.n	800a268 <_dtoa_r+0x320>
 800a1f4:	4b16      	ldr	r3, [pc, #88]	; (800a250 <_dtoa_r+0x308>)
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	f240 11af 	movw	r1, #431	; 0x1af
 800a1fc:	e6bd      	b.n	8009f7a <_dtoa_r+0x32>
 800a1fe:	2301      	movs	r3, #1
 800a200:	e7e1      	b.n	800a1c6 <_dtoa_r+0x27e>
 800a202:	2501      	movs	r5, #1
 800a204:	2300      	movs	r3, #0
 800a206:	9307      	str	r3, [sp, #28]
 800a208:	9509      	str	r5, [sp, #36]	; 0x24
 800a20a:	f04f 33ff 	mov.w	r3, #4294967295
 800a20e:	9301      	str	r3, [sp, #4]
 800a210:	9304      	str	r3, [sp, #16]
 800a212:	2200      	movs	r2, #0
 800a214:	2312      	movs	r3, #18
 800a216:	e7d1      	b.n	800a1bc <_dtoa_r+0x274>
 800a218:	636f4361 	.word	0x636f4361
 800a21c:	3fd287a7 	.word	0x3fd287a7
 800a220:	8b60c8b3 	.word	0x8b60c8b3
 800a224:	3fc68a28 	.word	0x3fc68a28
 800a228:	509f79fb 	.word	0x509f79fb
 800a22c:	3fd34413 	.word	0x3fd34413
 800a230:	0800de88 	.word	0x0800de88
 800a234:	0800de9f 	.word	0x0800de9f
 800a238:	7ff00000 	.word	0x7ff00000
 800a23c:	0800de84 	.word	0x0800de84
 800a240:	0800de7b 	.word	0x0800de7b
 800a244:	0800e1e1 	.word	0x0800e1e1
 800a248:	3ff80000 	.word	0x3ff80000
 800a24c:	0800df90 	.word	0x0800df90
 800a250:	0800def7 	.word	0x0800def7
 800a254:	2301      	movs	r3, #1
 800a256:	9309      	str	r3, [sp, #36]	; 0x24
 800a258:	e7d7      	b.n	800a20a <_dtoa_r+0x2c2>
 800a25a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a25c:	9301      	str	r3, [sp, #4]
 800a25e:	9304      	str	r3, [sp, #16]
 800a260:	e7ba      	b.n	800a1d8 <_dtoa_r+0x290>
 800a262:	3101      	adds	r1, #1
 800a264:	0052      	lsls	r2, r2, #1
 800a266:	e7ba      	b.n	800a1de <_dtoa_r+0x296>
 800a268:	69e3      	ldr	r3, [r4, #28]
 800a26a:	9a00      	ldr	r2, [sp, #0]
 800a26c:	601a      	str	r2, [r3, #0]
 800a26e:	9b04      	ldr	r3, [sp, #16]
 800a270:	2b0e      	cmp	r3, #14
 800a272:	f200 80a8 	bhi.w	800a3c6 <_dtoa_r+0x47e>
 800a276:	2d00      	cmp	r5, #0
 800a278:	f000 80a5 	beq.w	800a3c6 <_dtoa_r+0x47e>
 800a27c:	f1bb 0f00 	cmp.w	fp, #0
 800a280:	dd38      	ble.n	800a2f4 <_dtoa_r+0x3ac>
 800a282:	4bc0      	ldr	r3, [pc, #768]	; (800a584 <_dtoa_r+0x63c>)
 800a284:	f00b 020f 	and.w	r2, fp, #15
 800a288:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a28c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a290:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a294:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a298:	d019      	beq.n	800a2ce <_dtoa_r+0x386>
 800a29a:	4bbb      	ldr	r3, [pc, #748]	; (800a588 <_dtoa_r+0x640>)
 800a29c:	ec51 0b18 	vmov	r0, r1, d8
 800a2a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a2a4:	f7f6 faf2 	bl	800088c <__aeabi_ddiv>
 800a2a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2ac:	f008 080f 	and.w	r8, r8, #15
 800a2b0:	2503      	movs	r5, #3
 800a2b2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a588 <_dtoa_r+0x640>
 800a2b6:	f1b8 0f00 	cmp.w	r8, #0
 800a2ba:	d10a      	bne.n	800a2d2 <_dtoa_r+0x38a>
 800a2bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2c0:	4632      	mov	r2, r6
 800a2c2:	463b      	mov	r3, r7
 800a2c4:	f7f6 fae2 	bl	800088c <__aeabi_ddiv>
 800a2c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2cc:	e02b      	b.n	800a326 <_dtoa_r+0x3de>
 800a2ce:	2502      	movs	r5, #2
 800a2d0:	e7ef      	b.n	800a2b2 <_dtoa_r+0x36a>
 800a2d2:	f018 0f01 	tst.w	r8, #1
 800a2d6:	d008      	beq.n	800a2ea <_dtoa_r+0x3a2>
 800a2d8:	4630      	mov	r0, r6
 800a2da:	4639      	mov	r1, r7
 800a2dc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a2e0:	f7f6 f9aa 	bl	8000638 <__aeabi_dmul>
 800a2e4:	3501      	adds	r5, #1
 800a2e6:	4606      	mov	r6, r0
 800a2e8:	460f      	mov	r7, r1
 800a2ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a2ee:	f109 0908 	add.w	r9, r9, #8
 800a2f2:	e7e0      	b.n	800a2b6 <_dtoa_r+0x36e>
 800a2f4:	f000 809f 	beq.w	800a436 <_dtoa_r+0x4ee>
 800a2f8:	f1cb 0600 	rsb	r6, fp, #0
 800a2fc:	4ba1      	ldr	r3, [pc, #644]	; (800a584 <_dtoa_r+0x63c>)
 800a2fe:	4fa2      	ldr	r7, [pc, #648]	; (800a588 <_dtoa_r+0x640>)
 800a300:	f006 020f 	and.w	r2, r6, #15
 800a304:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30c:	ec51 0b18 	vmov	r0, r1, d8
 800a310:	f7f6 f992 	bl	8000638 <__aeabi_dmul>
 800a314:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a318:	1136      	asrs	r6, r6, #4
 800a31a:	2300      	movs	r3, #0
 800a31c:	2502      	movs	r5, #2
 800a31e:	2e00      	cmp	r6, #0
 800a320:	d17e      	bne.n	800a420 <_dtoa_r+0x4d8>
 800a322:	2b00      	cmp	r3, #0
 800a324:	d1d0      	bne.n	800a2c8 <_dtoa_r+0x380>
 800a326:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a328:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	f000 8084 	beq.w	800a43a <_dtoa_r+0x4f2>
 800a332:	4b96      	ldr	r3, [pc, #600]	; (800a58c <_dtoa_r+0x644>)
 800a334:	2200      	movs	r2, #0
 800a336:	4640      	mov	r0, r8
 800a338:	4649      	mov	r1, r9
 800a33a:	f7f6 fbef 	bl	8000b1c <__aeabi_dcmplt>
 800a33e:	2800      	cmp	r0, #0
 800a340:	d07b      	beq.n	800a43a <_dtoa_r+0x4f2>
 800a342:	9b04      	ldr	r3, [sp, #16]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d078      	beq.n	800a43a <_dtoa_r+0x4f2>
 800a348:	9b01      	ldr	r3, [sp, #4]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	dd39      	ble.n	800a3c2 <_dtoa_r+0x47a>
 800a34e:	4b90      	ldr	r3, [pc, #576]	; (800a590 <_dtoa_r+0x648>)
 800a350:	2200      	movs	r2, #0
 800a352:	4640      	mov	r0, r8
 800a354:	4649      	mov	r1, r9
 800a356:	f7f6 f96f 	bl	8000638 <__aeabi_dmul>
 800a35a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a35e:	9e01      	ldr	r6, [sp, #4]
 800a360:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a364:	3501      	adds	r5, #1
 800a366:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a36a:	4628      	mov	r0, r5
 800a36c:	f7f6 f8fa 	bl	8000564 <__aeabi_i2d>
 800a370:	4642      	mov	r2, r8
 800a372:	464b      	mov	r3, r9
 800a374:	f7f6 f960 	bl	8000638 <__aeabi_dmul>
 800a378:	4b86      	ldr	r3, [pc, #536]	; (800a594 <_dtoa_r+0x64c>)
 800a37a:	2200      	movs	r2, #0
 800a37c:	f7f5 ffa6 	bl	80002cc <__adddf3>
 800a380:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a384:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a388:	9303      	str	r3, [sp, #12]
 800a38a:	2e00      	cmp	r6, #0
 800a38c:	d158      	bne.n	800a440 <_dtoa_r+0x4f8>
 800a38e:	4b82      	ldr	r3, [pc, #520]	; (800a598 <_dtoa_r+0x650>)
 800a390:	2200      	movs	r2, #0
 800a392:	4640      	mov	r0, r8
 800a394:	4649      	mov	r1, r9
 800a396:	f7f5 ff97 	bl	80002c8 <__aeabi_dsub>
 800a39a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a39e:	4680      	mov	r8, r0
 800a3a0:	4689      	mov	r9, r1
 800a3a2:	f7f6 fbd9 	bl	8000b58 <__aeabi_dcmpgt>
 800a3a6:	2800      	cmp	r0, #0
 800a3a8:	f040 8296 	bne.w	800a8d8 <_dtoa_r+0x990>
 800a3ac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a3b0:	4640      	mov	r0, r8
 800a3b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a3b6:	4649      	mov	r1, r9
 800a3b8:	f7f6 fbb0 	bl	8000b1c <__aeabi_dcmplt>
 800a3bc:	2800      	cmp	r0, #0
 800a3be:	f040 8289 	bne.w	800a8d4 <_dtoa_r+0x98c>
 800a3c2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a3c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	f2c0 814e 	blt.w	800a66a <_dtoa_r+0x722>
 800a3ce:	f1bb 0f0e 	cmp.w	fp, #14
 800a3d2:	f300 814a 	bgt.w	800a66a <_dtoa_r+0x722>
 800a3d6:	4b6b      	ldr	r3, [pc, #428]	; (800a584 <_dtoa_r+0x63c>)
 800a3d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a3dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a3e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	f280 80dc 	bge.w	800a5a0 <_dtoa_r+0x658>
 800a3e8:	9b04      	ldr	r3, [sp, #16]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	f300 80d8 	bgt.w	800a5a0 <_dtoa_r+0x658>
 800a3f0:	f040 826f 	bne.w	800a8d2 <_dtoa_r+0x98a>
 800a3f4:	4b68      	ldr	r3, [pc, #416]	; (800a598 <_dtoa_r+0x650>)
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	4640      	mov	r0, r8
 800a3fa:	4649      	mov	r1, r9
 800a3fc:	f7f6 f91c 	bl	8000638 <__aeabi_dmul>
 800a400:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a404:	f7f6 fb9e 	bl	8000b44 <__aeabi_dcmpge>
 800a408:	9e04      	ldr	r6, [sp, #16]
 800a40a:	4637      	mov	r7, r6
 800a40c:	2800      	cmp	r0, #0
 800a40e:	f040 8245 	bne.w	800a89c <_dtoa_r+0x954>
 800a412:	9d00      	ldr	r5, [sp, #0]
 800a414:	2331      	movs	r3, #49	; 0x31
 800a416:	f805 3b01 	strb.w	r3, [r5], #1
 800a41a:	f10b 0b01 	add.w	fp, fp, #1
 800a41e:	e241      	b.n	800a8a4 <_dtoa_r+0x95c>
 800a420:	07f2      	lsls	r2, r6, #31
 800a422:	d505      	bpl.n	800a430 <_dtoa_r+0x4e8>
 800a424:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a428:	f7f6 f906 	bl	8000638 <__aeabi_dmul>
 800a42c:	3501      	adds	r5, #1
 800a42e:	2301      	movs	r3, #1
 800a430:	1076      	asrs	r6, r6, #1
 800a432:	3708      	adds	r7, #8
 800a434:	e773      	b.n	800a31e <_dtoa_r+0x3d6>
 800a436:	2502      	movs	r5, #2
 800a438:	e775      	b.n	800a326 <_dtoa_r+0x3de>
 800a43a:	9e04      	ldr	r6, [sp, #16]
 800a43c:	465f      	mov	r7, fp
 800a43e:	e792      	b.n	800a366 <_dtoa_r+0x41e>
 800a440:	9900      	ldr	r1, [sp, #0]
 800a442:	4b50      	ldr	r3, [pc, #320]	; (800a584 <_dtoa_r+0x63c>)
 800a444:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a448:	4431      	add	r1, r6
 800a44a:	9102      	str	r1, [sp, #8]
 800a44c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a44e:	eeb0 9a47 	vmov.f32	s18, s14
 800a452:	eef0 9a67 	vmov.f32	s19, s15
 800a456:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a45a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a45e:	2900      	cmp	r1, #0
 800a460:	d044      	beq.n	800a4ec <_dtoa_r+0x5a4>
 800a462:	494e      	ldr	r1, [pc, #312]	; (800a59c <_dtoa_r+0x654>)
 800a464:	2000      	movs	r0, #0
 800a466:	f7f6 fa11 	bl	800088c <__aeabi_ddiv>
 800a46a:	ec53 2b19 	vmov	r2, r3, d9
 800a46e:	f7f5 ff2b 	bl	80002c8 <__aeabi_dsub>
 800a472:	9d00      	ldr	r5, [sp, #0]
 800a474:	ec41 0b19 	vmov	d9, r0, r1
 800a478:	4649      	mov	r1, r9
 800a47a:	4640      	mov	r0, r8
 800a47c:	f7f6 fb8c 	bl	8000b98 <__aeabi_d2iz>
 800a480:	4606      	mov	r6, r0
 800a482:	f7f6 f86f 	bl	8000564 <__aeabi_i2d>
 800a486:	4602      	mov	r2, r0
 800a488:	460b      	mov	r3, r1
 800a48a:	4640      	mov	r0, r8
 800a48c:	4649      	mov	r1, r9
 800a48e:	f7f5 ff1b 	bl	80002c8 <__aeabi_dsub>
 800a492:	3630      	adds	r6, #48	; 0x30
 800a494:	f805 6b01 	strb.w	r6, [r5], #1
 800a498:	ec53 2b19 	vmov	r2, r3, d9
 800a49c:	4680      	mov	r8, r0
 800a49e:	4689      	mov	r9, r1
 800a4a0:	f7f6 fb3c 	bl	8000b1c <__aeabi_dcmplt>
 800a4a4:	2800      	cmp	r0, #0
 800a4a6:	d164      	bne.n	800a572 <_dtoa_r+0x62a>
 800a4a8:	4642      	mov	r2, r8
 800a4aa:	464b      	mov	r3, r9
 800a4ac:	4937      	ldr	r1, [pc, #220]	; (800a58c <_dtoa_r+0x644>)
 800a4ae:	2000      	movs	r0, #0
 800a4b0:	f7f5 ff0a 	bl	80002c8 <__aeabi_dsub>
 800a4b4:	ec53 2b19 	vmov	r2, r3, d9
 800a4b8:	f7f6 fb30 	bl	8000b1c <__aeabi_dcmplt>
 800a4bc:	2800      	cmp	r0, #0
 800a4be:	f040 80b6 	bne.w	800a62e <_dtoa_r+0x6e6>
 800a4c2:	9b02      	ldr	r3, [sp, #8]
 800a4c4:	429d      	cmp	r5, r3
 800a4c6:	f43f af7c 	beq.w	800a3c2 <_dtoa_r+0x47a>
 800a4ca:	4b31      	ldr	r3, [pc, #196]	; (800a590 <_dtoa_r+0x648>)
 800a4cc:	ec51 0b19 	vmov	r0, r1, d9
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	f7f6 f8b1 	bl	8000638 <__aeabi_dmul>
 800a4d6:	4b2e      	ldr	r3, [pc, #184]	; (800a590 <_dtoa_r+0x648>)
 800a4d8:	ec41 0b19 	vmov	d9, r0, r1
 800a4dc:	2200      	movs	r2, #0
 800a4de:	4640      	mov	r0, r8
 800a4e0:	4649      	mov	r1, r9
 800a4e2:	f7f6 f8a9 	bl	8000638 <__aeabi_dmul>
 800a4e6:	4680      	mov	r8, r0
 800a4e8:	4689      	mov	r9, r1
 800a4ea:	e7c5      	b.n	800a478 <_dtoa_r+0x530>
 800a4ec:	ec51 0b17 	vmov	r0, r1, d7
 800a4f0:	f7f6 f8a2 	bl	8000638 <__aeabi_dmul>
 800a4f4:	9b02      	ldr	r3, [sp, #8]
 800a4f6:	9d00      	ldr	r5, [sp, #0]
 800a4f8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4fa:	ec41 0b19 	vmov	d9, r0, r1
 800a4fe:	4649      	mov	r1, r9
 800a500:	4640      	mov	r0, r8
 800a502:	f7f6 fb49 	bl	8000b98 <__aeabi_d2iz>
 800a506:	4606      	mov	r6, r0
 800a508:	f7f6 f82c 	bl	8000564 <__aeabi_i2d>
 800a50c:	3630      	adds	r6, #48	; 0x30
 800a50e:	4602      	mov	r2, r0
 800a510:	460b      	mov	r3, r1
 800a512:	4640      	mov	r0, r8
 800a514:	4649      	mov	r1, r9
 800a516:	f7f5 fed7 	bl	80002c8 <__aeabi_dsub>
 800a51a:	f805 6b01 	strb.w	r6, [r5], #1
 800a51e:	9b02      	ldr	r3, [sp, #8]
 800a520:	429d      	cmp	r5, r3
 800a522:	4680      	mov	r8, r0
 800a524:	4689      	mov	r9, r1
 800a526:	f04f 0200 	mov.w	r2, #0
 800a52a:	d124      	bne.n	800a576 <_dtoa_r+0x62e>
 800a52c:	4b1b      	ldr	r3, [pc, #108]	; (800a59c <_dtoa_r+0x654>)
 800a52e:	ec51 0b19 	vmov	r0, r1, d9
 800a532:	f7f5 fecb 	bl	80002cc <__adddf3>
 800a536:	4602      	mov	r2, r0
 800a538:	460b      	mov	r3, r1
 800a53a:	4640      	mov	r0, r8
 800a53c:	4649      	mov	r1, r9
 800a53e:	f7f6 fb0b 	bl	8000b58 <__aeabi_dcmpgt>
 800a542:	2800      	cmp	r0, #0
 800a544:	d173      	bne.n	800a62e <_dtoa_r+0x6e6>
 800a546:	ec53 2b19 	vmov	r2, r3, d9
 800a54a:	4914      	ldr	r1, [pc, #80]	; (800a59c <_dtoa_r+0x654>)
 800a54c:	2000      	movs	r0, #0
 800a54e:	f7f5 febb 	bl	80002c8 <__aeabi_dsub>
 800a552:	4602      	mov	r2, r0
 800a554:	460b      	mov	r3, r1
 800a556:	4640      	mov	r0, r8
 800a558:	4649      	mov	r1, r9
 800a55a:	f7f6 fadf 	bl	8000b1c <__aeabi_dcmplt>
 800a55e:	2800      	cmp	r0, #0
 800a560:	f43f af2f 	beq.w	800a3c2 <_dtoa_r+0x47a>
 800a564:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a566:	1e6b      	subs	r3, r5, #1
 800a568:	930f      	str	r3, [sp, #60]	; 0x3c
 800a56a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a56e:	2b30      	cmp	r3, #48	; 0x30
 800a570:	d0f8      	beq.n	800a564 <_dtoa_r+0x61c>
 800a572:	46bb      	mov	fp, r7
 800a574:	e04a      	b.n	800a60c <_dtoa_r+0x6c4>
 800a576:	4b06      	ldr	r3, [pc, #24]	; (800a590 <_dtoa_r+0x648>)
 800a578:	f7f6 f85e 	bl	8000638 <__aeabi_dmul>
 800a57c:	4680      	mov	r8, r0
 800a57e:	4689      	mov	r9, r1
 800a580:	e7bd      	b.n	800a4fe <_dtoa_r+0x5b6>
 800a582:	bf00      	nop
 800a584:	0800df90 	.word	0x0800df90
 800a588:	0800df68 	.word	0x0800df68
 800a58c:	3ff00000 	.word	0x3ff00000
 800a590:	40240000 	.word	0x40240000
 800a594:	401c0000 	.word	0x401c0000
 800a598:	40140000 	.word	0x40140000
 800a59c:	3fe00000 	.word	0x3fe00000
 800a5a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a5a4:	9d00      	ldr	r5, [sp, #0]
 800a5a6:	4642      	mov	r2, r8
 800a5a8:	464b      	mov	r3, r9
 800a5aa:	4630      	mov	r0, r6
 800a5ac:	4639      	mov	r1, r7
 800a5ae:	f7f6 f96d 	bl	800088c <__aeabi_ddiv>
 800a5b2:	f7f6 faf1 	bl	8000b98 <__aeabi_d2iz>
 800a5b6:	9001      	str	r0, [sp, #4]
 800a5b8:	f7f5 ffd4 	bl	8000564 <__aeabi_i2d>
 800a5bc:	4642      	mov	r2, r8
 800a5be:	464b      	mov	r3, r9
 800a5c0:	f7f6 f83a 	bl	8000638 <__aeabi_dmul>
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	4630      	mov	r0, r6
 800a5ca:	4639      	mov	r1, r7
 800a5cc:	f7f5 fe7c 	bl	80002c8 <__aeabi_dsub>
 800a5d0:	9e01      	ldr	r6, [sp, #4]
 800a5d2:	9f04      	ldr	r7, [sp, #16]
 800a5d4:	3630      	adds	r6, #48	; 0x30
 800a5d6:	f805 6b01 	strb.w	r6, [r5], #1
 800a5da:	9e00      	ldr	r6, [sp, #0]
 800a5dc:	1bae      	subs	r6, r5, r6
 800a5de:	42b7      	cmp	r7, r6
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	460b      	mov	r3, r1
 800a5e4:	d134      	bne.n	800a650 <_dtoa_r+0x708>
 800a5e6:	f7f5 fe71 	bl	80002cc <__adddf3>
 800a5ea:	4642      	mov	r2, r8
 800a5ec:	464b      	mov	r3, r9
 800a5ee:	4606      	mov	r6, r0
 800a5f0:	460f      	mov	r7, r1
 800a5f2:	f7f6 fab1 	bl	8000b58 <__aeabi_dcmpgt>
 800a5f6:	b9c8      	cbnz	r0, 800a62c <_dtoa_r+0x6e4>
 800a5f8:	4642      	mov	r2, r8
 800a5fa:	464b      	mov	r3, r9
 800a5fc:	4630      	mov	r0, r6
 800a5fe:	4639      	mov	r1, r7
 800a600:	f7f6 fa82 	bl	8000b08 <__aeabi_dcmpeq>
 800a604:	b110      	cbz	r0, 800a60c <_dtoa_r+0x6c4>
 800a606:	9b01      	ldr	r3, [sp, #4]
 800a608:	07db      	lsls	r3, r3, #31
 800a60a:	d40f      	bmi.n	800a62c <_dtoa_r+0x6e4>
 800a60c:	4651      	mov	r1, sl
 800a60e:	4620      	mov	r0, r4
 800a610:	f000 fbcc 	bl	800adac <_Bfree>
 800a614:	2300      	movs	r3, #0
 800a616:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a618:	702b      	strb	r3, [r5, #0]
 800a61a:	f10b 0301 	add.w	r3, fp, #1
 800a61e:	6013      	str	r3, [r2, #0]
 800a620:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a622:	2b00      	cmp	r3, #0
 800a624:	f43f ace2 	beq.w	8009fec <_dtoa_r+0xa4>
 800a628:	601d      	str	r5, [r3, #0]
 800a62a:	e4df      	b.n	8009fec <_dtoa_r+0xa4>
 800a62c:	465f      	mov	r7, fp
 800a62e:	462b      	mov	r3, r5
 800a630:	461d      	mov	r5, r3
 800a632:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a636:	2a39      	cmp	r2, #57	; 0x39
 800a638:	d106      	bne.n	800a648 <_dtoa_r+0x700>
 800a63a:	9a00      	ldr	r2, [sp, #0]
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d1f7      	bne.n	800a630 <_dtoa_r+0x6e8>
 800a640:	9900      	ldr	r1, [sp, #0]
 800a642:	2230      	movs	r2, #48	; 0x30
 800a644:	3701      	adds	r7, #1
 800a646:	700a      	strb	r2, [r1, #0]
 800a648:	781a      	ldrb	r2, [r3, #0]
 800a64a:	3201      	adds	r2, #1
 800a64c:	701a      	strb	r2, [r3, #0]
 800a64e:	e790      	b.n	800a572 <_dtoa_r+0x62a>
 800a650:	4ba3      	ldr	r3, [pc, #652]	; (800a8e0 <_dtoa_r+0x998>)
 800a652:	2200      	movs	r2, #0
 800a654:	f7f5 fff0 	bl	8000638 <__aeabi_dmul>
 800a658:	2200      	movs	r2, #0
 800a65a:	2300      	movs	r3, #0
 800a65c:	4606      	mov	r6, r0
 800a65e:	460f      	mov	r7, r1
 800a660:	f7f6 fa52 	bl	8000b08 <__aeabi_dcmpeq>
 800a664:	2800      	cmp	r0, #0
 800a666:	d09e      	beq.n	800a5a6 <_dtoa_r+0x65e>
 800a668:	e7d0      	b.n	800a60c <_dtoa_r+0x6c4>
 800a66a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a66c:	2a00      	cmp	r2, #0
 800a66e:	f000 80ca 	beq.w	800a806 <_dtoa_r+0x8be>
 800a672:	9a07      	ldr	r2, [sp, #28]
 800a674:	2a01      	cmp	r2, #1
 800a676:	f300 80ad 	bgt.w	800a7d4 <_dtoa_r+0x88c>
 800a67a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a67c:	2a00      	cmp	r2, #0
 800a67e:	f000 80a5 	beq.w	800a7cc <_dtoa_r+0x884>
 800a682:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a686:	9e08      	ldr	r6, [sp, #32]
 800a688:	9d05      	ldr	r5, [sp, #20]
 800a68a:	9a05      	ldr	r2, [sp, #20]
 800a68c:	441a      	add	r2, r3
 800a68e:	9205      	str	r2, [sp, #20]
 800a690:	9a06      	ldr	r2, [sp, #24]
 800a692:	2101      	movs	r1, #1
 800a694:	441a      	add	r2, r3
 800a696:	4620      	mov	r0, r4
 800a698:	9206      	str	r2, [sp, #24]
 800a69a:	f000 fc87 	bl	800afac <__i2b>
 800a69e:	4607      	mov	r7, r0
 800a6a0:	b165      	cbz	r5, 800a6bc <_dtoa_r+0x774>
 800a6a2:	9b06      	ldr	r3, [sp, #24]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	dd09      	ble.n	800a6bc <_dtoa_r+0x774>
 800a6a8:	42ab      	cmp	r3, r5
 800a6aa:	9a05      	ldr	r2, [sp, #20]
 800a6ac:	bfa8      	it	ge
 800a6ae:	462b      	movge	r3, r5
 800a6b0:	1ad2      	subs	r2, r2, r3
 800a6b2:	9205      	str	r2, [sp, #20]
 800a6b4:	9a06      	ldr	r2, [sp, #24]
 800a6b6:	1aed      	subs	r5, r5, r3
 800a6b8:	1ad3      	subs	r3, r2, r3
 800a6ba:	9306      	str	r3, [sp, #24]
 800a6bc:	9b08      	ldr	r3, [sp, #32]
 800a6be:	b1f3      	cbz	r3, 800a6fe <_dtoa_r+0x7b6>
 800a6c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	f000 80a3 	beq.w	800a80e <_dtoa_r+0x8c6>
 800a6c8:	2e00      	cmp	r6, #0
 800a6ca:	dd10      	ble.n	800a6ee <_dtoa_r+0x7a6>
 800a6cc:	4639      	mov	r1, r7
 800a6ce:	4632      	mov	r2, r6
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	f000 fd2b 	bl	800b12c <__pow5mult>
 800a6d6:	4652      	mov	r2, sl
 800a6d8:	4601      	mov	r1, r0
 800a6da:	4607      	mov	r7, r0
 800a6dc:	4620      	mov	r0, r4
 800a6de:	f000 fc7b 	bl	800afd8 <__multiply>
 800a6e2:	4651      	mov	r1, sl
 800a6e4:	4680      	mov	r8, r0
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	f000 fb60 	bl	800adac <_Bfree>
 800a6ec:	46c2      	mov	sl, r8
 800a6ee:	9b08      	ldr	r3, [sp, #32]
 800a6f0:	1b9a      	subs	r2, r3, r6
 800a6f2:	d004      	beq.n	800a6fe <_dtoa_r+0x7b6>
 800a6f4:	4651      	mov	r1, sl
 800a6f6:	4620      	mov	r0, r4
 800a6f8:	f000 fd18 	bl	800b12c <__pow5mult>
 800a6fc:	4682      	mov	sl, r0
 800a6fe:	2101      	movs	r1, #1
 800a700:	4620      	mov	r0, r4
 800a702:	f000 fc53 	bl	800afac <__i2b>
 800a706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a708:	2b00      	cmp	r3, #0
 800a70a:	4606      	mov	r6, r0
 800a70c:	f340 8081 	ble.w	800a812 <_dtoa_r+0x8ca>
 800a710:	461a      	mov	r2, r3
 800a712:	4601      	mov	r1, r0
 800a714:	4620      	mov	r0, r4
 800a716:	f000 fd09 	bl	800b12c <__pow5mult>
 800a71a:	9b07      	ldr	r3, [sp, #28]
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	4606      	mov	r6, r0
 800a720:	dd7a      	ble.n	800a818 <_dtoa_r+0x8d0>
 800a722:	f04f 0800 	mov.w	r8, #0
 800a726:	6933      	ldr	r3, [r6, #16]
 800a728:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a72c:	6918      	ldr	r0, [r3, #16]
 800a72e:	f000 fbef 	bl	800af10 <__hi0bits>
 800a732:	f1c0 0020 	rsb	r0, r0, #32
 800a736:	9b06      	ldr	r3, [sp, #24]
 800a738:	4418      	add	r0, r3
 800a73a:	f010 001f 	ands.w	r0, r0, #31
 800a73e:	f000 8094 	beq.w	800a86a <_dtoa_r+0x922>
 800a742:	f1c0 0320 	rsb	r3, r0, #32
 800a746:	2b04      	cmp	r3, #4
 800a748:	f340 8085 	ble.w	800a856 <_dtoa_r+0x90e>
 800a74c:	9b05      	ldr	r3, [sp, #20]
 800a74e:	f1c0 001c 	rsb	r0, r0, #28
 800a752:	4403      	add	r3, r0
 800a754:	9305      	str	r3, [sp, #20]
 800a756:	9b06      	ldr	r3, [sp, #24]
 800a758:	4403      	add	r3, r0
 800a75a:	4405      	add	r5, r0
 800a75c:	9306      	str	r3, [sp, #24]
 800a75e:	9b05      	ldr	r3, [sp, #20]
 800a760:	2b00      	cmp	r3, #0
 800a762:	dd05      	ble.n	800a770 <_dtoa_r+0x828>
 800a764:	4651      	mov	r1, sl
 800a766:	461a      	mov	r2, r3
 800a768:	4620      	mov	r0, r4
 800a76a:	f000 fd39 	bl	800b1e0 <__lshift>
 800a76e:	4682      	mov	sl, r0
 800a770:	9b06      	ldr	r3, [sp, #24]
 800a772:	2b00      	cmp	r3, #0
 800a774:	dd05      	ble.n	800a782 <_dtoa_r+0x83a>
 800a776:	4631      	mov	r1, r6
 800a778:	461a      	mov	r2, r3
 800a77a:	4620      	mov	r0, r4
 800a77c:	f000 fd30 	bl	800b1e0 <__lshift>
 800a780:	4606      	mov	r6, r0
 800a782:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a784:	2b00      	cmp	r3, #0
 800a786:	d072      	beq.n	800a86e <_dtoa_r+0x926>
 800a788:	4631      	mov	r1, r6
 800a78a:	4650      	mov	r0, sl
 800a78c:	f000 fd94 	bl	800b2b8 <__mcmp>
 800a790:	2800      	cmp	r0, #0
 800a792:	da6c      	bge.n	800a86e <_dtoa_r+0x926>
 800a794:	2300      	movs	r3, #0
 800a796:	4651      	mov	r1, sl
 800a798:	220a      	movs	r2, #10
 800a79a:	4620      	mov	r0, r4
 800a79c:	f000 fb28 	bl	800adf0 <__multadd>
 800a7a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a7a6:	4682      	mov	sl, r0
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	f000 81b0 	beq.w	800ab0e <_dtoa_r+0xbc6>
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	4639      	mov	r1, r7
 800a7b2:	220a      	movs	r2, #10
 800a7b4:	4620      	mov	r0, r4
 800a7b6:	f000 fb1b 	bl	800adf0 <__multadd>
 800a7ba:	9b01      	ldr	r3, [sp, #4]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	4607      	mov	r7, r0
 800a7c0:	f300 8096 	bgt.w	800a8f0 <_dtoa_r+0x9a8>
 800a7c4:	9b07      	ldr	r3, [sp, #28]
 800a7c6:	2b02      	cmp	r3, #2
 800a7c8:	dc59      	bgt.n	800a87e <_dtoa_r+0x936>
 800a7ca:	e091      	b.n	800a8f0 <_dtoa_r+0x9a8>
 800a7cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a7ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a7d2:	e758      	b.n	800a686 <_dtoa_r+0x73e>
 800a7d4:	9b04      	ldr	r3, [sp, #16]
 800a7d6:	1e5e      	subs	r6, r3, #1
 800a7d8:	9b08      	ldr	r3, [sp, #32]
 800a7da:	42b3      	cmp	r3, r6
 800a7dc:	bfbf      	itttt	lt
 800a7de:	9b08      	ldrlt	r3, [sp, #32]
 800a7e0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a7e2:	9608      	strlt	r6, [sp, #32]
 800a7e4:	1af3      	sublt	r3, r6, r3
 800a7e6:	bfb4      	ite	lt
 800a7e8:	18d2      	addlt	r2, r2, r3
 800a7ea:	1b9e      	subge	r6, r3, r6
 800a7ec:	9b04      	ldr	r3, [sp, #16]
 800a7ee:	bfbc      	itt	lt
 800a7f0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a7f2:	2600      	movlt	r6, #0
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	bfb7      	itett	lt
 800a7f8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a7fc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a800:	1a9d      	sublt	r5, r3, r2
 800a802:	2300      	movlt	r3, #0
 800a804:	e741      	b.n	800a68a <_dtoa_r+0x742>
 800a806:	9e08      	ldr	r6, [sp, #32]
 800a808:	9d05      	ldr	r5, [sp, #20]
 800a80a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a80c:	e748      	b.n	800a6a0 <_dtoa_r+0x758>
 800a80e:	9a08      	ldr	r2, [sp, #32]
 800a810:	e770      	b.n	800a6f4 <_dtoa_r+0x7ac>
 800a812:	9b07      	ldr	r3, [sp, #28]
 800a814:	2b01      	cmp	r3, #1
 800a816:	dc19      	bgt.n	800a84c <_dtoa_r+0x904>
 800a818:	9b02      	ldr	r3, [sp, #8]
 800a81a:	b9bb      	cbnz	r3, 800a84c <_dtoa_r+0x904>
 800a81c:	9b03      	ldr	r3, [sp, #12]
 800a81e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a822:	b99b      	cbnz	r3, 800a84c <_dtoa_r+0x904>
 800a824:	9b03      	ldr	r3, [sp, #12]
 800a826:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a82a:	0d1b      	lsrs	r3, r3, #20
 800a82c:	051b      	lsls	r3, r3, #20
 800a82e:	b183      	cbz	r3, 800a852 <_dtoa_r+0x90a>
 800a830:	9b05      	ldr	r3, [sp, #20]
 800a832:	3301      	adds	r3, #1
 800a834:	9305      	str	r3, [sp, #20]
 800a836:	9b06      	ldr	r3, [sp, #24]
 800a838:	3301      	adds	r3, #1
 800a83a:	9306      	str	r3, [sp, #24]
 800a83c:	f04f 0801 	mov.w	r8, #1
 800a840:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a842:	2b00      	cmp	r3, #0
 800a844:	f47f af6f 	bne.w	800a726 <_dtoa_r+0x7de>
 800a848:	2001      	movs	r0, #1
 800a84a:	e774      	b.n	800a736 <_dtoa_r+0x7ee>
 800a84c:	f04f 0800 	mov.w	r8, #0
 800a850:	e7f6      	b.n	800a840 <_dtoa_r+0x8f8>
 800a852:	4698      	mov	r8, r3
 800a854:	e7f4      	b.n	800a840 <_dtoa_r+0x8f8>
 800a856:	d082      	beq.n	800a75e <_dtoa_r+0x816>
 800a858:	9a05      	ldr	r2, [sp, #20]
 800a85a:	331c      	adds	r3, #28
 800a85c:	441a      	add	r2, r3
 800a85e:	9205      	str	r2, [sp, #20]
 800a860:	9a06      	ldr	r2, [sp, #24]
 800a862:	441a      	add	r2, r3
 800a864:	441d      	add	r5, r3
 800a866:	9206      	str	r2, [sp, #24]
 800a868:	e779      	b.n	800a75e <_dtoa_r+0x816>
 800a86a:	4603      	mov	r3, r0
 800a86c:	e7f4      	b.n	800a858 <_dtoa_r+0x910>
 800a86e:	9b04      	ldr	r3, [sp, #16]
 800a870:	2b00      	cmp	r3, #0
 800a872:	dc37      	bgt.n	800a8e4 <_dtoa_r+0x99c>
 800a874:	9b07      	ldr	r3, [sp, #28]
 800a876:	2b02      	cmp	r3, #2
 800a878:	dd34      	ble.n	800a8e4 <_dtoa_r+0x99c>
 800a87a:	9b04      	ldr	r3, [sp, #16]
 800a87c:	9301      	str	r3, [sp, #4]
 800a87e:	9b01      	ldr	r3, [sp, #4]
 800a880:	b963      	cbnz	r3, 800a89c <_dtoa_r+0x954>
 800a882:	4631      	mov	r1, r6
 800a884:	2205      	movs	r2, #5
 800a886:	4620      	mov	r0, r4
 800a888:	f000 fab2 	bl	800adf0 <__multadd>
 800a88c:	4601      	mov	r1, r0
 800a88e:	4606      	mov	r6, r0
 800a890:	4650      	mov	r0, sl
 800a892:	f000 fd11 	bl	800b2b8 <__mcmp>
 800a896:	2800      	cmp	r0, #0
 800a898:	f73f adbb 	bgt.w	800a412 <_dtoa_r+0x4ca>
 800a89c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a89e:	9d00      	ldr	r5, [sp, #0]
 800a8a0:	ea6f 0b03 	mvn.w	fp, r3
 800a8a4:	f04f 0800 	mov.w	r8, #0
 800a8a8:	4631      	mov	r1, r6
 800a8aa:	4620      	mov	r0, r4
 800a8ac:	f000 fa7e 	bl	800adac <_Bfree>
 800a8b0:	2f00      	cmp	r7, #0
 800a8b2:	f43f aeab 	beq.w	800a60c <_dtoa_r+0x6c4>
 800a8b6:	f1b8 0f00 	cmp.w	r8, #0
 800a8ba:	d005      	beq.n	800a8c8 <_dtoa_r+0x980>
 800a8bc:	45b8      	cmp	r8, r7
 800a8be:	d003      	beq.n	800a8c8 <_dtoa_r+0x980>
 800a8c0:	4641      	mov	r1, r8
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	f000 fa72 	bl	800adac <_Bfree>
 800a8c8:	4639      	mov	r1, r7
 800a8ca:	4620      	mov	r0, r4
 800a8cc:	f000 fa6e 	bl	800adac <_Bfree>
 800a8d0:	e69c      	b.n	800a60c <_dtoa_r+0x6c4>
 800a8d2:	2600      	movs	r6, #0
 800a8d4:	4637      	mov	r7, r6
 800a8d6:	e7e1      	b.n	800a89c <_dtoa_r+0x954>
 800a8d8:	46bb      	mov	fp, r7
 800a8da:	4637      	mov	r7, r6
 800a8dc:	e599      	b.n	800a412 <_dtoa_r+0x4ca>
 800a8de:	bf00      	nop
 800a8e0:	40240000 	.word	0x40240000
 800a8e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	f000 80c8 	beq.w	800aa7c <_dtoa_r+0xb34>
 800a8ec:	9b04      	ldr	r3, [sp, #16]
 800a8ee:	9301      	str	r3, [sp, #4]
 800a8f0:	2d00      	cmp	r5, #0
 800a8f2:	dd05      	ble.n	800a900 <_dtoa_r+0x9b8>
 800a8f4:	4639      	mov	r1, r7
 800a8f6:	462a      	mov	r2, r5
 800a8f8:	4620      	mov	r0, r4
 800a8fa:	f000 fc71 	bl	800b1e0 <__lshift>
 800a8fe:	4607      	mov	r7, r0
 800a900:	f1b8 0f00 	cmp.w	r8, #0
 800a904:	d05b      	beq.n	800a9be <_dtoa_r+0xa76>
 800a906:	6879      	ldr	r1, [r7, #4]
 800a908:	4620      	mov	r0, r4
 800a90a:	f000 fa0f 	bl	800ad2c <_Balloc>
 800a90e:	4605      	mov	r5, r0
 800a910:	b928      	cbnz	r0, 800a91e <_dtoa_r+0x9d6>
 800a912:	4b83      	ldr	r3, [pc, #524]	; (800ab20 <_dtoa_r+0xbd8>)
 800a914:	4602      	mov	r2, r0
 800a916:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a91a:	f7ff bb2e 	b.w	8009f7a <_dtoa_r+0x32>
 800a91e:	693a      	ldr	r2, [r7, #16]
 800a920:	3202      	adds	r2, #2
 800a922:	0092      	lsls	r2, r2, #2
 800a924:	f107 010c 	add.w	r1, r7, #12
 800a928:	300c      	adds	r0, #12
 800a92a:	f002 fb19 	bl	800cf60 <memcpy>
 800a92e:	2201      	movs	r2, #1
 800a930:	4629      	mov	r1, r5
 800a932:	4620      	mov	r0, r4
 800a934:	f000 fc54 	bl	800b1e0 <__lshift>
 800a938:	9b00      	ldr	r3, [sp, #0]
 800a93a:	3301      	adds	r3, #1
 800a93c:	9304      	str	r3, [sp, #16]
 800a93e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a942:	4413      	add	r3, r2
 800a944:	9308      	str	r3, [sp, #32]
 800a946:	9b02      	ldr	r3, [sp, #8]
 800a948:	f003 0301 	and.w	r3, r3, #1
 800a94c:	46b8      	mov	r8, r7
 800a94e:	9306      	str	r3, [sp, #24]
 800a950:	4607      	mov	r7, r0
 800a952:	9b04      	ldr	r3, [sp, #16]
 800a954:	4631      	mov	r1, r6
 800a956:	3b01      	subs	r3, #1
 800a958:	4650      	mov	r0, sl
 800a95a:	9301      	str	r3, [sp, #4]
 800a95c:	f7ff fa6c 	bl	8009e38 <quorem>
 800a960:	4641      	mov	r1, r8
 800a962:	9002      	str	r0, [sp, #8]
 800a964:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a968:	4650      	mov	r0, sl
 800a96a:	f000 fca5 	bl	800b2b8 <__mcmp>
 800a96e:	463a      	mov	r2, r7
 800a970:	9005      	str	r0, [sp, #20]
 800a972:	4631      	mov	r1, r6
 800a974:	4620      	mov	r0, r4
 800a976:	f000 fcbb 	bl	800b2f0 <__mdiff>
 800a97a:	68c2      	ldr	r2, [r0, #12]
 800a97c:	4605      	mov	r5, r0
 800a97e:	bb02      	cbnz	r2, 800a9c2 <_dtoa_r+0xa7a>
 800a980:	4601      	mov	r1, r0
 800a982:	4650      	mov	r0, sl
 800a984:	f000 fc98 	bl	800b2b8 <__mcmp>
 800a988:	4602      	mov	r2, r0
 800a98a:	4629      	mov	r1, r5
 800a98c:	4620      	mov	r0, r4
 800a98e:	9209      	str	r2, [sp, #36]	; 0x24
 800a990:	f000 fa0c 	bl	800adac <_Bfree>
 800a994:	9b07      	ldr	r3, [sp, #28]
 800a996:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a998:	9d04      	ldr	r5, [sp, #16]
 800a99a:	ea43 0102 	orr.w	r1, r3, r2
 800a99e:	9b06      	ldr	r3, [sp, #24]
 800a9a0:	4319      	orrs	r1, r3
 800a9a2:	d110      	bne.n	800a9c6 <_dtoa_r+0xa7e>
 800a9a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a9a8:	d029      	beq.n	800a9fe <_dtoa_r+0xab6>
 800a9aa:	9b05      	ldr	r3, [sp, #20]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	dd02      	ble.n	800a9b6 <_dtoa_r+0xa6e>
 800a9b0:	9b02      	ldr	r3, [sp, #8]
 800a9b2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a9b6:	9b01      	ldr	r3, [sp, #4]
 800a9b8:	f883 9000 	strb.w	r9, [r3]
 800a9bc:	e774      	b.n	800a8a8 <_dtoa_r+0x960>
 800a9be:	4638      	mov	r0, r7
 800a9c0:	e7ba      	b.n	800a938 <_dtoa_r+0x9f0>
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	e7e1      	b.n	800a98a <_dtoa_r+0xa42>
 800a9c6:	9b05      	ldr	r3, [sp, #20]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	db04      	blt.n	800a9d6 <_dtoa_r+0xa8e>
 800a9cc:	9907      	ldr	r1, [sp, #28]
 800a9ce:	430b      	orrs	r3, r1
 800a9d0:	9906      	ldr	r1, [sp, #24]
 800a9d2:	430b      	orrs	r3, r1
 800a9d4:	d120      	bne.n	800aa18 <_dtoa_r+0xad0>
 800a9d6:	2a00      	cmp	r2, #0
 800a9d8:	dded      	ble.n	800a9b6 <_dtoa_r+0xa6e>
 800a9da:	4651      	mov	r1, sl
 800a9dc:	2201      	movs	r2, #1
 800a9de:	4620      	mov	r0, r4
 800a9e0:	f000 fbfe 	bl	800b1e0 <__lshift>
 800a9e4:	4631      	mov	r1, r6
 800a9e6:	4682      	mov	sl, r0
 800a9e8:	f000 fc66 	bl	800b2b8 <__mcmp>
 800a9ec:	2800      	cmp	r0, #0
 800a9ee:	dc03      	bgt.n	800a9f8 <_dtoa_r+0xab0>
 800a9f0:	d1e1      	bne.n	800a9b6 <_dtoa_r+0xa6e>
 800a9f2:	f019 0f01 	tst.w	r9, #1
 800a9f6:	d0de      	beq.n	800a9b6 <_dtoa_r+0xa6e>
 800a9f8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a9fc:	d1d8      	bne.n	800a9b0 <_dtoa_r+0xa68>
 800a9fe:	9a01      	ldr	r2, [sp, #4]
 800aa00:	2339      	movs	r3, #57	; 0x39
 800aa02:	7013      	strb	r3, [r2, #0]
 800aa04:	462b      	mov	r3, r5
 800aa06:	461d      	mov	r5, r3
 800aa08:	3b01      	subs	r3, #1
 800aa0a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aa0e:	2a39      	cmp	r2, #57	; 0x39
 800aa10:	d06c      	beq.n	800aaec <_dtoa_r+0xba4>
 800aa12:	3201      	adds	r2, #1
 800aa14:	701a      	strb	r2, [r3, #0]
 800aa16:	e747      	b.n	800a8a8 <_dtoa_r+0x960>
 800aa18:	2a00      	cmp	r2, #0
 800aa1a:	dd07      	ble.n	800aa2c <_dtoa_r+0xae4>
 800aa1c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aa20:	d0ed      	beq.n	800a9fe <_dtoa_r+0xab6>
 800aa22:	9a01      	ldr	r2, [sp, #4]
 800aa24:	f109 0301 	add.w	r3, r9, #1
 800aa28:	7013      	strb	r3, [r2, #0]
 800aa2a:	e73d      	b.n	800a8a8 <_dtoa_r+0x960>
 800aa2c:	9b04      	ldr	r3, [sp, #16]
 800aa2e:	9a08      	ldr	r2, [sp, #32]
 800aa30:	f803 9c01 	strb.w	r9, [r3, #-1]
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d043      	beq.n	800aac0 <_dtoa_r+0xb78>
 800aa38:	4651      	mov	r1, sl
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	220a      	movs	r2, #10
 800aa3e:	4620      	mov	r0, r4
 800aa40:	f000 f9d6 	bl	800adf0 <__multadd>
 800aa44:	45b8      	cmp	r8, r7
 800aa46:	4682      	mov	sl, r0
 800aa48:	f04f 0300 	mov.w	r3, #0
 800aa4c:	f04f 020a 	mov.w	r2, #10
 800aa50:	4641      	mov	r1, r8
 800aa52:	4620      	mov	r0, r4
 800aa54:	d107      	bne.n	800aa66 <_dtoa_r+0xb1e>
 800aa56:	f000 f9cb 	bl	800adf0 <__multadd>
 800aa5a:	4680      	mov	r8, r0
 800aa5c:	4607      	mov	r7, r0
 800aa5e:	9b04      	ldr	r3, [sp, #16]
 800aa60:	3301      	adds	r3, #1
 800aa62:	9304      	str	r3, [sp, #16]
 800aa64:	e775      	b.n	800a952 <_dtoa_r+0xa0a>
 800aa66:	f000 f9c3 	bl	800adf0 <__multadd>
 800aa6a:	4639      	mov	r1, r7
 800aa6c:	4680      	mov	r8, r0
 800aa6e:	2300      	movs	r3, #0
 800aa70:	220a      	movs	r2, #10
 800aa72:	4620      	mov	r0, r4
 800aa74:	f000 f9bc 	bl	800adf0 <__multadd>
 800aa78:	4607      	mov	r7, r0
 800aa7a:	e7f0      	b.n	800aa5e <_dtoa_r+0xb16>
 800aa7c:	9b04      	ldr	r3, [sp, #16]
 800aa7e:	9301      	str	r3, [sp, #4]
 800aa80:	9d00      	ldr	r5, [sp, #0]
 800aa82:	4631      	mov	r1, r6
 800aa84:	4650      	mov	r0, sl
 800aa86:	f7ff f9d7 	bl	8009e38 <quorem>
 800aa8a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800aa8e:	9b00      	ldr	r3, [sp, #0]
 800aa90:	f805 9b01 	strb.w	r9, [r5], #1
 800aa94:	1aea      	subs	r2, r5, r3
 800aa96:	9b01      	ldr	r3, [sp, #4]
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	dd07      	ble.n	800aaac <_dtoa_r+0xb64>
 800aa9c:	4651      	mov	r1, sl
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	220a      	movs	r2, #10
 800aaa2:	4620      	mov	r0, r4
 800aaa4:	f000 f9a4 	bl	800adf0 <__multadd>
 800aaa8:	4682      	mov	sl, r0
 800aaaa:	e7ea      	b.n	800aa82 <_dtoa_r+0xb3a>
 800aaac:	9b01      	ldr	r3, [sp, #4]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	bfc8      	it	gt
 800aab2:	461d      	movgt	r5, r3
 800aab4:	9b00      	ldr	r3, [sp, #0]
 800aab6:	bfd8      	it	le
 800aab8:	2501      	movle	r5, #1
 800aaba:	441d      	add	r5, r3
 800aabc:	f04f 0800 	mov.w	r8, #0
 800aac0:	4651      	mov	r1, sl
 800aac2:	2201      	movs	r2, #1
 800aac4:	4620      	mov	r0, r4
 800aac6:	f000 fb8b 	bl	800b1e0 <__lshift>
 800aaca:	4631      	mov	r1, r6
 800aacc:	4682      	mov	sl, r0
 800aace:	f000 fbf3 	bl	800b2b8 <__mcmp>
 800aad2:	2800      	cmp	r0, #0
 800aad4:	dc96      	bgt.n	800aa04 <_dtoa_r+0xabc>
 800aad6:	d102      	bne.n	800aade <_dtoa_r+0xb96>
 800aad8:	f019 0f01 	tst.w	r9, #1
 800aadc:	d192      	bne.n	800aa04 <_dtoa_r+0xabc>
 800aade:	462b      	mov	r3, r5
 800aae0:	461d      	mov	r5, r3
 800aae2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aae6:	2a30      	cmp	r2, #48	; 0x30
 800aae8:	d0fa      	beq.n	800aae0 <_dtoa_r+0xb98>
 800aaea:	e6dd      	b.n	800a8a8 <_dtoa_r+0x960>
 800aaec:	9a00      	ldr	r2, [sp, #0]
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d189      	bne.n	800aa06 <_dtoa_r+0xabe>
 800aaf2:	f10b 0b01 	add.w	fp, fp, #1
 800aaf6:	2331      	movs	r3, #49	; 0x31
 800aaf8:	e796      	b.n	800aa28 <_dtoa_r+0xae0>
 800aafa:	4b0a      	ldr	r3, [pc, #40]	; (800ab24 <_dtoa_r+0xbdc>)
 800aafc:	f7ff ba99 	b.w	800a032 <_dtoa_r+0xea>
 800ab00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	f47f aa6d 	bne.w	8009fe2 <_dtoa_r+0x9a>
 800ab08:	4b07      	ldr	r3, [pc, #28]	; (800ab28 <_dtoa_r+0xbe0>)
 800ab0a:	f7ff ba92 	b.w	800a032 <_dtoa_r+0xea>
 800ab0e:	9b01      	ldr	r3, [sp, #4]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	dcb5      	bgt.n	800aa80 <_dtoa_r+0xb38>
 800ab14:	9b07      	ldr	r3, [sp, #28]
 800ab16:	2b02      	cmp	r3, #2
 800ab18:	f73f aeb1 	bgt.w	800a87e <_dtoa_r+0x936>
 800ab1c:	e7b0      	b.n	800aa80 <_dtoa_r+0xb38>
 800ab1e:	bf00      	nop
 800ab20:	0800def7 	.word	0x0800def7
 800ab24:	0800e1e0 	.word	0x0800e1e0
 800ab28:	0800de7b 	.word	0x0800de7b

0800ab2c <_free_r>:
 800ab2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab2e:	2900      	cmp	r1, #0
 800ab30:	d044      	beq.n	800abbc <_free_r+0x90>
 800ab32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab36:	9001      	str	r0, [sp, #4]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	f1a1 0404 	sub.w	r4, r1, #4
 800ab3e:	bfb8      	it	lt
 800ab40:	18e4      	addlt	r4, r4, r3
 800ab42:	f000 f8e7 	bl	800ad14 <__malloc_lock>
 800ab46:	4a1e      	ldr	r2, [pc, #120]	; (800abc0 <_free_r+0x94>)
 800ab48:	9801      	ldr	r0, [sp, #4]
 800ab4a:	6813      	ldr	r3, [r2, #0]
 800ab4c:	b933      	cbnz	r3, 800ab5c <_free_r+0x30>
 800ab4e:	6063      	str	r3, [r4, #4]
 800ab50:	6014      	str	r4, [r2, #0]
 800ab52:	b003      	add	sp, #12
 800ab54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab58:	f000 b8e2 	b.w	800ad20 <__malloc_unlock>
 800ab5c:	42a3      	cmp	r3, r4
 800ab5e:	d908      	bls.n	800ab72 <_free_r+0x46>
 800ab60:	6825      	ldr	r5, [r4, #0]
 800ab62:	1961      	adds	r1, r4, r5
 800ab64:	428b      	cmp	r3, r1
 800ab66:	bf01      	itttt	eq
 800ab68:	6819      	ldreq	r1, [r3, #0]
 800ab6a:	685b      	ldreq	r3, [r3, #4]
 800ab6c:	1949      	addeq	r1, r1, r5
 800ab6e:	6021      	streq	r1, [r4, #0]
 800ab70:	e7ed      	b.n	800ab4e <_free_r+0x22>
 800ab72:	461a      	mov	r2, r3
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	b10b      	cbz	r3, 800ab7c <_free_r+0x50>
 800ab78:	42a3      	cmp	r3, r4
 800ab7a:	d9fa      	bls.n	800ab72 <_free_r+0x46>
 800ab7c:	6811      	ldr	r1, [r2, #0]
 800ab7e:	1855      	adds	r5, r2, r1
 800ab80:	42a5      	cmp	r5, r4
 800ab82:	d10b      	bne.n	800ab9c <_free_r+0x70>
 800ab84:	6824      	ldr	r4, [r4, #0]
 800ab86:	4421      	add	r1, r4
 800ab88:	1854      	adds	r4, r2, r1
 800ab8a:	42a3      	cmp	r3, r4
 800ab8c:	6011      	str	r1, [r2, #0]
 800ab8e:	d1e0      	bne.n	800ab52 <_free_r+0x26>
 800ab90:	681c      	ldr	r4, [r3, #0]
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	6053      	str	r3, [r2, #4]
 800ab96:	440c      	add	r4, r1
 800ab98:	6014      	str	r4, [r2, #0]
 800ab9a:	e7da      	b.n	800ab52 <_free_r+0x26>
 800ab9c:	d902      	bls.n	800aba4 <_free_r+0x78>
 800ab9e:	230c      	movs	r3, #12
 800aba0:	6003      	str	r3, [r0, #0]
 800aba2:	e7d6      	b.n	800ab52 <_free_r+0x26>
 800aba4:	6825      	ldr	r5, [r4, #0]
 800aba6:	1961      	adds	r1, r4, r5
 800aba8:	428b      	cmp	r3, r1
 800abaa:	bf04      	itt	eq
 800abac:	6819      	ldreq	r1, [r3, #0]
 800abae:	685b      	ldreq	r3, [r3, #4]
 800abb0:	6063      	str	r3, [r4, #4]
 800abb2:	bf04      	itt	eq
 800abb4:	1949      	addeq	r1, r1, r5
 800abb6:	6021      	streq	r1, [r4, #0]
 800abb8:	6054      	str	r4, [r2, #4]
 800abba:	e7ca      	b.n	800ab52 <_free_r+0x26>
 800abbc:	b003      	add	sp, #12
 800abbe:	bd30      	pop	{r4, r5, pc}
 800abc0:	200005e0 	.word	0x200005e0

0800abc4 <malloc>:
 800abc4:	4b02      	ldr	r3, [pc, #8]	; (800abd0 <malloc+0xc>)
 800abc6:	4601      	mov	r1, r0
 800abc8:	6818      	ldr	r0, [r3, #0]
 800abca:	f000 b823 	b.w	800ac14 <_malloc_r>
 800abce:	bf00      	nop
 800abd0:	2000006c 	.word	0x2000006c

0800abd4 <sbrk_aligned>:
 800abd4:	b570      	push	{r4, r5, r6, lr}
 800abd6:	4e0e      	ldr	r6, [pc, #56]	; (800ac10 <sbrk_aligned+0x3c>)
 800abd8:	460c      	mov	r4, r1
 800abda:	6831      	ldr	r1, [r6, #0]
 800abdc:	4605      	mov	r5, r0
 800abde:	b911      	cbnz	r1, 800abe6 <sbrk_aligned+0x12>
 800abe0:	f002 f9ae 	bl	800cf40 <_sbrk_r>
 800abe4:	6030      	str	r0, [r6, #0]
 800abe6:	4621      	mov	r1, r4
 800abe8:	4628      	mov	r0, r5
 800abea:	f002 f9a9 	bl	800cf40 <_sbrk_r>
 800abee:	1c43      	adds	r3, r0, #1
 800abf0:	d00a      	beq.n	800ac08 <sbrk_aligned+0x34>
 800abf2:	1cc4      	adds	r4, r0, #3
 800abf4:	f024 0403 	bic.w	r4, r4, #3
 800abf8:	42a0      	cmp	r0, r4
 800abfa:	d007      	beq.n	800ac0c <sbrk_aligned+0x38>
 800abfc:	1a21      	subs	r1, r4, r0
 800abfe:	4628      	mov	r0, r5
 800ac00:	f002 f99e 	bl	800cf40 <_sbrk_r>
 800ac04:	3001      	adds	r0, #1
 800ac06:	d101      	bne.n	800ac0c <sbrk_aligned+0x38>
 800ac08:	f04f 34ff 	mov.w	r4, #4294967295
 800ac0c:	4620      	mov	r0, r4
 800ac0e:	bd70      	pop	{r4, r5, r6, pc}
 800ac10:	200005e4 	.word	0x200005e4

0800ac14 <_malloc_r>:
 800ac14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac18:	1ccd      	adds	r5, r1, #3
 800ac1a:	f025 0503 	bic.w	r5, r5, #3
 800ac1e:	3508      	adds	r5, #8
 800ac20:	2d0c      	cmp	r5, #12
 800ac22:	bf38      	it	cc
 800ac24:	250c      	movcc	r5, #12
 800ac26:	2d00      	cmp	r5, #0
 800ac28:	4607      	mov	r7, r0
 800ac2a:	db01      	blt.n	800ac30 <_malloc_r+0x1c>
 800ac2c:	42a9      	cmp	r1, r5
 800ac2e:	d905      	bls.n	800ac3c <_malloc_r+0x28>
 800ac30:	230c      	movs	r3, #12
 800ac32:	603b      	str	r3, [r7, #0]
 800ac34:	2600      	movs	r6, #0
 800ac36:	4630      	mov	r0, r6
 800ac38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac3c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ad10 <_malloc_r+0xfc>
 800ac40:	f000 f868 	bl	800ad14 <__malloc_lock>
 800ac44:	f8d8 3000 	ldr.w	r3, [r8]
 800ac48:	461c      	mov	r4, r3
 800ac4a:	bb5c      	cbnz	r4, 800aca4 <_malloc_r+0x90>
 800ac4c:	4629      	mov	r1, r5
 800ac4e:	4638      	mov	r0, r7
 800ac50:	f7ff ffc0 	bl	800abd4 <sbrk_aligned>
 800ac54:	1c43      	adds	r3, r0, #1
 800ac56:	4604      	mov	r4, r0
 800ac58:	d155      	bne.n	800ad06 <_malloc_r+0xf2>
 800ac5a:	f8d8 4000 	ldr.w	r4, [r8]
 800ac5e:	4626      	mov	r6, r4
 800ac60:	2e00      	cmp	r6, #0
 800ac62:	d145      	bne.n	800acf0 <_malloc_r+0xdc>
 800ac64:	2c00      	cmp	r4, #0
 800ac66:	d048      	beq.n	800acfa <_malloc_r+0xe6>
 800ac68:	6823      	ldr	r3, [r4, #0]
 800ac6a:	4631      	mov	r1, r6
 800ac6c:	4638      	mov	r0, r7
 800ac6e:	eb04 0903 	add.w	r9, r4, r3
 800ac72:	f002 f965 	bl	800cf40 <_sbrk_r>
 800ac76:	4581      	cmp	r9, r0
 800ac78:	d13f      	bne.n	800acfa <_malloc_r+0xe6>
 800ac7a:	6821      	ldr	r1, [r4, #0]
 800ac7c:	1a6d      	subs	r5, r5, r1
 800ac7e:	4629      	mov	r1, r5
 800ac80:	4638      	mov	r0, r7
 800ac82:	f7ff ffa7 	bl	800abd4 <sbrk_aligned>
 800ac86:	3001      	adds	r0, #1
 800ac88:	d037      	beq.n	800acfa <_malloc_r+0xe6>
 800ac8a:	6823      	ldr	r3, [r4, #0]
 800ac8c:	442b      	add	r3, r5
 800ac8e:	6023      	str	r3, [r4, #0]
 800ac90:	f8d8 3000 	ldr.w	r3, [r8]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d038      	beq.n	800ad0a <_malloc_r+0xf6>
 800ac98:	685a      	ldr	r2, [r3, #4]
 800ac9a:	42a2      	cmp	r2, r4
 800ac9c:	d12b      	bne.n	800acf6 <_malloc_r+0xe2>
 800ac9e:	2200      	movs	r2, #0
 800aca0:	605a      	str	r2, [r3, #4]
 800aca2:	e00f      	b.n	800acc4 <_malloc_r+0xb0>
 800aca4:	6822      	ldr	r2, [r4, #0]
 800aca6:	1b52      	subs	r2, r2, r5
 800aca8:	d41f      	bmi.n	800acea <_malloc_r+0xd6>
 800acaa:	2a0b      	cmp	r2, #11
 800acac:	d917      	bls.n	800acde <_malloc_r+0xca>
 800acae:	1961      	adds	r1, r4, r5
 800acb0:	42a3      	cmp	r3, r4
 800acb2:	6025      	str	r5, [r4, #0]
 800acb4:	bf18      	it	ne
 800acb6:	6059      	strne	r1, [r3, #4]
 800acb8:	6863      	ldr	r3, [r4, #4]
 800acba:	bf08      	it	eq
 800acbc:	f8c8 1000 	streq.w	r1, [r8]
 800acc0:	5162      	str	r2, [r4, r5]
 800acc2:	604b      	str	r3, [r1, #4]
 800acc4:	4638      	mov	r0, r7
 800acc6:	f104 060b 	add.w	r6, r4, #11
 800acca:	f000 f829 	bl	800ad20 <__malloc_unlock>
 800acce:	f026 0607 	bic.w	r6, r6, #7
 800acd2:	1d23      	adds	r3, r4, #4
 800acd4:	1af2      	subs	r2, r6, r3
 800acd6:	d0ae      	beq.n	800ac36 <_malloc_r+0x22>
 800acd8:	1b9b      	subs	r3, r3, r6
 800acda:	50a3      	str	r3, [r4, r2]
 800acdc:	e7ab      	b.n	800ac36 <_malloc_r+0x22>
 800acde:	42a3      	cmp	r3, r4
 800ace0:	6862      	ldr	r2, [r4, #4]
 800ace2:	d1dd      	bne.n	800aca0 <_malloc_r+0x8c>
 800ace4:	f8c8 2000 	str.w	r2, [r8]
 800ace8:	e7ec      	b.n	800acc4 <_malloc_r+0xb0>
 800acea:	4623      	mov	r3, r4
 800acec:	6864      	ldr	r4, [r4, #4]
 800acee:	e7ac      	b.n	800ac4a <_malloc_r+0x36>
 800acf0:	4634      	mov	r4, r6
 800acf2:	6876      	ldr	r6, [r6, #4]
 800acf4:	e7b4      	b.n	800ac60 <_malloc_r+0x4c>
 800acf6:	4613      	mov	r3, r2
 800acf8:	e7cc      	b.n	800ac94 <_malloc_r+0x80>
 800acfa:	230c      	movs	r3, #12
 800acfc:	603b      	str	r3, [r7, #0]
 800acfe:	4638      	mov	r0, r7
 800ad00:	f000 f80e 	bl	800ad20 <__malloc_unlock>
 800ad04:	e797      	b.n	800ac36 <_malloc_r+0x22>
 800ad06:	6025      	str	r5, [r4, #0]
 800ad08:	e7dc      	b.n	800acc4 <_malloc_r+0xb0>
 800ad0a:	605b      	str	r3, [r3, #4]
 800ad0c:	deff      	udf	#255	; 0xff
 800ad0e:	bf00      	nop
 800ad10:	200005e0 	.word	0x200005e0

0800ad14 <__malloc_lock>:
 800ad14:	4801      	ldr	r0, [pc, #4]	; (800ad1c <__malloc_lock+0x8>)
 800ad16:	f7ff b886 	b.w	8009e26 <__retarget_lock_acquire_recursive>
 800ad1a:	bf00      	nop
 800ad1c:	200005dc 	.word	0x200005dc

0800ad20 <__malloc_unlock>:
 800ad20:	4801      	ldr	r0, [pc, #4]	; (800ad28 <__malloc_unlock+0x8>)
 800ad22:	f7ff b881 	b.w	8009e28 <__retarget_lock_release_recursive>
 800ad26:	bf00      	nop
 800ad28:	200005dc 	.word	0x200005dc

0800ad2c <_Balloc>:
 800ad2c:	b570      	push	{r4, r5, r6, lr}
 800ad2e:	69c6      	ldr	r6, [r0, #28]
 800ad30:	4604      	mov	r4, r0
 800ad32:	460d      	mov	r5, r1
 800ad34:	b976      	cbnz	r6, 800ad54 <_Balloc+0x28>
 800ad36:	2010      	movs	r0, #16
 800ad38:	f7ff ff44 	bl	800abc4 <malloc>
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	61e0      	str	r0, [r4, #28]
 800ad40:	b920      	cbnz	r0, 800ad4c <_Balloc+0x20>
 800ad42:	4b18      	ldr	r3, [pc, #96]	; (800ada4 <_Balloc+0x78>)
 800ad44:	4818      	ldr	r0, [pc, #96]	; (800ada8 <_Balloc+0x7c>)
 800ad46:	216b      	movs	r1, #107	; 0x6b
 800ad48:	f002 f922 	bl	800cf90 <__assert_func>
 800ad4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad50:	6006      	str	r6, [r0, #0]
 800ad52:	60c6      	str	r6, [r0, #12]
 800ad54:	69e6      	ldr	r6, [r4, #28]
 800ad56:	68f3      	ldr	r3, [r6, #12]
 800ad58:	b183      	cbz	r3, 800ad7c <_Balloc+0x50>
 800ad5a:	69e3      	ldr	r3, [r4, #28]
 800ad5c:	68db      	ldr	r3, [r3, #12]
 800ad5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ad62:	b9b8      	cbnz	r0, 800ad94 <_Balloc+0x68>
 800ad64:	2101      	movs	r1, #1
 800ad66:	fa01 f605 	lsl.w	r6, r1, r5
 800ad6a:	1d72      	adds	r2, r6, #5
 800ad6c:	0092      	lsls	r2, r2, #2
 800ad6e:	4620      	mov	r0, r4
 800ad70:	f002 f92c 	bl	800cfcc <_calloc_r>
 800ad74:	b160      	cbz	r0, 800ad90 <_Balloc+0x64>
 800ad76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ad7a:	e00e      	b.n	800ad9a <_Balloc+0x6e>
 800ad7c:	2221      	movs	r2, #33	; 0x21
 800ad7e:	2104      	movs	r1, #4
 800ad80:	4620      	mov	r0, r4
 800ad82:	f002 f923 	bl	800cfcc <_calloc_r>
 800ad86:	69e3      	ldr	r3, [r4, #28]
 800ad88:	60f0      	str	r0, [r6, #12]
 800ad8a:	68db      	ldr	r3, [r3, #12]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d1e4      	bne.n	800ad5a <_Balloc+0x2e>
 800ad90:	2000      	movs	r0, #0
 800ad92:	bd70      	pop	{r4, r5, r6, pc}
 800ad94:	6802      	ldr	r2, [r0, #0]
 800ad96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ada0:	e7f7      	b.n	800ad92 <_Balloc+0x66>
 800ada2:	bf00      	nop
 800ada4:	0800de88 	.word	0x0800de88
 800ada8:	0800df08 	.word	0x0800df08

0800adac <_Bfree>:
 800adac:	b570      	push	{r4, r5, r6, lr}
 800adae:	69c6      	ldr	r6, [r0, #28]
 800adb0:	4605      	mov	r5, r0
 800adb2:	460c      	mov	r4, r1
 800adb4:	b976      	cbnz	r6, 800add4 <_Bfree+0x28>
 800adb6:	2010      	movs	r0, #16
 800adb8:	f7ff ff04 	bl	800abc4 <malloc>
 800adbc:	4602      	mov	r2, r0
 800adbe:	61e8      	str	r0, [r5, #28]
 800adc0:	b920      	cbnz	r0, 800adcc <_Bfree+0x20>
 800adc2:	4b09      	ldr	r3, [pc, #36]	; (800ade8 <_Bfree+0x3c>)
 800adc4:	4809      	ldr	r0, [pc, #36]	; (800adec <_Bfree+0x40>)
 800adc6:	218f      	movs	r1, #143	; 0x8f
 800adc8:	f002 f8e2 	bl	800cf90 <__assert_func>
 800adcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800add0:	6006      	str	r6, [r0, #0]
 800add2:	60c6      	str	r6, [r0, #12]
 800add4:	b13c      	cbz	r4, 800ade6 <_Bfree+0x3a>
 800add6:	69eb      	ldr	r3, [r5, #28]
 800add8:	6862      	ldr	r2, [r4, #4]
 800adda:	68db      	ldr	r3, [r3, #12]
 800addc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ade0:	6021      	str	r1, [r4, #0]
 800ade2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ade6:	bd70      	pop	{r4, r5, r6, pc}
 800ade8:	0800de88 	.word	0x0800de88
 800adec:	0800df08 	.word	0x0800df08

0800adf0 <__multadd>:
 800adf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adf4:	690d      	ldr	r5, [r1, #16]
 800adf6:	4607      	mov	r7, r0
 800adf8:	460c      	mov	r4, r1
 800adfa:	461e      	mov	r6, r3
 800adfc:	f101 0c14 	add.w	ip, r1, #20
 800ae00:	2000      	movs	r0, #0
 800ae02:	f8dc 3000 	ldr.w	r3, [ip]
 800ae06:	b299      	uxth	r1, r3
 800ae08:	fb02 6101 	mla	r1, r2, r1, r6
 800ae0c:	0c1e      	lsrs	r6, r3, #16
 800ae0e:	0c0b      	lsrs	r3, r1, #16
 800ae10:	fb02 3306 	mla	r3, r2, r6, r3
 800ae14:	b289      	uxth	r1, r1
 800ae16:	3001      	adds	r0, #1
 800ae18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ae1c:	4285      	cmp	r5, r0
 800ae1e:	f84c 1b04 	str.w	r1, [ip], #4
 800ae22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ae26:	dcec      	bgt.n	800ae02 <__multadd+0x12>
 800ae28:	b30e      	cbz	r6, 800ae6e <__multadd+0x7e>
 800ae2a:	68a3      	ldr	r3, [r4, #8]
 800ae2c:	42ab      	cmp	r3, r5
 800ae2e:	dc19      	bgt.n	800ae64 <__multadd+0x74>
 800ae30:	6861      	ldr	r1, [r4, #4]
 800ae32:	4638      	mov	r0, r7
 800ae34:	3101      	adds	r1, #1
 800ae36:	f7ff ff79 	bl	800ad2c <_Balloc>
 800ae3a:	4680      	mov	r8, r0
 800ae3c:	b928      	cbnz	r0, 800ae4a <__multadd+0x5a>
 800ae3e:	4602      	mov	r2, r0
 800ae40:	4b0c      	ldr	r3, [pc, #48]	; (800ae74 <__multadd+0x84>)
 800ae42:	480d      	ldr	r0, [pc, #52]	; (800ae78 <__multadd+0x88>)
 800ae44:	21ba      	movs	r1, #186	; 0xba
 800ae46:	f002 f8a3 	bl	800cf90 <__assert_func>
 800ae4a:	6922      	ldr	r2, [r4, #16]
 800ae4c:	3202      	adds	r2, #2
 800ae4e:	f104 010c 	add.w	r1, r4, #12
 800ae52:	0092      	lsls	r2, r2, #2
 800ae54:	300c      	adds	r0, #12
 800ae56:	f002 f883 	bl	800cf60 <memcpy>
 800ae5a:	4621      	mov	r1, r4
 800ae5c:	4638      	mov	r0, r7
 800ae5e:	f7ff ffa5 	bl	800adac <_Bfree>
 800ae62:	4644      	mov	r4, r8
 800ae64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ae68:	3501      	adds	r5, #1
 800ae6a:	615e      	str	r6, [r3, #20]
 800ae6c:	6125      	str	r5, [r4, #16]
 800ae6e:	4620      	mov	r0, r4
 800ae70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae74:	0800def7 	.word	0x0800def7
 800ae78:	0800df08 	.word	0x0800df08

0800ae7c <__s2b>:
 800ae7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae80:	460c      	mov	r4, r1
 800ae82:	4615      	mov	r5, r2
 800ae84:	461f      	mov	r7, r3
 800ae86:	2209      	movs	r2, #9
 800ae88:	3308      	adds	r3, #8
 800ae8a:	4606      	mov	r6, r0
 800ae8c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae90:	2100      	movs	r1, #0
 800ae92:	2201      	movs	r2, #1
 800ae94:	429a      	cmp	r2, r3
 800ae96:	db09      	blt.n	800aeac <__s2b+0x30>
 800ae98:	4630      	mov	r0, r6
 800ae9a:	f7ff ff47 	bl	800ad2c <_Balloc>
 800ae9e:	b940      	cbnz	r0, 800aeb2 <__s2b+0x36>
 800aea0:	4602      	mov	r2, r0
 800aea2:	4b19      	ldr	r3, [pc, #100]	; (800af08 <__s2b+0x8c>)
 800aea4:	4819      	ldr	r0, [pc, #100]	; (800af0c <__s2b+0x90>)
 800aea6:	21d3      	movs	r1, #211	; 0xd3
 800aea8:	f002 f872 	bl	800cf90 <__assert_func>
 800aeac:	0052      	lsls	r2, r2, #1
 800aeae:	3101      	adds	r1, #1
 800aeb0:	e7f0      	b.n	800ae94 <__s2b+0x18>
 800aeb2:	9b08      	ldr	r3, [sp, #32]
 800aeb4:	6143      	str	r3, [r0, #20]
 800aeb6:	2d09      	cmp	r5, #9
 800aeb8:	f04f 0301 	mov.w	r3, #1
 800aebc:	6103      	str	r3, [r0, #16]
 800aebe:	dd16      	ble.n	800aeee <__s2b+0x72>
 800aec0:	f104 0909 	add.w	r9, r4, #9
 800aec4:	46c8      	mov	r8, r9
 800aec6:	442c      	add	r4, r5
 800aec8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800aecc:	4601      	mov	r1, r0
 800aece:	3b30      	subs	r3, #48	; 0x30
 800aed0:	220a      	movs	r2, #10
 800aed2:	4630      	mov	r0, r6
 800aed4:	f7ff ff8c 	bl	800adf0 <__multadd>
 800aed8:	45a0      	cmp	r8, r4
 800aeda:	d1f5      	bne.n	800aec8 <__s2b+0x4c>
 800aedc:	f1a5 0408 	sub.w	r4, r5, #8
 800aee0:	444c      	add	r4, r9
 800aee2:	1b2d      	subs	r5, r5, r4
 800aee4:	1963      	adds	r3, r4, r5
 800aee6:	42bb      	cmp	r3, r7
 800aee8:	db04      	blt.n	800aef4 <__s2b+0x78>
 800aeea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aeee:	340a      	adds	r4, #10
 800aef0:	2509      	movs	r5, #9
 800aef2:	e7f6      	b.n	800aee2 <__s2b+0x66>
 800aef4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aef8:	4601      	mov	r1, r0
 800aefa:	3b30      	subs	r3, #48	; 0x30
 800aefc:	220a      	movs	r2, #10
 800aefe:	4630      	mov	r0, r6
 800af00:	f7ff ff76 	bl	800adf0 <__multadd>
 800af04:	e7ee      	b.n	800aee4 <__s2b+0x68>
 800af06:	bf00      	nop
 800af08:	0800def7 	.word	0x0800def7
 800af0c:	0800df08 	.word	0x0800df08

0800af10 <__hi0bits>:
 800af10:	0c03      	lsrs	r3, r0, #16
 800af12:	041b      	lsls	r3, r3, #16
 800af14:	b9d3      	cbnz	r3, 800af4c <__hi0bits+0x3c>
 800af16:	0400      	lsls	r0, r0, #16
 800af18:	2310      	movs	r3, #16
 800af1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800af1e:	bf04      	itt	eq
 800af20:	0200      	lsleq	r0, r0, #8
 800af22:	3308      	addeq	r3, #8
 800af24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800af28:	bf04      	itt	eq
 800af2a:	0100      	lsleq	r0, r0, #4
 800af2c:	3304      	addeq	r3, #4
 800af2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800af32:	bf04      	itt	eq
 800af34:	0080      	lsleq	r0, r0, #2
 800af36:	3302      	addeq	r3, #2
 800af38:	2800      	cmp	r0, #0
 800af3a:	db05      	blt.n	800af48 <__hi0bits+0x38>
 800af3c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800af40:	f103 0301 	add.w	r3, r3, #1
 800af44:	bf08      	it	eq
 800af46:	2320      	moveq	r3, #32
 800af48:	4618      	mov	r0, r3
 800af4a:	4770      	bx	lr
 800af4c:	2300      	movs	r3, #0
 800af4e:	e7e4      	b.n	800af1a <__hi0bits+0xa>

0800af50 <__lo0bits>:
 800af50:	6803      	ldr	r3, [r0, #0]
 800af52:	f013 0207 	ands.w	r2, r3, #7
 800af56:	d00c      	beq.n	800af72 <__lo0bits+0x22>
 800af58:	07d9      	lsls	r1, r3, #31
 800af5a:	d422      	bmi.n	800afa2 <__lo0bits+0x52>
 800af5c:	079a      	lsls	r2, r3, #30
 800af5e:	bf49      	itett	mi
 800af60:	085b      	lsrmi	r3, r3, #1
 800af62:	089b      	lsrpl	r3, r3, #2
 800af64:	6003      	strmi	r3, [r0, #0]
 800af66:	2201      	movmi	r2, #1
 800af68:	bf5c      	itt	pl
 800af6a:	6003      	strpl	r3, [r0, #0]
 800af6c:	2202      	movpl	r2, #2
 800af6e:	4610      	mov	r0, r2
 800af70:	4770      	bx	lr
 800af72:	b299      	uxth	r1, r3
 800af74:	b909      	cbnz	r1, 800af7a <__lo0bits+0x2a>
 800af76:	0c1b      	lsrs	r3, r3, #16
 800af78:	2210      	movs	r2, #16
 800af7a:	b2d9      	uxtb	r1, r3
 800af7c:	b909      	cbnz	r1, 800af82 <__lo0bits+0x32>
 800af7e:	3208      	adds	r2, #8
 800af80:	0a1b      	lsrs	r3, r3, #8
 800af82:	0719      	lsls	r1, r3, #28
 800af84:	bf04      	itt	eq
 800af86:	091b      	lsreq	r3, r3, #4
 800af88:	3204      	addeq	r2, #4
 800af8a:	0799      	lsls	r1, r3, #30
 800af8c:	bf04      	itt	eq
 800af8e:	089b      	lsreq	r3, r3, #2
 800af90:	3202      	addeq	r2, #2
 800af92:	07d9      	lsls	r1, r3, #31
 800af94:	d403      	bmi.n	800af9e <__lo0bits+0x4e>
 800af96:	085b      	lsrs	r3, r3, #1
 800af98:	f102 0201 	add.w	r2, r2, #1
 800af9c:	d003      	beq.n	800afa6 <__lo0bits+0x56>
 800af9e:	6003      	str	r3, [r0, #0]
 800afa0:	e7e5      	b.n	800af6e <__lo0bits+0x1e>
 800afa2:	2200      	movs	r2, #0
 800afa4:	e7e3      	b.n	800af6e <__lo0bits+0x1e>
 800afa6:	2220      	movs	r2, #32
 800afa8:	e7e1      	b.n	800af6e <__lo0bits+0x1e>
	...

0800afac <__i2b>:
 800afac:	b510      	push	{r4, lr}
 800afae:	460c      	mov	r4, r1
 800afb0:	2101      	movs	r1, #1
 800afb2:	f7ff febb 	bl	800ad2c <_Balloc>
 800afb6:	4602      	mov	r2, r0
 800afb8:	b928      	cbnz	r0, 800afc6 <__i2b+0x1a>
 800afba:	4b05      	ldr	r3, [pc, #20]	; (800afd0 <__i2b+0x24>)
 800afbc:	4805      	ldr	r0, [pc, #20]	; (800afd4 <__i2b+0x28>)
 800afbe:	f240 1145 	movw	r1, #325	; 0x145
 800afc2:	f001 ffe5 	bl	800cf90 <__assert_func>
 800afc6:	2301      	movs	r3, #1
 800afc8:	6144      	str	r4, [r0, #20]
 800afca:	6103      	str	r3, [r0, #16]
 800afcc:	bd10      	pop	{r4, pc}
 800afce:	bf00      	nop
 800afd0:	0800def7 	.word	0x0800def7
 800afd4:	0800df08 	.word	0x0800df08

0800afd8 <__multiply>:
 800afd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afdc:	4691      	mov	r9, r2
 800afde:	690a      	ldr	r2, [r1, #16]
 800afe0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800afe4:	429a      	cmp	r2, r3
 800afe6:	bfb8      	it	lt
 800afe8:	460b      	movlt	r3, r1
 800afea:	460c      	mov	r4, r1
 800afec:	bfbc      	itt	lt
 800afee:	464c      	movlt	r4, r9
 800aff0:	4699      	movlt	r9, r3
 800aff2:	6927      	ldr	r7, [r4, #16]
 800aff4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aff8:	68a3      	ldr	r3, [r4, #8]
 800affa:	6861      	ldr	r1, [r4, #4]
 800affc:	eb07 060a 	add.w	r6, r7, sl
 800b000:	42b3      	cmp	r3, r6
 800b002:	b085      	sub	sp, #20
 800b004:	bfb8      	it	lt
 800b006:	3101      	addlt	r1, #1
 800b008:	f7ff fe90 	bl	800ad2c <_Balloc>
 800b00c:	b930      	cbnz	r0, 800b01c <__multiply+0x44>
 800b00e:	4602      	mov	r2, r0
 800b010:	4b44      	ldr	r3, [pc, #272]	; (800b124 <__multiply+0x14c>)
 800b012:	4845      	ldr	r0, [pc, #276]	; (800b128 <__multiply+0x150>)
 800b014:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b018:	f001 ffba 	bl	800cf90 <__assert_func>
 800b01c:	f100 0514 	add.w	r5, r0, #20
 800b020:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b024:	462b      	mov	r3, r5
 800b026:	2200      	movs	r2, #0
 800b028:	4543      	cmp	r3, r8
 800b02a:	d321      	bcc.n	800b070 <__multiply+0x98>
 800b02c:	f104 0314 	add.w	r3, r4, #20
 800b030:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b034:	f109 0314 	add.w	r3, r9, #20
 800b038:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b03c:	9202      	str	r2, [sp, #8]
 800b03e:	1b3a      	subs	r2, r7, r4
 800b040:	3a15      	subs	r2, #21
 800b042:	f022 0203 	bic.w	r2, r2, #3
 800b046:	3204      	adds	r2, #4
 800b048:	f104 0115 	add.w	r1, r4, #21
 800b04c:	428f      	cmp	r7, r1
 800b04e:	bf38      	it	cc
 800b050:	2204      	movcc	r2, #4
 800b052:	9201      	str	r2, [sp, #4]
 800b054:	9a02      	ldr	r2, [sp, #8]
 800b056:	9303      	str	r3, [sp, #12]
 800b058:	429a      	cmp	r2, r3
 800b05a:	d80c      	bhi.n	800b076 <__multiply+0x9e>
 800b05c:	2e00      	cmp	r6, #0
 800b05e:	dd03      	ble.n	800b068 <__multiply+0x90>
 800b060:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b064:	2b00      	cmp	r3, #0
 800b066:	d05b      	beq.n	800b120 <__multiply+0x148>
 800b068:	6106      	str	r6, [r0, #16]
 800b06a:	b005      	add	sp, #20
 800b06c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b070:	f843 2b04 	str.w	r2, [r3], #4
 800b074:	e7d8      	b.n	800b028 <__multiply+0x50>
 800b076:	f8b3 a000 	ldrh.w	sl, [r3]
 800b07a:	f1ba 0f00 	cmp.w	sl, #0
 800b07e:	d024      	beq.n	800b0ca <__multiply+0xf2>
 800b080:	f104 0e14 	add.w	lr, r4, #20
 800b084:	46a9      	mov	r9, r5
 800b086:	f04f 0c00 	mov.w	ip, #0
 800b08a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b08e:	f8d9 1000 	ldr.w	r1, [r9]
 800b092:	fa1f fb82 	uxth.w	fp, r2
 800b096:	b289      	uxth	r1, r1
 800b098:	fb0a 110b 	mla	r1, sl, fp, r1
 800b09c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b0a0:	f8d9 2000 	ldr.w	r2, [r9]
 800b0a4:	4461      	add	r1, ip
 800b0a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b0aa:	fb0a c20b 	mla	r2, sl, fp, ip
 800b0ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b0b2:	b289      	uxth	r1, r1
 800b0b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b0b8:	4577      	cmp	r7, lr
 800b0ba:	f849 1b04 	str.w	r1, [r9], #4
 800b0be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b0c2:	d8e2      	bhi.n	800b08a <__multiply+0xb2>
 800b0c4:	9a01      	ldr	r2, [sp, #4]
 800b0c6:	f845 c002 	str.w	ip, [r5, r2]
 800b0ca:	9a03      	ldr	r2, [sp, #12]
 800b0cc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b0d0:	3304      	adds	r3, #4
 800b0d2:	f1b9 0f00 	cmp.w	r9, #0
 800b0d6:	d021      	beq.n	800b11c <__multiply+0x144>
 800b0d8:	6829      	ldr	r1, [r5, #0]
 800b0da:	f104 0c14 	add.w	ip, r4, #20
 800b0de:	46ae      	mov	lr, r5
 800b0e0:	f04f 0a00 	mov.w	sl, #0
 800b0e4:	f8bc b000 	ldrh.w	fp, [ip]
 800b0e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b0ec:	fb09 220b 	mla	r2, r9, fp, r2
 800b0f0:	4452      	add	r2, sl
 800b0f2:	b289      	uxth	r1, r1
 800b0f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b0f8:	f84e 1b04 	str.w	r1, [lr], #4
 800b0fc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b100:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b104:	f8be 1000 	ldrh.w	r1, [lr]
 800b108:	fb09 110a 	mla	r1, r9, sl, r1
 800b10c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b110:	4567      	cmp	r7, ip
 800b112:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b116:	d8e5      	bhi.n	800b0e4 <__multiply+0x10c>
 800b118:	9a01      	ldr	r2, [sp, #4]
 800b11a:	50a9      	str	r1, [r5, r2]
 800b11c:	3504      	adds	r5, #4
 800b11e:	e799      	b.n	800b054 <__multiply+0x7c>
 800b120:	3e01      	subs	r6, #1
 800b122:	e79b      	b.n	800b05c <__multiply+0x84>
 800b124:	0800def7 	.word	0x0800def7
 800b128:	0800df08 	.word	0x0800df08

0800b12c <__pow5mult>:
 800b12c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b130:	4615      	mov	r5, r2
 800b132:	f012 0203 	ands.w	r2, r2, #3
 800b136:	4606      	mov	r6, r0
 800b138:	460f      	mov	r7, r1
 800b13a:	d007      	beq.n	800b14c <__pow5mult+0x20>
 800b13c:	4c25      	ldr	r4, [pc, #148]	; (800b1d4 <__pow5mult+0xa8>)
 800b13e:	3a01      	subs	r2, #1
 800b140:	2300      	movs	r3, #0
 800b142:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b146:	f7ff fe53 	bl	800adf0 <__multadd>
 800b14a:	4607      	mov	r7, r0
 800b14c:	10ad      	asrs	r5, r5, #2
 800b14e:	d03d      	beq.n	800b1cc <__pow5mult+0xa0>
 800b150:	69f4      	ldr	r4, [r6, #28]
 800b152:	b97c      	cbnz	r4, 800b174 <__pow5mult+0x48>
 800b154:	2010      	movs	r0, #16
 800b156:	f7ff fd35 	bl	800abc4 <malloc>
 800b15a:	4602      	mov	r2, r0
 800b15c:	61f0      	str	r0, [r6, #28]
 800b15e:	b928      	cbnz	r0, 800b16c <__pow5mult+0x40>
 800b160:	4b1d      	ldr	r3, [pc, #116]	; (800b1d8 <__pow5mult+0xac>)
 800b162:	481e      	ldr	r0, [pc, #120]	; (800b1dc <__pow5mult+0xb0>)
 800b164:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b168:	f001 ff12 	bl	800cf90 <__assert_func>
 800b16c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b170:	6004      	str	r4, [r0, #0]
 800b172:	60c4      	str	r4, [r0, #12]
 800b174:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b178:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b17c:	b94c      	cbnz	r4, 800b192 <__pow5mult+0x66>
 800b17e:	f240 2171 	movw	r1, #625	; 0x271
 800b182:	4630      	mov	r0, r6
 800b184:	f7ff ff12 	bl	800afac <__i2b>
 800b188:	2300      	movs	r3, #0
 800b18a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b18e:	4604      	mov	r4, r0
 800b190:	6003      	str	r3, [r0, #0]
 800b192:	f04f 0900 	mov.w	r9, #0
 800b196:	07eb      	lsls	r3, r5, #31
 800b198:	d50a      	bpl.n	800b1b0 <__pow5mult+0x84>
 800b19a:	4639      	mov	r1, r7
 800b19c:	4622      	mov	r2, r4
 800b19e:	4630      	mov	r0, r6
 800b1a0:	f7ff ff1a 	bl	800afd8 <__multiply>
 800b1a4:	4639      	mov	r1, r7
 800b1a6:	4680      	mov	r8, r0
 800b1a8:	4630      	mov	r0, r6
 800b1aa:	f7ff fdff 	bl	800adac <_Bfree>
 800b1ae:	4647      	mov	r7, r8
 800b1b0:	106d      	asrs	r5, r5, #1
 800b1b2:	d00b      	beq.n	800b1cc <__pow5mult+0xa0>
 800b1b4:	6820      	ldr	r0, [r4, #0]
 800b1b6:	b938      	cbnz	r0, 800b1c8 <__pow5mult+0x9c>
 800b1b8:	4622      	mov	r2, r4
 800b1ba:	4621      	mov	r1, r4
 800b1bc:	4630      	mov	r0, r6
 800b1be:	f7ff ff0b 	bl	800afd8 <__multiply>
 800b1c2:	6020      	str	r0, [r4, #0]
 800b1c4:	f8c0 9000 	str.w	r9, [r0]
 800b1c8:	4604      	mov	r4, r0
 800b1ca:	e7e4      	b.n	800b196 <__pow5mult+0x6a>
 800b1cc:	4638      	mov	r0, r7
 800b1ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1d2:	bf00      	nop
 800b1d4:	0800e058 	.word	0x0800e058
 800b1d8:	0800de88 	.word	0x0800de88
 800b1dc:	0800df08 	.word	0x0800df08

0800b1e0 <__lshift>:
 800b1e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1e4:	460c      	mov	r4, r1
 800b1e6:	6849      	ldr	r1, [r1, #4]
 800b1e8:	6923      	ldr	r3, [r4, #16]
 800b1ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b1ee:	68a3      	ldr	r3, [r4, #8]
 800b1f0:	4607      	mov	r7, r0
 800b1f2:	4691      	mov	r9, r2
 800b1f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b1f8:	f108 0601 	add.w	r6, r8, #1
 800b1fc:	42b3      	cmp	r3, r6
 800b1fe:	db0b      	blt.n	800b218 <__lshift+0x38>
 800b200:	4638      	mov	r0, r7
 800b202:	f7ff fd93 	bl	800ad2c <_Balloc>
 800b206:	4605      	mov	r5, r0
 800b208:	b948      	cbnz	r0, 800b21e <__lshift+0x3e>
 800b20a:	4602      	mov	r2, r0
 800b20c:	4b28      	ldr	r3, [pc, #160]	; (800b2b0 <__lshift+0xd0>)
 800b20e:	4829      	ldr	r0, [pc, #164]	; (800b2b4 <__lshift+0xd4>)
 800b210:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b214:	f001 febc 	bl	800cf90 <__assert_func>
 800b218:	3101      	adds	r1, #1
 800b21a:	005b      	lsls	r3, r3, #1
 800b21c:	e7ee      	b.n	800b1fc <__lshift+0x1c>
 800b21e:	2300      	movs	r3, #0
 800b220:	f100 0114 	add.w	r1, r0, #20
 800b224:	f100 0210 	add.w	r2, r0, #16
 800b228:	4618      	mov	r0, r3
 800b22a:	4553      	cmp	r3, sl
 800b22c:	db33      	blt.n	800b296 <__lshift+0xb6>
 800b22e:	6920      	ldr	r0, [r4, #16]
 800b230:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b234:	f104 0314 	add.w	r3, r4, #20
 800b238:	f019 091f 	ands.w	r9, r9, #31
 800b23c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b240:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b244:	d02b      	beq.n	800b29e <__lshift+0xbe>
 800b246:	f1c9 0e20 	rsb	lr, r9, #32
 800b24a:	468a      	mov	sl, r1
 800b24c:	2200      	movs	r2, #0
 800b24e:	6818      	ldr	r0, [r3, #0]
 800b250:	fa00 f009 	lsl.w	r0, r0, r9
 800b254:	4310      	orrs	r0, r2
 800b256:	f84a 0b04 	str.w	r0, [sl], #4
 800b25a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b25e:	459c      	cmp	ip, r3
 800b260:	fa22 f20e 	lsr.w	r2, r2, lr
 800b264:	d8f3      	bhi.n	800b24e <__lshift+0x6e>
 800b266:	ebac 0304 	sub.w	r3, ip, r4
 800b26a:	3b15      	subs	r3, #21
 800b26c:	f023 0303 	bic.w	r3, r3, #3
 800b270:	3304      	adds	r3, #4
 800b272:	f104 0015 	add.w	r0, r4, #21
 800b276:	4584      	cmp	ip, r0
 800b278:	bf38      	it	cc
 800b27a:	2304      	movcc	r3, #4
 800b27c:	50ca      	str	r2, [r1, r3]
 800b27e:	b10a      	cbz	r2, 800b284 <__lshift+0xa4>
 800b280:	f108 0602 	add.w	r6, r8, #2
 800b284:	3e01      	subs	r6, #1
 800b286:	4638      	mov	r0, r7
 800b288:	612e      	str	r6, [r5, #16]
 800b28a:	4621      	mov	r1, r4
 800b28c:	f7ff fd8e 	bl	800adac <_Bfree>
 800b290:	4628      	mov	r0, r5
 800b292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b296:	f842 0f04 	str.w	r0, [r2, #4]!
 800b29a:	3301      	adds	r3, #1
 800b29c:	e7c5      	b.n	800b22a <__lshift+0x4a>
 800b29e:	3904      	subs	r1, #4
 800b2a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b2a8:	459c      	cmp	ip, r3
 800b2aa:	d8f9      	bhi.n	800b2a0 <__lshift+0xc0>
 800b2ac:	e7ea      	b.n	800b284 <__lshift+0xa4>
 800b2ae:	bf00      	nop
 800b2b0:	0800def7 	.word	0x0800def7
 800b2b4:	0800df08 	.word	0x0800df08

0800b2b8 <__mcmp>:
 800b2b8:	b530      	push	{r4, r5, lr}
 800b2ba:	6902      	ldr	r2, [r0, #16]
 800b2bc:	690c      	ldr	r4, [r1, #16]
 800b2be:	1b12      	subs	r2, r2, r4
 800b2c0:	d10e      	bne.n	800b2e0 <__mcmp+0x28>
 800b2c2:	f100 0314 	add.w	r3, r0, #20
 800b2c6:	3114      	adds	r1, #20
 800b2c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b2cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b2d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b2d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b2d8:	42a5      	cmp	r5, r4
 800b2da:	d003      	beq.n	800b2e4 <__mcmp+0x2c>
 800b2dc:	d305      	bcc.n	800b2ea <__mcmp+0x32>
 800b2de:	2201      	movs	r2, #1
 800b2e0:	4610      	mov	r0, r2
 800b2e2:	bd30      	pop	{r4, r5, pc}
 800b2e4:	4283      	cmp	r3, r0
 800b2e6:	d3f3      	bcc.n	800b2d0 <__mcmp+0x18>
 800b2e8:	e7fa      	b.n	800b2e0 <__mcmp+0x28>
 800b2ea:	f04f 32ff 	mov.w	r2, #4294967295
 800b2ee:	e7f7      	b.n	800b2e0 <__mcmp+0x28>

0800b2f0 <__mdiff>:
 800b2f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2f4:	460c      	mov	r4, r1
 800b2f6:	4606      	mov	r6, r0
 800b2f8:	4611      	mov	r1, r2
 800b2fa:	4620      	mov	r0, r4
 800b2fc:	4690      	mov	r8, r2
 800b2fe:	f7ff ffdb 	bl	800b2b8 <__mcmp>
 800b302:	1e05      	subs	r5, r0, #0
 800b304:	d110      	bne.n	800b328 <__mdiff+0x38>
 800b306:	4629      	mov	r1, r5
 800b308:	4630      	mov	r0, r6
 800b30a:	f7ff fd0f 	bl	800ad2c <_Balloc>
 800b30e:	b930      	cbnz	r0, 800b31e <__mdiff+0x2e>
 800b310:	4b3a      	ldr	r3, [pc, #232]	; (800b3fc <__mdiff+0x10c>)
 800b312:	4602      	mov	r2, r0
 800b314:	f240 2137 	movw	r1, #567	; 0x237
 800b318:	4839      	ldr	r0, [pc, #228]	; (800b400 <__mdiff+0x110>)
 800b31a:	f001 fe39 	bl	800cf90 <__assert_func>
 800b31e:	2301      	movs	r3, #1
 800b320:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b324:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b328:	bfa4      	itt	ge
 800b32a:	4643      	movge	r3, r8
 800b32c:	46a0      	movge	r8, r4
 800b32e:	4630      	mov	r0, r6
 800b330:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b334:	bfa6      	itte	ge
 800b336:	461c      	movge	r4, r3
 800b338:	2500      	movge	r5, #0
 800b33a:	2501      	movlt	r5, #1
 800b33c:	f7ff fcf6 	bl	800ad2c <_Balloc>
 800b340:	b920      	cbnz	r0, 800b34c <__mdiff+0x5c>
 800b342:	4b2e      	ldr	r3, [pc, #184]	; (800b3fc <__mdiff+0x10c>)
 800b344:	4602      	mov	r2, r0
 800b346:	f240 2145 	movw	r1, #581	; 0x245
 800b34a:	e7e5      	b.n	800b318 <__mdiff+0x28>
 800b34c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b350:	6926      	ldr	r6, [r4, #16]
 800b352:	60c5      	str	r5, [r0, #12]
 800b354:	f104 0914 	add.w	r9, r4, #20
 800b358:	f108 0514 	add.w	r5, r8, #20
 800b35c:	f100 0e14 	add.w	lr, r0, #20
 800b360:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b364:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b368:	f108 0210 	add.w	r2, r8, #16
 800b36c:	46f2      	mov	sl, lr
 800b36e:	2100      	movs	r1, #0
 800b370:	f859 3b04 	ldr.w	r3, [r9], #4
 800b374:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b378:	fa11 f88b 	uxtah	r8, r1, fp
 800b37c:	b299      	uxth	r1, r3
 800b37e:	0c1b      	lsrs	r3, r3, #16
 800b380:	eba8 0801 	sub.w	r8, r8, r1
 800b384:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b388:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b38c:	fa1f f888 	uxth.w	r8, r8
 800b390:	1419      	asrs	r1, r3, #16
 800b392:	454e      	cmp	r6, r9
 800b394:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b398:	f84a 3b04 	str.w	r3, [sl], #4
 800b39c:	d8e8      	bhi.n	800b370 <__mdiff+0x80>
 800b39e:	1b33      	subs	r3, r6, r4
 800b3a0:	3b15      	subs	r3, #21
 800b3a2:	f023 0303 	bic.w	r3, r3, #3
 800b3a6:	3304      	adds	r3, #4
 800b3a8:	3415      	adds	r4, #21
 800b3aa:	42a6      	cmp	r6, r4
 800b3ac:	bf38      	it	cc
 800b3ae:	2304      	movcc	r3, #4
 800b3b0:	441d      	add	r5, r3
 800b3b2:	4473      	add	r3, lr
 800b3b4:	469e      	mov	lr, r3
 800b3b6:	462e      	mov	r6, r5
 800b3b8:	4566      	cmp	r6, ip
 800b3ba:	d30e      	bcc.n	800b3da <__mdiff+0xea>
 800b3bc:	f10c 0203 	add.w	r2, ip, #3
 800b3c0:	1b52      	subs	r2, r2, r5
 800b3c2:	f022 0203 	bic.w	r2, r2, #3
 800b3c6:	3d03      	subs	r5, #3
 800b3c8:	45ac      	cmp	ip, r5
 800b3ca:	bf38      	it	cc
 800b3cc:	2200      	movcc	r2, #0
 800b3ce:	4413      	add	r3, r2
 800b3d0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b3d4:	b17a      	cbz	r2, 800b3f6 <__mdiff+0x106>
 800b3d6:	6107      	str	r7, [r0, #16]
 800b3d8:	e7a4      	b.n	800b324 <__mdiff+0x34>
 800b3da:	f856 8b04 	ldr.w	r8, [r6], #4
 800b3de:	fa11 f288 	uxtah	r2, r1, r8
 800b3e2:	1414      	asrs	r4, r2, #16
 800b3e4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b3e8:	b292      	uxth	r2, r2
 800b3ea:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b3ee:	f84e 2b04 	str.w	r2, [lr], #4
 800b3f2:	1421      	asrs	r1, r4, #16
 800b3f4:	e7e0      	b.n	800b3b8 <__mdiff+0xc8>
 800b3f6:	3f01      	subs	r7, #1
 800b3f8:	e7ea      	b.n	800b3d0 <__mdiff+0xe0>
 800b3fa:	bf00      	nop
 800b3fc:	0800def7 	.word	0x0800def7
 800b400:	0800df08 	.word	0x0800df08

0800b404 <__ulp>:
 800b404:	b082      	sub	sp, #8
 800b406:	ed8d 0b00 	vstr	d0, [sp]
 800b40a:	9a01      	ldr	r2, [sp, #4]
 800b40c:	4b0f      	ldr	r3, [pc, #60]	; (800b44c <__ulp+0x48>)
 800b40e:	4013      	ands	r3, r2
 800b410:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b414:	2b00      	cmp	r3, #0
 800b416:	dc08      	bgt.n	800b42a <__ulp+0x26>
 800b418:	425b      	negs	r3, r3
 800b41a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b41e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b422:	da04      	bge.n	800b42e <__ulp+0x2a>
 800b424:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b428:	4113      	asrs	r3, r2
 800b42a:	2200      	movs	r2, #0
 800b42c:	e008      	b.n	800b440 <__ulp+0x3c>
 800b42e:	f1a2 0314 	sub.w	r3, r2, #20
 800b432:	2b1e      	cmp	r3, #30
 800b434:	bfda      	itte	le
 800b436:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b43a:	40da      	lsrle	r2, r3
 800b43c:	2201      	movgt	r2, #1
 800b43e:	2300      	movs	r3, #0
 800b440:	4619      	mov	r1, r3
 800b442:	4610      	mov	r0, r2
 800b444:	ec41 0b10 	vmov	d0, r0, r1
 800b448:	b002      	add	sp, #8
 800b44a:	4770      	bx	lr
 800b44c:	7ff00000 	.word	0x7ff00000

0800b450 <__b2d>:
 800b450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b454:	6906      	ldr	r6, [r0, #16]
 800b456:	f100 0814 	add.w	r8, r0, #20
 800b45a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b45e:	1f37      	subs	r7, r6, #4
 800b460:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b464:	4610      	mov	r0, r2
 800b466:	f7ff fd53 	bl	800af10 <__hi0bits>
 800b46a:	f1c0 0320 	rsb	r3, r0, #32
 800b46e:	280a      	cmp	r0, #10
 800b470:	600b      	str	r3, [r1, #0]
 800b472:	491b      	ldr	r1, [pc, #108]	; (800b4e0 <__b2d+0x90>)
 800b474:	dc15      	bgt.n	800b4a2 <__b2d+0x52>
 800b476:	f1c0 0c0b 	rsb	ip, r0, #11
 800b47a:	fa22 f30c 	lsr.w	r3, r2, ip
 800b47e:	45b8      	cmp	r8, r7
 800b480:	ea43 0501 	orr.w	r5, r3, r1
 800b484:	bf34      	ite	cc
 800b486:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b48a:	2300      	movcs	r3, #0
 800b48c:	3015      	adds	r0, #21
 800b48e:	fa02 f000 	lsl.w	r0, r2, r0
 800b492:	fa23 f30c 	lsr.w	r3, r3, ip
 800b496:	4303      	orrs	r3, r0
 800b498:	461c      	mov	r4, r3
 800b49a:	ec45 4b10 	vmov	d0, r4, r5
 800b49e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4a2:	45b8      	cmp	r8, r7
 800b4a4:	bf3a      	itte	cc
 800b4a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b4aa:	f1a6 0708 	subcc.w	r7, r6, #8
 800b4ae:	2300      	movcs	r3, #0
 800b4b0:	380b      	subs	r0, #11
 800b4b2:	d012      	beq.n	800b4da <__b2d+0x8a>
 800b4b4:	f1c0 0120 	rsb	r1, r0, #32
 800b4b8:	fa23 f401 	lsr.w	r4, r3, r1
 800b4bc:	4082      	lsls	r2, r0
 800b4be:	4322      	orrs	r2, r4
 800b4c0:	4547      	cmp	r7, r8
 800b4c2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800b4c6:	bf8c      	ite	hi
 800b4c8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b4cc:	2200      	movls	r2, #0
 800b4ce:	4083      	lsls	r3, r0
 800b4d0:	40ca      	lsrs	r2, r1
 800b4d2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b4d6:	4313      	orrs	r3, r2
 800b4d8:	e7de      	b.n	800b498 <__b2d+0x48>
 800b4da:	ea42 0501 	orr.w	r5, r2, r1
 800b4de:	e7db      	b.n	800b498 <__b2d+0x48>
 800b4e0:	3ff00000 	.word	0x3ff00000

0800b4e4 <__d2b>:
 800b4e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b4e8:	460f      	mov	r7, r1
 800b4ea:	2101      	movs	r1, #1
 800b4ec:	ec59 8b10 	vmov	r8, r9, d0
 800b4f0:	4616      	mov	r6, r2
 800b4f2:	f7ff fc1b 	bl	800ad2c <_Balloc>
 800b4f6:	4604      	mov	r4, r0
 800b4f8:	b930      	cbnz	r0, 800b508 <__d2b+0x24>
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	4b24      	ldr	r3, [pc, #144]	; (800b590 <__d2b+0xac>)
 800b4fe:	4825      	ldr	r0, [pc, #148]	; (800b594 <__d2b+0xb0>)
 800b500:	f240 310f 	movw	r1, #783	; 0x30f
 800b504:	f001 fd44 	bl	800cf90 <__assert_func>
 800b508:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b50c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b510:	bb2d      	cbnz	r5, 800b55e <__d2b+0x7a>
 800b512:	9301      	str	r3, [sp, #4]
 800b514:	f1b8 0300 	subs.w	r3, r8, #0
 800b518:	d026      	beq.n	800b568 <__d2b+0x84>
 800b51a:	4668      	mov	r0, sp
 800b51c:	9300      	str	r3, [sp, #0]
 800b51e:	f7ff fd17 	bl	800af50 <__lo0bits>
 800b522:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b526:	b1e8      	cbz	r0, 800b564 <__d2b+0x80>
 800b528:	f1c0 0320 	rsb	r3, r0, #32
 800b52c:	fa02 f303 	lsl.w	r3, r2, r3
 800b530:	430b      	orrs	r3, r1
 800b532:	40c2      	lsrs	r2, r0
 800b534:	6163      	str	r3, [r4, #20]
 800b536:	9201      	str	r2, [sp, #4]
 800b538:	9b01      	ldr	r3, [sp, #4]
 800b53a:	61a3      	str	r3, [r4, #24]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	bf14      	ite	ne
 800b540:	2202      	movne	r2, #2
 800b542:	2201      	moveq	r2, #1
 800b544:	6122      	str	r2, [r4, #16]
 800b546:	b1bd      	cbz	r5, 800b578 <__d2b+0x94>
 800b548:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b54c:	4405      	add	r5, r0
 800b54e:	603d      	str	r5, [r7, #0]
 800b550:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b554:	6030      	str	r0, [r6, #0]
 800b556:	4620      	mov	r0, r4
 800b558:	b003      	add	sp, #12
 800b55a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b55e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b562:	e7d6      	b.n	800b512 <__d2b+0x2e>
 800b564:	6161      	str	r1, [r4, #20]
 800b566:	e7e7      	b.n	800b538 <__d2b+0x54>
 800b568:	a801      	add	r0, sp, #4
 800b56a:	f7ff fcf1 	bl	800af50 <__lo0bits>
 800b56e:	9b01      	ldr	r3, [sp, #4]
 800b570:	6163      	str	r3, [r4, #20]
 800b572:	3020      	adds	r0, #32
 800b574:	2201      	movs	r2, #1
 800b576:	e7e5      	b.n	800b544 <__d2b+0x60>
 800b578:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b57c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b580:	6038      	str	r0, [r7, #0]
 800b582:	6918      	ldr	r0, [r3, #16]
 800b584:	f7ff fcc4 	bl	800af10 <__hi0bits>
 800b588:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b58c:	e7e2      	b.n	800b554 <__d2b+0x70>
 800b58e:	bf00      	nop
 800b590:	0800def7 	.word	0x0800def7
 800b594:	0800df08 	.word	0x0800df08

0800b598 <__ratio>:
 800b598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b59c:	4688      	mov	r8, r1
 800b59e:	4669      	mov	r1, sp
 800b5a0:	4681      	mov	r9, r0
 800b5a2:	f7ff ff55 	bl	800b450 <__b2d>
 800b5a6:	a901      	add	r1, sp, #4
 800b5a8:	4640      	mov	r0, r8
 800b5aa:	ec55 4b10 	vmov	r4, r5, d0
 800b5ae:	f7ff ff4f 	bl	800b450 <__b2d>
 800b5b2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b5b6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b5ba:	eba3 0c02 	sub.w	ip, r3, r2
 800b5be:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b5c2:	1a9b      	subs	r3, r3, r2
 800b5c4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b5c8:	ec51 0b10 	vmov	r0, r1, d0
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	bfd6      	itet	le
 800b5d0:	460a      	movle	r2, r1
 800b5d2:	462a      	movgt	r2, r5
 800b5d4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b5d8:	468b      	mov	fp, r1
 800b5da:	462f      	mov	r7, r5
 800b5dc:	bfd4      	ite	le
 800b5de:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b5e2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b5e6:	4620      	mov	r0, r4
 800b5e8:	ee10 2a10 	vmov	r2, s0
 800b5ec:	465b      	mov	r3, fp
 800b5ee:	4639      	mov	r1, r7
 800b5f0:	f7f5 f94c 	bl	800088c <__aeabi_ddiv>
 800b5f4:	ec41 0b10 	vmov	d0, r0, r1
 800b5f8:	b003      	add	sp, #12
 800b5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b5fe <__copybits>:
 800b5fe:	3901      	subs	r1, #1
 800b600:	b570      	push	{r4, r5, r6, lr}
 800b602:	1149      	asrs	r1, r1, #5
 800b604:	6914      	ldr	r4, [r2, #16]
 800b606:	3101      	adds	r1, #1
 800b608:	f102 0314 	add.w	r3, r2, #20
 800b60c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b610:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b614:	1f05      	subs	r5, r0, #4
 800b616:	42a3      	cmp	r3, r4
 800b618:	d30c      	bcc.n	800b634 <__copybits+0x36>
 800b61a:	1aa3      	subs	r3, r4, r2
 800b61c:	3b11      	subs	r3, #17
 800b61e:	f023 0303 	bic.w	r3, r3, #3
 800b622:	3211      	adds	r2, #17
 800b624:	42a2      	cmp	r2, r4
 800b626:	bf88      	it	hi
 800b628:	2300      	movhi	r3, #0
 800b62a:	4418      	add	r0, r3
 800b62c:	2300      	movs	r3, #0
 800b62e:	4288      	cmp	r0, r1
 800b630:	d305      	bcc.n	800b63e <__copybits+0x40>
 800b632:	bd70      	pop	{r4, r5, r6, pc}
 800b634:	f853 6b04 	ldr.w	r6, [r3], #4
 800b638:	f845 6f04 	str.w	r6, [r5, #4]!
 800b63c:	e7eb      	b.n	800b616 <__copybits+0x18>
 800b63e:	f840 3b04 	str.w	r3, [r0], #4
 800b642:	e7f4      	b.n	800b62e <__copybits+0x30>

0800b644 <__any_on>:
 800b644:	f100 0214 	add.w	r2, r0, #20
 800b648:	6900      	ldr	r0, [r0, #16]
 800b64a:	114b      	asrs	r3, r1, #5
 800b64c:	4298      	cmp	r0, r3
 800b64e:	b510      	push	{r4, lr}
 800b650:	db11      	blt.n	800b676 <__any_on+0x32>
 800b652:	dd0a      	ble.n	800b66a <__any_on+0x26>
 800b654:	f011 011f 	ands.w	r1, r1, #31
 800b658:	d007      	beq.n	800b66a <__any_on+0x26>
 800b65a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b65e:	fa24 f001 	lsr.w	r0, r4, r1
 800b662:	fa00 f101 	lsl.w	r1, r0, r1
 800b666:	428c      	cmp	r4, r1
 800b668:	d10b      	bne.n	800b682 <__any_on+0x3e>
 800b66a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b66e:	4293      	cmp	r3, r2
 800b670:	d803      	bhi.n	800b67a <__any_on+0x36>
 800b672:	2000      	movs	r0, #0
 800b674:	bd10      	pop	{r4, pc}
 800b676:	4603      	mov	r3, r0
 800b678:	e7f7      	b.n	800b66a <__any_on+0x26>
 800b67a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b67e:	2900      	cmp	r1, #0
 800b680:	d0f5      	beq.n	800b66e <__any_on+0x2a>
 800b682:	2001      	movs	r0, #1
 800b684:	e7f6      	b.n	800b674 <__any_on+0x30>

0800b686 <sulp>:
 800b686:	b570      	push	{r4, r5, r6, lr}
 800b688:	4604      	mov	r4, r0
 800b68a:	460d      	mov	r5, r1
 800b68c:	ec45 4b10 	vmov	d0, r4, r5
 800b690:	4616      	mov	r6, r2
 800b692:	f7ff feb7 	bl	800b404 <__ulp>
 800b696:	ec51 0b10 	vmov	r0, r1, d0
 800b69a:	b17e      	cbz	r6, 800b6bc <sulp+0x36>
 800b69c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b6a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	dd09      	ble.n	800b6bc <sulp+0x36>
 800b6a8:	051b      	lsls	r3, r3, #20
 800b6aa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b6ae:	2400      	movs	r4, #0
 800b6b0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b6b4:	4622      	mov	r2, r4
 800b6b6:	462b      	mov	r3, r5
 800b6b8:	f7f4 ffbe 	bl	8000638 <__aeabi_dmul>
 800b6bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b6c0 <_strtod_l>:
 800b6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6c4:	ed2d 8b02 	vpush	{d8}
 800b6c8:	b09b      	sub	sp, #108	; 0x6c
 800b6ca:	4604      	mov	r4, r0
 800b6cc:	9213      	str	r2, [sp, #76]	; 0x4c
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	9216      	str	r2, [sp, #88]	; 0x58
 800b6d2:	460d      	mov	r5, r1
 800b6d4:	f04f 0800 	mov.w	r8, #0
 800b6d8:	f04f 0900 	mov.w	r9, #0
 800b6dc:	460a      	mov	r2, r1
 800b6de:	9215      	str	r2, [sp, #84]	; 0x54
 800b6e0:	7811      	ldrb	r1, [r2, #0]
 800b6e2:	292b      	cmp	r1, #43	; 0x2b
 800b6e4:	d04c      	beq.n	800b780 <_strtod_l+0xc0>
 800b6e6:	d83a      	bhi.n	800b75e <_strtod_l+0x9e>
 800b6e8:	290d      	cmp	r1, #13
 800b6ea:	d834      	bhi.n	800b756 <_strtod_l+0x96>
 800b6ec:	2908      	cmp	r1, #8
 800b6ee:	d834      	bhi.n	800b75a <_strtod_l+0x9a>
 800b6f0:	2900      	cmp	r1, #0
 800b6f2:	d03d      	beq.n	800b770 <_strtod_l+0xb0>
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	920a      	str	r2, [sp, #40]	; 0x28
 800b6f8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800b6fa:	7832      	ldrb	r2, [r6, #0]
 800b6fc:	2a30      	cmp	r2, #48	; 0x30
 800b6fe:	f040 80b4 	bne.w	800b86a <_strtod_l+0x1aa>
 800b702:	7872      	ldrb	r2, [r6, #1]
 800b704:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b708:	2a58      	cmp	r2, #88	; 0x58
 800b70a:	d170      	bne.n	800b7ee <_strtod_l+0x12e>
 800b70c:	9302      	str	r3, [sp, #8]
 800b70e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b710:	9301      	str	r3, [sp, #4]
 800b712:	ab16      	add	r3, sp, #88	; 0x58
 800b714:	9300      	str	r3, [sp, #0]
 800b716:	4a8e      	ldr	r2, [pc, #568]	; (800b950 <_strtod_l+0x290>)
 800b718:	ab17      	add	r3, sp, #92	; 0x5c
 800b71a:	a915      	add	r1, sp, #84	; 0x54
 800b71c:	4620      	mov	r0, r4
 800b71e:	f001 fcd3 	bl	800d0c8 <__gethex>
 800b722:	f010 070f 	ands.w	r7, r0, #15
 800b726:	4605      	mov	r5, r0
 800b728:	d005      	beq.n	800b736 <_strtod_l+0x76>
 800b72a:	2f06      	cmp	r7, #6
 800b72c:	d12a      	bne.n	800b784 <_strtod_l+0xc4>
 800b72e:	3601      	adds	r6, #1
 800b730:	2300      	movs	r3, #0
 800b732:	9615      	str	r6, [sp, #84]	; 0x54
 800b734:	930a      	str	r3, [sp, #40]	; 0x28
 800b736:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b738:	2b00      	cmp	r3, #0
 800b73a:	f040 857f 	bne.w	800c23c <_strtod_l+0xb7c>
 800b73e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b740:	b1db      	cbz	r3, 800b77a <_strtod_l+0xba>
 800b742:	4642      	mov	r2, r8
 800b744:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b748:	ec43 2b10 	vmov	d0, r2, r3
 800b74c:	b01b      	add	sp, #108	; 0x6c
 800b74e:	ecbd 8b02 	vpop	{d8}
 800b752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b756:	2920      	cmp	r1, #32
 800b758:	d1cc      	bne.n	800b6f4 <_strtod_l+0x34>
 800b75a:	3201      	adds	r2, #1
 800b75c:	e7bf      	b.n	800b6de <_strtod_l+0x1e>
 800b75e:	292d      	cmp	r1, #45	; 0x2d
 800b760:	d1c8      	bne.n	800b6f4 <_strtod_l+0x34>
 800b762:	2101      	movs	r1, #1
 800b764:	910a      	str	r1, [sp, #40]	; 0x28
 800b766:	1c51      	adds	r1, r2, #1
 800b768:	9115      	str	r1, [sp, #84]	; 0x54
 800b76a:	7852      	ldrb	r2, [r2, #1]
 800b76c:	2a00      	cmp	r2, #0
 800b76e:	d1c3      	bne.n	800b6f8 <_strtod_l+0x38>
 800b770:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b772:	9515      	str	r5, [sp, #84]	; 0x54
 800b774:	2b00      	cmp	r3, #0
 800b776:	f040 855f 	bne.w	800c238 <_strtod_l+0xb78>
 800b77a:	4642      	mov	r2, r8
 800b77c:	464b      	mov	r3, r9
 800b77e:	e7e3      	b.n	800b748 <_strtod_l+0x88>
 800b780:	2100      	movs	r1, #0
 800b782:	e7ef      	b.n	800b764 <_strtod_l+0xa4>
 800b784:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b786:	b13a      	cbz	r2, 800b798 <_strtod_l+0xd8>
 800b788:	2135      	movs	r1, #53	; 0x35
 800b78a:	a818      	add	r0, sp, #96	; 0x60
 800b78c:	f7ff ff37 	bl	800b5fe <__copybits>
 800b790:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b792:	4620      	mov	r0, r4
 800b794:	f7ff fb0a 	bl	800adac <_Bfree>
 800b798:	3f01      	subs	r7, #1
 800b79a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b79c:	2f04      	cmp	r7, #4
 800b79e:	d806      	bhi.n	800b7ae <_strtod_l+0xee>
 800b7a0:	e8df f007 	tbb	[pc, r7]
 800b7a4:	201d0314 	.word	0x201d0314
 800b7a8:	14          	.byte	0x14
 800b7a9:	00          	.byte	0x00
 800b7aa:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800b7ae:	05e9      	lsls	r1, r5, #23
 800b7b0:	bf48      	it	mi
 800b7b2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800b7b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b7ba:	0d1b      	lsrs	r3, r3, #20
 800b7bc:	051b      	lsls	r3, r3, #20
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d1b9      	bne.n	800b736 <_strtod_l+0x76>
 800b7c2:	f7fe fb05 	bl	8009dd0 <__errno>
 800b7c6:	2322      	movs	r3, #34	; 0x22
 800b7c8:	6003      	str	r3, [r0, #0]
 800b7ca:	e7b4      	b.n	800b736 <_strtod_l+0x76>
 800b7cc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800b7d0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b7d4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b7d8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800b7dc:	e7e7      	b.n	800b7ae <_strtod_l+0xee>
 800b7de:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b958 <_strtod_l+0x298>
 800b7e2:	e7e4      	b.n	800b7ae <_strtod_l+0xee>
 800b7e4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800b7e8:	f04f 38ff 	mov.w	r8, #4294967295
 800b7ec:	e7df      	b.n	800b7ae <_strtod_l+0xee>
 800b7ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b7f0:	1c5a      	adds	r2, r3, #1
 800b7f2:	9215      	str	r2, [sp, #84]	; 0x54
 800b7f4:	785b      	ldrb	r3, [r3, #1]
 800b7f6:	2b30      	cmp	r3, #48	; 0x30
 800b7f8:	d0f9      	beq.n	800b7ee <_strtod_l+0x12e>
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d09b      	beq.n	800b736 <_strtod_l+0x76>
 800b7fe:	2301      	movs	r3, #1
 800b800:	f04f 0a00 	mov.w	sl, #0
 800b804:	9304      	str	r3, [sp, #16]
 800b806:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b808:	930b      	str	r3, [sp, #44]	; 0x2c
 800b80a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b80e:	46d3      	mov	fp, sl
 800b810:	220a      	movs	r2, #10
 800b812:	9815      	ldr	r0, [sp, #84]	; 0x54
 800b814:	7806      	ldrb	r6, [r0, #0]
 800b816:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b81a:	b2d9      	uxtb	r1, r3
 800b81c:	2909      	cmp	r1, #9
 800b81e:	d926      	bls.n	800b86e <_strtod_l+0x1ae>
 800b820:	494c      	ldr	r1, [pc, #304]	; (800b954 <_strtod_l+0x294>)
 800b822:	2201      	movs	r2, #1
 800b824:	f001 fb79 	bl	800cf1a <strncmp>
 800b828:	2800      	cmp	r0, #0
 800b82a:	d030      	beq.n	800b88e <_strtod_l+0x1ce>
 800b82c:	2000      	movs	r0, #0
 800b82e:	4632      	mov	r2, r6
 800b830:	9005      	str	r0, [sp, #20]
 800b832:	465e      	mov	r6, fp
 800b834:	4603      	mov	r3, r0
 800b836:	2a65      	cmp	r2, #101	; 0x65
 800b838:	d001      	beq.n	800b83e <_strtod_l+0x17e>
 800b83a:	2a45      	cmp	r2, #69	; 0x45
 800b83c:	d113      	bne.n	800b866 <_strtod_l+0x1a6>
 800b83e:	b91e      	cbnz	r6, 800b848 <_strtod_l+0x188>
 800b840:	9a04      	ldr	r2, [sp, #16]
 800b842:	4302      	orrs	r2, r0
 800b844:	d094      	beq.n	800b770 <_strtod_l+0xb0>
 800b846:	2600      	movs	r6, #0
 800b848:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b84a:	1c6a      	adds	r2, r5, #1
 800b84c:	9215      	str	r2, [sp, #84]	; 0x54
 800b84e:	786a      	ldrb	r2, [r5, #1]
 800b850:	2a2b      	cmp	r2, #43	; 0x2b
 800b852:	d074      	beq.n	800b93e <_strtod_l+0x27e>
 800b854:	2a2d      	cmp	r2, #45	; 0x2d
 800b856:	d078      	beq.n	800b94a <_strtod_l+0x28a>
 800b858:	f04f 0c00 	mov.w	ip, #0
 800b85c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b860:	2909      	cmp	r1, #9
 800b862:	d97f      	bls.n	800b964 <_strtod_l+0x2a4>
 800b864:	9515      	str	r5, [sp, #84]	; 0x54
 800b866:	2700      	movs	r7, #0
 800b868:	e09e      	b.n	800b9a8 <_strtod_l+0x2e8>
 800b86a:	2300      	movs	r3, #0
 800b86c:	e7c8      	b.n	800b800 <_strtod_l+0x140>
 800b86e:	f1bb 0f08 	cmp.w	fp, #8
 800b872:	bfd8      	it	le
 800b874:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b876:	f100 0001 	add.w	r0, r0, #1
 800b87a:	bfda      	itte	le
 800b87c:	fb02 3301 	mlale	r3, r2, r1, r3
 800b880:	9309      	strle	r3, [sp, #36]	; 0x24
 800b882:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800b886:	f10b 0b01 	add.w	fp, fp, #1
 800b88a:	9015      	str	r0, [sp, #84]	; 0x54
 800b88c:	e7c1      	b.n	800b812 <_strtod_l+0x152>
 800b88e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b890:	1c5a      	adds	r2, r3, #1
 800b892:	9215      	str	r2, [sp, #84]	; 0x54
 800b894:	785a      	ldrb	r2, [r3, #1]
 800b896:	f1bb 0f00 	cmp.w	fp, #0
 800b89a:	d037      	beq.n	800b90c <_strtod_l+0x24c>
 800b89c:	9005      	str	r0, [sp, #20]
 800b89e:	465e      	mov	r6, fp
 800b8a0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b8a4:	2b09      	cmp	r3, #9
 800b8a6:	d912      	bls.n	800b8ce <_strtod_l+0x20e>
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	e7c4      	b.n	800b836 <_strtod_l+0x176>
 800b8ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b8ae:	1c5a      	adds	r2, r3, #1
 800b8b0:	9215      	str	r2, [sp, #84]	; 0x54
 800b8b2:	785a      	ldrb	r2, [r3, #1]
 800b8b4:	3001      	adds	r0, #1
 800b8b6:	2a30      	cmp	r2, #48	; 0x30
 800b8b8:	d0f8      	beq.n	800b8ac <_strtod_l+0x1ec>
 800b8ba:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b8be:	2b08      	cmp	r3, #8
 800b8c0:	f200 84c1 	bhi.w	800c246 <_strtod_l+0xb86>
 800b8c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b8c6:	9005      	str	r0, [sp, #20]
 800b8c8:	2000      	movs	r0, #0
 800b8ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8cc:	4606      	mov	r6, r0
 800b8ce:	3a30      	subs	r2, #48	; 0x30
 800b8d0:	f100 0301 	add.w	r3, r0, #1
 800b8d4:	d014      	beq.n	800b900 <_strtod_l+0x240>
 800b8d6:	9905      	ldr	r1, [sp, #20]
 800b8d8:	4419      	add	r1, r3
 800b8da:	9105      	str	r1, [sp, #20]
 800b8dc:	4633      	mov	r3, r6
 800b8de:	eb00 0c06 	add.w	ip, r0, r6
 800b8e2:	210a      	movs	r1, #10
 800b8e4:	4563      	cmp	r3, ip
 800b8e6:	d113      	bne.n	800b910 <_strtod_l+0x250>
 800b8e8:	1833      	adds	r3, r6, r0
 800b8ea:	2b08      	cmp	r3, #8
 800b8ec:	f106 0601 	add.w	r6, r6, #1
 800b8f0:	4406      	add	r6, r0
 800b8f2:	dc1a      	bgt.n	800b92a <_strtod_l+0x26a>
 800b8f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b8f6:	230a      	movs	r3, #10
 800b8f8:	fb03 2301 	mla	r3, r3, r1, r2
 800b8fc:	9309      	str	r3, [sp, #36]	; 0x24
 800b8fe:	2300      	movs	r3, #0
 800b900:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b902:	1c51      	adds	r1, r2, #1
 800b904:	9115      	str	r1, [sp, #84]	; 0x54
 800b906:	7852      	ldrb	r2, [r2, #1]
 800b908:	4618      	mov	r0, r3
 800b90a:	e7c9      	b.n	800b8a0 <_strtod_l+0x1e0>
 800b90c:	4658      	mov	r0, fp
 800b90e:	e7d2      	b.n	800b8b6 <_strtod_l+0x1f6>
 800b910:	2b08      	cmp	r3, #8
 800b912:	f103 0301 	add.w	r3, r3, #1
 800b916:	dc03      	bgt.n	800b920 <_strtod_l+0x260>
 800b918:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b91a:	434f      	muls	r7, r1
 800b91c:	9709      	str	r7, [sp, #36]	; 0x24
 800b91e:	e7e1      	b.n	800b8e4 <_strtod_l+0x224>
 800b920:	2b10      	cmp	r3, #16
 800b922:	bfd8      	it	le
 800b924:	fb01 fa0a 	mulle.w	sl, r1, sl
 800b928:	e7dc      	b.n	800b8e4 <_strtod_l+0x224>
 800b92a:	2e10      	cmp	r6, #16
 800b92c:	bfdc      	itt	le
 800b92e:	230a      	movle	r3, #10
 800b930:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800b934:	e7e3      	b.n	800b8fe <_strtod_l+0x23e>
 800b936:	2300      	movs	r3, #0
 800b938:	9305      	str	r3, [sp, #20]
 800b93a:	2301      	movs	r3, #1
 800b93c:	e780      	b.n	800b840 <_strtod_l+0x180>
 800b93e:	f04f 0c00 	mov.w	ip, #0
 800b942:	1caa      	adds	r2, r5, #2
 800b944:	9215      	str	r2, [sp, #84]	; 0x54
 800b946:	78aa      	ldrb	r2, [r5, #2]
 800b948:	e788      	b.n	800b85c <_strtod_l+0x19c>
 800b94a:	f04f 0c01 	mov.w	ip, #1
 800b94e:	e7f8      	b.n	800b942 <_strtod_l+0x282>
 800b950:	0800e068 	.word	0x0800e068
 800b954:	0800e064 	.word	0x0800e064
 800b958:	7ff00000 	.word	0x7ff00000
 800b95c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b95e:	1c51      	adds	r1, r2, #1
 800b960:	9115      	str	r1, [sp, #84]	; 0x54
 800b962:	7852      	ldrb	r2, [r2, #1]
 800b964:	2a30      	cmp	r2, #48	; 0x30
 800b966:	d0f9      	beq.n	800b95c <_strtod_l+0x29c>
 800b968:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b96c:	2908      	cmp	r1, #8
 800b96e:	f63f af7a 	bhi.w	800b866 <_strtod_l+0x1a6>
 800b972:	3a30      	subs	r2, #48	; 0x30
 800b974:	9208      	str	r2, [sp, #32]
 800b976:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b978:	920c      	str	r2, [sp, #48]	; 0x30
 800b97a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b97c:	1c57      	adds	r7, r2, #1
 800b97e:	9715      	str	r7, [sp, #84]	; 0x54
 800b980:	7852      	ldrb	r2, [r2, #1]
 800b982:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b986:	f1be 0f09 	cmp.w	lr, #9
 800b98a:	d938      	bls.n	800b9fe <_strtod_l+0x33e>
 800b98c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b98e:	1a7f      	subs	r7, r7, r1
 800b990:	2f08      	cmp	r7, #8
 800b992:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b996:	dc03      	bgt.n	800b9a0 <_strtod_l+0x2e0>
 800b998:	9908      	ldr	r1, [sp, #32]
 800b99a:	428f      	cmp	r7, r1
 800b99c:	bfa8      	it	ge
 800b99e:	460f      	movge	r7, r1
 800b9a0:	f1bc 0f00 	cmp.w	ip, #0
 800b9a4:	d000      	beq.n	800b9a8 <_strtod_l+0x2e8>
 800b9a6:	427f      	negs	r7, r7
 800b9a8:	2e00      	cmp	r6, #0
 800b9aa:	d14f      	bne.n	800ba4c <_strtod_l+0x38c>
 800b9ac:	9904      	ldr	r1, [sp, #16]
 800b9ae:	4301      	orrs	r1, r0
 800b9b0:	f47f aec1 	bne.w	800b736 <_strtod_l+0x76>
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	f47f aedb 	bne.w	800b770 <_strtod_l+0xb0>
 800b9ba:	2a69      	cmp	r2, #105	; 0x69
 800b9bc:	d029      	beq.n	800ba12 <_strtod_l+0x352>
 800b9be:	dc26      	bgt.n	800ba0e <_strtod_l+0x34e>
 800b9c0:	2a49      	cmp	r2, #73	; 0x49
 800b9c2:	d026      	beq.n	800ba12 <_strtod_l+0x352>
 800b9c4:	2a4e      	cmp	r2, #78	; 0x4e
 800b9c6:	f47f aed3 	bne.w	800b770 <_strtod_l+0xb0>
 800b9ca:	499b      	ldr	r1, [pc, #620]	; (800bc38 <_strtod_l+0x578>)
 800b9cc:	a815      	add	r0, sp, #84	; 0x54
 800b9ce:	f001 fdbb 	bl	800d548 <__match>
 800b9d2:	2800      	cmp	r0, #0
 800b9d4:	f43f aecc 	beq.w	800b770 <_strtod_l+0xb0>
 800b9d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b9da:	781b      	ldrb	r3, [r3, #0]
 800b9dc:	2b28      	cmp	r3, #40	; 0x28
 800b9de:	d12f      	bne.n	800ba40 <_strtod_l+0x380>
 800b9e0:	4996      	ldr	r1, [pc, #600]	; (800bc3c <_strtod_l+0x57c>)
 800b9e2:	aa18      	add	r2, sp, #96	; 0x60
 800b9e4:	a815      	add	r0, sp, #84	; 0x54
 800b9e6:	f001 fdc3 	bl	800d570 <__hexnan>
 800b9ea:	2805      	cmp	r0, #5
 800b9ec:	d128      	bne.n	800ba40 <_strtod_l+0x380>
 800b9ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b9f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b9f4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b9f8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b9fc:	e69b      	b.n	800b736 <_strtod_l+0x76>
 800b9fe:	9f08      	ldr	r7, [sp, #32]
 800ba00:	210a      	movs	r1, #10
 800ba02:	fb01 2107 	mla	r1, r1, r7, r2
 800ba06:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800ba0a:	9208      	str	r2, [sp, #32]
 800ba0c:	e7b5      	b.n	800b97a <_strtod_l+0x2ba>
 800ba0e:	2a6e      	cmp	r2, #110	; 0x6e
 800ba10:	e7d9      	b.n	800b9c6 <_strtod_l+0x306>
 800ba12:	498b      	ldr	r1, [pc, #556]	; (800bc40 <_strtod_l+0x580>)
 800ba14:	a815      	add	r0, sp, #84	; 0x54
 800ba16:	f001 fd97 	bl	800d548 <__match>
 800ba1a:	2800      	cmp	r0, #0
 800ba1c:	f43f aea8 	beq.w	800b770 <_strtod_l+0xb0>
 800ba20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba22:	4988      	ldr	r1, [pc, #544]	; (800bc44 <_strtod_l+0x584>)
 800ba24:	3b01      	subs	r3, #1
 800ba26:	a815      	add	r0, sp, #84	; 0x54
 800ba28:	9315      	str	r3, [sp, #84]	; 0x54
 800ba2a:	f001 fd8d 	bl	800d548 <__match>
 800ba2e:	b910      	cbnz	r0, 800ba36 <_strtod_l+0x376>
 800ba30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba32:	3301      	adds	r3, #1
 800ba34:	9315      	str	r3, [sp, #84]	; 0x54
 800ba36:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800bc54 <_strtod_l+0x594>
 800ba3a:	f04f 0800 	mov.w	r8, #0
 800ba3e:	e67a      	b.n	800b736 <_strtod_l+0x76>
 800ba40:	4881      	ldr	r0, [pc, #516]	; (800bc48 <_strtod_l+0x588>)
 800ba42:	f001 fa9d 	bl	800cf80 <nan>
 800ba46:	ec59 8b10 	vmov	r8, r9, d0
 800ba4a:	e674      	b.n	800b736 <_strtod_l+0x76>
 800ba4c:	9b05      	ldr	r3, [sp, #20]
 800ba4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba50:	1afb      	subs	r3, r7, r3
 800ba52:	f1bb 0f00 	cmp.w	fp, #0
 800ba56:	bf08      	it	eq
 800ba58:	46b3      	moveq	fp, r6
 800ba5a:	2e10      	cmp	r6, #16
 800ba5c:	9308      	str	r3, [sp, #32]
 800ba5e:	4635      	mov	r5, r6
 800ba60:	bfa8      	it	ge
 800ba62:	2510      	movge	r5, #16
 800ba64:	f7f4 fd6e 	bl	8000544 <__aeabi_ui2d>
 800ba68:	2e09      	cmp	r6, #9
 800ba6a:	4680      	mov	r8, r0
 800ba6c:	4689      	mov	r9, r1
 800ba6e:	dd13      	ble.n	800ba98 <_strtod_l+0x3d8>
 800ba70:	4b76      	ldr	r3, [pc, #472]	; (800bc4c <_strtod_l+0x58c>)
 800ba72:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ba76:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ba7a:	f7f4 fddd 	bl	8000638 <__aeabi_dmul>
 800ba7e:	4680      	mov	r8, r0
 800ba80:	4650      	mov	r0, sl
 800ba82:	4689      	mov	r9, r1
 800ba84:	f7f4 fd5e 	bl	8000544 <__aeabi_ui2d>
 800ba88:	4602      	mov	r2, r0
 800ba8a:	460b      	mov	r3, r1
 800ba8c:	4640      	mov	r0, r8
 800ba8e:	4649      	mov	r1, r9
 800ba90:	f7f4 fc1c 	bl	80002cc <__adddf3>
 800ba94:	4680      	mov	r8, r0
 800ba96:	4689      	mov	r9, r1
 800ba98:	2e0f      	cmp	r6, #15
 800ba9a:	dc38      	bgt.n	800bb0e <_strtod_l+0x44e>
 800ba9c:	9b08      	ldr	r3, [sp, #32]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	f43f ae49 	beq.w	800b736 <_strtod_l+0x76>
 800baa4:	dd24      	ble.n	800baf0 <_strtod_l+0x430>
 800baa6:	2b16      	cmp	r3, #22
 800baa8:	dc0b      	bgt.n	800bac2 <_strtod_l+0x402>
 800baaa:	4968      	ldr	r1, [pc, #416]	; (800bc4c <_strtod_l+0x58c>)
 800baac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bab0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bab4:	4642      	mov	r2, r8
 800bab6:	464b      	mov	r3, r9
 800bab8:	f7f4 fdbe 	bl	8000638 <__aeabi_dmul>
 800babc:	4680      	mov	r8, r0
 800babe:	4689      	mov	r9, r1
 800bac0:	e639      	b.n	800b736 <_strtod_l+0x76>
 800bac2:	9a08      	ldr	r2, [sp, #32]
 800bac4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800bac8:	4293      	cmp	r3, r2
 800baca:	db20      	blt.n	800bb0e <_strtod_l+0x44e>
 800bacc:	4c5f      	ldr	r4, [pc, #380]	; (800bc4c <_strtod_l+0x58c>)
 800bace:	f1c6 060f 	rsb	r6, r6, #15
 800bad2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800bad6:	4642      	mov	r2, r8
 800bad8:	464b      	mov	r3, r9
 800bada:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bade:	f7f4 fdab 	bl	8000638 <__aeabi_dmul>
 800bae2:	9b08      	ldr	r3, [sp, #32]
 800bae4:	1b9e      	subs	r6, r3, r6
 800bae6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800baea:	e9d4 2300 	ldrd	r2, r3, [r4]
 800baee:	e7e3      	b.n	800bab8 <_strtod_l+0x3f8>
 800baf0:	9b08      	ldr	r3, [sp, #32]
 800baf2:	3316      	adds	r3, #22
 800baf4:	db0b      	blt.n	800bb0e <_strtod_l+0x44e>
 800baf6:	9b05      	ldr	r3, [sp, #20]
 800baf8:	1bdf      	subs	r7, r3, r7
 800bafa:	4b54      	ldr	r3, [pc, #336]	; (800bc4c <_strtod_l+0x58c>)
 800bafc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800bb00:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb04:	4640      	mov	r0, r8
 800bb06:	4649      	mov	r1, r9
 800bb08:	f7f4 fec0 	bl	800088c <__aeabi_ddiv>
 800bb0c:	e7d6      	b.n	800babc <_strtod_l+0x3fc>
 800bb0e:	9b08      	ldr	r3, [sp, #32]
 800bb10:	1b75      	subs	r5, r6, r5
 800bb12:	441d      	add	r5, r3
 800bb14:	2d00      	cmp	r5, #0
 800bb16:	dd70      	ble.n	800bbfa <_strtod_l+0x53a>
 800bb18:	f015 030f 	ands.w	r3, r5, #15
 800bb1c:	d00a      	beq.n	800bb34 <_strtod_l+0x474>
 800bb1e:	494b      	ldr	r1, [pc, #300]	; (800bc4c <_strtod_l+0x58c>)
 800bb20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bb24:	4642      	mov	r2, r8
 800bb26:	464b      	mov	r3, r9
 800bb28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb2c:	f7f4 fd84 	bl	8000638 <__aeabi_dmul>
 800bb30:	4680      	mov	r8, r0
 800bb32:	4689      	mov	r9, r1
 800bb34:	f035 050f 	bics.w	r5, r5, #15
 800bb38:	d04d      	beq.n	800bbd6 <_strtod_l+0x516>
 800bb3a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800bb3e:	dd22      	ble.n	800bb86 <_strtod_l+0x4c6>
 800bb40:	2500      	movs	r5, #0
 800bb42:	46ab      	mov	fp, r5
 800bb44:	9509      	str	r5, [sp, #36]	; 0x24
 800bb46:	9505      	str	r5, [sp, #20]
 800bb48:	2322      	movs	r3, #34	; 0x22
 800bb4a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800bc54 <_strtod_l+0x594>
 800bb4e:	6023      	str	r3, [r4, #0]
 800bb50:	f04f 0800 	mov.w	r8, #0
 800bb54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	f43f aded 	beq.w	800b736 <_strtod_l+0x76>
 800bb5c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bb5e:	4620      	mov	r0, r4
 800bb60:	f7ff f924 	bl	800adac <_Bfree>
 800bb64:	9905      	ldr	r1, [sp, #20]
 800bb66:	4620      	mov	r0, r4
 800bb68:	f7ff f920 	bl	800adac <_Bfree>
 800bb6c:	4659      	mov	r1, fp
 800bb6e:	4620      	mov	r0, r4
 800bb70:	f7ff f91c 	bl	800adac <_Bfree>
 800bb74:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb76:	4620      	mov	r0, r4
 800bb78:	f7ff f918 	bl	800adac <_Bfree>
 800bb7c:	4629      	mov	r1, r5
 800bb7e:	4620      	mov	r0, r4
 800bb80:	f7ff f914 	bl	800adac <_Bfree>
 800bb84:	e5d7      	b.n	800b736 <_strtod_l+0x76>
 800bb86:	4b32      	ldr	r3, [pc, #200]	; (800bc50 <_strtod_l+0x590>)
 800bb88:	9304      	str	r3, [sp, #16]
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	112d      	asrs	r5, r5, #4
 800bb8e:	4640      	mov	r0, r8
 800bb90:	4649      	mov	r1, r9
 800bb92:	469a      	mov	sl, r3
 800bb94:	2d01      	cmp	r5, #1
 800bb96:	dc21      	bgt.n	800bbdc <_strtod_l+0x51c>
 800bb98:	b10b      	cbz	r3, 800bb9e <_strtod_l+0x4de>
 800bb9a:	4680      	mov	r8, r0
 800bb9c:	4689      	mov	r9, r1
 800bb9e:	492c      	ldr	r1, [pc, #176]	; (800bc50 <_strtod_l+0x590>)
 800bba0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800bba4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800bba8:	4642      	mov	r2, r8
 800bbaa:	464b      	mov	r3, r9
 800bbac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbb0:	f7f4 fd42 	bl	8000638 <__aeabi_dmul>
 800bbb4:	4b27      	ldr	r3, [pc, #156]	; (800bc54 <_strtod_l+0x594>)
 800bbb6:	460a      	mov	r2, r1
 800bbb8:	400b      	ands	r3, r1
 800bbba:	4927      	ldr	r1, [pc, #156]	; (800bc58 <_strtod_l+0x598>)
 800bbbc:	428b      	cmp	r3, r1
 800bbbe:	4680      	mov	r8, r0
 800bbc0:	d8be      	bhi.n	800bb40 <_strtod_l+0x480>
 800bbc2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bbc6:	428b      	cmp	r3, r1
 800bbc8:	bf86      	itte	hi
 800bbca:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800bc5c <_strtod_l+0x59c>
 800bbce:	f04f 38ff 	movhi.w	r8, #4294967295
 800bbd2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	9304      	str	r3, [sp, #16]
 800bbda:	e07b      	b.n	800bcd4 <_strtod_l+0x614>
 800bbdc:	07ea      	lsls	r2, r5, #31
 800bbde:	d505      	bpl.n	800bbec <_strtod_l+0x52c>
 800bbe0:	9b04      	ldr	r3, [sp, #16]
 800bbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe6:	f7f4 fd27 	bl	8000638 <__aeabi_dmul>
 800bbea:	2301      	movs	r3, #1
 800bbec:	9a04      	ldr	r2, [sp, #16]
 800bbee:	3208      	adds	r2, #8
 800bbf0:	f10a 0a01 	add.w	sl, sl, #1
 800bbf4:	106d      	asrs	r5, r5, #1
 800bbf6:	9204      	str	r2, [sp, #16]
 800bbf8:	e7cc      	b.n	800bb94 <_strtod_l+0x4d4>
 800bbfa:	d0ec      	beq.n	800bbd6 <_strtod_l+0x516>
 800bbfc:	426d      	negs	r5, r5
 800bbfe:	f015 020f 	ands.w	r2, r5, #15
 800bc02:	d00a      	beq.n	800bc1a <_strtod_l+0x55a>
 800bc04:	4b11      	ldr	r3, [pc, #68]	; (800bc4c <_strtod_l+0x58c>)
 800bc06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc0a:	4640      	mov	r0, r8
 800bc0c:	4649      	mov	r1, r9
 800bc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc12:	f7f4 fe3b 	bl	800088c <__aeabi_ddiv>
 800bc16:	4680      	mov	r8, r0
 800bc18:	4689      	mov	r9, r1
 800bc1a:	112d      	asrs	r5, r5, #4
 800bc1c:	d0db      	beq.n	800bbd6 <_strtod_l+0x516>
 800bc1e:	2d1f      	cmp	r5, #31
 800bc20:	dd1e      	ble.n	800bc60 <_strtod_l+0x5a0>
 800bc22:	2500      	movs	r5, #0
 800bc24:	46ab      	mov	fp, r5
 800bc26:	9509      	str	r5, [sp, #36]	; 0x24
 800bc28:	9505      	str	r5, [sp, #20]
 800bc2a:	2322      	movs	r3, #34	; 0x22
 800bc2c:	f04f 0800 	mov.w	r8, #0
 800bc30:	f04f 0900 	mov.w	r9, #0
 800bc34:	6023      	str	r3, [r4, #0]
 800bc36:	e78d      	b.n	800bb54 <_strtod_l+0x494>
 800bc38:	0800de51 	.word	0x0800de51
 800bc3c:	0800e07c 	.word	0x0800e07c
 800bc40:	0800de49 	.word	0x0800de49
 800bc44:	0800de7e 	.word	0x0800de7e
 800bc48:	0800e228 	.word	0x0800e228
 800bc4c:	0800df90 	.word	0x0800df90
 800bc50:	0800df68 	.word	0x0800df68
 800bc54:	7ff00000 	.word	0x7ff00000
 800bc58:	7ca00000 	.word	0x7ca00000
 800bc5c:	7fefffff 	.word	0x7fefffff
 800bc60:	f015 0310 	ands.w	r3, r5, #16
 800bc64:	bf18      	it	ne
 800bc66:	236a      	movne	r3, #106	; 0x6a
 800bc68:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800c00c <_strtod_l+0x94c>
 800bc6c:	9304      	str	r3, [sp, #16]
 800bc6e:	4640      	mov	r0, r8
 800bc70:	4649      	mov	r1, r9
 800bc72:	2300      	movs	r3, #0
 800bc74:	07ea      	lsls	r2, r5, #31
 800bc76:	d504      	bpl.n	800bc82 <_strtod_l+0x5c2>
 800bc78:	e9da 2300 	ldrd	r2, r3, [sl]
 800bc7c:	f7f4 fcdc 	bl	8000638 <__aeabi_dmul>
 800bc80:	2301      	movs	r3, #1
 800bc82:	106d      	asrs	r5, r5, #1
 800bc84:	f10a 0a08 	add.w	sl, sl, #8
 800bc88:	d1f4      	bne.n	800bc74 <_strtod_l+0x5b4>
 800bc8a:	b10b      	cbz	r3, 800bc90 <_strtod_l+0x5d0>
 800bc8c:	4680      	mov	r8, r0
 800bc8e:	4689      	mov	r9, r1
 800bc90:	9b04      	ldr	r3, [sp, #16]
 800bc92:	b1bb      	cbz	r3, 800bcc4 <_strtod_l+0x604>
 800bc94:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800bc98:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	4649      	mov	r1, r9
 800bca0:	dd10      	ble.n	800bcc4 <_strtod_l+0x604>
 800bca2:	2b1f      	cmp	r3, #31
 800bca4:	f340 811e 	ble.w	800bee4 <_strtod_l+0x824>
 800bca8:	2b34      	cmp	r3, #52	; 0x34
 800bcaa:	bfde      	ittt	le
 800bcac:	f04f 33ff 	movle.w	r3, #4294967295
 800bcb0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800bcb4:	4093      	lslle	r3, r2
 800bcb6:	f04f 0800 	mov.w	r8, #0
 800bcba:	bfcc      	ite	gt
 800bcbc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800bcc0:	ea03 0901 	andle.w	r9, r3, r1
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	4640      	mov	r0, r8
 800bcca:	4649      	mov	r1, r9
 800bccc:	f7f4 ff1c 	bl	8000b08 <__aeabi_dcmpeq>
 800bcd0:	2800      	cmp	r0, #0
 800bcd2:	d1a6      	bne.n	800bc22 <_strtod_l+0x562>
 800bcd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcd6:	9300      	str	r3, [sp, #0]
 800bcd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bcda:	4633      	mov	r3, r6
 800bcdc:	465a      	mov	r2, fp
 800bcde:	4620      	mov	r0, r4
 800bce0:	f7ff f8cc 	bl	800ae7c <__s2b>
 800bce4:	9009      	str	r0, [sp, #36]	; 0x24
 800bce6:	2800      	cmp	r0, #0
 800bce8:	f43f af2a 	beq.w	800bb40 <_strtod_l+0x480>
 800bcec:	9a08      	ldr	r2, [sp, #32]
 800bcee:	9b05      	ldr	r3, [sp, #20]
 800bcf0:	2a00      	cmp	r2, #0
 800bcf2:	eba3 0307 	sub.w	r3, r3, r7
 800bcf6:	bfa8      	it	ge
 800bcf8:	2300      	movge	r3, #0
 800bcfa:	930c      	str	r3, [sp, #48]	; 0x30
 800bcfc:	2500      	movs	r5, #0
 800bcfe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bd02:	9312      	str	r3, [sp, #72]	; 0x48
 800bd04:	46ab      	mov	fp, r5
 800bd06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd08:	4620      	mov	r0, r4
 800bd0a:	6859      	ldr	r1, [r3, #4]
 800bd0c:	f7ff f80e 	bl	800ad2c <_Balloc>
 800bd10:	9005      	str	r0, [sp, #20]
 800bd12:	2800      	cmp	r0, #0
 800bd14:	f43f af18 	beq.w	800bb48 <_strtod_l+0x488>
 800bd18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd1a:	691a      	ldr	r2, [r3, #16]
 800bd1c:	3202      	adds	r2, #2
 800bd1e:	f103 010c 	add.w	r1, r3, #12
 800bd22:	0092      	lsls	r2, r2, #2
 800bd24:	300c      	adds	r0, #12
 800bd26:	f001 f91b 	bl	800cf60 <memcpy>
 800bd2a:	ec49 8b10 	vmov	d0, r8, r9
 800bd2e:	aa18      	add	r2, sp, #96	; 0x60
 800bd30:	a917      	add	r1, sp, #92	; 0x5c
 800bd32:	4620      	mov	r0, r4
 800bd34:	f7ff fbd6 	bl	800b4e4 <__d2b>
 800bd38:	ec49 8b18 	vmov	d8, r8, r9
 800bd3c:	9016      	str	r0, [sp, #88]	; 0x58
 800bd3e:	2800      	cmp	r0, #0
 800bd40:	f43f af02 	beq.w	800bb48 <_strtod_l+0x488>
 800bd44:	2101      	movs	r1, #1
 800bd46:	4620      	mov	r0, r4
 800bd48:	f7ff f930 	bl	800afac <__i2b>
 800bd4c:	4683      	mov	fp, r0
 800bd4e:	2800      	cmp	r0, #0
 800bd50:	f43f aefa 	beq.w	800bb48 <_strtod_l+0x488>
 800bd54:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800bd56:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bd58:	2e00      	cmp	r6, #0
 800bd5a:	bfab      	itete	ge
 800bd5c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800bd5e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800bd60:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800bd62:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800bd66:	bfac      	ite	ge
 800bd68:	eb06 0a03 	addge.w	sl, r6, r3
 800bd6c:	1b9f      	sublt	r7, r3, r6
 800bd6e:	9b04      	ldr	r3, [sp, #16]
 800bd70:	1af6      	subs	r6, r6, r3
 800bd72:	4416      	add	r6, r2
 800bd74:	4ba0      	ldr	r3, [pc, #640]	; (800bff8 <_strtod_l+0x938>)
 800bd76:	3e01      	subs	r6, #1
 800bd78:	429e      	cmp	r6, r3
 800bd7a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bd7e:	f280 80c4 	bge.w	800bf0a <_strtod_l+0x84a>
 800bd82:	1b9b      	subs	r3, r3, r6
 800bd84:	2b1f      	cmp	r3, #31
 800bd86:	eba2 0203 	sub.w	r2, r2, r3
 800bd8a:	f04f 0101 	mov.w	r1, #1
 800bd8e:	f300 80b0 	bgt.w	800bef2 <_strtod_l+0x832>
 800bd92:	fa01 f303 	lsl.w	r3, r1, r3
 800bd96:	930e      	str	r3, [sp, #56]	; 0x38
 800bd98:	2300      	movs	r3, #0
 800bd9a:	930d      	str	r3, [sp, #52]	; 0x34
 800bd9c:	eb0a 0602 	add.w	r6, sl, r2
 800bda0:	9b04      	ldr	r3, [sp, #16]
 800bda2:	45b2      	cmp	sl, r6
 800bda4:	4417      	add	r7, r2
 800bda6:	441f      	add	r7, r3
 800bda8:	4653      	mov	r3, sl
 800bdaa:	bfa8      	it	ge
 800bdac:	4633      	movge	r3, r6
 800bdae:	42bb      	cmp	r3, r7
 800bdb0:	bfa8      	it	ge
 800bdb2:	463b      	movge	r3, r7
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	bfc2      	ittt	gt
 800bdb8:	1af6      	subgt	r6, r6, r3
 800bdba:	1aff      	subgt	r7, r7, r3
 800bdbc:	ebaa 0a03 	subgt.w	sl, sl, r3
 800bdc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	dd17      	ble.n	800bdf6 <_strtod_l+0x736>
 800bdc6:	4659      	mov	r1, fp
 800bdc8:	461a      	mov	r2, r3
 800bdca:	4620      	mov	r0, r4
 800bdcc:	f7ff f9ae 	bl	800b12c <__pow5mult>
 800bdd0:	4683      	mov	fp, r0
 800bdd2:	2800      	cmp	r0, #0
 800bdd4:	f43f aeb8 	beq.w	800bb48 <_strtod_l+0x488>
 800bdd8:	4601      	mov	r1, r0
 800bdda:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bddc:	4620      	mov	r0, r4
 800bdde:	f7ff f8fb 	bl	800afd8 <__multiply>
 800bde2:	900b      	str	r0, [sp, #44]	; 0x2c
 800bde4:	2800      	cmp	r0, #0
 800bde6:	f43f aeaf 	beq.w	800bb48 <_strtod_l+0x488>
 800bdea:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bdec:	4620      	mov	r0, r4
 800bdee:	f7fe ffdd 	bl	800adac <_Bfree>
 800bdf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bdf4:	9316      	str	r3, [sp, #88]	; 0x58
 800bdf6:	2e00      	cmp	r6, #0
 800bdf8:	f300 808c 	bgt.w	800bf14 <_strtod_l+0x854>
 800bdfc:	9b08      	ldr	r3, [sp, #32]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	dd08      	ble.n	800be14 <_strtod_l+0x754>
 800be02:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800be04:	9905      	ldr	r1, [sp, #20]
 800be06:	4620      	mov	r0, r4
 800be08:	f7ff f990 	bl	800b12c <__pow5mult>
 800be0c:	9005      	str	r0, [sp, #20]
 800be0e:	2800      	cmp	r0, #0
 800be10:	f43f ae9a 	beq.w	800bb48 <_strtod_l+0x488>
 800be14:	2f00      	cmp	r7, #0
 800be16:	dd08      	ble.n	800be2a <_strtod_l+0x76a>
 800be18:	9905      	ldr	r1, [sp, #20]
 800be1a:	463a      	mov	r2, r7
 800be1c:	4620      	mov	r0, r4
 800be1e:	f7ff f9df 	bl	800b1e0 <__lshift>
 800be22:	9005      	str	r0, [sp, #20]
 800be24:	2800      	cmp	r0, #0
 800be26:	f43f ae8f 	beq.w	800bb48 <_strtod_l+0x488>
 800be2a:	f1ba 0f00 	cmp.w	sl, #0
 800be2e:	dd08      	ble.n	800be42 <_strtod_l+0x782>
 800be30:	4659      	mov	r1, fp
 800be32:	4652      	mov	r2, sl
 800be34:	4620      	mov	r0, r4
 800be36:	f7ff f9d3 	bl	800b1e0 <__lshift>
 800be3a:	4683      	mov	fp, r0
 800be3c:	2800      	cmp	r0, #0
 800be3e:	f43f ae83 	beq.w	800bb48 <_strtod_l+0x488>
 800be42:	9a05      	ldr	r2, [sp, #20]
 800be44:	9916      	ldr	r1, [sp, #88]	; 0x58
 800be46:	4620      	mov	r0, r4
 800be48:	f7ff fa52 	bl	800b2f0 <__mdiff>
 800be4c:	4605      	mov	r5, r0
 800be4e:	2800      	cmp	r0, #0
 800be50:	f43f ae7a 	beq.w	800bb48 <_strtod_l+0x488>
 800be54:	68c3      	ldr	r3, [r0, #12]
 800be56:	930b      	str	r3, [sp, #44]	; 0x2c
 800be58:	2300      	movs	r3, #0
 800be5a:	60c3      	str	r3, [r0, #12]
 800be5c:	4659      	mov	r1, fp
 800be5e:	f7ff fa2b 	bl	800b2b8 <__mcmp>
 800be62:	2800      	cmp	r0, #0
 800be64:	da60      	bge.n	800bf28 <_strtod_l+0x868>
 800be66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be68:	ea53 0308 	orrs.w	r3, r3, r8
 800be6c:	f040 8084 	bne.w	800bf78 <_strtod_l+0x8b8>
 800be70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800be74:	2b00      	cmp	r3, #0
 800be76:	d17f      	bne.n	800bf78 <_strtod_l+0x8b8>
 800be78:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800be7c:	0d1b      	lsrs	r3, r3, #20
 800be7e:	051b      	lsls	r3, r3, #20
 800be80:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800be84:	d978      	bls.n	800bf78 <_strtod_l+0x8b8>
 800be86:	696b      	ldr	r3, [r5, #20]
 800be88:	b913      	cbnz	r3, 800be90 <_strtod_l+0x7d0>
 800be8a:	692b      	ldr	r3, [r5, #16]
 800be8c:	2b01      	cmp	r3, #1
 800be8e:	dd73      	ble.n	800bf78 <_strtod_l+0x8b8>
 800be90:	4629      	mov	r1, r5
 800be92:	2201      	movs	r2, #1
 800be94:	4620      	mov	r0, r4
 800be96:	f7ff f9a3 	bl	800b1e0 <__lshift>
 800be9a:	4659      	mov	r1, fp
 800be9c:	4605      	mov	r5, r0
 800be9e:	f7ff fa0b 	bl	800b2b8 <__mcmp>
 800bea2:	2800      	cmp	r0, #0
 800bea4:	dd68      	ble.n	800bf78 <_strtod_l+0x8b8>
 800bea6:	9904      	ldr	r1, [sp, #16]
 800bea8:	4a54      	ldr	r2, [pc, #336]	; (800bffc <_strtod_l+0x93c>)
 800beaa:	464b      	mov	r3, r9
 800beac:	2900      	cmp	r1, #0
 800beae:	f000 8084 	beq.w	800bfba <_strtod_l+0x8fa>
 800beb2:	ea02 0109 	and.w	r1, r2, r9
 800beb6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800beba:	dc7e      	bgt.n	800bfba <_strtod_l+0x8fa>
 800bebc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800bec0:	f77f aeb3 	ble.w	800bc2a <_strtod_l+0x56a>
 800bec4:	4b4e      	ldr	r3, [pc, #312]	; (800c000 <_strtod_l+0x940>)
 800bec6:	4640      	mov	r0, r8
 800bec8:	4649      	mov	r1, r9
 800beca:	2200      	movs	r2, #0
 800becc:	f7f4 fbb4 	bl	8000638 <__aeabi_dmul>
 800bed0:	4b4a      	ldr	r3, [pc, #296]	; (800bffc <_strtod_l+0x93c>)
 800bed2:	400b      	ands	r3, r1
 800bed4:	4680      	mov	r8, r0
 800bed6:	4689      	mov	r9, r1
 800bed8:	2b00      	cmp	r3, #0
 800beda:	f47f ae3f 	bne.w	800bb5c <_strtod_l+0x49c>
 800bede:	2322      	movs	r3, #34	; 0x22
 800bee0:	6023      	str	r3, [r4, #0]
 800bee2:	e63b      	b.n	800bb5c <_strtod_l+0x49c>
 800bee4:	f04f 32ff 	mov.w	r2, #4294967295
 800bee8:	fa02 f303 	lsl.w	r3, r2, r3
 800beec:	ea03 0808 	and.w	r8, r3, r8
 800bef0:	e6e8      	b.n	800bcc4 <_strtod_l+0x604>
 800bef2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800bef6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800befa:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800befe:	36e2      	adds	r6, #226	; 0xe2
 800bf00:	fa01 f306 	lsl.w	r3, r1, r6
 800bf04:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800bf08:	e748      	b.n	800bd9c <_strtod_l+0x6dc>
 800bf0a:	2100      	movs	r1, #0
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800bf12:	e743      	b.n	800bd9c <_strtod_l+0x6dc>
 800bf14:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bf16:	4632      	mov	r2, r6
 800bf18:	4620      	mov	r0, r4
 800bf1a:	f7ff f961 	bl	800b1e0 <__lshift>
 800bf1e:	9016      	str	r0, [sp, #88]	; 0x58
 800bf20:	2800      	cmp	r0, #0
 800bf22:	f47f af6b 	bne.w	800bdfc <_strtod_l+0x73c>
 800bf26:	e60f      	b.n	800bb48 <_strtod_l+0x488>
 800bf28:	46ca      	mov	sl, r9
 800bf2a:	d171      	bne.n	800c010 <_strtod_l+0x950>
 800bf2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bf2e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bf32:	b352      	cbz	r2, 800bf8a <_strtod_l+0x8ca>
 800bf34:	4a33      	ldr	r2, [pc, #204]	; (800c004 <_strtod_l+0x944>)
 800bf36:	4293      	cmp	r3, r2
 800bf38:	d12a      	bne.n	800bf90 <_strtod_l+0x8d0>
 800bf3a:	9b04      	ldr	r3, [sp, #16]
 800bf3c:	4641      	mov	r1, r8
 800bf3e:	b1fb      	cbz	r3, 800bf80 <_strtod_l+0x8c0>
 800bf40:	4b2e      	ldr	r3, [pc, #184]	; (800bffc <_strtod_l+0x93c>)
 800bf42:	ea09 0303 	and.w	r3, r9, r3
 800bf46:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bf4a:	f04f 32ff 	mov.w	r2, #4294967295
 800bf4e:	d81a      	bhi.n	800bf86 <_strtod_l+0x8c6>
 800bf50:	0d1b      	lsrs	r3, r3, #20
 800bf52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bf56:	fa02 f303 	lsl.w	r3, r2, r3
 800bf5a:	4299      	cmp	r1, r3
 800bf5c:	d118      	bne.n	800bf90 <_strtod_l+0x8d0>
 800bf5e:	4b2a      	ldr	r3, [pc, #168]	; (800c008 <_strtod_l+0x948>)
 800bf60:	459a      	cmp	sl, r3
 800bf62:	d102      	bne.n	800bf6a <_strtod_l+0x8aa>
 800bf64:	3101      	adds	r1, #1
 800bf66:	f43f adef 	beq.w	800bb48 <_strtod_l+0x488>
 800bf6a:	4b24      	ldr	r3, [pc, #144]	; (800bffc <_strtod_l+0x93c>)
 800bf6c:	ea0a 0303 	and.w	r3, sl, r3
 800bf70:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800bf74:	f04f 0800 	mov.w	r8, #0
 800bf78:	9b04      	ldr	r3, [sp, #16]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d1a2      	bne.n	800bec4 <_strtod_l+0x804>
 800bf7e:	e5ed      	b.n	800bb5c <_strtod_l+0x49c>
 800bf80:	f04f 33ff 	mov.w	r3, #4294967295
 800bf84:	e7e9      	b.n	800bf5a <_strtod_l+0x89a>
 800bf86:	4613      	mov	r3, r2
 800bf88:	e7e7      	b.n	800bf5a <_strtod_l+0x89a>
 800bf8a:	ea53 0308 	orrs.w	r3, r3, r8
 800bf8e:	d08a      	beq.n	800bea6 <_strtod_l+0x7e6>
 800bf90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf92:	b1e3      	cbz	r3, 800bfce <_strtod_l+0x90e>
 800bf94:	ea13 0f0a 	tst.w	r3, sl
 800bf98:	d0ee      	beq.n	800bf78 <_strtod_l+0x8b8>
 800bf9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf9c:	9a04      	ldr	r2, [sp, #16]
 800bf9e:	4640      	mov	r0, r8
 800bfa0:	4649      	mov	r1, r9
 800bfa2:	b1c3      	cbz	r3, 800bfd6 <_strtod_l+0x916>
 800bfa4:	f7ff fb6f 	bl	800b686 <sulp>
 800bfa8:	4602      	mov	r2, r0
 800bfaa:	460b      	mov	r3, r1
 800bfac:	ec51 0b18 	vmov	r0, r1, d8
 800bfb0:	f7f4 f98c 	bl	80002cc <__adddf3>
 800bfb4:	4680      	mov	r8, r0
 800bfb6:	4689      	mov	r9, r1
 800bfb8:	e7de      	b.n	800bf78 <_strtod_l+0x8b8>
 800bfba:	4013      	ands	r3, r2
 800bfbc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bfc0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800bfc4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800bfc8:	f04f 38ff 	mov.w	r8, #4294967295
 800bfcc:	e7d4      	b.n	800bf78 <_strtod_l+0x8b8>
 800bfce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bfd0:	ea13 0f08 	tst.w	r3, r8
 800bfd4:	e7e0      	b.n	800bf98 <_strtod_l+0x8d8>
 800bfd6:	f7ff fb56 	bl	800b686 <sulp>
 800bfda:	4602      	mov	r2, r0
 800bfdc:	460b      	mov	r3, r1
 800bfde:	ec51 0b18 	vmov	r0, r1, d8
 800bfe2:	f7f4 f971 	bl	80002c8 <__aeabi_dsub>
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	2300      	movs	r3, #0
 800bfea:	4680      	mov	r8, r0
 800bfec:	4689      	mov	r9, r1
 800bfee:	f7f4 fd8b 	bl	8000b08 <__aeabi_dcmpeq>
 800bff2:	2800      	cmp	r0, #0
 800bff4:	d0c0      	beq.n	800bf78 <_strtod_l+0x8b8>
 800bff6:	e618      	b.n	800bc2a <_strtod_l+0x56a>
 800bff8:	fffffc02 	.word	0xfffffc02
 800bffc:	7ff00000 	.word	0x7ff00000
 800c000:	39500000 	.word	0x39500000
 800c004:	000fffff 	.word	0x000fffff
 800c008:	7fefffff 	.word	0x7fefffff
 800c00c:	0800e090 	.word	0x0800e090
 800c010:	4659      	mov	r1, fp
 800c012:	4628      	mov	r0, r5
 800c014:	f7ff fac0 	bl	800b598 <__ratio>
 800c018:	ec57 6b10 	vmov	r6, r7, d0
 800c01c:	ee10 0a10 	vmov	r0, s0
 800c020:	2200      	movs	r2, #0
 800c022:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c026:	4639      	mov	r1, r7
 800c028:	f7f4 fd82 	bl	8000b30 <__aeabi_dcmple>
 800c02c:	2800      	cmp	r0, #0
 800c02e:	d071      	beq.n	800c114 <_strtod_l+0xa54>
 800c030:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c032:	2b00      	cmp	r3, #0
 800c034:	d17c      	bne.n	800c130 <_strtod_l+0xa70>
 800c036:	f1b8 0f00 	cmp.w	r8, #0
 800c03a:	d15a      	bne.n	800c0f2 <_strtod_l+0xa32>
 800c03c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c040:	2b00      	cmp	r3, #0
 800c042:	d15d      	bne.n	800c100 <_strtod_l+0xa40>
 800c044:	4b90      	ldr	r3, [pc, #576]	; (800c288 <_strtod_l+0xbc8>)
 800c046:	2200      	movs	r2, #0
 800c048:	4630      	mov	r0, r6
 800c04a:	4639      	mov	r1, r7
 800c04c:	f7f4 fd66 	bl	8000b1c <__aeabi_dcmplt>
 800c050:	2800      	cmp	r0, #0
 800c052:	d15c      	bne.n	800c10e <_strtod_l+0xa4e>
 800c054:	4630      	mov	r0, r6
 800c056:	4639      	mov	r1, r7
 800c058:	4b8c      	ldr	r3, [pc, #560]	; (800c28c <_strtod_l+0xbcc>)
 800c05a:	2200      	movs	r2, #0
 800c05c:	f7f4 faec 	bl	8000638 <__aeabi_dmul>
 800c060:	4606      	mov	r6, r0
 800c062:	460f      	mov	r7, r1
 800c064:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c068:	9606      	str	r6, [sp, #24]
 800c06a:	9307      	str	r3, [sp, #28]
 800c06c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c070:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c074:	4b86      	ldr	r3, [pc, #536]	; (800c290 <_strtod_l+0xbd0>)
 800c076:	ea0a 0303 	and.w	r3, sl, r3
 800c07a:	930d      	str	r3, [sp, #52]	; 0x34
 800c07c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c07e:	4b85      	ldr	r3, [pc, #532]	; (800c294 <_strtod_l+0xbd4>)
 800c080:	429a      	cmp	r2, r3
 800c082:	f040 8090 	bne.w	800c1a6 <_strtod_l+0xae6>
 800c086:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800c08a:	ec49 8b10 	vmov	d0, r8, r9
 800c08e:	f7ff f9b9 	bl	800b404 <__ulp>
 800c092:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c096:	ec51 0b10 	vmov	r0, r1, d0
 800c09a:	f7f4 facd 	bl	8000638 <__aeabi_dmul>
 800c09e:	4642      	mov	r2, r8
 800c0a0:	464b      	mov	r3, r9
 800c0a2:	f7f4 f913 	bl	80002cc <__adddf3>
 800c0a6:	460b      	mov	r3, r1
 800c0a8:	4979      	ldr	r1, [pc, #484]	; (800c290 <_strtod_l+0xbd0>)
 800c0aa:	4a7b      	ldr	r2, [pc, #492]	; (800c298 <_strtod_l+0xbd8>)
 800c0ac:	4019      	ands	r1, r3
 800c0ae:	4291      	cmp	r1, r2
 800c0b0:	4680      	mov	r8, r0
 800c0b2:	d944      	bls.n	800c13e <_strtod_l+0xa7e>
 800c0b4:	ee18 2a90 	vmov	r2, s17
 800c0b8:	4b78      	ldr	r3, [pc, #480]	; (800c29c <_strtod_l+0xbdc>)
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d104      	bne.n	800c0c8 <_strtod_l+0xa08>
 800c0be:	ee18 3a10 	vmov	r3, s16
 800c0c2:	3301      	adds	r3, #1
 800c0c4:	f43f ad40 	beq.w	800bb48 <_strtod_l+0x488>
 800c0c8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800c29c <_strtod_l+0xbdc>
 800c0cc:	f04f 38ff 	mov.w	r8, #4294967295
 800c0d0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	f7fe fe6a 	bl	800adac <_Bfree>
 800c0d8:	9905      	ldr	r1, [sp, #20]
 800c0da:	4620      	mov	r0, r4
 800c0dc:	f7fe fe66 	bl	800adac <_Bfree>
 800c0e0:	4659      	mov	r1, fp
 800c0e2:	4620      	mov	r0, r4
 800c0e4:	f7fe fe62 	bl	800adac <_Bfree>
 800c0e8:	4629      	mov	r1, r5
 800c0ea:	4620      	mov	r0, r4
 800c0ec:	f7fe fe5e 	bl	800adac <_Bfree>
 800c0f0:	e609      	b.n	800bd06 <_strtod_l+0x646>
 800c0f2:	f1b8 0f01 	cmp.w	r8, #1
 800c0f6:	d103      	bne.n	800c100 <_strtod_l+0xa40>
 800c0f8:	f1b9 0f00 	cmp.w	r9, #0
 800c0fc:	f43f ad95 	beq.w	800bc2a <_strtod_l+0x56a>
 800c100:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800c258 <_strtod_l+0xb98>
 800c104:	4f60      	ldr	r7, [pc, #384]	; (800c288 <_strtod_l+0xbc8>)
 800c106:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c10a:	2600      	movs	r6, #0
 800c10c:	e7ae      	b.n	800c06c <_strtod_l+0x9ac>
 800c10e:	4f5f      	ldr	r7, [pc, #380]	; (800c28c <_strtod_l+0xbcc>)
 800c110:	2600      	movs	r6, #0
 800c112:	e7a7      	b.n	800c064 <_strtod_l+0x9a4>
 800c114:	4b5d      	ldr	r3, [pc, #372]	; (800c28c <_strtod_l+0xbcc>)
 800c116:	4630      	mov	r0, r6
 800c118:	4639      	mov	r1, r7
 800c11a:	2200      	movs	r2, #0
 800c11c:	f7f4 fa8c 	bl	8000638 <__aeabi_dmul>
 800c120:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c122:	4606      	mov	r6, r0
 800c124:	460f      	mov	r7, r1
 800c126:	2b00      	cmp	r3, #0
 800c128:	d09c      	beq.n	800c064 <_strtod_l+0x9a4>
 800c12a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c12e:	e79d      	b.n	800c06c <_strtod_l+0x9ac>
 800c130:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800c260 <_strtod_l+0xba0>
 800c134:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c138:	ec57 6b17 	vmov	r6, r7, d7
 800c13c:	e796      	b.n	800c06c <_strtod_l+0x9ac>
 800c13e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c142:	9b04      	ldr	r3, [sp, #16]
 800c144:	46ca      	mov	sl, r9
 800c146:	2b00      	cmp	r3, #0
 800c148:	d1c2      	bne.n	800c0d0 <_strtod_l+0xa10>
 800c14a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c14e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c150:	0d1b      	lsrs	r3, r3, #20
 800c152:	051b      	lsls	r3, r3, #20
 800c154:	429a      	cmp	r2, r3
 800c156:	d1bb      	bne.n	800c0d0 <_strtod_l+0xa10>
 800c158:	4630      	mov	r0, r6
 800c15a:	4639      	mov	r1, r7
 800c15c:	f7f4 fe1c 	bl	8000d98 <__aeabi_d2lz>
 800c160:	f7f4 fa3c 	bl	80005dc <__aeabi_l2d>
 800c164:	4602      	mov	r2, r0
 800c166:	460b      	mov	r3, r1
 800c168:	4630      	mov	r0, r6
 800c16a:	4639      	mov	r1, r7
 800c16c:	f7f4 f8ac 	bl	80002c8 <__aeabi_dsub>
 800c170:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c172:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c176:	ea43 0308 	orr.w	r3, r3, r8
 800c17a:	4313      	orrs	r3, r2
 800c17c:	4606      	mov	r6, r0
 800c17e:	460f      	mov	r7, r1
 800c180:	d054      	beq.n	800c22c <_strtod_l+0xb6c>
 800c182:	a339      	add	r3, pc, #228	; (adr r3, 800c268 <_strtod_l+0xba8>)
 800c184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c188:	f7f4 fcc8 	bl	8000b1c <__aeabi_dcmplt>
 800c18c:	2800      	cmp	r0, #0
 800c18e:	f47f ace5 	bne.w	800bb5c <_strtod_l+0x49c>
 800c192:	a337      	add	r3, pc, #220	; (adr r3, 800c270 <_strtod_l+0xbb0>)
 800c194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c198:	4630      	mov	r0, r6
 800c19a:	4639      	mov	r1, r7
 800c19c:	f7f4 fcdc 	bl	8000b58 <__aeabi_dcmpgt>
 800c1a0:	2800      	cmp	r0, #0
 800c1a2:	d095      	beq.n	800c0d0 <_strtod_l+0xa10>
 800c1a4:	e4da      	b.n	800bb5c <_strtod_l+0x49c>
 800c1a6:	9b04      	ldr	r3, [sp, #16]
 800c1a8:	b333      	cbz	r3, 800c1f8 <_strtod_l+0xb38>
 800c1aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c1ac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c1b0:	d822      	bhi.n	800c1f8 <_strtod_l+0xb38>
 800c1b2:	a331      	add	r3, pc, #196	; (adr r3, 800c278 <_strtod_l+0xbb8>)
 800c1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1b8:	4630      	mov	r0, r6
 800c1ba:	4639      	mov	r1, r7
 800c1bc:	f7f4 fcb8 	bl	8000b30 <__aeabi_dcmple>
 800c1c0:	b1a0      	cbz	r0, 800c1ec <_strtod_l+0xb2c>
 800c1c2:	4639      	mov	r1, r7
 800c1c4:	4630      	mov	r0, r6
 800c1c6:	f7f4 fd0f 	bl	8000be8 <__aeabi_d2uiz>
 800c1ca:	2801      	cmp	r0, #1
 800c1cc:	bf38      	it	cc
 800c1ce:	2001      	movcc	r0, #1
 800c1d0:	f7f4 f9b8 	bl	8000544 <__aeabi_ui2d>
 800c1d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1d6:	4606      	mov	r6, r0
 800c1d8:	460f      	mov	r7, r1
 800c1da:	bb23      	cbnz	r3, 800c226 <_strtod_l+0xb66>
 800c1dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c1e0:	9010      	str	r0, [sp, #64]	; 0x40
 800c1e2:	9311      	str	r3, [sp, #68]	; 0x44
 800c1e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c1e8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c1ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c1ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c1f0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c1f4:	1a9b      	subs	r3, r3, r2
 800c1f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c1f8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c1fc:	eeb0 0a48 	vmov.f32	s0, s16
 800c200:	eef0 0a68 	vmov.f32	s1, s17
 800c204:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c208:	f7ff f8fc 	bl	800b404 <__ulp>
 800c20c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c210:	ec53 2b10 	vmov	r2, r3, d0
 800c214:	f7f4 fa10 	bl	8000638 <__aeabi_dmul>
 800c218:	ec53 2b18 	vmov	r2, r3, d8
 800c21c:	f7f4 f856 	bl	80002cc <__adddf3>
 800c220:	4680      	mov	r8, r0
 800c222:	4689      	mov	r9, r1
 800c224:	e78d      	b.n	800c142 <_strtod_l+0xa82>
 800c226:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c22a:	e7db      	b.n	800c1e4 <_strtod_l+0xb24>
 800c22c:	a314      	add	r3, pc, #80	; (adr r3, 800c280 <_strtod_l+0xbc0>)
 800c22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c232:	f7f4 fc73 	bl	8000b1c <__aeabi_dcmplt>
 800c236:	e7b3      	b.n	800c1a0 <_strtod_l+0xae0>
 800c238:	2300      	movs	r3, #0
 800c23a:	930a      	str	r3, [sp, #40]	; 0x28
 800c23c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c23e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c240:	6013      	str	r3, [r2, #0]
 800c242:	f7ff ba7c 	b.w	800b73e <_strtod_l+0x7e>
 800c246:	2a65      	cmp	r2, #101	; 0x65
 800c248:	f43f ab75 	beq.w	800b936 <_strtod_l+0x276>
 800c24c:	2a45      	cmp	r2, #69	; 0x45
 800c24e:	f43f ab72 	beq.w	800b936 <_strtod_l+0x276>
 800c252:	2301      	movs	r3, #1
 800c254:	f7ff bbaa 	b.w	800b9ac <_strtod_l+0x2ec>
 800c258:	00000000 	.word	0x00000000
 800c25c:	bff00000 	.word	0xbff00000
 800c260:	00000000 	.word	0x00000000
 800c264:	3ff00000 	.word	0x3ff00000
 800c268:	94a03595 	.word	0x94a03595
 800c26c:	3fdfffff 	.word	0x3fdfffff
 800c270:	35afe535 	.word	0x35afe535
 800c274:	3fe00000 	.word	0x3fe00000
 800c278:	ffc00000 	.word	0xffc00000
 800c27c:	41dfffff 	.word	0x41dfffff
 800c280:	94a03595 	.word	0x94a03595
 800c284:	3fcfffff 	.word	0x3fcfffff
 800c288:	3ff00000 	.word	0x3ff00000
 800c28c:	3fe00000 	.word	0x3fe00000
 800c290:	7ff00000 	.word	0x7ff00000
 800c294:	7fe00000 	.word	0x7fe00000
 800c298:	7c9fffff 	.word	0x7c9fffff
 800c29c:	7fefffff 	.word	0x7fefffff

0800c2a0 <_strtod_r>:
 800c2a0:	4b01      	ldr	r3, [pc, #4]	; (800c2a8 <_strtod_r+0x8>)
 800c2a2:	f7ff ba0d 	b.w	800b6c0 <_strtod_l>
 800c2a6:	bf00      	nop
 800c2a8:	20000070 	.word	0x20000070

0800c2ac <_strtol_l.constprop.0>:
 800c2ac:	2b01      	cmp	r3, #1
 800c2ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2b2:	d001      	beq.n	800c2b8 <_strtol_l.constprop.0+0xc>
 800c2b4:	2b24      	cmp	r3, #36	; 0x24
 800c2b6:	d906      	bls.n	800c2c6 <_strtol_l.constprop.0+0x1a>
 800c2b8:	f7fd fd8a 	bl	8009dd0 <__errno>
 800c2bc:	2316      	movs	r3, #22
 800c2be:	6003      	str	r3, [r0, #0]
 800c2c0:	2000      	movs	r0, #0
 800c2c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2c6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c3ac <_strtol_l.constprop.0+0x100>
 800c2ca:	460d      	mov	r5, r1
 800c2cc:	462e      	mov	r6, r5
 800c2ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c2d2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800c2d6:	f017 0708 	ands.w	r7, r7, #8
 800c2da:	d1f7      	bne.n	800c2cc <_strtol_l.constprop.0+0x20>
 800c2dc:	2c2d      	cmp	r4, #45	; 0x2d
 800c2de:	d132      	bne.n	800c346 <_strtol_l.constprop.0+0x9a>
 800c2e0:	782c      	ldrb	r4, [r5, #0]
 800c2e2:	2701      	movs	r7, #1
 800c2e4:	1cb5      	adds	r5, r6, #2
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d05b      	beq.n	800c3a2 <_strtol_l.constprop.0+0xf6>
 800c2ea:	2b10      	cmp	r3, #16
 800c2ec:	d109      	bne.n	800c302 <_strtol_l.constprop.0+0x56>
 800c2ee:	2c30      	cmp	r4, #48	; 0x30
 800c2f0:	d107      	bne.n	800c302 <_strtol_l.constprop.0+0x56>
 800c2f2:	782c      	ldrb	r4, [r5, #0]
 800c2f4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c2f8:	2c58      	cmp	r4, #88	; 0x58
 800c2fa:	d14d      	bne.n	800c398 <_strtol_l.constprop.0+0xec>
 800c2fc:	786c      	ldrb	r4, [r5, #1]
 800c2fe:	2310      	movs	r3, #16
 800c300:	3502      	adds	r5, #2
 800c302:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c306:	f108 38ff 	add.w	r8, r8, #4294967295
 800c30a:	f04f 0e00 	mov.w	lr, #0
 800c30e:	fbb8 f9f3 	udiv	r9, r8, r3
 800c312:	4676      	mov	r6, lr
 800c314:	fb03 8a19 	mls	sl, r3, r9, r8
 800c318:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c31c:	f1bc 0f09 	cmp.w	ip, #9
 800c320:	d816      	bhi.n	800c350 <_strtol_l.constprop.0+0xa4>
 800c322:	4664      	mov	r4, ip
 800c324:	42a3      	cmp	r3, r4
 800c326:	dd24      	ble.n	800c372 <_strtol_l.constprop.0+0xc6>
 800c328:	f1be 3fff 	cmp.w	lr, #4294967295
 800c32c:	d008      	beq.n	800c340 <_strtol_l.constprop.0+0x94>
 800c32e:	45b1      	cmp	r9, r6
 800c330:	d31c      	bcc.n	800c36c <_strtol_l.constprop.0+0xc0>
 800c332:	d101      	bne.n	800c338 <_strtol_l.constprop.0+0x8c>
 800c334:	45a2      	cmp	sl, r4
 800c336:	db19      	blt.n	800c36c <_strtol_l.constprop.0+0xc0>
 800c338:	fb06 4603 	mla	r6, r6, r3, r4
 800c33c:	f04f 0e01 	mov.w	lr, #1
 800c340:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c344:	e7e8      	b.n	800c318 <_strtol_l.constprop.0+0x6c>
 800c346:	2c2b      	cmp	r4, #43	; 0x2b
 800c348:	bf04      	itt	eq
 800c34a:	782c      	ldrbeq	r4, [r5, #0]
 800c34c:	1cb5      	addeq	r5, r6, #2
 800c34e:	e7ca      	b.n	800c2e6 <_strtol_l.constprop.0+0x3a>
 800c350:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c354:	f1bc 0f19 	cmp.w	ip, #25
 800c358:	d801      	bhi.n	800c35e <_strtol_l.constprop.0+0xb2>
 800c35a:	3c37      	subs	r4, #55	; 0x37
 800c35c:	e7e2      	b.n	800c324 <_strtol_l.constprop.0+0x78>
 800c35e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c362:	f1bc 0f19 	cmp.w	ip, #25
 800c366:	d804      	bhi.n	800c372 <_strtol_l.constprop.0+0xc6>
 800c368:	3c57      	subs	r4, #87	; 0x57
 800c36a:	e7db      	b.n	800c324 <_strtol_l.constprop.0+0x78>
 800c36c:	f04f 3eff 	mov.w	lr, #4294967295
 800c370:	e7e6      	b.n	800c340 <_strtol_l.constprop.0+0x94>
 800c372:	f1be 3fff 	cmp.w	lr, #4294967295
 800c376:	d105      	bne.n	800c384 <_strtol_l.constprop.0+0xd8>
 800c378:	2322      	movs	r3, #34	; 0x22
 800c37a:	6003      	str	r3, [r0, #0]
 800c37c:	4646      	mov	r6, r8
 800c37e:	b942      	cbnz	r2, 800c392 <_strtol_l.constprop.0+0xe6>
 800c380:	4630      	mov	r0, r6
 800c382:	e79e      	b.n	800c2c2 <_strtol_l.constprop.0+0x16>
 800c384:	b107      	cbz	r7, 800c388 <_strtol_l.constprop.0+0xdc>
 800c386:	4276      	negs	r6, r6
 800c388:	2a00      	cmp	r2, #0
 800c38a:	d0f9      	beq.n	800c380 <_strtol_l.constprop.0+0xd4>
 800c38c:	f1be 0f00 	cmp.w	lr, #0
 800c390:	d000      	beq.n	800c394 <_strtol_l.constprop.0+0xe8>
 800c392:	1e69      	subs	r1, r5, #1
 800c394:	6011      	str	r1, [r2, #0]
 800c396:	e7f3      	b.n	800c380 <_strtol_l.constprop.0+0xd4>
 800c398:	2430      	movs	r4, #48	; 0x30
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d1b1      	bne.n	800c302 <_strtol_l.constprop.0+0x56>
 800c39e:	2308      	movs	r3, #8
 800c3a0:	e7af      	b.n	800c302 <_strtol_l.constprop.0+0x56>
 800c3a2:	2c30      	cmp	r4, #48	; 0x30
 800c3a4:	d0a5      	beq.n	800c2f2 <_strtol_l.constprop.0+0x46>
 800c3a6:	230a      	movs	r3, #10
 800c3a8:	e7ab      	b.n	800c302 <_strtol_l.constprop.0+0x56>
 800c3aa:	bf00      	nop
 800c3ac:	0800e0b9 	.word	0x0800e0b9

0800c3b0 <_strtol_r>:
 800c3b0:	f7ff bf7c 	b.w	800c2ac <_strtol_l.constprop.0>

0800c3b4 <__ssputs_r>:
 800c3b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3b8:	688e      	ldr	r6, [r1, #8]
 800c3ba:	461f      	mov	r7, r3
 800c3bc:	42be      	cmp	r6, r7
 800c3be:	680b      	ldr	r3, [r1, #0]
 800c3c0:	4682      	mov	sl, r0
 800c3c2:	460c      	mov	r4, r1
 800c3c4:	4690      	mov	r8, r2
 800c3c6:	d82c      	bhi.n	800c422 <__ssputs_r+0x6e>
 800c3c8:	898a      	ldrh	r2, [r1, #12]
 800c3ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c3ce:	d026      	beq.n	800c41e <__ssputs_r+0x6a>
 800c3d0:	6965      	ldr	r5, [r4, #20]
 800c3d2:	6909      	ldr	r1, [r1, #16]
 800c3d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c3d8:	eba3 0901 	sub.w	r9, r3, r1
 800c3dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c3e0:	1c7b      	adds	r3, r7, #1
 800c3e2:	444b      	add	r3, r9
 800c3e4:	106d      	asrs	r5, r5, #1
 800c3e6:	429d      	cmp	r5, r3
 800c3e8:	bf38      	it	cc
 800c3ea:	461d      	movcc	r5, r3
 800c3ec:	0553      	lsls	r3, r2, #21
 800c3ee:	d527      	bpl.n	800c440 <__ssputs_r+0x8c>
 800c3f0:	4629      	mov	r1, r5
 800c3f2:	f7fe fc0f 	bl	800ac14 <_malloc_r>
 800c3f6:	4606      	mov	r6, r0
 800c3f8:	b360      	cbz	r0, 800c454 <__ssputs_r+0xa0>
 800c3fa:	6921      	ldr	r1, [r4, #16]
 800c3fc:	464a      	mov	r2, r9
 800c3fe:	f000 fdaf 	bl	800cf60 <memcpy>
 800c402:	89a3      	ldrh	r3, [r4, #12]
 800c404:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c40c:	81a3      	strh	r3, [r4, #12]
 800c40e:	6126      	str	r6, [r4, #16]
 800c410:	6165      	str	r5, [r4, #20]
 800c412:	444e      	add	r6, r9
 800c414:	eba5 0509 	sub.w	r5, r5, r9
 800c418:	6026      	str	r6, [r4, #0]
 800c41a:	60a5      	str	r5, [r4, #8]
 800c41c:	463e      	mov	r6, r7
 800c41e:	42be      	cmp	r6, r7
 800c420:	d900      	bls.n	800c424 <__ssputs_r+0x70>
 800c422:	463e      	mov	r6, r7
 800c424:	6820      	ldr	r0, [r4, #0]
 800c426:	4632      	mov	r2, r6
 800c428:	4641      	mov	r1, r8
 800c42a:	f000 fd5c 	bl	800cee6 <memmove>
 800c42e:	68a3      	ldr	r3, [r4, #8]
 800c430:	1b9b      	subs	r3, r3, r6
 800c432:	60a3      	str	r3, [r4, #8]
 800c434:	6823      	ldr	r3, [r4, #0]
 800c436:	4433      	add	r3, r6
 800c438:	6023      	str	r3, [r4, #0]
 800c43a:	2000      	movs	r0, #0
 800c43c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c440:	462a      	mov	r2, r5
 800c442:	f001 f942 	bl	800d6ca <_realloc_r>
 800c446:	4606      	mov	r6, r0
 800c448:	2800      	cmp	r0, #0
 800c44a:	d1e0      	bne.n	800c40e <__ssputs_r+0x5a>
 800c44c:	6921      	ldr	r1, [r4, #16]
 800c44e:	4650      	mov	r0, sl
 800c450:	f7fe fb6c 	bl	800ab2c <_free_r>
 800c454:	230c      	movs	r3, #12
 800c456:	f8ca 3000 	str.w	r3, [sl]
 800c45a:	89a3      	ldrh	r3, [r4, #12]
 800c45c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c460:	81a3      	strh	r3, [r4, #12]
 800c462:	f04f 30ff 	mov.w	r0, #4294967295
 800c466:	e7e9      	b.n	800c43c <__ssputs_r+0x88>

0800c468 <_svfiprintf_r>:
 800c468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c46c:	4698      	mov	r8, r3
 800c46e:	898b      	ldrh	r3, [r1, #12]
 800c470:	061b      	lsls	r3, r3, #24
 800c472:	b09d      	sub	sp, #116	; 0x74
 800c474:	4607      	mov	r7, r0
 800c476:	460d      	mov	r5, r1
 800c478:	4614      	mov	r4, r2
 800c47a:	d50e      	bpl.n	800c49a <_svfiprintf_r+0x32>
 800c47c:	690b      	ldr	r3, [r1, #16]
 800c47e:	b963      	cbnz	r3, 800c49a <_svfiprintf_r+0x32>
 800c480:	2140      	movs	r1, #64	; 0x40
 800c482:	f7fe fbc7 	bl	800ac14 <_malloc_r>
 800c486:	6028      	str	r0, [r5, #0]
 800c488:	6128      	str	r0, [r5, #16]
 800c48a:	b920      	cbnz	r0, 800c496 <_svfiprintf_r+0x2e>
 800c48c:	230c      	movs	r3, #12
 800c48e:	603b      	str	r3, [r7, #0]
 800c490:	f04f 30ff 	mov.w	r0, #4294967295
 800c494:	e0d0      	b.n	800c638 <_svfiprintf_r+0x1d0>
 800c496:	2340      	movs	r3, #64	; 0x40
 800c498:	616b      	str	r3, [r5, #20]
 800c49a:	2300      	movs	r3, #0
 800c49c:	9309      	str	r3, [sp, #36]	; 0x24
 800c49e:	2320      	movs	r3, #32
 800c4a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c4a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4a8:	2330      	movs	r3, #48	; 0x30
 800c4aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c650 <_svfiprintf_r+0x1e8>
 800c4ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c4b2:	f04f 0901 	mov.w	r9, #1
 800c4b6:	4623      	mov	r3, r4
 800c4b8:	469a      	mov	sl, r3
 800c4ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4be:	b10a      	cbz	r2, 800c4c4 <_svfiprintf_r+0x5c>
 800c4c0:	2a25      	cmp	r2, #37	; 0x25
 800c4c2:	d1f9      	bne.n	800c4b8 <_svfiprintf_r+0x50>
 800c4c4:	ebba 0b04 	subs.w	fp, sl, r4
 800c4c8:	d00b      	beq.n	800c4e2 <_svfiprintf_r+0x7a>
 800c4ca:	465b      	mov	r3, fp
 800c4cc:	4622      	mov	r2, r4
 800c4ce:	4629      	mov	r1, r5
 800c4d0:	4638      	mov	r0, r7
 800c4d2:	f7ff ff6f 	bl	800c3b4 <__ssputs_r>
 800c4d6:	3001      	adds	r0, #1
 800c4d8:	f000 80a9 	beq.w	800c62e <_svfiprintf_r+0x1c6>
 800c4dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4de:	445a      	add	r2, fp
 800c4e0:	9209      	str	r2, [sp, #36]	; 0x24
 800c4e2:	f89a 3000 	ldrb.w	r3, [sl]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	f000 80a1 	beq.w	800c62e <_svfiprintf_r+0x1c6>
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	f04f 32ff 	mov.w	r2, #4294967295
 800c4f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4f6:	f10a 0a01 	add.w	sl, sl, #1
 800c4fa:	9304      	str	r3, [sp, #16]
 800c4fc:	9307      	str	r3, [sp, #28]
 800c4fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c502:	931a      	str	r3, [sp, #104]	; 0x68
 800c504:	4654      	mov	r4, sl
 800c506:	2205      	movs	r2, #5
 800c508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c50c:	4850      	ldr	r0, [pc, #320]	; (800c650 <_svfiprintf_r+0x1e8>)
 800c50e:	f7f3 fe7f 	bl	8000210 <memchr>
 800c512:	9a04      	ldr	r2, [sp, #16]
 800c514:	b9d8      	cbnz	r0, 800c54e <_svfiprintf_r+0xe6>
 800c516:	06d0      	lsls	r0, r2, #27
 800c518:	bf44      	itt	mi
 800c51a:	2320      	movmi	r3, #32
 800c51c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c520:	0711      	lsls	r1, r2, #28
 800c522:	bf44      	itt	mi
 800c524:	232b      	movmi	r3, #43	; 0x2b
 800c526:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c52a:	f89a 3000 	ldrb.w	r3, [sl]
 800c52e:	2b2a      	cmp	r3, #42	; 0x2a
 800c530:	d015      	beq.n	800c55e <_svfiprintf_r+0xf6>
 800c532:	9a07      	ldr	r2, [sp, #28]
 800c534:	4654      	mov	r4, sl
 800c536:	2000      	movs	r0, #0
 800c538:	f04f 0c0a 	mov.w	ip, #10
 800c53c:	4621      	mov	r1, r4
 800c53e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c542:	3b30      	subs	r3, #48	; 0x30
 800c544:	2b09      	cmp	r3, #9
 800c546:	d94d      	bls.n	800c5e4 <_svfiprintf_r+0x17c>
 800c548:	b1b0      	cbz	r0, 800c578 <_svfiprintf_r+0x110>
 800c54a:	9207      	str	r2, [sp, #28]
 800c54c:	e014      	b.n	800c578 <_svfiprintf_r+0x110>
 800c54e:	eba0 0308 	sub.w	r3, r0, r8
 800c552:	fa09 f303 	lsl.w	r3, r9, r3
 800c556:	4313      	orrs	r3, r2
 800c558:	9304      	str	r3, [sp, #16]
 800c55a:	46a2      	mov	sl, r4
 800c55c:	e7d2      	b.n	800c504 <_svfiprintf_r+0x9c>
 800c55e:	9b03      	ldr	r3, [sp, #12]
 800c560:	1d19      	adds	r1, r3, #4
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	9103      	str	r1, [sp, #12]
 800c566:	2b00      	cmp	r3, #0
 800c568:	bfbb      	ittet	lt
 800c56a:	425b      	neglt	r3, r3
 800c56c:	f042 0202 	orrlt.w	r2, r2, #2
 800c570:	9307      	strge	r3, [sp, #28]
 800c572:	9307      	strlt	r3, [sp, #28]
 800c574:	bfb8      	it	lt
 800c576:	9204      	strlt	r2, [sp, #16]
 800c578:	7823      	ldrb	r3, [r4, #0]
 800c57a:	2b2e      	cmp	r3, #46	; 0x2e
 800c57c:	d10c      	bne.n	800c598 <_svfiprintf_r+0x130>
 800c57e:	7863      	ldrb	r3, [r4, #1]
 800c580:	2b2a      	cmp	r3, #42	; 0x2a
 800c582:	d134      	bne.n	800c5ee <_svfiprintf_r+0x186>
 800c584:	9b03      	ldr	r3, [sp, #12]
 800c586:	1d1a      	adds	r2, r3, #4
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	9203      	str	r2, [sp, #12]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	bfb8      	it	lt
 800c590:	f04f 33ff 	movlt.w	r3, #4294967295
 800c594:	3402      	adds	r4, #2
 800c596:	9305      	str	r3, [sp, #20]
 800c598:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c660 <_svfiprintf_r+0x1f8>
 800c59c:	7821      	ldrb	r1, [r4, #0]
 800c59e:	2203      	movs	r2, #3
 800c5a0:	4650      	mov	r0, sl
 800c5a2:	f7f3 fe35 	bl	8000210 <memchr>
 800c5a6:	b138      	cbz	r0, 800c5b8 <_svfiprintf_r+0x150>
 800c5a8:	9b04      	ldr	r3, [sp, #16]
 800c5aa:	eba0 000a 	sub.w	r0, r0, sl
 800c5ae:	2240      	movs	r2, #64	; 0x40
 800c5b0:	4082      	lsls	r2, r0
 800c5b2:	4313      	orrs	r3, r2
 800c5b4:	3401      	adds	r4, #1
 800c5b6:	9304      	str	r3, [sp, #16]
 800c5b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5bc:	4825      	ldr	r0, [pc, #148]	; (800c654 <_svfiprintf_r+0x1ec>)
 800c5be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c5c2:	2206      	movs	r2, #6
 800c5c4:	f7f3 fe24 	bl	8000210 <memchr>
 800c5c8:	2800      	cmp	r0, #0
 800c5ca:	d038      	beq.n	800c63e <_svfiprintf_r+0x1d6>
 800c5cc:	4b22      	ldr	r3, [pc, #136]	; (800c658 <_svfiprintf_r+0x1f0>)
 800c5ce:	bb1b      	cbnz	r3, 800c618 <_svfiprintf_r+0x1b0>
 800c5d0:	9b03      	ldr	r3, [sp, #12]
 800c5d2:	3307      	adds	r3, #7
 800c5d4:	f023 0307 	bic.w	r3, r3, #7
 800c5d8:	3308      	adds	r3, #8
 800c5da:	9303      	str	r3, [sp, #12]
 800c5dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5de:	4433      	add	r3, r6
 800c5e0:	9309      	str	r3, [sp, #36]	; 0x24
 800c5e2:	e768      	b.n	800c4b6 <_svfiprintf_r+0x4e>
 800c5e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5e8:	460c      	mov	r4, r1
 800c5ea:	2001      	movs	r0, #1
 800c5ec:	e7a6      	b.n	800c53c <_svfiprintf_r+0xd4>
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	3401      	adds	r4, #1
 800c5f2:	9305      	str	r3, [sp, #20]
 800c5f4:	4619      	mov	r1, r3
 800c5f6:	f04f 0c0a 	mov.w	ip, #10
 800c5fa:	4620      	mov	r0, r4
 800c5fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c600:	3a30      	subs	r2, #48	; 0x30
 800c602:	2a09      	cmp	r2, #9
 800c604:	d903      	bls.n	800c60e <_svfiprintf_r+0x1a6>
 800c606:	2b00      	cmp	r3, #0
 800c608:	d0c6      	beq.n	800c598 <_svfiprintf_r+0x130>
 800c60a:	9105      	str	r1, [sp, #20]
 800c60c:	e7c4      	b.n	800c598 <_svfiprintf_r+0x130>
 800c60e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c612:	4604      	mov	r4, r0
 800c614:	2301      	movs	r3, #1
 800c616:	e7f0      	b.n	800c5fa <_svfiprintf_r+0x192>
 800c618:	ab03      	add	r3, sp, #12
 800c61a:	9300      	str	r3, [sp, #0]
 800c61c:	462a      	mov	r2, r5
 800c61e:	4b0f      	ldr	r3, [pc, #60]	; (800c65c <_svfiprintf_r+0x1f4>)
 800c620:	a904      	add	r1, sp, #16
 800c622:	4638      	mov	r0, r7
 800c624:	f7fc fc58 	bl	8008ed8 <_printf_float>
 800c628:	1c42      	adds	r2, r0, #1
 800c62a:	4606      	mov	r6, r0
 800c62c:	d1d6      	bne.n	800c5dc <_svfiprintf_r+0x174>
 800c62e:	89ab      	ldrh	r3, [r5, #12]
 800c630:	065b      	lsls	r3, r3, #25
 800c632:	f53f af2d 	bmi.w	800c490 <_svfiprintf_r+0x28>
 800c636:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c638:	b01d      	add	sp, #116	; 0x74
 800c63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c63e:	ab03      	add	r3, sp, #12
 800c640:	9300      	str	r3, [sp, #0]
 800c642:	462a      	mov	r2, r5
 800c644:	4b05      	ldr	r3, [pc, #20]	; (800c65c <_svfiprintf_r+0x1f4>)
 800c646:	a904      	add	r1, sp, #16
 800c648:	4638      	mov	r0, r7
 800c64a:	f7fc fee9 	bl	8009420 <_printf_i>
 800c64e:	e7eb      	b.n	800c628 <_svfiprintf_r+0x1c0>
 800c650:	0800e1b9 	.word	0x0800e1b9
 800c654:	0800e1c3 	.word	0x0800e1c3
 800c658:	08008ed9 	.word	0x08008ed9
 800c65c:	0800c3b5 	.word	0x0800c3b5
 800c660:	0800e1bf 	.word	0x0800e1bf

0800c664 <_sungetc_r>:
 800c664:	b538      	push	{r3, r4, r5, lr}
 800c666:	1c4b      	adds	r3, r1, #1
 800c668:	4614      	mov	r4, r2
 800c66a:	d103      	bne.n	800c674 <_sungetc_r+0x10>
 800c66c:	f04f 35ff 	mov.w	r5, #4294967295
 800c670:	4628      	mov	r0, r5
 800c672:	bd38      	pop	{r3, r4, r5, pc}
 800c674:	8993      	ldrh	r3, [r2, #12]
 800c676:	f023 0320 	bic.w	r3, r3, #32
 800c67a:	8193      	strh	r3, [r2, #12]
 800c67c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c67e:	6852      	ldr	r2, [r2, #4]
 800c680:	b2cd      	uxtb	r5, r1
 800c682:	b18b      	cbz	r3, 800c6a8 <_sungetc_r+0x44>
 800c684:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c686:	4293      	cmp	r3, r2
 800c688:	dd08      	ble.n	800c69c <_sungetc_r+0x38>
 800c68a:	6823      	ldr	r3, [r4, #0]
 800c68c:	1e5a      	subs	r2, r3, #1
 800c68e:	6022      	str	r2, [r4, #0]
 800c690:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c694:	6863      	ldr	r3, [r4, #4]
 800c696:	3301      	adds	r3, #1
 800c698:	6063      	str	r3, [r4, #4]
 800c69a:	e7e9      	b.n	800c670 <_sungetc_r+0xc>
 800c69c:	4621      	mov	r1, r4
 800c69e:	f000 fbe8 	bl	800ce72 <__submore>
 800c6a2:	2800      	cmp	r0, #0
 800c6a4:	d0f1      	beq.n	800c68a <_sungetc_r+0x26>
 800c6a6:	e7e1      	b.n	800c66c <_sungetc_r+0x8>
 800c6a8:	6921      	ldr	r1, [r4, #16]
 800c6aa:	6823      	ldr	r3, [r4, #0]
 800c6ac:	b151      	cbz	r1, 800c6c4 <_sungetc_r+0x60>
 800c6ae:	4299      	cmp	r1, r3
 800c6b0:	d208      	bcs.n	800c6c4 <_sungetc_r+0x60>
 800c6b2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c6b6:	42a9      	cmp	r1, r5
 800c6b8:	d104      	bne.n	800c6c4 <_sungetc_r+0x60>
 800c6ba:	3b01      	subs	r3, #1
 800c6bc:	3201      	adds	r2, #1
 800c6be:	6023      	str	r3, [r4, #0]
 800c6c0:	6062      	str	r2, [r4, #4]
 800c6c2:	e7d5      	b.n	800c670 <_sungetc_r+0xc>
 800c6c4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c6c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c6cc:	6363      	str	r3, [r4, #52]	; 0x34
 800c6ce:	2303      	movs	r3, #3
 800c6d0:	63a3      	str	r3, [r4, #56]	; 0x38
 800c6d2:	4623      	mov	r3, r4
 800c6d4:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c6d8:	6023      	str	r3, [r4, #0]
 800c6da:	2301      	movs	r3, #1
 800c6dc:	e7dc      	b.n	800c698 <_sungetc_r+0x34>

0800c6de <__ssrefill_r>:
 800c6de:	b510      	push	{r4, lr}
 800c6e0:	460c      	mov	r4, r1
 800c6e2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c6e4:	b169      	cbz	r1, 800c702 <__ssrefill_r+0x24>
 800c6e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c6ea:	4299      	cmp	r1, r3
 800c6ec:	d001      	beq.n	800c6f2 <__ssrefill_r+0x14>
 800c6ee:	f7fe fa1d 	bl	800ab2c <_free_r>
 800c6f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c6f4:	6063      	str	r3, [r4, #4]
 800c6f6:	2000      	movs	r0, #0
 800c6f8:	6360      	str	r0, [r4, #52]	; 0x34
 800c6fa:	b113      	cbz	r3, 800c702 <__ssrefill_r+0x24>
 800c6fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c6fe:	6023      	str	r3, [r4, #0]
 800c700:	bd10      	pop	{r4, pc}
 800c702:	6923      	ldr	r3, [r4, #16]
 800c704:	6023      	str	r3, [r4, #0]
 800c706:	2300      	movs	r3, #0
 800c708:	6063      	str	r3, [r4, #4]
 800c70a:	89a3      	ldrh	r3, [r4, #12]
 800c70c:	f043 0320 	orr.w	r3, r3, #32
 800c710:	81a3      	strh	r3, [r4, #12]
 800c712:	f04f 30ff 	mov.w	r0, #4294967295
 800c716:	e7f3      	b.n	800c700 <__ssrefill_r+0x22>

0800c718 <__ssvfiscanf_r>:
 800c718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c71c:	460c      	mov	r4, r1
 800c71e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c722:	2100      	movs	r1, #0
 800c724:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c728:	49a6      	ldr	r1, [pc, #664]	; (800c9c4 <__ssvfiscanf_r+0x2ac>)
 800c72a:	91a0      	str	r1, [sp, #640]	; 0x280
 800c72c:	f10d 0804 	add.w	r8, sp, #4
 800c730:	49a5      	ldr	r1, [pc, #660]	; (800c9c8 <__ssvfiscanf_r+0x2b0>)
 800c732:	4fa6      	ldr	r7, [pc, #664]	; (800c9cc <__ssvfiscanf_r+0x2b4>)
 800c734:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c9d0 <__ssvfiscanf_r+0x2b8>
 800c738:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c73c:	4606      	mov	r6, r0
 800c73e:	91a1      	str	r1, [sp, #644]	; 0x284
 800c740:	9300      	str	r3, [sp, #0]
 800c742:	7813      	ldrb	r3, [r2, #0]
 800c744:	2b00      	cmp	r3, #0
 800c746:	f000 815a 	beq.w	800c9fe <__ssvfiscanf_r+0x2e6>
 800c74a:	5cf9      	ldrb	r1, [r7, r3]
 800c74c:	f011 0108 	ands.w	r1, r1, #8
 800c750:	f102 0501 	add.w	r5, r2, #1
 800c754:	d019      	beq.n	800c78a <__ssvfiscanf_r+0x72>
 800c756:	6863      	ldr	r3, [r4, #4]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	dd0f      	ble.n	800c77c <__ssvfiscanf_r+0x64>
 800c75c:	6823      	ldr	r3, [r4, #0]
 800c75e:	781a      	ldrb	r2, [r3, #0]
 800c760:	5cba      	ldrb	r2, [r7, r2]
 800c762:	0712      	lsls	r2, r2, #28
 800c764:	d401      	bmi.n	800c76a <__ssvfiscanf_r+0x52>
 800c766:	462a      	mov	r2, r5
 800c768:	e7eb      	b.n	800c742 <__ssvfiscanf_r+0x2a>
 800c76a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c76c:	3201      	adds	r2, #1
 800c76e:	9245      	str	r2, [sp, #276]	; 0x114
 800c770:	6862      	ldr	r2, [r4, #4]
 800c772:	3301      	adds	r3, #1
 800c774:	3a01      	subs	r2, #1
 800c776:	6062      	str	r2, [r4, #4]
 800c778:	6023      	str	r3, [r4, #0]
 800c77a:	e7ec      	b.n	800c756 <__ssvfiscanf_r+0x3e>
 800c77c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c77e:	4621      	mov	r1, r4
 800c780:	4630      	mov	r0, r6
 800c782:	4798      	blx	r3
 800c784:	2800      	cmp	r0, #0
 800c786:	d0e9      	beq.n	800c75c <__ssvfiscanf_r+0x44>
 800c788:	e7ed      	b.n	800c766 <__ssvfiscanf_r+0x4e>
 800c78a:	2b25      	cmp	r3, #37	; 0x25
 800c78c:	d012      	beq.n	800c7b4 <__ssvfiscanf_r+0x9c>
 800c78e:	469a      	mov	sl, r3
 800c790:	6863      	ldr	r3, [r4, #4]
 800c792:	2b00      	cmp	r3, #0
 800c794:	f340 8091 	ble.w	800c8ba <__ssvfiscanf_r+0x1a2>
 800c798:	6822      	ldr	r2, [r4, #0]
 800c79a:	7813      	ldrb	r3, [r2, #0]
 800c79c:	4553      	cmp	r3, sl
 800c79e:	f040 812e 	bne.w	800c9fe <__ssvfiscanf_r+0x2e6>
 800c7a2:	6863      	ldr	r3, [r4, #4]
 800c7a4:	3b01      	subs	r3, #1
 800c7a6:	6063      	str	r3, [r4, #4]
 800c7a8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c7aa:	3201      	adds	r2, #1
 800c7ac:	3301      	adds	r3, #1
 800c7ae:	6022      	str	r2, [r4, #0]
 800c7b0:	9345      	str	r3, [sp, #276]	; 0x114
 800c7b2:	e7d8      	b.n	800c766 <__ssvfiscanf_r+0x4e>
 800c7b4:	9141      	str	r1, [sp, #260]	; 0x104
 800c7b6:	9143      	str	r1, [sp, #268]	; 0x10c
 800c7b8:	7853      	ldrb	r3, [r2, #1]
 800c7ba:	2b2a      	cmp	r3, #42	; 0x2a
 800c7bc:	bf02      	ittt	eq
 800c7be:	2310      	moveq	r3, #16
 800c7c0:	1c95      	addeq	r5, r2, #2
 800c7c2:	9341      	streq	r3, [sp, #260]	; 0x104
 800c7c4:	220a      	movs	r2, #10
 800c7c6:	46aa      	mov	sl, r5
 800c7c8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c7cc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c7d0:	2b09      	cmp	r3, #9
 800c7d2:	d91c      	bls.n	800c80e <__ssvfiscanf_r+0xf6>
 800c7d4:	487e      	ldr	r0, [pc, #504]	; (800c9d0 <__ssvfiscanf_r+0x2b8>)
 800c7d6:	2203      	movs	r2, #3
 800c7d8:	f7f3 fd1a 	bl	8000210 <memchr>
 800c7dc:	b138      	cbz	r0, 800c7ee <__ssvfiscanf_r+0xd6>
 800c7de:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c7e0:	eba0 0009 	sub.w	r0, r0, r9
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	4083      	lsls	r3, r0
 800c7e8:	4313      	orrs	r3, r2
 800c7ea:	9341      	str	r3, [sp, #260]	; 0x104
 800c7ec:	4655      	mov	r5, sl
 800c7ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c7f2:	2b78      	cmp	r3, #120	; 0x78
 800c7f4:	d806      	bhi.n	800c804 <__ssvfiscanf_r+0xec>
 800c7f6:	2b57      	cmp	r3, #87	; 0x57
 800c7f8:	d810      	bhi.n	800c81c <__ssvfiscanf_r+0x104>
 800c7fa:	2b25      	cmp	r3, #37	; 0x25
 800c7fc:	d0c7      	beq.n	800c78e <__ssvfiscanf_r+0x76>
 800c7fe:	d857      	bhi.n	800c8b0 <__ssvfiscanf_r+0x198>
 800c800:	2b00      	cmp	r3, #0
 800c802:	d065      	beq.n	800c8d0 <__ssvfiscanf_r+0x1b8>
 800c804:	2303      	movs	r3, #3
 800c806:	9347      	str	r3, [sp, #284]	; 0x11c
 800c808:	230a      	movs	r3, #10
 800c80a:	9342      	str	r3, [sp, #264]	; 0x108
 800c80c:	e076      	b.n	800c8fc <__ssvfiscanf_r+0x1e4>
 800c80e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c810:	fb02 1103 	mla	r1, r2, r3, r1
 800c814:	3930      	subs	r1, #48	; 0x30
 800c816:	9143      	str	r1, [sp, #268]	; 0x10c
 800c818:	4655      	mov	r5, sl
 800c81a:	e7d4      	b.n	800c7c6 <__ssvfiscanf_r+0xae>
 800c81c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c820:	2a20      	cmp	r2, #32
 800c822:	d8ef      	bhi.n	800c804 <__ssvfiscanf_r+0xec>
 800c824:	a101      	add	r1, pc, #4	; (adr r1, 800c82c <__ssvfiscanf_r+0x114>)
 800c826:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c82a:	bf00      	nop
 800c82c:	0800c8df 	.word	0x0800c8df
 800c830:	0800c805 	.word	0x0800c805
 800c834:	0800c805 	.word	0x0800c805
 800c838:	0800c93d 	.word	0x0800c93d
 800c83c:	0800c805 	.word	0x0800c805
 800c840:	0800c805 	.word	0x0800c805
 800c844:	0800c805 	.word	0x0800c805
 800c848:	0800c805 	.word	0x0800c805
 800c84c:	0800c805 	.word	0x0800c805
 800c850:	0800c805 	.word	0x0800c805
 800c854:	0800c805 	.word	0x0800c805
 800c858:	0800c953 	.word	0x0800c953
 800c85c:	0800c939 	.word	0x0800c939
 800c860:	0800c8b7 	.word	0x0800c8b7
 800c864:	0800c8b7 	.word	0x0800c8b7
 800c868:	0800c8b7 	.word	0x0800c8b7
 800c86c:	0800c805 	.word	0x0800c805
 800c870:	0800c8f5 	.word	0x0800c8f5
 800c874:	0800c805 	.word	0x0800c805
 800c878:	0800c805 	.word	0x0800c805
 800c87c:	0800c805 	.word	0x0800c805
 800c880:	0800c805 	.word	0x0800c805
 800c884:	0800c963 	.word	0x0800c963
 800c888:	0800c931 	.word	0x0800c931
 800c88c:	0800c8d7 	.word	0x0800c8d7
 800c890:	0800c805 	.word	0x0800c805
 800c894:	0800c805 	.word	0x0800c805
 800c898:	0800c95f 	.word	0x0800c95f
 800c89c:	0800c805 	.word	0x0800c805
 800c8a0:	0800c939 	.word	0x0800c939
 800c8a4:	0800c805 	.word	0x0800c805
 800c8a8:	0800c805 	.word	0x0800c805
 800c8ac:	0800c8df 	.word	0x0800c8df
 800c8b0:	3b45      	subs	r3, #69	; 0x45
 800c8b2:	2b02      	cmp	r3, #2
 800c8b4:	d8a6      	bhi.n	800c804 <__ssvfiscanf_r+0xec>
 800c8b6:	2305      	movs	r3, #5
 800c8b8:	e01f      	b.n	800c8fa <__ssvfiscanf_r+0x1e2>
 800c8ba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c8bc:	4621      	mov	r1, r4
 800c8be:	4630      	mov	r0, r6
 800c8c0:	4798      	blx	r3
 800c8c2:	2800      	cmp	r0, #0
 800c8c4:	f43f af68 	beq.w	800c798 <__ssvfiscanf_r+0x80>
 800c8c8:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c8ca:	2800      	cmp	r0, #0
 800c8cc:	f040 808d 	bne.w	800c9ea <__ssvfiscanf_r+0x2d2>
 800c8d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c8d4:	e08f      	b.n	800c9f6 <__ssvfiscanf_r+0x2de>
 800c8d6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c8d8:	f042 0220 	orr.w	r2, r2, #32
 800c8dc:	9241      	str	r2, [sp, #260]	; 0x104
 800c8de:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c8e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c8e4:	9241      	str	r2, [sp, #260]	; 0x104
 800c8e6:	2210      	movs	r2, #16
 800c8e8:	2b6f      	cmp	r3, #111	; 0x6f
 800c8ea:	9242      	str	r2, [sp, #264]	; 0x108
 800c8ec:	bf34      	ite	cc
 800c8ee:	2303      	movcc	r3, #3
 800c8f0:	2304      	movcs	r3, #4
 800c8f2:	e002      	b.n	800c8fa <__ssvfiscanf_r+0x1e2>
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	9342      	str	r3, [sp, #264]	; 0x108
 800c8f8:	2303      	movs	r3, #3
 800c8fa:	9347      	str	r3, [sp, #284]	; 0x11c
 800c8fc:	6863      	ldr	r3, [r4, #4]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	dd3d      	ble.n	800c97e <__ssvfiscanf_r+0x266>
 800c902:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c904:	0659      	lsls	r1, r3, #25
 800c906:	d404      	bmi.n	800c912 <__ssvfiscanf_r+0x1fa>
 800c908:	6823      	ldr	r3, [r4, #0]
 800c90a:	781a      	ldrb	r2, [r3, #0]
 800c90c:	5cba      	ldrb	r2, [r7, r2]
 800c90e:	0712      	lsls	r2, r2, #28
 800c910:	d43c      	bmi.n	800c98c <__ssvfiscanf_r+0x274>
 800c912:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c914:	2b02      	cmp	r3, #2
 800c916:	dc4b      	bgt.n	800c9b0 <__ssvfiscanf_r+0x298>
 800c918:	466b      	mov	r3, sp
 800c91a:	4622      	mov	r2, r4
 800c91c:	a941      	add	r1, sp, #260	; 0x104
 800c91e:	4630      	mov	r0, r6
 800c920:	f000 f872 	bl	800ca08 <_scanf_chars>
 800c924:	2801      	cmp	r0, #1
 800c926:	d06a      	beq.n	800c9fe <__ssvfiscanf_r+0x2e6>
 800c928:	2802      	cmp	r0, #2
 800c92a:	f47f af1c 	bne.w	800c766 <__ssvfiscanf_r+0x4e>
 800c92e:	e7cb      	b.n	800c8c8 <__ssvfiscanf_r+0x1b0>
 800c930:	2308      	movs	r3, #8
 800c932:	9342      	str	r3, [sp, #264]	; 0x108
 800c934:	2304      	movs	r3, #4
 800c936:	e7e0      	b.n	800c8fa <__ssvfiscanf_r+0x1e2>
 800c938:	220a      	movs	r2, #10
 800c93a:	e7d5      	b.n	800c8e8 <__ssvfiscanf_r+0x1d0>
 800c93c:	4629      	mov	r1, r5
 800c93e:	4640      	mov	r0, r8
 800c940:	f000 fa5e 	bl	800ce00 <__sccl>
 800c944:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c94a:	9341      	str	r3, [sp, #260]	; 0x104
 800c94c:	4605      	mov	r5, r0
 800c94e:	2301      	movs	r3, #1
 800c950:	e7d3      	b.n	800c8fa <__ssvfiscanf_r+0x1e2>
 800c952:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c958:	9341      	str	r3, [sp, #260]	; 0x104
 800c95a:	2300      	movs	r3, #0
 800c95c:	e7cd      	b.n	800c8fa <__ssvfiscanf_r+0x1e2>
 800c95e:	2302      	movs	r3, #2
 800c960:	e7cb      	b.n	800c8fa <__ssvfiscanf_r+0x1e2>
 800c962:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c964:	06c3      	lsls	r3, r0, #27
 800c966:	f53f aefe 	bmi.w	800c766 <__ssvfiscanf_r+0x4e>
 800c96a:	9b00      	ldr	r3, [sp, #0]
 800c96c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c96e:	1d19      	adds	r1, r3, #4
 800c970:	9100      	str	r1, [sp, #0]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	07c0      	lsls	r0, r0, #31
 800c976:	bf4c      	ite	mi
 800c978:	801a      	strhmi	r2, [r3, #0]
 800c97a:	601a      	strpl	r2, [r3, #0]
 800c97c:	e6f3      	b.n	800c766 <__ssvfiscanf_r+0x4e>
 800c97e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c980:	4621      	mov	r1, r4
 800c982:	4630      	mov	r0, r6
 800c984:	4798      	blx	r3
 800c986:	2800      	cmp	r0, #0
 800c988:	d0bb      	beq.n	800c902 <__ssvfiscanf_r+0x1ea>
 800c98a:	e79d      	b.n	800c8c8 <__ssvfiscanf_r+0x1b0>
 800c98c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c98e:	3201      	adds	r2, #1
 800c990:	9245      	str	r2, [sp, #276]	; 0x114
 800c992:	6862      	ldr	r2, [r4, #4]
 800c994:	3a01      	subs	r2, #1
 800c996:	2a00      	cmp	r2, #0
 800c998:	6062      	str	r2, [r4, #4]
 800c99a:	dd02      	ble.n	800c9a2 <__ssvfiscanf_r+0x28a>
 800c99c:	3301      	adds	r3, #1
 800c99e:	6023      	str	r3, [r4, #0]
 800c9a0:	e7b2      	b.n	800c908 <__ssvfiscanf_r+0x1f0>
 800c9a2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c9a4:	4621      	mov	r1, r4
 800c9a6:	4630      	mov	r0, r6
 800c9a8:	4798      	blx	r3
 800c9aa:	2800      	cmp	r0, #0
 800c9ac:	d0ac      	beq.n	800c908 <__ssvfiscanf_r+0x1f0>
 800c9ae:	e78b      	b.n	800c8c8 <__ssvfiscanf_r+0x1b0>
 800c9b0:	2b04      	cmp	r3, #4
 800c9b2:	dc0f      	bgt.n	800c9d4 <__ssvfiscanf_r+0x2bc>
 800c9b4:	466b      	mov	r3, sp
 800c9b6:	4622      	mov	r2, r4
 800c9b8:	a941      	add	r1, sp, #260	; 0x104
 800c9ba:	4630      	mov	r0, r6
 800c9bc:	f000 f87e 	bl	800cabc <_scanf_i>
 800c9c0:	e7b0      	b.n	800c924 <__ssvfiscanf_r+0x20c>
 800c9c2:	bf00      	nop
 800c9c4:	0800c665 	.word	0x0800c665
 800c9c8:	0800c6df 	.word	0x0800c6df
 800c9cc:	0800e0b9 	.word	0x0800e0b9
 800c9d0:	0800e1bf 	.word	0x0800e1bf
 800c9d4:	4b0b      	ldr	r3, [pc, #44]	; (800ca04 <__ssvfiscanf_r+0x2ec>)
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	f43f aec5 	beq.w	800c766 <__ssvfiscanf_r+0x4e>
 800c9dc:	466b      	mov	r3, sp
 800c9de:	4622      	mov	r2, r4
 800c9e0:	a941      	add	r1, sp, #260	; 0x104
 800c9e2:	4630      	mov	r0, r6
 800c9e4:	f7fc fe3e 	bl	8009664 <_scanf_float>
 800c9e8:	e79c      	b.n	800c924 <__ssvfiscanf_r+0x20c>
 800c9ea:	89a3      	ldrh	r3, [r4, #12]
 800c9ec:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c9f0:	bf18      	it	ne
 800c9f2:	f04f 30ff 	movne.w	r0, #4294967295
 800c9f6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c9fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9fe:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ca00:	e7f9      	b.n	800c9f6 <__ssvfiscanf_r+0x2de>
 800ca02:	bf00      	nop
 800ca04:	08009665 	.word	0x08009665

0800ca08 <_scanf_chars>:
 800ca08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca0c:	4615      	mov	r5, r2
 800ca0e:	688a      	ldr	r2, [r1, #8]
 800ca10:	4680      	mov	r8, r0
 800ca12:	460c      	mov	r4, r1
 800ca14:	b932      	cbnz	r2, 800ca24 <_scanf_chars+0x1c>
 800ca16:	698a      	ldr	r2, [r1, #24]
 800ca18:	2a00      	cmp	r2, #0
 800ca1a:	bf0c      	ite	eq
 800ca1c:	2201      	moveq	r2, #1
 800ca1e:	f04f 32ff 	movne.w	r2, #4294967295
 800ca22:	608a      	str	r2, [r1, #8]
 800ca24:	6822      	ldr	r2, [r4, #0]
 800ca26:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800cab8 <_scanf_chars+0xb0>
 800ca2a:	06d1      	lsls	r1, r2, #27
 800ca2c:	bf5f      	itttt	pl
 800ca2e:	681a      	ldrpl	r2, [r3, #0]
 800ca30:	1d11      	addpl	r1, r2, #4
 800ca32:	6019      	strpl	r1, [r3, #0]
 800ca34:	6816      	ldrpl	r6, [r2, #0]
 800ca36:	2700      	movs	r7, #0
 800ca38:	69a0      	ldr	r0, [r4, #24]
 800ca3a:	b188      	cbz	r0, 800ca60 <_scanf_chars+0x58>
 800ca3c:	2801      	cmp	r0, #1
 800ca3e:	d107      	bne.n	800ca50 <_scanf_chars+0x48>
 800ca40:	682a      	ldr	r2, [r5, #0]
 800ca42:	7811      	ldrb	r1, [r2, #0]
 800ca44:	6962      	ldr	r2, [r4, #20]
 800ca46:	5c52      	ldrb	r2, [r2, r1]
 800ca48:	b952      	cbnz	r2, 800ca60 <_scanf_chars+0x58>
 800ca4a:	2f00      	cmp	r7, #0
 800ca4c:	d031      	beq.n	800cab2 <_scanf_chars+0xaa>
 800ca4e:	e022      	b.n	800ca96 <_scanf_chars+0x8e>
 800ca50:	2802      	cmp	r0, #2
 800ca52:	d120      	bne.n	800ca96 <_scanf_chars+0x8e>
 800ca54:	682b      	ldr	r3, [r5, #0]
 800ca56:	781b      	ldrb	r3, [r3, #0]
 800ca58:	f819 3003 	ldrb.w	r3, [r9, r3]
 800ca5c:	071b      	lsls	r3, r3, #28
 800ca5e:	d41a      	bmi.n	800ca96 <_scanf_chars+0x8e>
 800ca60:	6823      	ldr	r3, [r4, #0]
 800ca62:	06da      	lsls	r2, r3, #27
 800ca64:	bf5e      	ittt	pl
 800ca66:	682b      	ldrpl	r3, [r5, #0]
 800ca68:	781b      	ldrbpl	r3, [r3, #0]
 800ca6a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800ca6e:	682a      	ldr	r2, [r5, #0]
 800ca70:	686b      	ldr	r3, [r5, #4]
 800ca72:	3201      	adds	r2, #1
 800ca74:	602a      	str	r2, [r5, #0]
 800ca76:	68a2      	ldr	r2, [r4, #8]
 800ca78:	3b01      	subs	r3, #1
 800ca7a:	3a01      	subs	r2, #1
 800ca7c:	606b      	str	r3, [r5, #4]
 800ca7e:	3701      	adds	r7, #1
 800ca80:	60a2      	str	r2, [r4, #8]
 800ca82:	b142      	cbz	r2, 800ca96 <_scanf_chars+0x8e>
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	dcd7      	bgt.n	800ca38 <_scanf_chars+0x30>
 800ca88:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ca8c:	4629      	mov	r1, r5
 800ca8e:	4640      	mov	r0, r8
 800ca90:	4798      	blx	r3
 800ca92:	2800      	cmp	r0, #0
 800ca94:	d0d0      	beq.n	800ca38 <_scanf_chars+0x30>
 800ca96:	6823      	ldr	r3, [r4, #0]
 800ca98:	f013 0310 	ands.w	r3, r3, #16
 800ca9c:	d105      	bne.n	800caaa <_scanf_chars+0xa2>
 800ca9e:	68e2      	ldr	r2, [r4, #12]
 800caa0:	3201      	adds	r2, #1
 800caa2:	60e2      	str	r2, [r4, #12]
 800caa4:	69a2      	ldr	r2, [r4, #24]
 800caa6:	b102      	cbz	r2, 800caaa <_scanf_chars+0xa2>
 800caa8:	7033      	strb	r3, [r6, #0]
 800caaa:	6923      	ldr	r3, [r4, #16]
 800caac:	443b      	add	r3, r7
 800caae:	6123      	str	r3, [r4, #16]
 800cab0:	2000      	movs	r0, #0
 800cab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cab6:	bf00      	nop
 800cab8:	0800e0b9 	.word	0x0800e0b9

0800cabc <_scanf_i>:
 800cabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cac0:	4698      	mov	r8, r3
 800cac2:	4b74      	ldr	r3, [pc, #464]	; (800cc94 <_scanf_i+0x1d8>)
 800cac4:	460c      	mov	r4, r1
 800cac6:	4682      	mov	sl, r0
 800cac8:	4616      	mov	r6, r2
 800caca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cace:	b087      	sub	sp, #28
 800cad0:	ab03      	add	r3, sp, #12
 800cad2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cad6:	4b70      	ldr	r3, [pc, #448]	; (800cc98 <_scanf_i+0x1dc>)
 800cad8:	69a1      	ldr	r1, [r4, #24]
 800cada:	4a70      	ldr	r2, [pc, #448]	; (800cc9c <_scanf_i+0x1e0>)
 800cadc:	2903      	cmp	r1, #3
 800cade:	bf18      	it	ne
 800cae0:	461a      	movne	r2, r3
 800cae2:	68a3      	ldr	r3, [r4, #8]
 800cae4:	9201      	str	r2, [sp, #4]
 800cae6:	1e5a      	subs	r2, r3, #1
 800cae8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800caec:	bf88      	it	hi
 800caee:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800caf2:	4627      	mov	r7, r4
 800caf4:	bf82      	ittt	hi
 800caf6:	eb03 0905 	addhi.w	r9, r3, r5
 800cafa:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cafe:	60a3      	strhi	r3, [r4, #8]
 800cb00:	f857 3b1c 	ldr.w	r3, [r7], #28
 800cb04:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800cb08:	bf98      	it	ls
 800cb0a:	f04f 0900 	movls.w	r9, #0
 800cb0e:	6023      	str	r3, [r4, #0]
 800cb10:	463d      	mov	r5, r7
 800cb12:	f04f 0b00 	mov.w	fp, #0
 800cb16:	6831      	ldr	r1, [r6, #0]
 800cb18:	ab03      	add	r3, sp, #12
 800cb1a:	7809      	ldrb	r1, [r1, #0]
 800cb1c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800cb20:	2202      	movs	r2, #2
 800cb22:	f7f3 fb75 	bl	8000210 <memchr>
 800cb26:	b328      	cbz	r0, 800cb74 <_scanf_i+0xb8>
 800cb28:	f1bb 0f01 	cmp.w	fp, #1
 800cb2c:	d159      	bne.n	800cbe2 <_scanf_i+0x126>
 800cb2e:	6862      	ldr	r2, [r4, #4]
 800cb30:	b92a      	cbnz	r2, 800cb3e <_scanf_i+0x82>
 800cb32:	6822      	ldr	r2, [r4, #0]
 800cb34:	2308      	movs	r3, #8
 800cb36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cb3a:	6063      	str	r3, [r4, #4]
 800cb3c:	6022      	str	r2, [r4, #0]
 800cb3e:	6822      	ldr	r2, [r4, #0]
 800cb40:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800cb44:	6022      	str	r2, [r4, #0]
 800cb46:	68a2      	ldr	r2, [r4, #8]
 800cb48:	1e51      	subs	r1, r2, #1
 800cb4a:	60a1      	str	r1, [r4, #8]
 800cb4c:	b192      	cbz	r2, 800cb74 <_scanf_i+0xb8>
 800cb4e:	6832      	ldr	r2, [r6, #0]
 800cb50:	1c51      	adds	r1, r2, #1
 800cb52:	6031      	str	r1, [r6, #0]
 800cb54:	7812      	ldrb	r2, [r2, #0]
 800cb56:	f805 2b01 	strb.w	r2, [r5], #1
 800cb5a:	6872      	ldr	r2, [r6, #4]
 800cb5c:	3a01      	subs	r2, #1
 800cb5e:	2a00      	cmp	r2, #0
 800cb60:	6072      	str	r2, [r6, #4]
 800cb62:	dc07      	bgt.n	800cb74 <_scanf_i+0xb8>
 800cb64:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800cb68:	4631      	mov	r1, r6
 800cb6a:	4650      	mov	r0, sl
 800cb6c:	4790      	blx	r2
 800cb6e:	2800      	cmp	r0, #0
 800cb70:	f040 8085 	bne.w	800cc7e <_scanf_i+0x1c2>
 800cb74:	f10b 0b01 	add.w	fp, fp, #1
 800cb78:	f1bb 0f03 	cmp.w	fp, #3
 800cb7c:	d1cb      	bne.n	800cb16 <_scanf_i+0x5a>
 800cb7e:	6863      	ldr	r3, [r4, #4]
 800cb80:	b90b      	cbnz	r3, 800cb86 <_scanf_i+0xca>
 800cb82:	230a      	movs	r3, #10
 800cb84:	6063      	str	r3, [r4, #4]
 800cb86:	6863      	ldr	r3, [r4, #4]
 800cb88:	4945      	ldr	r1, [pc, #276]	; (800cca0 <_scanf_i+0x1e4>)
 800cb8a:	6960      	ldr	r0, [r4, #20]
 800cb8c:	1ac9      	subs	r1, r1, r3
 800cb8e:	f000 f937 	bl	800ce00 <__sccl>
 800cb92:	f04f 0b00 	mov.w	fp, #0
 800cb96:	68a3      	ldr	r3, [r4, #8]
 800cb98:	6822      	ldr	r2, [r4, #0]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d03d      	beq.n	800cc1a <_scanf_i+0x15e>
 800cb9e:	6831      	ldr	r1, [r6, #0]
 800cba0:	6960      	ldr	r0, [r4, #20]
 800cba2:	f891 c000 	ldrb.w	ip, [r1]
 800cba6:	f810 000c 	ldrb.w	r0, [r0, ip]
 800cbaa:	2800      	cmp	r0, #0
 800cbac:	d035      	beq.n	800cc1a <_scanf_i+0x15e>
 800cbae:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800cbb2:	d124      	bne.n	800cbfe <_scanf_i+0x142>
 800cbb4:	0510      	lsls	r0, r2, #20
 800cbb6:	d522      	bpl.n	800cbfe <_scanf_i+0x142>
 800cbb8:	f10b 0b01 	add.w	fp, fp, #1
 800cbbc:	f1b9 0f00 	cmp.w	r9, #0
 800cbc0:	d003      	beq.n	800cbca <_scanf_i+0x10e>
 800cbc2:	3301      	adds	r3, #1
 800cbc4:	f109 39ff 	add.w	r9, r9, #4294967295
 800cbc8:	60a3      	str	r3, [r4, #8]
 800cbca:	6873      	ldr	r3, [r6, #4]
 800cbcc:	3b01      	subs	r3, #1
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	6073      	str	r3, [r6, #4]
 800cbd2:	dd1b      	ble.n	800cc0c <_scanf_i+0x150>
 800cbd4:	6833      	ldr	r3, [r6, #0]
 800cbd6:	3301      	adds	r3, #1
 800cbd8:	6033      	str	r3, [r6, #0]
 800cbda:	68a3      	ldr	r3, [r4, #8]
 800cbdc:	3b01      	subs	r3, #1
 800cbde:	60a3      	str	r3, [r4, #8]
 800cbe0:	e7d9      	b.n	800cb96 <_scanf_i+0xda>
 800cbe2:	f1bb 0f02 	cmp.w	fp, #2
 800cbe6:	d1ae      	bne.n	800cb46 <_scanf_i+0x8a>
 800cbe8:	6822      	ldr	r2, [r4, #0]
 800cbea:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800cbee:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800cbf2:	d1bf      	bne.n	800cb74 <_scanf_i+0xb8>
 800cbf4:	2310      	movs	r3, #16
 800cbf6:	6063      	str	r3, [r4, #4]
 800cbf8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cbfc:	e7a2      	b.n	800cb44 <_scanf_i+0x88>
 800cbfe:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800cc02:	6022      	str	r2, [r4, #0]
 800cc04:	780b      	ldrb	r3, [r1, #0]
 800cc06:	f805 3b01 	strb.w	r3, [r5], #1
 800cc0a:	e7de      	b.n	800cbca <_scanf_i+0x10e>
 800cc0c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cc10:	4631      	mov	r1, r6
 800cc12:	4650      	mov	r0, sl
 800cc14:	4798      	blx	r3
 800cc16:	2800      	cmp	r0, #0
 800cc18:	d0df      	beq.n	800cbda <_scanf_i+0x11e>
 800cc1a:	6823      	ldr	r3, [r4, #0]
 800cc1c:	05d9      	lsls	r1, r3, #23
 800cc1e:	d50d      	bpl.n	800cc3c <_scanf_i+0x180>
 800cc20:	42bd      	cmp	r5, r7
 800cc22:	d909      	bls.n	800cc38 <_scanf_i+0x17c>
 800cc24:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800cc28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cc2c:	4632      	mov	r2, r6
 800cc2e:	4650      	mov	r0, sl
 800cc30:	4798      	blx	r3
 800cc32:	f105 39ff 	add.w	r9, r5, #4294967295
 800cc36:	464d      	mov	r5, r9
 800cc38:	42bd      	cmp	r5, r7
 800cc3a:	d028      	beq.n	800cc8e <_scanf_i+0x1d2>
 800cc3c:	6822      	ldr	r2, [r4, #0]
 800cc3e:	f012 0210 	ands.w	r2, r2, #16
 800cc42:	d113      	bne.n	800cc6c <_scanf_i+0x1b0>
 800cc44:	702a      	strb	r2, [r5, #0]
 800cc46:	6863      	ldr	r3, [r4, #4]
 800cc48:	9e01      	ldr	r6, [sp, #4]
 800cc4a:	4639      	mov	r1, r7
 800cc4c:	4650      	mov	r0, sl
 800cc4e:	47b0      	blx	r6
 800cc50:	f8d8 3000 	ldr.w	r3, [r8]
 800cc54:	6821      	ldr	r1, [r4, #0]
 800cc56:	1d1a      	adds	r2, r3, #4
 800cc58:	f8c8 2000 	str.w	r2, [r8]
 800cc5c:	f011 0f20 	tst.w	r1, #32
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	d00f      	beq.n	800cc84 <_scanf_i+0x1c8>
 800cc64:	6018      	str	r0, [r3, #0]
 800cc66:	68e3      	ldr	r3, [r4, #12]
 800cc68:	3301      	adds	r3, #1
 800cc6a:	60e3      	str	r3, [r4, #12]
 800cc6c:	6923      	ldr	r3, [r4, #16]
 800cc6e:	1bed      	subs	r5, r5, r7
 800cc70:	445d      	add	r5, fp
 800cc72:	442b      	add	r3, r5
 800cc74:	6123      	str	r3, [r4, #16]
 800cc76:	2000      	movs	r0, #0
 800cc78:	b007      	add	sp, #28
 800cc7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc7e:	f04f 0b00 	mov.w	fp, #0
 800cc82:	e7ca      	b.n	800cc1a <_scanf_i+0x15e>
 800cc84:	07ca      	lsls	r2, r1, #31
 800cc86:	bf4c      	ite	mi
 800cc88:	8018      	strhmi	r0, [r3, #0]
 800cc8a:	6018      	strpl	r0, [r3, #0]
 800cc8c:	e7eb      	b.n	800cc66 <_scanf_i+0x1aa>
 800cc8e:	2001      	movs	r0, #1
 800cc90:	e7f2      	b.n	800cc78 <_scanf_i+0x1bc>
 800cc92:	bf00      	nop
 800cc94:	0800de18 	.word	0x0800de18
 800cc98:	0800d80d 	.word	0x0800d80d
 800cc9c:	0800c3b1 	.word	0x0800c3b1
 800cca0:	0800e1da 	.word	0x0800e1da

0800cca4 <__sflush_r>:
 800cca4:	898a      	ldrh	r2, [r1, #12]
 800cca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccaa:	4605      	mov	r5, r0
 800ccac:	0710      	lsls	r0, r2, #28
 800ccae:	460c      	mov	r4, r1
 800ccb0:	d458      	bmi.n	800cd64 <__sflush_r+0xc0>
 800ccb2:	684b      	ldr	r3, [r1, #4]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	dc05      	bgt.n	800ccc4 <__sflush_r+0x20>
 800ccb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	dc02      	bgt.n	800ccc4 <__sflush_r+0x20>
 800ccbe:	2000      	movs	r0, #0
 800ccc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ccc6:	2e00      	cmp	r6, #0
 800ccc8:	d0f9      	beq.n	800ccbe <__sflush_r+0x1a>
 800ccca:	2300      	movs	r3, #0
 800cccc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ccd0:	682f      	ldr	r7, [r5, #0]
 800ccd2:	6a21      	ldr	r1, [r4, #32]
 800ccd4:	602b      	str	r3, [r5, #0]
 800ccd6:	d032      	beq.n	800cd3e <__sflush_r+0x9a>
 800ccd8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ccda:	89a3      	ldrh	r3, [r4, #12]
 800ccdc:	075a      	lsls	r2, r3, #29
 800ccde:	d505      	bpl.n	800ccec <__sflush_r+0x48>
 800cce0:	6863      	ldr	r3, [r4, #4]
 800cce2:	1ac0      	subs	r0, r0, r3
 800cce4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cce6:	b10b      	cbz	r3, 800ccec <__sflush_r+0x48>
 800cce8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ccea:	1ac0      	subs	r0, r0, r3
 800ccec:	2300      	movs	r3, #0
 800ccee:	4602      	mov	r2, r0
 800ccf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ccf2:	6a21      	ldr	r1, [r4, #32]
 800ccf4:	4628      	mov	r0, r5
 800ccf6:	47b0      	blx	r6
 800ccf8:	1c43      	adds	r3, r0, #1
 800ccfa:	89a3      	ldrh	r3, [r4, #12]
 800ccfc:	d106      	bne.n	800cd0c <__sflush_r+0x68>
 800ccfe:	6829      	ldr	r1, [r5, #0]
 800cd00:	291d      	cmp	r1, #29
 800cd02:	d82b      	bhi.n	800cd5c <__sflush_r+0xb8>
 800cd04:	4a29      	ldr	r2, [pc, #164]	; (800cdac <__sflush_r+0x108>)
 800cd06:	410a      	asrs	r2, r1
 800cd08:	07d6      	lsls	r6, r2, #31
 800cd0a:	d427      	bmi.n	800cd5c <__sflush_r+0xb8>
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	6062      	str	r2, [r4, #4]
 800cd10:	04d9      	lsls	r1, r3, #19
 800cd12:	6922      	ldr	r2, [r4, #16]
 800cd14:	6022      	str	r2, [r4, #0]
 800cd16:	d504      	bpl.n	800cd22 <__sflush_r+0x7e>
 800cd18:	1c42      	adds	r2, r0, #1
 800cd1a:	d101      	bne.n	800cd20 <__sflush_r+0x7c>
 800cd1c:	682b      	ldr	r3, [r5, #0]
 800cd1e:	b903      	cbnz	r3, 800cd22 <__sflush_r+0x7e>
 800cd20:	6560      	str	r0, [r4, #84]	; 0x54
 800cd22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd24:	602f      	str	r7, [r5, #0]
 800cd26:	2900      	cmp	r1, #0
 800cd28:	d0c9      	beq.n	800ccbe <__sflush_r+0x1a>
 800cd2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd2e:	4299      	cmp	r1, r3
 800cd30:	d002      	beq.n	800cd38 <__sflush_r+0x94>
 800cd32:	4628      	mov	r0, r5
 800cd34:	f7fd fefa 	bl	800ab2c <_free_r>
 800cd38:	2000      	movs	r0, #0
 800cd3a:	6360      	str	r0, [r4, #52]	; 0x34
 800cd3c:	e7c0      	b.n	800ccc0 <__sflush_r+0x1c>
 800cd3e:	2301      	movs	r3, #1
 800cd40:	4628      	mov	r0, r5
 800cd42:	47b0      	blx	r6
 800cd44:	1c41      	adds	r1, r0, #1
 800cd46:	d1c8      	bne.n	800ccda <__sflush_r+0x36>
 800cd48:	682b      	ldr	r3, [r5, #0]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d0c5      	beq.n	800ccda <__sflush_r+0x36>
 800cd4e:	2b1d      	cmp	r3, #29
 800cd50:	d001      	beq.n	800cd56 <__sflush_r+0xb2>
 800cd52:	2b16      	cmp	r3, #22
 800cd54:	d101      	bne.n	800cd5a <__sflush_r+0xb6>
 800cd56:	602f      	str	r7, [r5, #0]
 800cd58:	e7b1      	b.n	800ccbe <__sflush_r+0x1a>
 800cd5a:	89a3      	ldrh	r3, [r4, #12]
 800cd5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd60:	81a3      	strh	r3, [r4, #12]
 800cd62:	e7ad      	b.n	800ccc0 <__sflush_r+0x1c>
 800cd64:	690f      	ldr	r7, [r1, #16]
 800cd66:	2f00      	cmp	r7, #0
 800cd68:	d0a9      	beq.n	800ccbe <__sflush_r+0x1a>
 800cd6a:	0793      	lsls	r3, r2, #30
 800cd6c:	680e      	ldr	r6, [r1, #0]
 800cd6e:	bf08      	it	eq
 800cd70:	694b      	ldreq	r3, [r1, #20]
 800cd72:	600f      	str	r7, [r1, #0]
 800cd74:	bf18      	it	ne
 800cd76:	2300      	movne	r3, #0
 800cd78:	eba6 0807 	sub.w	r8, r6, r7
 800cd7c:	608b      	str	r3, [r1, #8]
 800cd7e:	f1b8 0f00 	cmp.w	r8, #0
 800cd82:	dd9c      	ble.n	800ccbe <__sflush_r+0x1a>
 800cd84:	6a21      	ldr	r1, [r4, #32]
 800cd86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cd88:	4643      	mov	r3, r8
 800cd8a:	463a      	mov	r2, r7
 800cd8c:	4628      	mov	r0, r5
 800cd8e:	47b0      	blx	r6
 800cd90:	2800      	cmp	r0, #0
 800cd92:	dc06      	bgt.n	800cda2 <__sflush_r+0xfe>
 800cd94:	89a3      	ldrh	r3, [r4, #12]
 800cd96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd9a:	81a3      	strh	r3, [r4, #12]
 800cd9c:	f04f 30ff 	mov.w	r0, #4294967295
 800cda0:	e78e      	b.n	800ccc0 <__sflush_r+0x1c>
 800cda2:	4407      	add	r7, r0
 800cda4:	eba8 0800 	sub.w	r8, r8, r0
 800cda8:	e7e9      	b.n	800cd7e <__sflush_r+0xda>
 800cdaa:	bf00      	nop
 800cdac:	dfbffffe 	.word	0xdfbffffe

0800cdb0 <_fflush_r>:
 800cdb0:	b538      	push	{r3, r4, r5, lr}
 800cdb2:	690b      	ldr	r3, [r1, #16]
 800cdb4:	4605      	mov	r5, r0
 800cdb6:	460c      	mov	r4, r1
 800cdb8:	b913      	cbnz	r3, 800cdc0 <_fflush_r+0x10>
 800cdba:	2500      	movs	r5, #0
 800cdbc:	4628      	mov	r0, r5
 800cdbe:	bd38      	pop	{r3, r4, r5, pc}
 800cdc0:	b118      	cbz	r0, 800cdca <_fflush_r+0x1a>
 800cdc2:	6a03      	ldr	r3, [r0, #32]
 800cdc4:	b90b      	cbnz	r3, 800cdca <_fflush_r+0x1a>
 800cdc6:	f7fc fee9 	bl	8009b9c <__sinit>
 800cdca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d0f3      	beq.n	800cdba <_fflush_r+0xa>
 800cdd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cdd4:	07d0      	lsls	r0, r2, #31
 800cdd6:	d404      	bmi.n	800cde2 <_fflush_r+0x32>
 800cdd8:	0599      	lsls	r1, r3, #22
 800cdda:	d402      	bmi.n	800cde2 <_fflush_r+0x32>
 800cddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdde:	f7fd f822 	bl	8009e26 <__retarget_lock_acquire_recursive>
 800cde2:	4628      	mov	r0, r5
 800cde4:	4621      	mov	r1, r4
 800cde6:	f7ff ff5d 	bl	800cca4 <__sflush_r>
 800cdea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cdec:	07da      	lsls	r2, r3, #31
 800cdee:	4605      	mov	r5, r0
 800cdf0:	d4e4      	bmi.n	800cdbc <_fflush_r+0xc>
 800cdf2:	89a3      	ldrh	r3, [r4, #12]
 800cdf4:	059b      	lsls	r3, r3, #22
 800cdf6:	d4e1      	bmi.n	800cdbc <_fflush_r+0xc>
 800cdf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdfa:	f7fd f815 	bl	8009e28 <__retarget_lock_release_recursive>
 800cdfe:	e7dd      	b.n	800cdbc <_fflush_r+0xc>

0800ce00 <__sccl>:
 800ce00:	b570      	push	{r4, r5, r6, lr}
 800ce02:	780b      	ldrb	r3, [r1, #0]
 800ce04:	4604      	mov	r4, r0
 800ce06:	2b5e      	cmp	r3, #94	; 0x5e
 800ce08:	bf0b      	itete	eq
 800ce0a:	784b      	ldrbeq	r3, [r1, #1]
 800ce0c:	1c4a      	addne	r2, r1, #1
 800ce0e:	1c8a      	addeq	r2, r1, #2
 800ce10:	2100      	movne	r1, #0
 800ce12:	bf08      	it	eq
 800ce14:	2101      	moveq	r1, #1
 800ce16:	3801      	subs	r0, #1
 800ce18:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ce1c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800ce20:	42a8      	cmp	r0, r5
 800ce22:	d1fb      	bne.n	800ce1c <__sccl+0x1c>
 800ce24:	b90b      	cbnz	r3, 800ce2a <__sccl+0x2a>
 800ce26:	1e50      	subs	r0, r2, #1
 800ce28:	bd70      	pop	{r4, r5, r6, pc}
 800ce2a:	f081 0101 	eor.w	r1, r1, #1
 800ce2e:	54e1      	strb	r1, [r4, r3]
 800ce30:	4610      	mov	r0, r2
 800ce32:	4602      	mov	r2, r0
 800ce34:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ce38:	2d2d      	cmp	r5, #45	; 0x2d
 800ce3a:	d005      	beq.n	800ce48 <__sccl+0x48>
 800ce3c:	2d5d      	cmp	r5, #93	; 0x5d
 800ce3e:	d016      	beq.n	800ce6e <__sccl+0x6e>
 800ce40:	2d00      	cmp	r5, #0
 800ce42:	d0f1      	beq.n	800ce28 <__sccl+0x28>
 800ce44:	462b      	mov	r3, r5
 800ce46:	e7f2      	b.n	800ce2e <__sccl+0x2e>
 800ce48:	7846      	ldrb	r6, [r0, #1]
 800ce4a:	2e5d      	cmp	r6, #93	; 0x5d
 800ce4c:	d0fa      	beq.n	800ce44 <__sccl+0x44>
 800ce4e:	42b3      	cmp	r3, r6
 800ce50:	dcf8      	bgt.n	800ce44 <__sccl+0x44>
 800ce52:	3002      	adds	r0, #2
 800ce54:	461a      	mov	r2, r3
 800ce56:	3201      	adds	r2, #1
 800ce58:	4296      	cmp	r6, r2
 800ce5a:	54a1      	strb	r1, [r4, r2]
 800ce5c:	dcfb      	bgt.n	800ce56 <__sccl+0x56>
 800ce5e:	1af2      	subs	r2, r6, r3
 800ce60:	3a01      	subs	r2, #1
 800ce62:	1c5d      	adds	r5, r3, #1
 800ce64:	42b3      	cmp	r3, r6
 800ce66:	bfa8      	it	ge
 800ce68:	2200      	movge	r2, #0
 800ce6a:	18ab      	adds	r3, r5, r2
 800ce6c:	e7e1      	b.n	800ce32 <__sccl+0x32>
 800ce6e:	4610      	mov	r0, r2
 800ce70:	e7da      	b.n	800ce28 <__sccl+0x28>

0800ce72 <__submore>:
 800ce72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce76:	460c      	mov	r4, r1
 800ce78:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ce7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce7e:	4299      	cmp	r1, r3
 800ce80:	d11d      	bne.n	800cebe <__submore+0x4c>
 800ce82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ce86:	f7fd fec5 	bl	800ac14 <_malloc_r>
 800ce8a:	b918      	cbnz	r0, 800ce94 <__submore+0x22>
 800ce8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce98:	63a3      	str	r3, [r4, #56]	; 0x38
 800ce9a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ce9e:	6360      	str	r0, [r4, #52]	; 0x34
 800cea0:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800cea4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800cea8:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ceac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ceb0:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ceb4:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ceb8:	6020      	str	r0, [r4, #0]
 800ceba:	2000      	movs	r0, #0
 800cebc:	e7e8      	b.n	800ce90 <__submore+0x1e>
 800cebe:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800cec0:	0077      	lsls	r7, r6, #1
 800cec2:	463a      	mov	r2, r7
 800cec4:	f000 fc01 	bl	800d6ca <_realloc_r>
 800cec8:	4605      	mov	r5, r0
 800ceca:	2800      	cmp	r0, #0
 800cecc:	d0de      	beq.n	800ce8c <__submore+0x1a>
 800cece:	eb00 0806 	add.w	r8, r0, r6
 800ced2:	4601      	mov	r1, r0
 800ced4:	4632      	mov	r2, r6
 800ced6:	4640      	mov	r0, r8
 800ced8:	f000 f842 	bl	800cf60 <memcpy>
 800cedc:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800cee0:	f8c4 8000 	str.w	r8, [r4]
 800cee4:	e7e9      	b.n	800ceba <__submore+0x48>

0800cee6 <memmove>:
 800cee6:	4288      	cmp	r0, r1
 800cee8:	b510      	push	{r4, lr}
 800ceea:	eb01 0402 	add.w	r4, r1, r2
 800ceee:	d902      	bls.n	800cef6 <memmove+0x10>
 800cef0:	4284      	cmp	r4, r0
 800cef2:	4623      	mov	r3, r4
 800cef4:	d807      	bhi.n	800cf06 <memmove+0x20>
 800cef6:	1e43      	subs	r3, r0, #1
 800cef8:	42a1      	cmp	r1, r4
 800cefa:	d008      	beq.n	800cf0e <memmove+0x28>
 800cefc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf00:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cf04:	e7f8      	b.n	800cef8 <memmove+0x12>
 800cf06:	4402      	add	r2, r0
 800cf08:	4601      	mov	r1, r0
 800cf0a:	428a      	cmp	r2, r1
 800cf0c:	d100      	bne.n	800cf10 <memmove+0x2a>
 800cf0e:	bd10      	pop	{r4, pc}
 800cf10:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cf14:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cf18:	e7f7      	b.n	800cf0a <memmove+0x24>

0800cf1a <strncmp>:
 800cf1a:	b510      	push	{r4, lr}
 800cf1c:	b16a      	cbz	r2, 800cf3a <strncmp+0x20>
 800cf1e:	3901      	subs	r1, #1
 800cf20:	1884      	adds	r4, r0, r2
 800cf22:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf26:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d103      	bne.n	800cf36 <strncmp+0x1c>
 800cf2e:	42a0      	cmp	r0, r4
 800cf30:	d001      	beq.n	800cf36 <strncmp+0x1c>
 800cf32:	2a00      	cmp	r2, #0
 800cf34:	d1f5      	bne.n	800cf22 <strncmp+0x8>
 800cf36:	1ad0      	subs	r0, r2, r3
 800cf38:	bd10      	pop	{r4, pc}
 800cf3a:	4610      	mov	r0, r2
 800cf3c:	e7fc      	b.n	800cf38 <strncmp+0x1e>
	...

0800cf40 <_sbrk_r>:
 800cf40:	b538      	push	{r3, r4, r5, lr}
 800cf42:	4d06      	ldr	r5, [pc, #24]	; (800cf5c <_sbrk_r+0x1c>)
 800cf44:	2300      	movs	r3, #0
 800cf46:	4604      	mov	r4, r0
 800cf48:	4608      	mov	r0, r1
 800cf4a:	602b      	str	r3, [r5, #0]
 800cf4c:	f7f5 fc76 	bl	800283c <_sbrk>
 800cf50:	1c43      	adds	r3, r0, #1
 800cf52:	d102      	bne.n	800cf5a <_sbrk_r+0x1a>
 800cf54:	682b      	ldr	r3, [r5, #0]
 800cf56:	b103      	cbz	r3, 800cf5a <_sbrk_r+0x1a>
 800cf58:	6023      	str	r3, [r4, #0]
 800cf5a:	bd38      	pop	{r3, r4, r5, pc}
 800cf5c:	200005d8 	.word	0x200005d8

0800cf60 <memcpy>:
 800cf60:	440a      	add	r2, r1
 800cf62:	4291      	cmp	r1, r2
 800cf64:	f100 33ff 	add.w	r3, r0, #4294967295
 800cf68:	d100      	bne.n	800cf6c <memcpy+0xc>
 800cf6a:	4770      	bx	lr
 800cf6c:	b510      	push	{r4, lr}
 800cf6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf72:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf76:	4291      	cmp	r1, r2
 800cf78:	d1f9      	bne.n	800cf6e <memcpy+0xe>
 800cf7a:	bd10      	pop	{r4, pc}
 800cf7c:	0000      	movs	r0, r0
	...

0800cf80 <nan>:
 800cf80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cf88 <nan+0x8>
 800cf84:	4770      	bx	lr
 800cf86:	bf00      	nop
 800cf88:	00000000 	.word	0x00000000
 800cf8c:	7ff80000 	.word	0x7ff80000

0800cf90 <__assert_func>:
 800cf90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cf92:	4614      	mov	r4, r2
 800cf94:	461a      	mov	r2, r3
 800cf96:	4b09      	ldr	r3, [pc, #36]	; (800cfbc <__assert_func+0x2c>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	4605      	mov	r5, r0
 800cf9c:	68d8      	ldr	r0, [r3, #12]
 800cf9e:	b14c      	cbz	r4, 800cfb4 <__assert_func+0x24>
 800cfa0:	4b07      	ldr	r3, [pc, #28]	; (800cfc0 <__assert_func+0x30>)
 800cfa2:	9100      	str	r1, [sp, #0]
 800cfa4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cfa8:	4906      	ldr	r1, [pc, #24]	; (800cfc4 <__assert_func+0x34>)
 800cfaa:	462b      	mov	r3, r5
 800cfac:	f000 fc3e 	bl	800d82c <fiprintf>
 800cfb0:	f000 fc4e 	bl	800d850 <abort>
 800cfb4:	4b04      	ldr	r3, [pc, #16]	; (800cfc8 <__assert_func+0x38>)
 800cfb6:	461c      	mov	r4, r3
 800cfb8:	e7f3      	b.n	800cfa2 <__assert_func+0x12>
 800cfba:	bf00      	nop
 800cfbc:	2000006c 	.word	0x2000006c
 800cfc0:	0800e1ed 	.word	0x0800e1ed
 800cfc4:	0800e1fa 	.word	0x0800e1fa
 800cfc8:	0800e228 	.word	0x0800e228

0800cfcc <_calloc_r>:
 800cfcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cfce:	fba1 2402 	umull	r2, r4, r1, r2
 800cfd2:	b94c      	cbnz	r4, 800cfe8 <_calloc_r+0x1c>
 800cfd4:	4611      	mov	r1, r2
 800cfd6:	9201      	str	r2, [sp, #4]
 800cfd8:	f7fd fe1c 	bl	800ac14 <_malloc_r>
 800cfdc:	9a01      	ldr	r2, [sp, #4]
 800cfde:	4605      	mov	r5, r0
 800cfe0:	b930      	cbnz	r0, 800cff0 <_calloc_r+0x24>
 800cfe2:	4628      	mov	r0, r5
 800cfe4:	b003      	add	sp, #12
 800cfe6:	bd30      	pop	{r4, r5, pc}
 800cfe8:	220c      	movs	r2, #12
 800cfea:	6002      	str	r2, [r0, #0]
 800cfec:	2500      	movs	r5, #0
 800cfee:	e7f8      	b.n	800cfe2 <_calloc_r+0x16>
 800cff0:	4621      	mov	r1, r4
 800cff2:	f7fc fe9a 	bl	8009d2a <memset>
 800cff6:	e7f4      	b.n	800cfe2 <_calloc_r+0x16>

0800cff8 <rshift>:
 800cff8:	6903      	ldr	r3, [r0, #16]
 800cffa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cffe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d002:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d006:	f100 0414 	add.w	r4, r0, #20
 800d00a:	dd45      	ble.n	800d098 <rshift+0xa0>
 800d00c:	f011 011f 	ands.w	r1, r1, #31
 800d010:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d014:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d018:	d10c      	bne.n	800d034 <rshift+0x3c>
 800d01a:	f100 0710 	add.w	r7, r0, #16
 800d01e:	4629      	mov	r1, r5
 800d020:	42b1      	cmp	r1, r6
 800d022:	d334      	bcc.n	800d08e <rshift+0x96>
 800d024:	1a9b      	subs	r3, r3, r2
 800d026:	009b      	lsls	r3, r3, #2
 800d028:	1eea      	subs	r2, r5, #3
 800d02a:	4296      	cmp	r6, r2
 800d02c:	bf38      	it	cc
 800d02e:	2300      	movcc	r3, #0
 800d030:	4423      	add	r3, r4
 800d032:	e015      	b.n	800d060 <rshift+0x68>
 800d034:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d038:	f1c1 0820 	rsb	r8, r1, #32
 800d03c:	40cf      	lsrs	r7, r1
 800d03e:	f105 0e04 	add.w	lr, r5, #4
 800d042:	46a1      	mov	r9, r4
 800d044:	4576      	cmp	r6, lr
 800d046:	46f4      	mov	ip, lr
 800d048:	d815      	bhi.n	800d076 <rshift+0x7e>
 800d04a:	1a9a      	subs	r2, r3, r2
 800d04c:	0092      	lsls	r2, r2, #2
 800d04e:	3a04      	subs	r2, #4
 800d050:	3501      	adds	r5, #1
 800d052:	42ae      	cmp	r6, r5
 800d054:	bf38      	it	cc
 800d056:	2200      	movcc	r2, #0
 800d058:	18a3      	adds	r3, r4, r2
 800d05a:	50a7      	str	r7, [r4, r2]
 800d05c:	b107      	cbz	r7, 800d060 <rshift+0x68>
 800d05e:	3304      	adds	r3, #4
 800d060:	1b1a      	subs	r2, r3, r4
 800d062:	42a3      	cmp	r3, r4
 800d064:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d068:	bf08      	it	eq
 800d06a:	2300      	moveq	r3, #0
 800d06c:	6102      	str	r2, [r0, #16]
 800d06e:	bf08      	it	eq
 800d070:	6143      	streq	r3, [r0, #20]
 800d072:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d076:	f8dc c000 	ldr.w	ip, [ip]
 800d07a:	fa0c fc08 	lsl.w	ip, ip, r8
 800d07e:	ea4c 0707 	orr.w	r7, ip, r7
 800d082:	f849 7b04 	str.w	r7, [r9], #4
 800d086:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d08a:	40cf      	lsrs	r7, r1
 800d08c:	e7da      	b.n	800d044 <rshift+0x4c>
 800d08e:	f851 cb04 	ldr.w	ip, [r1], #4
 800d092:	f847 cf04 	str.w	ip, [r7, #4]!
 800d096:	e7c3      	b.n	800d020 <rshift+0x28>
 800d098:	4623      	mov	r3, r4
 800d09a:	e7e1      	b.n	800d060 <rshift+0x68>

0800d09c <__hexdig_fun>:
 800d09c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d0a0:	2b09      	cmp	r3, #9
 800d0a2:	d802      	bhi.n	800d0aa <__hexdig_fun+0xe>
 800d0a4:	3820      	subs	r0, #32
 800d0a6:	b2c0      	uxtb	r0, r0
 800d0a8:	4770      	bx	lr
 800d0aa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d0ae:	2b05      	cmp	r3, #5
 800d0b0:	d801      	bhi.n	800d0b6 <__hexdig_fun+0x1a>
 800d0b2:	3847      	subs	r0, #71	; 0x47
 800d0b4:	e7f7      	b.n	800d0a6 <__hexdig_fun+0xa>
 800d0b6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d0ba:	2b05      	cmp	r3, #5
 800d0bc:	d801      	bhi.n	800d0c2 <__hexdig_fun+0x26>
 800d0be:	3827      	subs	r0, #39	; 0x27
 800d0c0:	e7f1      	b.n	800d0a6 <__hexdig_fun+0xa>
 800d0c2:	2000      	movs	r0, #0
 800d0c4:	4770      	bx	lr
	...

0800d0c8 <__gethex>:
 800d0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0cc:	4617      	mov	r7, r2
 800d0ce:	680a      	ldr	r2, [r1, #0]
 800d0d0:	b085      	sub	sp, #20
 800d0d2:	f102 0b02 	add.w	fp, r2, #2
 800d0d6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d0da:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d0de:	4681      	mov	r9, r0
 800d0e0:	468a      	mov	sl, r1
 800d0e2:	9302      	str	r3, [sp, #8]
 800d0e4:	32fe      	adds	r2, #254	; 0xfe
 800d0e6:	eb02 030b 	add.w	r3, r2, fp
 800d0ea:	46d8      	mov	r8, fp
 800d0ec:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800d0f0:	9301      	str	r3, [sp, #4]
 800d0f2:	2830      	cmp	r0, #48	; 0x30
 800d0f4:	d0f7      	beq.n	800d0e6 <__gethex+0x1e>
 800d0f6:	f7ff ffd1 	bl	800d09c <__hexdig_fun>
 800d0fa:	4604      	mov	r4, r0
 800d0fc:	2800      	cmp	r0, #0
 800d0fe:	d138      	bne.n	800d172 <__gethex+0xaa>
 800d100:	49a7      	ldr	r1, [pc, #668]	; (800d3a0 <__gethex+0x2d8>)
 800d102:	2201      	movs	r2, #1
 800d104:	4640      	mov	r0, r8
 800d106:	f7ff ff08 	bl	800cf1a <strncmp>
 800d10a:	4606      	mov	r6, r0
 800d10c:	2800      	cmp	r0, #0
 800d10e:	d169      	bne.n	800d1e4 <__gethex+0x11c>
 800d110:	f898 0001 	ldrb.w	r0, [r8, #1]
 800d114:	465d      	mov	r5, fp
 800d116:	f7ff ffc1 	bl	800d09c <__hexdig_fun>
 800d11a:	2800      	cmp	r0, #0
 800d11c:	d064      	beq.n	800d1e8 <__gethex+0x120>
 800d11e:	465a      	mov	r2, fp
 800d120:	7810      	ldrb	r0, [r2, #0]
 800d122:	2830      	cmp	r0, #48	; 0x30
 800d124:	4690      	mov	r8, r2
 800d126:	f102 0201 	add.w	r2, r2, #1
 800d12a:	d0f9      	beq.n	800d120 <__gethex+0x58>
 800d12c:	f7ff ffb6 	bl	800d09c <__hexdig_fun>
 800d130:	2301      	movs	r3, #1
 800d132:	fab0 f480 	clz	r4, r0
 800d136:	0964      	lsrs	r4, r4, #5
 800d138:	465e      	mov	r6, fp
 800d13a:	9301      	str	r3, [sp, #4]
 800d13c:	4642      	mov	r2, r8
 800d13e:	4615      	mov	r5, r2
 800d140:	3201      	adds	r2, #1
 800d142:	7828      	ldrb	r0, [r5, #0]
 800d144:	f7ff ffaa 	bl	800d09c <__hexdig_fun>
 800d148:	2800      	cmp	r0, #0
 800d14a:	d1f8      	bne.n	800d13e <__gethex+0x76>
 800d14c:	4994      	ldr	r1, [pc, #592]	; (800d3a0 <__gethex+0x2d8>)
 800d14e:	2201      	movs	r2, #1
 800d150:	4628      	mov	r0, r5
 800d152:	f7ff fee2 	bl	800cf1a <strncmp>
 800d156:	b978      	cbnz	r0, 800d178 <__gethex+0xb0>
 800d158:	b946      	cbnz	r6, 800d16c <__gethex+0xa4>
 800d15a:	1c6e      	adds	r6, r5, #1
 800d15c:	4632      	mov	r2, r6
 800d15e:	4615      	mov	r5, r2
 800d160:	3201      	adds	r2, #1
 800d162:	7828      	ldrb	r0, [r5, #0]
 800d164:	f7ff ff9a 	bl	800d09c <__hexdig_fun>
 800d168:	2800      	cmp	r0, #0
 800d16a:	d1f8      	bne.n	800d15e <__gethex+0x96>
 800d16c:	1b73      	subs	r3, r6, r5
 800d16e:	009e      	lsls	r6, r3, #2
 800d170:	e004      	b.n	800d17c <__gethex+0xb4>
 800d172:	2400      	movs	r4, #0
 800d174:	4626      	mov	r6, r4
 800d176:	e7e1      	b.n	800d13c <__gethex+0x74>
 800d178:	2e00      	cmp	r6, #0
 800d17a:	d1f7      	bne.n	800d16c <__gethex+0xa4>
 800d17c:	782b      	ldrb	r3, [r5, #0]
 800d17e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d182:	2b50      	cmp	r3, #80	; 0x50
 800d184:	d13d      	bne.n	800d202 <__gethex+0x13a>
 800d186:	786b      	ldrb	r3, [r5, #1]
 800d188:	2b2b      	cmp	r3, #43	; 0x2b
 800d18a:	d02f      	beq.n	800d1ec <__gethex+0x124>
 800d18c:	2b2d      	cmp	r3, #45	; 0x2d
 800d18e:	d031      	beq.n	800d1f4 <__gethex+0x12c>
 800d190:	1c69      	adds	r1, r5, #1
 800d192:	f04f 0b00 	mov.w	fp, #0
 800d196:	7808      	ldrb	r0, [r1, #0]
 800d198:	f7ff ff80 	bl	800d09c <__hexdig_fun>
 800d19c:	1e42      	subs	r2, r0, #1
 800d19e:	b2d2      	uxtb	r2, r2
 800d1a0:	2a18      	cmp	r2, #24
 800d1a2:	d82e      	bhi.n	800d202 <__gethex+0x13a>
 800d1a4:	f1a0 0210 	sub.w	r2, r0, #16
 800d1a8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d1ac:	f7ff ff76 	bl	800d09c <__hexdig_fun>
 800d1b0:	f100 3cff 	add.w	ip, r0, #4294967295
 800d1b4:	fa5f fc8c 	uxtb.w	ip, ip
 800d1b8:	f1bc 0f18 	cmp.w	ip, #24
 800d1bc:	d91d      	bls.n	800d1fa <__gethex+0x132>
 800d1be:	f1bb 0f00 	cmp.w	fp, #0
 800d1c2:	d000      	beq.n	800d1c6 <__gethex+0xfe>
 800d1c4:	4252      	negs	r2, r2
 800d1c6:	4416      	add	r6, r2
 800d1c8:	f8ca 1000 	str.w	r1, [sl]
 800d1cc:	b1dc      	cbz	r4, 800d206 <__gethex+0x13e>
 800d1ce:	9b01      	ldr	r3, [sp, #4]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	bf14      	ite	ne
 800d1d4:	f04f 0800 	movne.w	r8, #0
 800d1d8:	f04f 0806 	moveq.w	r8, #6
 800d1dc:	4640      	mov	r0, r8
 800d1de:	b005      	add	sp, #20
 800d1e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1e4:	4645      	mov	r5, r8
 800d1e6:	4626      	mov	r6, r4
 800d1e8:	2401      	movs	r4, #1
 800d1ea:	e7c7      	b.n	800d17c <__gethex+0xb4>
 800d1ec:	f04f 0b00 	mov.w	fp, #0
 800d1f0:	1ca9      	adds	r1, r5, #2
 800d1f2:	e7d0      	b.n	800d196 <__gethex+0xce>
 800d1f4:	f04f 0b01 	mov.w	fp, #1
 800d1f8:	e7fa      	b.n	800d1f0 <__gethex+0x128>
 800d1fa:	230a      	movs	r3, #10
 800d1fc:	fb03 0002 	mla	r0, r3, r2, r0
 800d200:	e7d0      	b.n	800d1a4 <__gethex+0xdc>
 800d202:	4629      	mov	r1, r5
 800d204:	e7e0      	b.n	800d1c8 <__gethex+0x100>
 800d206:	eba5 0308 	sub.w	r3, r5, r8
 800d20a:	3b01      	subs	r3, #1
 800d20c:	4621      	mov	r1, r4
 800d20e:	2b07      	cmp	r3, #7
 800d210:	dc0a      	bgt.n	800d228 <__gethex+0x160>
 800d212:	4648      	mov	r0, r9
 800d214:	f7fd fd8a 	bl	800ad2c <_Balloc>
 800d218:	4604      	mov	r4, r0
 800d21a:	b940      	cbnz	r0, 800d22e <__gethex+0x166>
 800d21c:	4b61      	ldr	r3, [pc, #388]	; (800d3a4 <__gethex+0x2dc>)
 800d21e:	4602      	mov	r2, r0
 800d220:	21e4      	movs	r1, #228	; 0xe4
 800d222:	4861      	ldr	r0, [pc, #388]	; (800d3a8 <__gethex+0x2e0>)
 800d224:	f7ff feb4 	bl	800cf90 <__assert_func>
 800d228:	3101      	adds	r1, #1
 800d22a:	105b      	asrs	r3, r3, #1
 800d22c:	e7ef      	b.n	800d20e <__gethex+0x146>
 800d22e:	f100 0a14 	add.w	sl, r0, #20
 800d232:	2300      	movs	r3, #0
 800d234:	495a      	ldr	r1, [pc, #360]	; (800d3a0 <__gethex+0x2d8>)
 800d236:	f8cd a004 	str.w	sl, [sp, #4]
 800d23a:	469b      	mov	fp, r3
 800d23c:	45a8      	cmp	r8, r5
 800d23e:	d342      	bcc.n	800d2c6 <__gethex+0x1fe>
 800d240:	9801      	ldr	r0, [sp, #4]
 800d242:	f840 bb04 	str.w	fp, [r0], #4
 800d246:	eba0 000a 	sub.w	r0, r0, sl
 800d24a:	1080      	asrs	r0, r0, #2
 800d24c:	6120      	str	r0, [r4, #16]
 800d24e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800d252:	4658      	mov	r0, fp
 800d254:	f7fd fe5c 	bl	800af10 <__hi0bits>
 800d258:	683d      	ldr	r5, [r7, #0]
 800d25a:	eba8 0000 	sub.w	r0, r8, r0
 800d25e:	42a8      	cmp	r0, r5
 800d260:	dd59      	ble.n	800d316 <__gethex+0x24e>
 800d262:	eba0 0805 	sub.w	r8, r0, r5
 800d266:	4641      	mov	r1, r8
 800d268:	4620      	mov	r0, r4
 800d26a:	f7fe f9eb 	bl	800b644 <__any_on>
 800d26e:	4683      	mov	fp, r0
 800d270:	b1b8      	cbz	r0, 800d2a2 <__gethex+0x1da>
 800d272:	f108 33ff 	add.w	r3, r8, #4294967295
 800d276:	1159      	asrs	r1, r3, #5
 800d278:	f003 021f 	and.w	r2, r3, #31
 800d27c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d280:	f04f 0b01 	mov.w	fp, #1
 800d284:	fa0b f202 	lsl.w	r2, fp, r2
 800d288:	420a      	tst	r2, r1
 800d28a:	d00a      	beq.n	800d2a2 <__gethex+0x1da>
 800d28c:	455b      	cmp	r3, fp
 800d28e:	dd06      	ble.n	800d29e <__gethex+0x1d6>
 800d290:	f1a8 0102 	sub.w	r1, r8, #2
 800d294:	4620      	mov	r0, r4
 800d296:	f7fe f9d5 	bl	800b644 <__any_on>
 800d29a:	2800      	cmp	r0, #0
 800d29c:	d138      	bne.n	800d310 <__gethex+0x248>
 800d29e:	f04f 0b02 	mov.w	fp, #2
 800d2a2:	4641      	mov	r1, r8
 800d2a4:	4620      	mov	r0, r4
 800d2a6:	f7ff fea7 	bl	800cff8 <rshift>
 800d2aa:	4446      	add	r6, r8
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	42b3      	cmp	r3, r6
 800d2b0:	da41      	bge.n	800d336 <__gethex+0x26e>
 800d2b2:	4621      	mov	r1, r4
 800d2b4:	4648      	mov	r0, r9
 800d2b6:	f7fd fd79 	bl	800adac <_Bfree>
 800d2ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d2bc:	2300      	movs	r3, #0
 800d2be:	6013      	str	r3, [r2, #0]
 800d2c0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d2c4:	e78a      	b.n	800d1dc <__gethex+0x114>
 800d2c6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d2ca:	2a2e      	cmp	r2, #46	; 0x2e
 800d2cc:	d014      	beq.n	800d2f8 <__gethex+0x230>
 800d2ce:	2b20      	cmp	r3, #32
 800d2d0:	d106      	bne.n	800d2e0 <__gethex+0x218>
 800d2d2:	9b01      	ldr	r3, [sp, #4]
 800d2d4:	f843 bb04 	str.w	fp, [r3], #4
 800d2d8:	f04f 0b00 	mov.w	fp, #0
 800d2dc:	9301      	str	r3, [sp, #4]
 800d2de:	465b      	mov	r3, fp
 800d2e0:	7828      	ldrb	r0, [r5, #0]
 800d2e2:	9303      	str	r3, [sp, #12]
 800d2e4:	f7ff feda 	bl	800d09c <__hexdig_fun>
 800d2e8:	9b03      	ldr	r3, [sp, #12]
 800d2ea:	f000 000f 	and.w	r0, r0, #15
 800d2ee:	4098      	lsls	r0, r3
 800d2f0:	ea4b 0b00 	orr.w	fp, fp, r0
 800d2f4:	3304      	adds	r3, #4
 800d2f6:	e7a1      	b.n	800d23c <__gethex+0x174>
 800d2f8:	45a8      	cmp	r8, r5
 800d2fa:	d8e8      	bhi.n	800d2ce <__gethex+0x206>
 800d2fc:	2201      	movs	r2, #1
 800d2fe:	4628      	mov	r0, r5
 800d300:	9303      	str	r3, [sp, #12]
 800d302:	f7ff fe0a 	bl	800cf1a <strncmp>
 800d306:	4926      	ldr	r1, [pc, #152]	; (800d3a0 <__gethex+0x2d8>)
 800d308:	9b03      	ldr	r3, [sp, #12]
 800d30a:	2800      	cmp	r0, #0
 800d30c:	d1df      	bne.n	800d2ce <__gethex+0x206>
 800d30e:	e795      	b.n	800d23c <__gethex+0x174>
 800d310:	f04f 0b03 	mov.w	fp, #3
 800d314:	e7c5      	b.n	800d2a2 <__gethex+0x1da>
 800d316:	da0b      	bge.n	800d330 <__gethex+0x268>
 800d318:	eba5 0800 	sub.w	r8, r5, r0
 800d31c:	4621      	mov	r1, r4
 800d31e:	4642      	mov	r2, r8
 800d320:	4648      	mov	r0, r9
 800d322:	f7fd ff5d 	bl	800b1e0 <__lshift>
 800d326:	eba6 0608 	sub.w	r6, r6, r8
 800d32a:	4604      	mov	r4, r0
 800d32c:	f100 0a14 	add.w	sl, r0, #20
 800d330:	f04f 0b00 	mov.w	fp, #0
 800d334:	e7ba      	b.n	800d2ac <__gethex+0x1e4>
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	42b3      	cmp	r3, r6
 800d33a:	dd73      	ble.n	800d424 <__gethex+0x35c>
 800d33c:	1b9e      	subs	r6, r3, r6
 800d33e:	42b5      	cmp	r5, r6
 800d340:	dc34      	bgt.n	800d3ac <__gethex+0x2e4>
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	2b02      	cmp	r3, #2
 800d346:	d023      	beq.n	800d390 <__gethex+0x2c8>
 800d348:	2b03      	cmp	r3, #3
 800d34a:	d025      	beq.n	800d398 <__gethex+0x2d0>
 800d34c:	2b01      	cmp	r3, #1
 800d34e:	d115      	bne.n	800d37c <__gethex+0x2b4>
 800d350:	42b5      	cmp	r5, r6
 800d352:	d113      	bne.n	800d37c <__gethex+0x2b4>
 800d354:	2d01      	cmp	r5, #1
 800d356:	d10b      	bne.n	800d370 <__gethex+0x2a8>
 800d358:	9a02      	ldr	r2, [sp, #8]
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6013      	str	r3, [r2, #0]
 800d35e:	2301      	movs	r3, #1
 800d360:	6123      	str	r3, [r4, #16]
 800d362:	f8ca 3000 	str.w	r3, [sl]
 800d366:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d368:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d36c:	601c      	str	r4, [r3, #0]
 800d36e:	e735      	b.n	800d1dc <__gethex+0x114>
 800d370:	1e69      	subs	r1, r5, #1
 800d372:	4620      	mov	r0, r4
 800d374:	f7fe f966 	bl	800b644 <__any_on>
 800d378:	2800      	cmp	r0, #0
 800d37a:	d1ed      	bne.n	800d358 <__gethex+0x290>
 800d37c:	4621      	mov	r1, r4
 800d37e:	4648      	mov	r0, r9
 800d380:	f7fd fd14 	bl	800adac <_Bfree>
 800d384:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d386:	2300      	movs	r3, #0
 800d388:	6013      	str	r3, [r2, #0]
 800d38a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d38e:	e725      	b.n	800d1dc <__gethex+0x114>
 800d390:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d392:	2b00      	cmp	r3, #0
 800d394:	d1f2      	bne.n	800d37c <__gethex+0x2b4>
 800d396:	e7df      	b.n	800d358 <__gethex+0x290>
 800d398:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d1dc      	bne.n	800d358 <__gethex+0x290>
 800d39e:	e7ed      	b.n	800d37c <__gethex+0x2b4>
 800d3a0:	0800e064 	.word	0x0800e064
 800d3a4:	0800def7 	.word	0x0800def7
 800d3a8:	0800e229 	.word	0x0800e229
 800d3ac:	f106 38ff 	add.w	r8, r6, #4294967295
 800d3b0:	f1bb 0f00 	cmp.w	fp, #0
 800d3b4:	d133      	bne.n	800d41e <__gethex+0x356>
 800d3b6:	f1b8 0f00 	cmp.w	r8, #0
 800d3ba:	d004      	beq.n	800d3c6 <__gethex+0x2fe>
 800d3bc:	4641      	mov	r1, r8
 800d3be:	4620      	mov	r0, r4
 800d3c0:	f7fe f940 	bl	800b644 <__any_on>
 800d3c4:	4683      	mov	fp, r0
 800d3c6:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d3ca:	2301      	movs	r3, #1
 800d3cc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d3d0:	f008 081f 	and.w	r8, r8, #31
 800d3d4:	fa03 f308 	lsl.w	r3, r3, r8
 800d3d8:	4213      	tst	r3, r2
 800d3da:	4631      	mov	r1, r6
 800d3dc:	4620      	mov	r0, r4
 800d3de:	bf18      	it	ne
 800d3e0:	f04b 0b02 	orrne.w	fp, fp, #2
 800d3e4:	1bad      	subs	r5, r5, r6
 800d3e6:	f7ff fe07 	bl	800cff8 <rshift>
 800d3ea:	687e      	ldr	r6, [r7, #4]
 800d3ec:	f04f 0802 	mov.w	r8, #2
 800d3f0:	f1bb 0f00 	cmp.w	fp, #0
 800d3f4:	d04a      	beq.n	800d48c <__gethex+0x3c4>
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	2b02      	cmp	r3, #2
 800d3fa:	d016      	beq.n	800d42a <__gethex+0x362>
 800d3fc:	2b03      	cmp	r3, #3
 800d3fe:	d018      	beq.n	800d432 <__gethex+0x36a>
 800d400:	2b01      	cmp	r3, #1
 800d402:	d109      	bne.n	800d418 <__gethex+0x350>
 800d404:	f01b 0f02 	tst.w	fp, #2
 800d408:	d006      	beq.n	800d418 <__gethex+0x350>
 800d40a:	f8da 3000 	ldr.w	r3, [sl]
 800d40e:	ea4b 0b03 	orr.w	fp, fp, r3
 800d412:	f01b 0f01 	tst.w	fp, #1
 800d416:	d10f      	bne.n	800d438 <__gethex+0x370>
 800d418:	f048 0810 	orr.w	r8, r8, #16
 800d41c:	e036      	b.n	800d48c <__gethex+0x3c4>
 800d41e:	f04f 0b01 	mov.w	fp, #1
 800d422:	e7d0      	b.n	800d3c6 <__gethex+0x2fe>
 800d424:	f04f 0801 	mov.w	r8, #1
 800d428:	e7e2      	b.n	800d3f0 <__gethex+0x328>
 800d42a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d42c:	f1c3 0301 	rsb	r3, r3, #1
 800d430:	930f      	str	r3, [sp, #60]	; 0x3c
 800d432:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d434:	2b00      	cmp	r3, #0
 800d436:	d0ef      	beq.n	800d418 <__gethex+0x350>
 800d438:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d43c:	f104 0214 	add.w	r2, r4, #20
 800d440:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d444:	9301      	str	r3, [sp, #4]
 800d446:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d44a:	2300      	movs	r3, #0
 800d44c:	4694      	mov	ip, r2
 800d44e:	f852 1b04 	ldr.w	r1, [r2], #4
 800d452:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d456:	d01e      	beq.n	800d496 <__gethex+0x3ce>
 800d458:	3101      	adds	r1, #1
 800d45a:	f8cc 1000 	str.w	r1, [ip]
 800d45e:	f1b8 0f02 	cmp.w	r8, #2
 800d462:	f104 0214 	add.w	r2, r4, #20
 800d466:	d13d      	bne.n	800d4e4 <__gethex+0x41c>
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	3b01      	subs	r3, #1
 800d46c:	42ab      	cmp	r3, r5
 800d46e:	d10b      	bne.n	800d488 <__gethex+0x3c0>
 800d470:	1169      	asrs	r1, r5, #5
 800d472:	2301      	movs	r3, #1
 800d474:	f005 051f 	and.w	r5, r5, #31
 800d478:	fa03 f505 	lsl.w	r5, r3, r5
 800d47c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d480:	421d      	tst	r5, r3
 800d482:	bf18      	it	ne
 800d484:	f04f 0801 	movne.w	r8, #1
 800d488:	f048 0820 	orr.w	r8, r8, #32
 800d48c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d48e:	601c      	str	r4, [r3, #0]
 800d490:	9b02      	ldr	r3, [sp, #8]
 800d492:	601e      	str	r6, [r3, #0]
 800d494:	e6a2      	b.n	800d1dc <__gethex+0x114>
 800d496:	4290      	cmp	r0, r2
 800d498:	f842 3c04 	str.w	r3, [r2, #-4]
 800d49c:	d8d6      	bhi.n	800d44c <__gethex+0x384>
 800d49e:	68a2      	ldr	r2, [r4, #8]
 800d4a0:	4593      	cmp	fp, r2
 800d4a2:	db17      	blt.n	800d4d4 <__gethex+0x40c>
 800d4a4:	6861      	ldr	r1, [r4, #4]
 800d4a6:	4648      	mov	r0, r9
 800d4a8:	3101      	adds	r1, #1
 800d4aa:	f7fd fc3f 	bl	800ad2c <_Balloc>
 800d4ae:	4682      	mov	sl, r0
 800d4b0:	b918      	cbnz	r0, 800d4ba <__gethex+0x3f2>
 800d4b2:	4b1b      	ldr	r3, [pc, #108]	; (800d520 <__gethex+0x458>)
 800d4b4:	4602      	mov	r2, r0
 800d4b6:	2184      	movs	r1, #132	; 0x84
 800d4b8:	e6b3      	b.n	800d222 <__gethex+0x15a>
 800d4ba:	6922      	ldr	r2, [r4, #16]
 800d4bc:	3202      	adds	r2, #2
 800d4be:	f104 010c 	add.w	r1, r4, #12
 800d4c2:	0092      	lsls	r2, r2, #2
 800d4c4:	300c      	adds	r0, #12
 800d4c6:	f7ff fd4b 	bl	800cf60 <memcpy>
 800d4ca:	4621      	mov	r1, r4
 800d4cc:	4648      	mov	r0, r9
 800d4ce:	f7fd fc6d 	bl	800adac <_Bfree>
 800d4d2:	4654      	mov	r4, sl
 800d4d4:	6922      	ldr	r2, [r4, #16]
 800d4d6:	1c51      	adds	r1, r2, #1
 800d4d8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d4dc:	6121      	str	r1, [r4, #16]
 800d4de:	2101      	movs	r1, #1
 800d4e0:	6151      	str	r1, [r2, #20]
 800d4e2:	e7bc      	b.n	800d45e <__gethex+0x396>
 800d4e4:	6921      	ldr	r1, [r4, #16]
 800d4e6:	4559      	cmp	r1, fp
 800d4e8:	dd0b      	ble.n	800d502 <__gethex+0x43a>
 800d4ea:	2101      	movs	r1, #1
 800d4ec:	4620      	mov	r0, r4
 800d4ee:	f7ff fd83 	bl	800cff8 <rshift>
 800d4f2:	68bb      	ldr	r3, [r7, #8]
 800d4f4:	3601      	adds	r6, #1
 800d4f6:	42b3      	cmp	r3, r6
 800d4f8:	f6ff aedb 	blt.w	800d2b2 <__gethex+0x1ea>
 800d4fc:	f04f 0801 	mov.w	r8, #1
 800d500:	e7c2      	b.n	800d488 <__gethex+0x3c0>
 800d502:	f015 051f 	ands.w	r5, r5, #31
 800d506:	d0f9      	beq.n	800d4fc <__gethex+0x434>
 800d508:	9b01      	ldr	r3, [sp, #4]
 800d50a:	441a      	add	r2, r3
 800d50c:	f1c5 0520 	rsb	r5, r5, #32
 800d510:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d514:	f7fd fcfc 	bl	800af10 <__hi0bits>
 800d518:	42a8      	cmp	r0, r5
 800d51a:	dbe6      	blt.n	800d4ea <__gethex+0x422>
 800d51c:	e7ee      	b.n	800d4fc <__gethex+0x434>
 800d51e:	bf00      	nop
 800d520:	0800def7 	.word	0x0800def7

0800d524 <L_shift>:
 800d524:	f1c2 0208 	rsb	r2, r2, #8
 800d528:	0092      	lsls	r2, r2, #2
 800d52a:	b570      	push	{r4, r5, r6, lr}
 800d52c:	f1c2 0620 	rsb	r6, r2, #32
 800d530:	6843      	ldr	r3, [r0, #4]
 800d532:	6804      	ldr	r4, [r0, #0]
 800d534:	fa03 f506 	lsl.w	r5, r3, r6
 800d538:	432c      	orrs	r4, r5
 800d53a:	40d3      	lsrs	r3, r2
 800d53c:	6004      	str	r4, [r0, #0]
 800d53e:	f840 3f04 	str.w	r3, [r0, #4]!
 800d542:	4288      	cmp	r0, r1
 800d544:	d3f4      	bcc.n	800d530 <L_shift+0xc>
 800d546:	bd70      	pop	{r4, r5, r6, pc}

0800d548 <__match>:
 800d548:	b530      	push	{r4, r5, lr}
 800d54a:	6803      	ldr	r3, [r0, #0]
 800d54c:	3301      	adds	r3, #1
 800d54e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d552:	b914      	cbnz	r4, 800d55a <__match+0x12>
 800d554:	6003      	str	r3, [r0, #0]
 800d556:	2001      	movs	r0, #1
 800d558:	bd30      	pop	{r4, r5, pc}
 800d55a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d55e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d562:	2d19      	cmp	r5, #25
 800d564:	bf98      	it	ls
 800d566:	3220      	addls	r2, #32
 800d568:	42a2      	cmp	r2, r4
 800d56a:	d0f0      	beq.n	800d54e <__match+0x6>
 800d56c:	2000      	movs	r0, #0
 800d56e:	e7f3      	b.n	800d558 <__match+0x10>

0800d570 <__hexnan>:
 800d570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d574:	680b      	ldr	r3, [r1, #0]
 800d576:	6801      	ldr	r1, [r0, #0]
 800d578:	115e      	asrs	r6, r3, #5
 800d57a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d57e:	f013 031f 	ands.w	r3, r3, #31
 800d582:	b087      	sub	sp, #28
 800d584:	bf18      	it	ne
 800d586:	3604      	addne	r6, #4
 800d588:	2500      	movs	r5, #0
 800d58a:	1f37      	subs	r7, r6, #4
 800d58c:	4682      	mov	sl, r0
 800d58e:	4690      	mov	r8, r2
 800d590:	9301      	str	r3, [sp, #4]
 800d592:	f846 5c04 	str.w	r5, [r6, #-4]
 800d596:	46b9      	mov	r9, r7
 800d598:	463c      	mov	r4, r7
 800d59a:	9502      	str	r5, [sp, #8]
 800d59c:	46ab      	mov	fp, r5
 800d59e:	784a      	ldrb	r2, [r1, #1]
 800d5a0:	1c4b      	adds	r3, r1, #1
 800d5a2:	9303      	str	r3, [sp, #12]
 800d5a4:	b342      	cbz	r2, 800d5f8 <__hexnan+0x88>
 800d5a6:	4610      	mov	r0, r2
 800d5a8:	9105      	str	r1, [sp, #20]
 800d5aa:	9204      	str	r2, [sp, #16]
 800d5ac:	f7ff fd76 	bl	800d09c <__hexdig_fun>
 800d5b0:	2800      	cmp	r0, #0
 800d5b2:	d14f      	bne.n	800d654 <__hexnan+0xe4>
 800d5b4:	9a04      	ldr	r2, [sp, #16]
 800d5b6:	9905      	ldr	r1, [sp, #20]
 800d5b8:	2a20      	cmp	r2, #32
 800d5ba:	d818      	bhi.n	800d5ee <__hexnan+0x7e>
 800d5bc:	9b02      	ldr	r3, [sp, #8]
 800d5be:	459b      	cmp	fp, r3
 800d5c0:	dd13      	ble.n	800d5ea <__hexnan+0x7a>
 800d5c2:	454c      	cmp	r4, r9
 800d5c4:	d206      	bcs.n	800d5d4 <__hexnan+0x64>
 800d5c6:	2d07      	cmp	r5, #7
 800d5c8:	dc04      	bgt.n	800d5d4 <__hexnan+0x64>
 800d5ca:	462a      	mov	r2, r5
 800d5cc:	4649      	mov	r1, r9
 800d5ce:	4620      	mov	r0, r4
 800d5d0:	f7ff ffa8 	bl	800d524 <L_shift>
 800d5d4:	4544      	cmp	r4, r8
 800d5d6:	d950      	bls.n	800d67a <__hexnan+0x10a>
 800d5d8:	2300      	movs	r3, #0
 800d5da:	f1a4 0904 	sub.w	r9, r4, #4
 800d5de:	f844 3c04 	str.w	r3, [r4, #-4]
 800d5e2:	f8cd b008 	str.w	fp, [sp, #8]
 800d5e6:	464c      	mov	r4, r9
 800d5e8:	461d      	mov	r5, r3
 800d5ea:	9903      	ldr	r1, [sp, #12]
 800d5ec:	e7d7      	b.n	800d59e <__hexnan+0x2e>
 800d5ee:	2a29      	cmp	r2, #41	; 0x29
 800d5f0:	d155      	bne.n	800d69e <__hexnan+0x12e>
 800d5f2:	3102      	adds	r1, #2
 800d5f4:	f8ca 1000 	str.w	r1, [sl]
 800d5f8:	f1bb 0f00 	cmp.w	fp, #0
 800d5fc:	d04f      	beq.n	800d69e <__hexnan+0x12e>
 800d5fe:	454c      	cmp	r4, r9
 800d600:	d206      	bcs.n	800d610 <__hexnan+0xa0>
 800d602:	2d07      	cmp	r5, #7
 800d604:	dc04      	bgt.n	800d610 <__hexnan+0xa0>
 800d606:	462a      	mov	r2, r5
 800d608:	4649      	mov	r1, r9
 800d60a:	4620      	mov	r0, r4
 800d60c:	f7ff ff8a 	bl	800d524 <L_shift>
 800d610:	4544      	cmp	r4, r8
 800d612:	d934      	bls.n	800d67e <__hexnan+0x10e>
 800d614:	f1a8 0204 	sub.w	r2, r8, #4
 800d618:	4623      	mov	r3, r4
 800d61a:	f853 1b04 	ldr.w	r1, [r3], #4
 800d61e:	f842 1f04 	str.w	r1, [r2, #4]!
 800d622:	429f      	cmp	r7, r3
 800d624:	d2f9      	bcs.n	800d61a <__hexnan+0xaa>
 800d626:	1b3b      	subs	r3, r7, r4
 800d628:	f023 0303 	bic.w	r3, r3, #3
 800d62c:	3304      	adds	r3, #4
 800d62e:	3e03      	subs	r6, #3
 800d630:	3401      	adds	r4, #1
 800d632:	42a6      	cmp	r6, r4
 800d634:	bf38      	it	cc
 800d636:	2304      	movcc	r3, #4
 800d638:	4443      	add	r3, r8
 800d63a:	2200      	movs	r2, #0
 800d63c:	f843 2b04 	str.w	r2, [r3], #4
 800d640:	429f      	cmp	r7, r3
 800d642:	d2fb      	bcs.n	800d63c <__hexnan+0xcc>
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	b91b      	cbnz	r3, 800d650 <__hexnan+0xe0>
 800d648:	4547      	cmp	r7, r8
 800d64a:	d126      	bne.n	800d69a <__hexnan+0x12a>
 800d64c:	2301      	movs	r3, #1
 800d64e:	603b      	str	r3, [r7, #0]
 800d650:	2005      	movs	r0, #5
 800d652:	e025      	b.n	800d6a0 <__hexnan+0x130>
 800d654:	3501      	adds	r5, #1
 800d656:	2d08      	cmp	r5, #8
 800d658:	f10b 0b01 	add.w	fp, fp, #1
 800d65c:	dd06      	ble.n	800d66c <__hexnan+0xfc>
 800d65e:	4544      	cmp	r4, r8
 800d660:	d9c3      	bls.n	800d5ea <__hexnan+0x7a>
 800d662:	2300      	movs	r3, #0
 800d664:	f844 3c04 	str.w	r3, [r4, #-4]
 800d668:	2501      	movs	r5, #1
 800d66a:	3c04      	subs	r4, #4
 800d66c:	6822      	ldr	r2, [r4, #0]
 800d66e:	f000 000f 	and.w	r0, r0, #15
 800d672:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d676:	6020      	str	r0, [r4, #0]
 800d678:	e7b7      	b.n	800d5ea <__hexnan+0x7a>
 800d67a:	2508      	movs	r5, #8
 800d67c:	e7b5      	b.n	800d5ea <__hexnan+0x7a>
 800d67e:	9b01      	ldr	r3, [sp, #4]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d0df      	beq.n	800d644 <__hexnan+0xd4>
 800d684:	f1c3 0320 	rsb	r3, r3, #32
 800d688:	f04f 32ff 	mov.w	r2, #4294967295
 800d68c:	40da      	lsrs	r2, r3
 800d68e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d692:	4013      	ands	r3, r2
 800d694:	f846 3c04 	str.w	r3, [r6, #-4]
 800d698:	e7d4      	b.n	800d644 <__hexnan+0xd4>
 800d69a:	3f04      	subs	r7, #4
 800d69c:	e7d2      	b.n	800d644 <__hexnan+0xd4>
 800d69e:	2004      	movs	r0, #4
 800d6a0:	b007      	add	sp, #28
 800d6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d6a6 <__ascii_mbtowc>:
 800d6a6:	b082      	sub	sp, #8
 800d6a8:	b901      	cbnz	r1, 800d6ac <__ascii_mbtowc+0x6>
 800d6aa:	a901      	add	r1, sp, #4
 800d6ac:	b142      	cbz	r2, 800d6c0 <__ascii_mbtowc+0x1a>
 800d6ae:	b14b      	cbz	r3, 800d6c4 <__ascii_mbtowc+0x1e>
 800d6b0:	7813      	ldrb	r3, [r2, #0]
 800d6b2:	600b      	str	r3, [r1, #0]
 800d6b4:	7812      	ldrb	r2, [r2, #0]
 800d6b6:	1e10      	subs	r0, r2, #0
 800d6b8:	bf18      	it	ne
 800d6ba:	2001      	movne	r0, #1
 800d6bc:	b002      	add	sp, #8
 800d6be:	4770      	bx	lr
 800d6c0:	4610      	mov	r0, r2
 800d6c2:	e7fb      	b.n	800d6bc <__ascii_mbtowc+0x16>
 800d6c4:	f06f 0001 	mvn.w	r0, #1
 800d6c8:	e7f8      	b.n	800d6bc <__ascii_mbtowc+0x16>

0800d6ca <_realloc_r>:
 800d6ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6ce:	4680      	mov	r8, r0
 800d6d0:	4614      	mov	r4, r2
 800d6d2:	460e      	mov	r6, r1
 800d6d4:	b921      	cbnz	r1, 800d6e0 <_realloc_r+0x16>
 800d6d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d6da:	4611      	mov	r1, r2
 800d6dc:	f7fd ba9a 	b.w	800ac14 <_malloc_r>
 800d6e0:	b92a      	cbnz	r2, 800d6ee <_realloc_r+0x24>
 800d6e2:	f7fd fa23 	bl	800ab2c <_free_r>
 800d6e6:	4625      	mov	r5, r4
 800d6e8:	4628      	mov	r0, r5
 800d6ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6ee:	f000 f8b6 	bl	800d85e <_malloc_usable_size_r>
 800d6f2:	4284      	cmp	r4, r0
 800d6f4:	4607      	mov	r7, r0
 800d6f6:	d802      	bhi.n	800d6fe <_realloc_r+0x34>
 800d6f8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d6fc:	d812      	bhi.n	800d724 <_realloc_r+0x5a>
 800d6fe:	4621      	mov	r1, r4
 800d700:	4640      	mov	r0, r8
 800d702:	f7fd fa87 	bl	800ac14 <_malloc_r>
 800d706:	4605      	mov	r5, r0
 800d708:	2800      	cmp	r0, #0
 800d70a:	d0ed      	beq.n	800d6e8 <_realloc_r+0x1e>
 800d70c:	42bc      	cmp	r4, r7
 800d70e:	4622      	mov	r2, r4
 800d710:	4631      	mov	r1, r6
 800d712:	bf28      	it	cs
 800d714:	463a      	movcs	r2, r7
 800d716:	f7ff fc23 	bl	800cf60 <memcpy>
 800d71a:	4631      	mov	r1, r6
 800d71c:	4640      	mov	r0, r8
 800d71e:	f7fd fa05 	bl	800ab2c <_free_r>
 800d722:	e7e1      	b.n	800d6e8 <_realloc_r+0x1e>
 800d724:	4635      	mov	r5, r6
 800d726:	e7df      	b.n	800d6e8 <_realloc_r+0x1e>

0800d728 <_strtoul_l.constprop.0>:
 800d728:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d72c:	4f36      	ldr	r7, [pc, #216]	; (800d808 <_strtoul_l.constprop.0+0xe0>)
 800d72e:	4686      	mov	lr, r0
 800d730:	460d      	mov	r5, r1
 800d732:	4628      	mov	r0, r5
 800d734:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d738:	5d3e      	ldrb	r6, [r7, r4]
 800d73a:	f016 0608 	ands.w	r6, r6, #8
 800d73e:	d1f8      	bne.n	800d732 <_strtoul_l.constprop.0+0xa>
 800d740:	2c2d      	cmp	r4, #45	; 0x2d
 800d742:	d130      	bne.n	800d7a6 <_strtoul_l.constprop.0+0x7e>
 800d744:	782c      	ldrb	r4, [r5, #0]
 800d746:	2601      	movs	r6, #1
 800d748:	1c85      	adds	r5, r0, #2
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d057      	beq.n	800d7fe <_strtoul_l.constprop.0+0xd6>
 800d74e:	2b10      	cmp	r3, #16
 800d750:	d109      	bne.n	800d766 <_strtoul_l.constprop.0+0x3e>
 800d752:	2c30      	cmp	r4, #48	; 0x30
 800d754:	d107      	bne.n	800d766 <_strtoul_l.constprop.0+0x3e>
 800d756:	7828      	ldrb	r0, [r5, #0]
 800d758:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d75c:	2858      	cmp	r0, #88	; 0x58
 800d75e:	d149      	bne.n	800d7f4 <_strtoul_l.constprop.0+0xcc>
 800d760:	786c      	ldrb	r4, [r5, #1]
 800d762:	2310      	movs	r3, #16
 800d764:	3502      	adds	r5, #2
 800d766:	f04f 38ff 	mov.w	r8, #4294967295
 800d76a:	2700      	movs	r7, #0
 800d76c:	fbb8 f8f3 	udiv	r8, r8, r3
 800d770:	fb03 f908 	mul.w	r9, r3, r8
 800d774:	ea6f 0909 	mvn.w	r9, r9
 800d778:	4638      	mov	r0, r7
 800d77a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d77e:	f1bc 0f09 	cmp.w	ip, #9
 800d782:	d815      	bhi.n	800d7b0 <_strtoul_l.constprop.0+0x88>
 800d784:	4664      	mov	r4, ip
 800d786:	42a3      	cmp	r3, r4
 800d788:	dd23      	ble.n	800d7d2 <_strtoul_l.constprop.0+0xaa>
 800d78a:	f1b7 3fff 	cmp.w	r7, #4294967295
 800d78e:	d007      	beq.n	800d7a0 <_strtoul_l.constprop.0+0x78>
 800d790:	4580      	cmp	r8, r0
 800d792:	d31b      	bcc.n	800d7cc <_strtoul_l.constprop.0+0xa4>
 800d794:	d101      	bne.n	800d79a <_strtoul_l.constprop.0+0x72>
 800d796:	45a1      	cmp	r9, r4
 800d798:	db18      	blt.n	800d7cc <_strtoul_l.constprop.0+0xa4>
 800d79a:	fb00 4003 	mla	r0, r0, r3, r4
 800d79e:	2701      	movs	r7, #1
 800d7a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d7a4:	e7e9      	b.n	800d77a <_strtoul_l.constprop.0+0x52>
 800d7a6:	2c2b      	cmp	r4, #43	; 0x2b
 800d7a8:	bf04      	itt	eq
 800d7aa:	782c      	ldrbeq	r4, [r5, #0]
 800d7ac:	1c85      	addeq	r5, r0, #2
 800d7ae:	e7cc      	b.n	800d74a <_strtoul_l.constprop.0+0x22>
 800d7b0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d7b4:	f1bc 0f19 	cmp.w	ip, #25
 800d7b8:	d801      	bhi.n	800d7be <_strtoul_l.constprop.0+0x96>
 800d7ba:	3c37      	subs	r4, #55	; 0x37
 800d7bc:	e7e3      	b.n	800d786 <_strtoul_l.constprop.0+0x5e>
 800d7be:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d7c2:	f1bc 0f19 	cmp.w	ip, #25
 800d7c6:	d804      	bhi.n	800d7d2 <_strtoul_l.constprop.0+0xaa>
 800d7c8:	3c57      	subs	r4, #87	; 0x57
 800d7ca:	e7dc      	b.n	800d786 <_strtoul_l.constprop.0+0x5e>
 800d7cc:	f04f 37ff 	mov.w	r7, #4294967295
 800d7d0:	e7e6      	b.n	800d7a0 <_strtoul_l.constprop.0+0x78>
 800d7d2:	1c7b      	adds	r3, r7, #1
 800d7d4:	d106      	bne.n	800d7e4 <_strtoul_l.constprop.0+0xbc>
 800d7d6:	2322      	movs	r3, #34	; 0x22
 800d7d8:	f8ce 3000 	str.w	r3, [lr]
 800d7dc:	4638      	mov	r0, r7
 800d7de:	b932      	cbnz	r2, 800d7ee <_strtoul_l.constprop.0+0xc6>
 800d7e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7e4:	b106      	cbz	r6, 800d7e8 <_strtoul_l.constprop.0+0xc0>
 800d7e6:	4240      	negs	r0, r0
 800d7e8:	2a00      	cmp	r2, #0
 800d7ea:	d0f9      	beq.n	800d7e0 <_strtoul_l.constprop.0+0xb8>
 800d7ec:	b107      	cbz	r7, 800d7f0 <_strtoul_l.constprop.0+0xc8>
 800d7ee:	1e69      	subs	r1, r5, #1
 800d7f0:	6011      	str	r1, [r2, #0]
 800d7f2:	e7f5      	b.n	800d7e0 <_strtoul_l.constprop.0+0xb8>
 800d7f4:	2430      	movs	r4, #48	; 0x30
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d1b5      	bne.n	800d766 <_strtoul_l.constprop.0+0x3e>
 800d7fa:	2308      	movs	r3, #8
 800d7fc:	e7b3      	b.n	800d766 <_strtoul_l.constprop.0+0x3e>
 800d7fe:	2c30      	cmp	r4, #48	; 0x30
 800d800:	d0a9      	beq.n	800d756 <_strtoul_l.constprop.0+0x2e>
 800d802:	230a      	movs	r3, #10
 800d804:	e7af      	b.n	800d766 <_strtoul_l.constprop.0+0x3e>
 800d806:	bf00      	nop
 800d808:	0800e0b9 	.word	0x0800e0b9

0800d80c <_strtoul_r>:
 800d80c:	f7ff bf8c 	b.w	800d728 <_strtoul_l.constprop.0>

0800d810 <__ascii_wctomb>:
 800d810:	b149      	cbz	r1, 800d826 <__ascii_wctomb+0x16>
 800d812:	2aff      	cmp	r2, #255	; 0xff
 800d814:	bf85      	ittet	hi
 800d816:	238a      	movhi	r3, #138	; 0x8a
 800d818:	6003      	strhi	r3, [r0, #0]
 800d81a:	700a      	strbls	r2, [r1, #0]
 800d81c:	f04f 30ff 	movhi.w	r0, #4294967295
 800d820:	bf98      	it	ls
 800d822:	2001      	movls	r0, #1
 800d824:	4770      	bx	lr
 800d826:	4608      	mov	r0, r1
 800d828:	4770      	bx	lr
	...

0800d82c <fiprintf>:
 800d82c:	b40e      	push	{r1, r2, r3}
 800d82e:	b503      	push	{r0, r1, lr}
 800d830:	4601      	mov	r1, r0
 800d832:	ab03      	add	r3, sp, #12
 800d834:	4805      	ldr	r0, [pc, #20]	; (800d84c <fiprintf+0x20>)
 800d836:	f853 2b04 	ldr.w	r2, [r3], #4
 800d83a:	6800      	ldr	r0, [r0, #0]
 800d83c:	9301      	str	r3, [sp, #4]
 800d83e:	f000 f83f 	bl	800d8c0 <_vfiprintf_r>
 800d842:	b002      	add	sp, #8
 800d844:	f85d eb04 	ldr.w	lr, [sp], #4
 800d848:	b003      	add	sp, #12
 800d84a:	4770      	bx	lr
 800d84c:	2000006c 	.word	0x2000006c

0800d850 <abort>:
 800d850:	b508      	push	{r3, lr}
 800d852:	2006      	movs	r0, #6
 800d854:	f000 fa0c 	bl	800dc70 <raise>
 800d858:	2001      	movs	r0, #1
 800d85a:	f7f4 ff77 	bl	800274c <_exit>

0800d85e <_malloc_usable_size_r>:
 800d85e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d862:	1f18      	subs	r0, r3, #4
 800d864:	2b00      	cmp	r3, #0
 800d866:	bfbc      	itt	lt
 800d868:	580b      	ldrlt	r3, [r1, r0]
 800d86a:	18c0      	addlt	r0, r0, r3
 800d86c:	4770      	bx	lr

0800d86e <__sfputc_r>:
 800d86e:	6893      	ldr	r3, [r2, #8]
 800d870:	3b01      	subs	r3, #1
 800d872:	2b00      	cmp	r3, #0
 800d874:	b410      	push	{r4}
 800d876:	6093      	str	r3, [r2, #8]
 800d878:	da08      	bge.n	800d88c <__sfputc_r+0x1e>
 800d87a:	6994      	ldr	r4, [r2, #24]
 800d87c:	42a3      	cmp	r3, r4
 800d87e:	db01      	blt.n	800d884 <__sfputc_r+0x16>
 800d880:	290a      	cmp	r1, #10
 800d882:	d103      	bne.n	800d88c <__sfputc_r+0x1e>
 800d884:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d888:	f000 b934 	b.w	800daf4 <__swbuf_r>
 800d88c:	6813      	ldr	r3, [r2, #0]
 800d88e:	1c58      	adds	r0, r3, #1
 800d890:	6010      	str	r0, [r2, #0]
 800d892:	7019      	strb	r1, [r3, #0]
 800d894:	4608      	mov	r0, r1
 800d896:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d89a:	4770      	bx	lr

0800d89c <__sfputs_r>:
 800d89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d89e:	4606      	mov	r6, r0
 800d8a0:	460f      	mov	r7, r1
 800d8a2:	4614      	mov	r4, r2
 800d8a4:	18d5      	adds	r5, r2, r3
 800d8a6:	42ac      	cmp	r4, r5
 800d8a8:	d101      	bne.n	800d8ae <__sfputs_r+0x12>
 800d8aa:	2000      	movs	r0, #0
 800d8ac:	e007      	b.n	800d8be <__sfputs_r+0x22>
 800d8ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8b2:	463a      	mov	r2, r7
 800d8b4:	4630      	mov	r0, r6
 800d8b6:	f7ff ffda 	bl	800d86e <__sfputc_r>
 800d8ba:	1c43      	adds	r3, r0, #1
 800d8bc:	d1f3      	bne.n	800d8a6 <__sfputs_r+0xa>
 800d8be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d8c0 <_vfiprintf_r>:
 800d8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8c4:	460d      	mov	r5, r1
 800d8c6:	b09d      	sub	sp, #116	; 0x74
 800d8c8:	4614      	mov	r4, r2
 800d8ca:	4698      	mov	r8, r3
 800d8cc:	4606      	mov	r6, r0
 800d8ce:	b118      	cbz	r0, 800d8d8 <_vfiprintf_r+0x18>
 800d8d0:	6a03      	ldr	r3, [r0, #32]
 800d8d2:	b90b      	cbnz	r3, 800d8d8 <_vfiprintf_r+0x18>
 800d8d4:	f7fc f962 	bl	8009b9c <__sinit>
 800d8d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d8da:	07d9      	lsls	r1, r3, #31
 800d8dc:	d405      	bmi.n	800d8ea <_vfiprintf_r+0x2a>
 800d8de:	89ab      	ldrh	r3, [r5, #12]
 800d8e0:	059a      	lsls	r2, r3, #22
 800d8e2:	d402      	bmi.n	800d8ea <_vfiprintf_r+0x2a>
 800d8e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d8e6:	f7fc fa9e 	bl	8009e26 <__retarget_lock_acquire_recursive>
 800d8ea:	89ab      	ldrh	r3, [r5, #12]
 800d8ec:	071b      	lsls	r3, r3, #28
 800d8ee:	d501      	bpl.n	800d8f4 <_vfiprintf_r+0x34>
 800d8f0:	692b      	ldr	r3, [r5, #16]
 800d8f2:	b99b      	cbnz	r3, 800d91c <_vfiprintf_r+0x5c>
 800d8f4:	4629      	mov	r1, r5
 800d8f6:	4630      	mov	r0, r6
 800d8f8:	f000 f93a 	bl	800db70 <__swsetup_r>
 800d8fc:	b170      	cbz	r0, 800d91c <_vfiprintf_r+0x5c>
 800d8fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d900:	07dc      	lsls	r4, r3, #31
 800d902:	d504      	bpl.n	800d90e <_vfiprintf_r+0x4e>
 800d904:	f04f 30ff 	mov.w	r0, #4294967295
 800d908:	b01d      	add	sp, #116	; 0x74
 800d90a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d90e:	89ab      	ldrh	r3, [r5, #12]
 800d910:	0598      	lsls	r0, r3, #22
 800d912:	d4f7      	bmi.n	800d904 <_vfiprintf_r+0x44>
 800d914:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d916:	f7fc fa87 	bl	8009e28 <__retarget_lock_release_recursive>
 800d91a:	e7f3      	b.n	800d904 <_vfiprintf_r+0x44>
 800d91c:	2300      	movs	r3, #0
 800d91e:	9309      	str	r3, [sp, #36]	; 0x24
 800d920:	2320      	movs	r3, #32
 800d922:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d926:	f8cd 800c 	str.w	r8, [sp, #12]
 800d92a:	2330      	movs	r3, #48	; 0x30
 800d92c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800dae0 <_vfiprintf_r+0x220>
 800d930:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d934:	f04f 0901 	mov.w	r9, #1
 800d938:	4623      	mov	r3, r4
 800d93a:	469a      	mov	sl, r3
 800d93c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d940:	b10a      	cbz	r2, 800d946 <_vfiprintf_r+0x86>
 800d942:	2a25      	cmp	r2, #37	; 0x25
 800d944:	d1f9      	bne.n	800d93a <_vfiprintf_r+0x7a>
 800d946:	ebba 0b04 	subs.w	fp, sl, r4
 800d94a:	d00b      	beq.n	800d964 <_vfiprintf_r+0xa4>
 800d94c:	465b      	mov	r3, fp
 800d94e:	4622      	mov	r2, r4
 800d950:	4629      	mov	r1, r5
 800d952:	4630      	mov	r0, r6
 800d954:	f7ff ffa2 	bl	800d89c <__sfputs_r>
 800d958:	3001      	adds	r0, #1
 800d95a:	f000 80a9 	beq.w	800dab0 <_vfiprintf_r+0x1f0>
 800d95e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d960:	445a      	add	r2, fp
 800d962:	9209      	str	r2, [sp, #36]	; 0x24
 800d964:	f89a 3000 	ldrb.w	r3, [sl]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	f000 80a1 	beq.w	800dab0 <_vfiprintf_r+0x1f0>
 800d96e:	2300      	movs	r3, #0
 800d970:	f04f 32ff 	mov.w	r2, #4294967295
 800d974:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d978:	f10a 0a01 	add.w	sl, sl, #1
 800d97c:	9304      	str	r3, [sp, #16]
 800d97e:	9307      	str	r3, [sp, #28]
 800d980:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d984:	931a      	str	r3, [sp, #104]	; 0x68
 800d986:	4654      	mov	r4, sl
 800d988:	2205      	movs	r2, #5
 800d98a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d98e:	4854      	ldr	r0, [pc, #336]	; (800dae0 <_vfiprintf_r+0x220>)
 800d990:	f7f2 fc3e 	bl	8000210 <memchr>
 800d994:	9a04      	ldr	r2, [sp, #16]
 800d996:	b9d8      	cbnz	r0, 800d9d0 <_vfiprintf_r+0x110>
 800d998:	06d1      	lsls	r1, r2, #27
 800d99a:	bf44      	itt	mi
 800d99c:	2320      	movmi	r3, #32
 800d99e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9a2:	0713      	lsls	r3, r2, #28
 800d9a4:	bf44      	itt	mi
 800d9a6:	232b      	movmi	r3, #43	; 0x2b
 800d9a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9ac:	f89a 3000 	ldrb.w	r3, [sl]
 800d9b0:	2b2a      	cmp	r3, #42	; 0x2a
 800d9b2:	d015      	beq.n	800d9e0 <_vfiprintf_r+0x120>
 800d9b4:	9a07      	ldr	r2, [sp, #28]
 800d9b6:	4654      	mov	r4, sl
 800d9b8:	2000      	movs	r0, #0
 800d9ba:	f04f 0c0a 	mov.w	ip, #10
 800d9be:	4621      	mov	r1, r4
 800d9c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d9c4:	3b30      	subs	r3, #48	; 0x30
 800d9c6:	2b09      	cmp	r3, #9
 800d9c8:	d94d      	bls.n	800da66 <_vfiprintf_r+0x1a6>
 800d9ca:	b1b0      	cbz	r0, 800d9fa <_vfiprintf_r+0x13a>
 800d9cc:	9207      	str	r2, [sp, #28]
 800d9ce:	e014      	b.n	800d9fa <_vfiprintf_r+0x13a>
 800d9d0:	eba0 0308 	sub.w	r3, r0, r8
 800d9d4:	fa09 f303 	lsl.w	r3, r9, r3
 800d9d8:	4313      	orrs	r3, r2
 800d9da:	9304      	str	r3, [sp, #16]
 800d9dc:	46a2      	mov	sl, r4
 800d9de:	e7d2      	b.n	800d986 <_vfiprintf_r+0xc6>
 800d9e0:	9b03      	ldr	r3, [sp, #12]
 800d9e2:	1d19      	adds	r1, r3, #4
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	9103      	str	r1, [sp, #12]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	bfbb      	ittet	lt
 800d9ec:	425b      	neglt	r3, r3
 800d9ee:	f042 0202 	orrlt.w	r2, r2, #2
 800d9f2:	9307      	strge	r3, [sp, #28]
 800d9f4:	9307      	strlt	r3, [sp, #28]
 800d9f6:	bfb8      	it	lt
 800d9f8:	9204      	strlt	r2, [sp, #16]
 800d9fa:	7823      	ldrb	r3, [r4, #0]
 800d9fc:	2b2e      	cmp	r3, #46	; 0x2e
 800d9fe:	d10c      	bne.n	800da1a <_vfiprintf_r+0x15a>
 800da00:	7863      	ldrb	r3, [r4, #1]
 800da02:	2b2a      	cmp	r3, #42	; 0x2a
 800da04:	d134      	bne.n	800da70 <_vfiprintf_r+0x1b0>
 800da06:	9b03      	ldr	r3, [sp, #12]
 800da08:	1d1a      	adds	r2, r3, #4
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	9203      	str	r2, [sp, #12]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	bfb8      	it	lt
 800da12:	f04f 33ff 	movlt.w	r3, #4294967295
 800da16:	3402      	adds	r4, #2
 800da18:	9305      	str	r3, [sp, #20]
 800da1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800daf0 <_vfiprintf_r+0x230>
 800da1e:	7821      	ldrb	r1, [r4, #0]
 800da20:	2203      	movs	r2, #3
 800da22:	4650      	mov	r0, sl
 800da24:	f7f2 fbf4 	bl	8000210 <memchr>
 800da28:	b138      	cbz	r0, 800da3a <_vfiprintf_r+0x17a>
 800da2a:	9b04      	ldr	r3, [sp, #16]
 800da2c:	eba0 000a 	sub.w	r0, r0, sl
 800da30:	2240      	movs	r2, #64	; 0x40
 800da32:	4082      	lsls	r2, r0
 800da34:	4313      	orrs	r3, r2
 800da36:	3401      	adds	r4, #1
 800da38:	9304      	str	r3, [sp, #16]
 800da3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da3e:	4829      	ldr	r0, [pc, #164]	; (800dae4 <_vfiprintf_r+0x224>)
 800da40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800da44:	2206      	movs	r2, #6
 800da46:	f7f2 fbe3 	bl	8000210 <memchr>
 800da4a:	2800      	cmp	r0, #0
 800da4c:	d03f      	beq.n	800dace <_vfiprintf_r+0x20e>
 800da4e:	4b26      	ldr	r3, [pc, #152]	; (800dae8 <_vfiprintf_r+0x228>)
 800da50:	bb1b      	cbnz	r3, 800da9a <_vfiprintf_r+0x1da>
 800da52:	9b03      	ldr	r3, [sp, #12]
 800da54:	3307      	adds	r3, #7
 800da56:	f023 0307 	bic.w	r3, r3, #7
 800da5a:	3308      	adds	r3, #8
 800da5c:	9303      	str	r3, [sp, #12]
 800da5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da60:	443b      	add	r3, r7
 800da62:	9309      	str	r3, [sp, #36]	; 0x24
 800da64:	e768      	b.n	800d938 <_vfiprintf_r+0x78>
 800da66:	fb0c 3202 	mla	r2, ip, r2, r3
 800da6a:	460c      	mov	r4, r1
 800da6c:	2001      	movs	r0, #1
 800da6e:	e7a6      	b.n	800d9be <_vfiprintf_r+0xfe>
 800da70:	2300      	movs	r3, #0
 800da72:	3401      	adds	r4, #1
 800da74:	9305      	str	r3, [sp, #20]
 800da76:	4619      	mov	r1, r3
 800da78:	f04f 0c0a 	mov.w	ip, #10
 800da7c:	4620      	mov	r0, r4
 800da7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da82:	3a30      	subs	r2, #48	; 0x30
 800da84:	2a09      	cmp	r2, #9
 800da86:	d903      	bls.n	800da90 <_vfiprintf_r+0x1d0>
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d0c6      	beq.n	800da1a <_vfiprintf_r+0x15a>
 800da8c:	9105      	str	r1, [sp, #20]
 800da8e:	e7c4      	b.n	800da1a <_vfiprintf_r+0x15a>
 800da90:	fb0c 2101 	mla	r1, ip, r1, r2
 800da94:	4604      	mov	r4, r0
 800da96:	2301      	movs	r3, #1
 800da98:	e7f0      	b.n	800da7c <_vfiprintf_r+0x1bc>
 800da9a:	ab03      	add	r3, sp, #12
 800da9c:	9300      	str	r3, [sp, #0]
 800da9e:	462a      	mov	r2, r5
 800daa0:	4b12      	ldr	r3, [pc, #72]	; (800daec <_vfiprintf_r+0x22c>)
 800daa2:	a904      	add	r1, sp, #16
 800daa4:	4630      	mov	r0, r6
 800daa6:	f7fb fa17 	bl	8008ed8 <_printf_float>
 800daaa:	4607      	mov	r7, r0
 800daac:	1c78      	adds	r0, r7, #1
 800daae:	d1d6      	bne.n	800da5e <_vfiprintf_r+0x19e>
 800dab0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dab2:	07d9      	lsls	r1, r3, #31
 800dab4:	d405      	bmi.n	800dac2 <_vfiprintf_r+0x202>
 800dab6:	89ab      	ldrh	r3, [r5, #12]
 800dab8:	059a      	lsls	r2, r3, #22
 800daba:	d402      	bmi.n	800dac2 <_vfiprintf_r+0x202>
 800dabc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dabe:	f7fc f9b3 	bl	8009e28 <__retarget_lock_release_recursive>
 800dac2:	89ab      	ldrh	r3, [r5, #12]
 800dac4:	065b      	lsls	r3, r3, #25
 800dac6:	f53f af1d 	bmi.w	800d904 <_vfiprintf_r+0x44>
 800daca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dacc:	e71c      	b.n	800d908 <_vfiprintf_r+0x48>
 800dace:	ab03      	add	r3, sp, #12
 800dad0:	9300      	str	r3, [sp, #0]
 800dad2:	462a      	mov	r2, r5
 800dad4:	4b05      	ldr	r3, [pc, #20]	; (800daec <_vfiprintf_r+0x22c>)
 800dad6:	a904      	add	r1, sp, #16
 800dad8:	4630      	mov	r0, r6
 800dada:	f7fb fca1 	bl	8009420 <_printf_i>
 800dade:	e7e4      	b.n	800daaa <_vfiprintf_r+0x1ea>
 800dae0:	0800e1b9 	.word	0x0800e1b9
 800dae4:	0800e1c3 	.word	0x0800e1c3
 800dae8:	08008ed9 	.word	0x08008ed9
 800daec:	0800d89d 	.word	0x0800d89d
 800daf0:	0800e1bf 	.word	0x0800e1bf

0800daf4 <__swbuf_r>:
 800daf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daf6:	460e      	mov	r6, r1
 800daf8:	4614      	mov	r4, r2
 800dafa:	4605      	mov	r5, r0
 800dafc:	b118      	cbz	r0, 800db06 <__swbuf_r+0x12>
 800dafe:	6a03      	ldr	r3, [r0, #32]
 800db00:	b90b      	cbnz	r3, 800db06 <__swbuf_r+0x12>
 800db02:	f7fc f84b 	bl	8009b9c <__sinit>
 800db06:	69a3      	ldr	r3, [r4, #24]
 800db08:	60a3      	str	r3, [r4, #8]
 800db0a:	89a3      	ldrh	r3, [r4, #12]
 800db0c:	071a      	lsls	r2, r3, #28
 800db0e:	d525      	bpl.n	800db5c <__swbuf_r+0x68>
 800db10:	6923      	ldr	r3, [r4, #16]
 800db12:	b31b      	cbz	r3, 800db5c <__swbuf_r+0x68>
 800db14:	6823      	ldr	r3, [r4, #0]
 800db16:	6922      	ldr	r2, [r4, #16]
 800db18:	1a98      	subs	r0, r3, r2
 800db1a:	6963      	ldr	r3, [r4, #20]
 800db1c:	b2f6      	uxtb	r6, r6
 800db1e:	4283      	cmp	r3, r0
 800db20:	4637      	mov	r7, r6
 800db22:	dc04      	bgt.n	800db2e <__swbuf_r+0x3a>
 800db24:	4621      	mov	r1, r4
 800db26:	4628      	mov	r0, r5
 800db28:	f7ff f942 	bl	800cdb0 <_fflush_r>
 800db2c:	b9e0      	cbnz	r0, 800db68 <__swbuf_r+0x74>
 800db2e:	68a3      	ldr	r3, [r4, #8]
 800db30:	3b01      	subs	r3, #1
 800db32:	60a3      	str	r3, [r4, #8]
 800db34:	6823      	ldr	r3, [r4, #0]
 800db36:	1c5a      	adds	r2, r3, #1
 800db38:	6022      	str	r2, [r4, #0]
 800db3a:	701e      	strb	r6, [r3, #0]
 800db3c:	6962      	ldr	r2, [r4, #20]
 800db3e:	1c43      	adds	r3, r0, #1
 800db40:	429a      	cmp	r2, r3
 800db42:	d004      	beq.n	800db4e <__swbuf_r+0x5a>
 800db44:	89a3      	ldrh	r3, [r4, #12]
 800db46:	07db      	lsls	r3, r3, #31
 800db48:	d506      	bpl.n	800db58 <__swbuf_r+0x64>
 800db4a:	2e0a      	cmp	r6, #10
 800db4c:	d104      	bne.n	800db58 <__swbuf_r+0x64>
 800db4e:	4621      	mov	r1, r4
 800db50:	4628      	mov	r0, r5
 800db52:	f7ff f92d 	bl	800cdb0 <_fflush_r>
 800db56:	b938      	cbnz	r0, 800db68 <__swbuf_r+0x74>
 800db58:	4638      	mov	r0, r7
 800db5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db5c:	4621      	mov	r1, r4
 800db5e:	4628      	mov	r0, r5
 800db60:	f000 f806 	bl	800db70 <__swsetup_r>
 800db64:	2800      	cmp	r0, #0
 800db66:	d0d5      	beq.n	800db14 <__swbuf_r+0x20>
 800db68:	f04f 37ff 	mov.w	r7, #4294967295
 800db6c:	e7f4      	b.n	800db58 <__swbuf_r+0x64>
	...

0800db70 <__swsetup_r>:
 800db70:	b538      	push	{r3, r4, r5, lr}
 800db72:	4b2a      	ldr	r3, [pc, #168]	; (800dc1c <__swsetup_r+0xac>)
 800db74:	4605      	mov	r5, r0
 800db76:	6818      	ldr	r0, [r3, #0]
 800db78:	460c      	mov	r4, r1
 800db7a:	b118      	cbz	r0, 800db84 <__swsetup_r+0x14>
 800db7c:	6a03      	ldr	r3, [r0, #32]
 800db7e:	b90b      	cbnz	r3, 800db84 <__swsetup_r+0x14>
 800db80:	f7fc f80c 	bl	8009b9c <__sinit>
 800db84:	89a3      	ldrh	r3, [r4, #12]
 800db86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db8a:	0718      	lsls	r0, r3, #28
 800db8c:	d422      	bmi.n	800dbd4 <__swsetup_r+0x64>
 800db8e:	06d9      	lsls	r1, r3, #27
 800db90:	d407      	bmi.n	800dba2 <__swsetup_r+0x32>
 800db92:	2309      	movs	r3, #9
 800db94:	602b      	str	r3, [r5, #0]
 800db96:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800db9a:	81a3      	strh	r3, [r4, #12]
 800db9c:	f04f 30ff 	mov.w	r0, #4294967295
 800dba0:	e034      	b.n	800dc0c <__swsetup_r+0x9c>
 800dba2:	0758      	lsls	r0, r3, #29
 800dba4:	d512      	bpl.n	800dbcc <__swsetup_r+0x5c>
 800dba6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dba8:	b141      	cbz	r1, 800dbbc <__swsetup_r+0x4c>
 800dbaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dbae:	4299      	cmp	r1, r3
 800dbb0:	d002      	beq.n	800dbb8 <__swsetup_r+0x48>
 800dbb2:	4628      	mov	r0, r5
 800dbb4:	f7fc ffba 	bl	800ab2c <_free_r>
 800dbb8:	2300      	movs	r3, #0
 800dbba:	6363      	str	r3, [r4, #52]	; 0x34
 800dbbc:	89a3      	ldrh	r3, [r4, #12]
 800dbbe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dbc2:	81a3      	strh	r3, [r4, #12]
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	6063      	str	r3, [r4, #4]
 800dbc8:	6923      	ldr	r3, [r4, #16]
 800dbca:	6023      	str	r3, [r4, #0]
 800dbcc:	89a3      	ldrh	r3, [r4, #12]
 800dbce:	f043 0308 	orr.w	r3, r3, #8
 800dbd2:	81a3      	strh	r3, [r4, #12]
 800dbd4:	6923      	ldr	r3, [r4, #16]
 800dbd6:	b94b      	cbnz	r3, 800dbec <__swsetup_r+0x7c>
 800dbd8:	89a3      	ldrh	r3, [r4, #12]
 800dbda:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dbde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dbe2:	d003      	beq.n	800dbec <__swsetup_r+0x7c>
 800dbe4:	4621      	mov	r1, r4
 800dbe6:	4628      	mov	r0, r5
 800dbe8:	f000 f884 	bl	800dcf4 <__smakebuf_r>
 800dbec:	89a0      	ldrh	r0, [r4, #12]
 800dbee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dbf2:	f010 0301 	ands.w	r3, r0, #1
 800dbf6:	d00a      	beq.n	800dc0e <__swsetup_r+0x9e>
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	60a3      	str	r3, [r4, #8]
 800dbfc:	6963      	ldr	r3, [r4, #20]
 800dbfe:	425b      	negs	r3, r3
 800dc00:	61a3      	str	r3, [r4, #24]
 800dc02:	6923      	ldr	r3, [r4, #16]
 800dc04:	b943      	cbnz	r3, 800dc18 <__swsetup_r+0xa8>
 800dc06:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dc0a:	d1c4      	bne.n	800db96 <__swsetup_r+0x26>
 800dc0c:	bd38      	pop	{r3, r4, r5, pc}
 800dc0e:	0781      	lsls	r1, r0, #30
 800dc10:	bf58      	it	pl
 800dc12:	6963      	ldrpl	r3, [r4, #20]
 800dc14:	60a3      	str	r3, [r4, #8]
 800dc16:	e7f4      	b.n	800dc02 <__swsetup_r+0x92>
 800dc18:	2000      	movs	r0, #0
 800dc1a:	e7f7      	b.n	800dc0c <__swsetup_r+0x9c>
 800dc1c:	2000006c 	.word	0x2000006c

0800dc20 <_raise_r>:
 800dc20:	291f      	cmp	r1, #31
 800dc22:	b538      	push	{r3, r4, r5, lr}
 800dc24:	4604      	mov	r4, r0
 800dc26:	460d      	mov	r5, r1
 800dc28:	d904      	bls.n	800dc34 <_raise_r+0x14>
 800dc2a:	2316      	movs	r3, #22
 800dc2c:	6003      	str	r3, [r0, #0]
 800dc2e:	f04f 30ff 	mov.w	r0, #4294967295
 800dc32:	bd38      	pop	{r3, r4, r5, pc}
 800dc34:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800dc36:	b112      	cbz	r2, 800dc3e <_raise_r+0x1e>
 800dc38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc3c:	b94b      	cbnz	r3, 800dc52 <_raise_r+0x32>
 800dc3e:	4620      	mov	r0, r4
 800dc40:	f000 f830 	bl	800dca4 <_getpid_r>
 800dc44:	462a      	mov	r2, r5
 800dc46:	4601      	mov	r1, r0
 800dc48:	4620      	mov	r0, r4
 800dc4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc4e:	f000 b817 	b.w	800dc80 <_kill_r>
 800dc52:	2b01      	cmp	r3, #1
 800dc54:	d00a      	beq.n	800dc6c <_raise_r+0x4c>
 800dc56:	1c59      	adds	r1, r3, #1
 800dc58:	d103      	bne.n	800dc62 <_raise_r+0x42>
 800dc5a:	2316      	movs	r3, #22
 800dc5c:	6003      	str	r3, [r0, #0]
 800dc5e:	2001      	movs	r0, #1
 800dc60:	e7e7      	b.n	800dc32 <_raise_r+0x12>
 800dc62:	2400      	movs	r4, #0
 800dc64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dc68:	4628      	mov	r0, r5
 800dc6a:	4798      	blx	r3
 800dc6c:	2000      	movs	r0, #0
 800dc6e:	e7e0      	b.n	800dc32 <_raise_r+0x12>

0800dc70 <raise>:
 800dc70:	4b02      	ldr	r3, [pc, #8]	; (800dc7c <raise+0xc>)
 800dc72:	4601      	mov	r1, r0
 800dc74:	6818      	ldr	r0, [r3, #0]
 800dc76:	f7ff bfd3 	b.w	800dc20 <_raise_r>
 800dc7a:	bf00      	nop
 800dc7c:	2000006c 	.word	0x2000006c

0800dc80 <_kill_r>:
 800dc80:	b538      	push	{r3, r4, r5, lr}
 800dc82:	4d07      	ldr	r5, [pc, #28]	; (800dca0 <_kill_r+0x20>)
 800dc84:	2300      	movs	r3, #0
 800dc86:	4604      	mov	r4, r0
 800dc88:	4608      	mov	r0, r1
 800dc8a:	4611      	mov	r1, r2
 800dc8c:	602b      	str	r3, [r5, #0]
 800dc8e:	f7f4 fd4d 	bl	800272c <_kill>
 800dc92:	1c43      	adds	r3, r0, #1
 800dc94:	d102      	bne.n	800dc9c <_kill_r+0x1c>
 800dc96:	682b      	ldr	r3, [r5, #0]
 800dc98:	b103      	cbz	r3, 800dc9c <_kill_r+0x1c>
 800dc9a:	6023      	str	r3, [r4, #0]
 800dc9c:	bd38      	pop	{r3, r4, r5, pc}
 800dc9e:	bf00      	nop
 800dca0:	200005d8 	.word	0x200005d8

0800dca4 <_getpid_r>:
 800dca4:	f7f4 bd3a 	b.w	800271c <_getpid>

0800dca8 <__swhatbuf_r>:
 800dca8:	b570      	push	{r4, r5, r6, lr}
 800dcaa:	460c      	mov	r4, r1
 800dcac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcb0:	2900      	cmp	r1, #0
 800dcb2:	b096      	sub	sp, #88	; 0x58
 800dcb4:	4615      	mov	r5, r2
 800dcb6:	461e      	mov	r6, r3
 800dcb8:	da0d      	bge.n	800dcd6 <__swhatbuf_r+0x2e>
 800dcba:	89a3      	ldrh	r3, [r4, #12]
 800dcbc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800dcc0:	f04f 0100 	mov.w	r1, #0
 800dcc4:	bf0c      	ite	eq
 800dcc6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800dcca:	2340      	movne	r3, #64	; 0x40
 800dccc:	2000      	movs	r0, #0
 800dcce:	6031      	str	r1, [r6, #0]
 800dcd0:	602b      	str	r3, [r5, #0]
 800dcd2:	b016      	add	sp, #88	; 0x58
 800dcd4:	bd70      	pop	{r4, r5, r6, pc}
 800dcd6:	466a      	mov	r2, sp
 800dcd8:	f000 f848 	bl	800dd6c <_fstat_r>
 800dcdc:	2800      	cmp	r0, #0
 800dcde:	dbec      	blt.n	800dcba <__swhatbuf_r+0x12>
 800dce0:	9901      	ldr	r1, [sp, #4]
 800dce2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800dce6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800dcea:	4259      	negs	r1, r3
 800dcec:	4159      	adcs	r1, r3
 800dcee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dcf2:	e7eb      	b.n	800dccc <__swhatbuf_r+0x24>

0800dcf4 <__smakebuf_r>:
 800dcf4:	898b      	ldrh	r3, [r1, #12]
 800dcf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dcf8:	079d      	lsls	r5, r3, #30
 800dcfa:	4606      	mov	r6, r0
 800dcfc:	460c      	mov	r4, r1
 800dcfe:	d507      	bpl.n	800dd10 <__smakebuf_r+0x1c>
 800dd00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dd04:	6023      	str	r3, [r4, #0]
 800dd06:	6123      	str	r3, [r4, #16]
 800dd08:	2301      	movs	r3, #1
 800dd0a:	6163      	str	r3, [r4, #20]
 800dd0c:	b002      	add	sp, #8
 800dd0e:	bd70      	pop	{r4, r5, r6, pc}
 800dd10:	ab01      	add	r3, sp, #4
 800dd12:	466a      	mov	r2, sp
 800dd14:	f7ff ffc8 	bl	800dca8 <__swhatbuf_r>
 800dd18:	9900      	ldr	r1, [sp, #0]
 800dd1a:	4605      	mov	r5, r0
 800dd1c:	4630      	mov	r0, r6
 800dd1e:	f7fc ff79 	bl	800ac14 <_malloc_r>
 800dd22:	b948      	cbnz	r0, 800dd38 <__smakebuf_r+0x44>
 800dd24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd28:	059a      	lsls	r2, r3, #22
 800dd2a:	d4ef      	bmi.n	800dd0c <__smakebuf_r+0x18>
 800dd2c:	f023 0303 	bic.w	r3, r3, #3
 800dd30:	f043 0302 	orr.w	r3, r3, #2
 800dd34:	81a3      	strh	r3, [r4, #12]
 800dd36:	e7e3      	b.n	800dd00 <__smakebuf_r+0xc>
 800dd38:	89a3      	ldrh	r3, [r4, #12]
 800dd3a:	6020      	str	r0, [r4, #0]
 800dd3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd40:	81a3      	strh	r3, [r4, #12]
 800dd42:	9b00      	ldr	r3, [sp, #0]
 800dd44:	6163      	str	r3, [r4, #20]
 800dd46:	9b01      	ldr	r3, [sp, #4]
 800dd48:	6120      	str	r0, [r4, #16]
 800dd4a:	b15b      	cbz	r3, 800dd64 <__smakebuf_r+0x70>
 800dd4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd50:	4630      	mov	r0, r6
 800dd52:	f000 f81d 	bl	800dd90 <_isatty_r>
 800dd56:	b128      	cbz	r0, 800dd64 <__smakebuf_r+0x70>
 800dd58:	89a3      	ldrh	r3, [r4, #12]
 800dd5a:	f023 0303 	bic.w	r3, r3, #3
 800dd5e:	f043 0301 	orr.w	r3, r3, #1
 800dd62:	81a3      	strh	r3, [r4, #12]
 800dd64:	89a3      	ldrh	r3, [r4, #12]
 800dd66:	431d      	orrs	r5, r3
 800dd68:	81a5      	strh	r5, [r4, #12]
 800dd6a:	e7cf      	b.n	800dd0c <__smakebuf_r+0x18>

0800dd6c <_fstat_r>:
 800dd6c:	b538      	push	{r3, r4, r5, lr}
 800dd6e:	4d07      	ldr	r5, [pc, #28]	; (800dd8c <_fstat_r+0x20>)
 800dd70:	2300      	movs	r3, #0
 800dd72:	4604      	mov	r4, r0
 800dd74:	4608      	mov	r0, r1
 800dd76:	4611      	mov	r1, r2
 800dd78:	602b      	str	r3, [r5, #0]
 800dd7a:	f7f4 fd36 	bl	80027ea <_fstat>
 800dd7e:	1c43      	adds	r3, r0, #1
 800dd80:	d102      	bne.n	800dd88 <_fstat_r+0x1c>
 800dd82:	682b      	ldr	r3, [r5, #0]
 800dd84:	b103      	cbz	r3, 800dd88 <_fstat_r+0x1c>
 800dd86:	6023      	str	r3, [r4, #0]
 800dd88:	bd38      	pop	{r3, r4, r5, pc}
 800dd8a:	bf00      	nop
 800dd8c:	200005d8 	.word	0x200005d8

0800dd90 <_isatty_r>:
 800dd90:	b538      	push	{r3, r4, r5, lr}
 800dd92:	4d06      	ldr	r5, [pc, #24]	; (800ddac <_isatty_r+0x1c>)
 800dd94:	2300      	movs	r3, #0
 800dd96:	4604      	mov	r4, r0
 800dd98:	4608      	mov	r0, r1
 800dd9a:	602b      	str	r3, [r5, #0]
 800dd9c:	f7f4 fd35 	bl	800280a <_isatty>
 800dda0:	1c43      	adds	r3, r0, #1
 800dda2:	d102      	bne.n	800ddaa <_isatty_r+0x1a>
 800dda4:	682b      	ldr	r3, [r5, #0]
 800dda6:	b103      	cbz	r3, 800ddaa <_isatty_r+0x1a>
 800dda8:	6023      	str	r3, [r4, #0]
 800ddaa:	bd38      	pop	{r3, r4, r5, pc}
 800ddac:	200005d8 	.word	0x200005d8

0800ddb0 <_init>:
 800ddb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddb2:	bf00      	nop
 800ddb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddb6:	bc08      	pop	{r3}
 800ddb8:	469e      	mov	lr, r3
 800ddba:	4770      	bx	lr

0800ddbc <_fini>:
 800ddbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddbe:	bf00      	nop
 800ddc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddc2:	bc08      	pop	{r3}
 800ddc4:	469e      	mov	lr, r3
 800ddc6:	4770      	bx	lr
